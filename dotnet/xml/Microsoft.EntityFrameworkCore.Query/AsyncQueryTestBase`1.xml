<Type Name="AsyncQueryTestBase&lt;TFixture&gt;" FullName="Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase&lt;TFixture&gt;">
  <TypeSignature Language="C#" Value="public abstract class AsyncQueryTestBase&lt;TFixture&gt; : Xunit.IClassFixture&lt;TFixture&gt; where TFixture : class, IQueryFixtureBase, new()" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit AsyncQueryTestBase`1&lt;class .ctor (class Microsoft.EntityFrameworkCore.Query.IQueryFixtureBase) TFixture&gt; extends System.Object implements class Xunit.IClassFixture`1&lt;!TFixture&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class AsyncQueryTestBase(Of TFixture)&#xA;Implements IClassFixture(Of TFixture)" />
  <TypeSignature Language="F#" Value="type AsyncQueryTestBase&lt;'Fixture (requires 'Fixture : null and 'Fixture :&gt; IQueryFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt; = class&#xA;    interface IClassFixture&lt;'Fixture (requires 'Fixture : null and 'Fixture :&gt; IQueryFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TFixture&gt;&#xA; where TFixture : class, IQueryFixtureBase, gcnew()public ref class AsyncQueryTestBase abstract : Xunit::IClassFixture&lt;TFixture&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TFixture">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
        <InterfaceName>Microsoft.EntityFrameworkCore.Query.IQueryFixtureBase</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Xunit.IClassFixture&lt;TFixture&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TFixture">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AsyncQueryTestBase (TFixture fixture);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(!TFixture fixture) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (fixture As TFixture)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase&lt;'Fixture (requires 'Fixture : null and 'Fixture :&gt; Microsoft.EntityFrameworkCore.Query.IQueryFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt; : 'Fixture -&gt; Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase&lt;'Fixture (requires 'Fixture : null and 'Fixture :&gt; Microsoft.EntityFrameworkCore.Query.IQueryFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;" Usage="new Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase&lt;'Fixture (requires 'Fixture : null and 'Fixture :&gt; Microsoft.EntityFrameworkCore.Query.IQueryFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt; fixture" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; AsyncQueryTestBase(TFixture fixture);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; AsyncQueryTestBase(TFixture fixture);" />
      <MemberSignature Language="C++ WINRT" Value=" AsyncQueryTestBase(TFixture fixture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fixture" Type="TFixture" />
      </Parameters>
      <Docs>
        <param name="fixture">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertIncludeQuery&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;object&gt;&gt; AssertIncludeQuery&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;object&gt;&gt; query, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; expectedIncludes, Func&lt;dynamic,object&gt; elementSorter = null, System.Collections.Generic.List&lt;Func&lt;dynamic,object&gt;&gt; clientProjections = null, bool assertOrder = false, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;object&gt;&gt; AssertIncludeQuery&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; query, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; expectedIncludes, class System.Func`2&lt;object, object&gt; elementSorter, class System.Collections.Generic.List`1&lt;class System.Func`2&lt;object, object&gt;&gt; clientProjections, bool assertOrder, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertIncludeQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude},System.Func{System.Object,System.Object},System.Collections.Generic.List{System.Func{System.Object,System.Object}},System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AssertIncludeQuery(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of Object)), expectedIncludes As List(Of IExpectedInclude), Optional elementSorter As Func(Of Object, Object) = null, Optional clientProjections As List(Of Func(Of Object, Object)) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0) As Task(Of List(Of Object))" />
      <MemberSignature Language="F#" Value="member this.AssertIncludeQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; * Func&lt;obj, obj&gt; * System.Collections.Generic.List&lt;Func&lt;obj, obj&gt;&gt; * bool * int -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;obj&gt;&gt; (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertIncludeQuery (query, expectedIncludes, elementSorter, clientProjections, assertOrder, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedIncludes" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="clientProjections" Type="System.Collections.Generic.List&lt;System.Func&lt;System.Object,System.Object&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="expectedIncludes">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="clientProjections">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertIncludeQuery&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;object&gt;&gt; AssertIncludeQuery&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;object&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;object&gt;&gt; expectedQuery, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; expectedIncludes, Func&lt;dynamic,object&gt; elementSorter = null, System.Collections.Generic.List&lt;Func&lt;dynamic,object&gt;&gt; clientProjections = null, bool assertOrder = false, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;object&gt;&gt; AssertIncludeQuery&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; expectedQuery, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; expectedIncludes, class System.Func`2&lt;object, object&gt; elementSorter, class System.Collections.Generic.List`1&lt;class System.Func`2&lt;object, object&gt;&gt; clientProjections, bool assertOrder, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertIncludeQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude},System.Func{System.Object,System.Object},System.Collections.Generic.List{System.Func{System.Object,System.Object}},System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AssertIncludeQuery(Of TItem1 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of Object)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of Object)), expectedIncludes As List(Of IExpectedInclude), Optional elementSorter As Func(Of Object, Object) = null, Optional clientProjections As List(Of Func(Of Object, Object)) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0) As Task(Of List(Of Object))" />
      <MemberSignature Language="F#" Value="member this.AssertIncludeQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; * Func&lt;obj, obj&gt; * System.Collections.Generic.List&lt;Func&lt;obj, obj&gt;&gt; * bool * int -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;obj&gt;&gt; (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertIncludeQuery (actualQuery, expectedQuery, expectedIncludes, elementSorter, clientProjections, assertOrder, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedIncludes" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="clientProjections" Type="System.Collections.Generic.List&lt;System.Func&lt;System.Object,System.Object&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="expectedIncludes">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="clientProjections">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertIncludeQuery&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;object&gt;&gt; AssertIncludeQuery&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;object&gt;&gt; query, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; expectedIncludes, Func&lt;dynamic,object&gt; elementSorter = null, System.Collections.Generic.List&lt;Func&lt;dynamic,object&gt;&gt; clientProjections = null, bool assertOrder = false, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;object&gt;&gt; AssertIncludeQuery&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; query, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; expectedIncludes, class System.Func`2&lt;object, object&gt; elementSorter, class System.Collections.Generic.List`1&lt;class System.Func`2&lt;object, object&gt;&gt; clientProjections, bool assertOrder, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertIncludeQuery``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Object}},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude},System.Func{System.Object,System.Object},System.Collections.Generic.List{System.Func{System.Object,System.Object}},System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AssertIncludeQuery(Of TItem1 As Class, TItem2 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Object)), expectedIncludes As List(Of IExpectedInclude), Optional elementSorter As Func(Of Object, Object) = null, Optional clientProjections As List(Of Func(Of Object, Object)) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0) As Task(Of List(Of Object))" />
      <MemberSignature Language="F#" Value="member this.AssertIncludeQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; * Func&lt;obj, obj&gt; * System.Collections.Generic.List&lt;Func&lt;obj, obj&gt;&gt; * bool * int -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;obj&gt;&gt; (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertIncludeQuery (query, expectedIncludes, elementSorter, clientProjections, assertOrder, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedIncludes" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="clientProjections" Type="System.Collections.Generic.List&lt;System.Func&lt;System.Object,System.Object&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="expectedIncludes">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="clientProjections">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertIncludeQuery&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;object&gt;&gt; AssertIncludeQuery&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;object&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;object&gt;&gt; expectedQuery, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; expectedIncludes, Func&lt;dynamic,object&gt; elementSorter = null, System.Collections.Generic.List&lt;Func&lt;dynamic,object&gt;&gt; clientProjections = null, bool assertOrder = false, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;object&gt;&gt; AssertIncludeQuery&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; expectedQuery, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; expectedIncludes, class System.Func`2&lt;object, object&gt; elementSorter, class System.Collections.Generic.List`1&lt;class System.Func`2&lt;object, object&gt;&gt; clientProjections, bool assertOrder, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertIncludeQuery``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Object}},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude},System.Func{System.Object,System.Object},System.Collections.Generic.List{System.Func{System.Object,System.Object}},System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AssertIncludeQuery(Of TItem1 As Class, TItem2 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Object)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Object)), expectedIncludes As List(Of IExpectedInclude), Optional elementSorter As Func(Of Object, Object) = null, Optional clientProjections As List(Of Func(Of Object, Object)) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0) As Task(Of List(Of Object))" />
      <MemberSignature Language="F#" Value="member this.AssertIncludeQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; * Func&lt;obj, obj&gt; * System.Collections.Generic.List&lt;Func&lt;obj, obj&gt;&gt; * bool * int -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;obj&gt;&gt; (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertIncludeQuery (actualQuery, expectedQuery, expectedIncludes, elementSorter, clientProjections, assertOrder, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedIncludes" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="clientProjections" Type="System.Collections.Generic.List&lt;System.Func&lt;System.Object,System.Object&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="expectedIncludes">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="clientProjections">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQuery&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQuery&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;object&gt;&gt; query, Func&lt;dynamic,object&gt; elementSorter = null, Action&lt;dynamic,dynamic&gt; elementAsserter = null, bool assertOrder = false, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQuery&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; query, class System.Func`2&lt;object, object&gt; elementSorter, class System.Action`2&lt;object, object&gt; elementAsserter, bool assertOrder, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQuery(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of Object)), Optional elementSorter As Func(Of Object, Object) = null, Optional elementAsserter As Action(Of Object, Object) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertQuery (query, elementSorter, elementAsserter, assertOrder, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQuery&gt;d__31`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="elementAsserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="elementAsserter">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQuery&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQuery&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;object&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;object&gt;&gt; expectedQuery, Func&lt;dynamic,object&gt; elementSorter = null, Action&lt;dynamic,dynamic&gt; elementAsserter = null, bool assertOrder = false, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQuery&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; expectedQuery, class System.Func`2&lt;object, object&gt; elementSorter, class System.Action`2&lt;object, object&gt; elementAsserter, bool assertOrder, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQuery(Of TItem1 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of Object)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of Object)), Optional elementSorter As Func(Of Object, Object) = null, Optional elementAsserter As Action(Of Object, Object) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertQuery (actualQuery, expectedQuery, elementSorter, elementAsserter, assertOrder, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQuery&gt;d__32`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="elementAsserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="elementAsserter">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQuery&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQuery&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;object&gt;&gt; query, Func&lt;dynamic,object&gt; elementSorter = null, Action&lt;dynamic,dynamic&gt; elementAsserter = null, bool assertOrder = false, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQuery&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; query, class System.Func`2&lt;object, object&gt; elementSorter, class System.Action`2&lt;object, object&gt; elementAsserter, bool assertOrder, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQuery``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Object}},System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQuery(Of TItem1 As Class, TItem2 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Object)), Optional elementSorter As Func(Of Object, Object) = null, Optional elementAsserter As Action(Of Object, Object) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertQuery (query, elementSorter, elementAsserter, assertOrder, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQuery&gt;d__33`2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="elementAsserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="elementAsserter">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQuery&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQuery&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;object&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;object&gt;&gt; expectedQuery, Func&lt;dynamic,object&gt; elementSorter = null, Action&lt;dynamic,dynamic&gt; elementAsserter = null, bool assertOrder = false, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQuery&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; expectedQuery, class System.Func`2&lt;object, object&gt; elementSorter, class System.Action`2&lt;object, object&gt; elementAsserter, bool assertOrder, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQuery``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Object}},System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQuery(Of TItem1 As Class, TItem2 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Object)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Object)), Optional elementSorter As Func(Of Object, Object) = null, Optional elementAsserter As Action(Of Object, Object) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertQuery (actualQuery, expectedQuery, elementSorter, elementAsserter, assertOrder, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQuery&gt;d__34`2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="elementAsserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="elementAsserter">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQuery&lt;TItem1,TItem2,TItem3&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQuery&lt;TItem1,TItem2,TItem3&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;object&gt;&gt; query, Func&lt;dynamic,object&gt; elementSorter = null, Action&lt;dynamic,dynamic&gt; elementAsserter = null, bool assertOrder = false, int entryCount = 0) where TItem1 : class where TItem2 : class where TItem3 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQuery&lt;class TItem1, class TItem2, class TItem3&gt;(class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; query, class System.Func`2&lt;object, object&gt; elementSorter, class System.Action`2&lt;object, object&gt; elementAsserter, bool assertOrder, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQuery``3(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Linq.IQueryable{System.Object}},System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQuery(Of TItem1 As Class, TItem2 As Class, TItem3 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), IQueryable(Of Object)), Optional elementSorter As Func(Of Object, Object) = null, Optional elementAsserter As Action(Of Object, Object) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)&#xA;override this.AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)" Usage="asyncQueryTestBase.AssertQuery (query, elementSorter, elementAsserter, assertOrder, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQuery&gt;d__35`3))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem3">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="elementAsserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TItem3">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="elementAsserter">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQuery&lt;TItem1,TItem2,TItem3&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQuery&lt;TItem1,TItem2,TItem3&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;object&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;object&gt;&gt; expectedQuery, Func&lt;dynamic,object&gt; elementSorter = null, Action&lt;dynamic,dynamic&gt; elementAsserter = null, bool assertOrder = false, int entryCount = 0) where TItem1 : class where TItem2 : class where TItem3 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQuery&lt;class TItem1, class TItem2, class TItem3&gt;(class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; actualQuery, class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; expectedQuery, class System.Func`2&lt;object, object&gt; elementSorter, class System.Action`2&lt;object, object&gt; elementAsserter, bool assertOrder, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQuery``3(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Linq.IQueryable{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Linq.IQueryable{System.Object}},System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQuery(Of TItem1 As Class, TItem2 As Class, TItem3 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), IQueryable(Of Object)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), IQueryable(Of Object)), Optional elementSorter As Func(Of Object, Object) = null, Optional elementAsserter As Action(Of Object, Object) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)&#xA;override this.AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)" Usage="asyncQueryTestBase.AssertQuery (actualQuery, expectedQuery, elementSorter, elementAsserter, assertOrder, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQuery&gt;d__36`3))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem3">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="elementAsserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TItem3">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="elementAsserter">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;bool&gt;&gt; query, bool assertOrder = false) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;bool&gt;&gt; query, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Boolean}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQueryScalar(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of Boolean)), Optional assertOrder As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;bool&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;bool&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (query, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQueryScalar&gt;d__44`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;DateTimeOffset&gt;&gt; query, bool assertOrder = false) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;valuetype System.DateTimeOffset&gt;&gt; query, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.DateTimeOffset}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQueryScalar(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of DateTimeOffset)), Optional assertOrder As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;DateTimeOffset&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;DateTimeOffset&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (query, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQueryScalar&gt;d__46`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.DateTimeOffset&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;double&gt;&gt; query, bool assertOrder = false) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;float64&gt;&gt; query, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Double}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQueryScalar(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of Double)), Optional assertOrder As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;double&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;double&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (query, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQueryScalar&gt;d__43`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Double&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;short&gt;&gt; query, bool assertOrder = false) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;int16&gt;&gt; query, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Int16}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQueryScalar(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of Short)), Optional assertOrder As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;int16&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;int16&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (query, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQueryScalar&gt;d__42`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Int16&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;int&gt;&gt; query, bool assertOrder = false) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;int32&gt;&gt; query, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Int32}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQueryScalar(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of Integer)), Optional assertOrder As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;int&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;int&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (query, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQueryScalar&gt;d__37`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Int32&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;long&gt;&gt; query, bool assertOrder = false) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;int64&gt;&gt; query, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Int64}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQueryScalar(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of Long)), Optional assertOrder As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;int64&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;int64&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (query, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQueryScalar&gt;d__41`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Int64&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;uint&gt;&gt; query, bool assertOrder = false) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;unsigned int32&gt;&gt; query, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.UInt32}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQueryScalar(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of UInteger)), Optional assertOrder As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;uint32&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;uint32&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (query, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQueryScalar&gt;d__39`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.UInt32&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;bool&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;bool&gt;&gt; expectedQuery, bool assertOrder = false) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;bool&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;bool&gt;&gt; expectedQuery, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Boolean}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQueryScalar(Of TItem1 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of Boolean)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of Boolean)), Optional assertOrder As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;bool&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;bool&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;bool&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;bool&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (actualQuery, expectedQuery, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQueryScalar&gt;d__45`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;int&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;int&gt;&gt; expectedQuery, bool assertOrder = false) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;int32&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;int32&gt;&gt; expectedQuery, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Int32}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Int32}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQueryScalar(Of TItem1 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of Integer)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of Integer)), Optional assertOrder As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;int&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;int&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;int&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;int&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (actualQuery, expectedQuery, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQueryScalar&gt;d__38`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Int32&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Int32&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;uint&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;uint&gt;&gt; expectedQuery, bool assertOrder = false) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;unsigned int32&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;unsigned int32&gt;&gt; expectedQuery, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.UInt32}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.UInt32}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQueryScalar(Of TItem1 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of UInteger)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of UInteger)), Optional assertOrder As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;uint32&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;uint32&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;uint32&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;uint32&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (actualQuery, expectedQuery, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQueryScalar&gt;d__40`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.UInt32&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.UInt32&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public virtual void AssertQueryScalar&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;bool&gt;&gt; query, bool assertOrder = false) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AssertQueryScalar&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;bool&gt;&gt; query, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Boolean}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AssertQueryScalar(Of TItem1 As Class, TItem2 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Boolean)), Optional assertOrder As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;bool&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;bool&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (query, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public virtual void AssertQueryScalar&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;int&gt;&gt; query, bool assertOrder = false) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AssertQueryScalar&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;int32&gt;&gt; query, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Int32}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AssertQueryScalar(Of TItem1 As Class, TItem2 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Integer)), Optional assertOrder As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;int&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;int&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (query, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Int32&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public virtual void AssertQueryScalar&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;bool&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;bool&gt;&gt; expectedQuery, bool assertOrder = false) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AssertQueryScalar&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;bool&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;bool&gt;&gt; expectedQuery, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Boolean}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AssertQueryScalar(Of TItem1 As Class, TItem2 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Boolean)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Boolean)), Optional assertOrder As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;bool&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;bool&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;bool&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;bool&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (actualQuery, expectedQuery, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public virtual void AssertQueryScalar&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;int&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;int&gt;&gt; expectedQuery, bool assertOrder = false) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AssertQueryScalar&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;int32&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;int32&gt;&gt; expectedQuery, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Int32}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Int32}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AssertQueryScalar(Of TItem1 As Class, TItem2 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Integer)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Integer)), Optional assertOrder As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;int&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;int&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;int&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;int&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (actualQuery, expectedQuery, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Int32&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Int32&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1,TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt; query, bool assertOrder = false) where TItem1 : class where TResult : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1, struct .ctor (class System.ValueType) TResult&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt; query, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQueryScalar(Of TItem1 As Class, TResult As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of TResult)), Optional assertOrder As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'Result : struct)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'Result : struct)" Usage="asyncQueryTestBase.AssertQueryScalar (query, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQueryScalar&gt;d__47`2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1,TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt; expectedQuery, bool assertOrder = false) where TItem1 : class where TResult : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1, struct .ctor (class System.ValueType) TResult&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt; expectedQuery, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertQueryScalar(Of TItem1 As Class, TResult As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TResult)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TResult)), Optional assertOrder As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'Result : struct)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'Result : struct)" Usage="asyncQueryTestBase.AssertQueryScalar (actualQuery, expectedQuery, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertQueryScalar&gt;d__48`2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1,TItem2,TItem3&gt;">
      <MemberSignature Language="C#" Value="public virtual void AssertQueryScalar&lt;TItem1,TItem2,TItem3&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;int&gt;&gt; query, bool assertOrder = false) where TItem1 : class where TItem2 : class where TItem3 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AssertQueryScalar&lt;class TItem1, class TItem2, class TItem3&gt;(class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Linq.IQueryable`1&lt;int32&gt;&gt; query, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``3(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Linq.IQueryable{System.Int32}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AssertQueryScalar(Of TItem1 As Class, TItem2 As Class, TItem3 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), IQueryable(Of Integer)), Optional assertOrder As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;int&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;int&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)" Usage="asyncQueryTestBase.AssertQueryScalar (query, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem3">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;System.Int32&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TItem3">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1,TItem2,TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual void AssertQueryScalar&lt;TItem1,TItem2,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt; expectedQuery, bool assertOrder = false) where TItem1 : class where TItem2 : class where TResult : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AssertQueryScalar&lt;class TItem1, class TItem2, struct .ctor (class System.ValueType) TResult&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt; expectedQuery, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``3(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AssertQueryScalar(Of TItem1 As Class, TItem2 As Class, TResult As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TResult)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TResult)), Optional assertOrder As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null and 'Result : struct)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null and 'Result : struct)" Usage="asyncQueryTestBase.AssertQueryScalar (actualQuery, expectedQuery, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1,TItem2,TItem3,TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual void AssertQueryScalar&lt;TItem1,TItem2,TItem3,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt; expectedQuery, bool assertOrder = false) where TItem1 : class where TItem2 : class where TItem3 : class where TResult : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AssertQueryScalar&lt;class TItem1, class TItem2, class TItem3, struct .ctor (class System.ValueType) TResult&gt;(class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt; actualQuery, class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt; expectedQuery, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertQueryScalar``4(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Linq.IQueryable{``3}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Linq.IQueryable{``3}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AssertQueryScalar(Of TItem1 As Class, TItem2 As Class, TItem3 As Class, TResult As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), IQueryable(Of TResult)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), IQueryable(Of TResult)), Optional assertOrder As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null and 'Result : struct)&#xA;override this.AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null and 'Result : struct)" Usage="asyncQueryTestBase.AssertQueryScalar (actualQuery, expectedQuery, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem3">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TItem3">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;bool&gt;&gt; query, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; query, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``1(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Boolean}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), Task(Of Boolean)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertSingleResult (query, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__10`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;decimal&gt;&gt; query, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt;&gt; query, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``1(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Decimal}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), Task(Of Decimal)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;decimal&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;decimal&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertSingleResult (query, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__12`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Decimal&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;double&gt;&gt; query, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;float64&gt;&gt; query, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``1(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Double}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), Task(Of Double)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;double&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;double&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertSingleResult (query, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__14`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Double&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;int&gt;&gt; query, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;int32&gt;&gt; query, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``1(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Int32}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), Task(Of Integer)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;int&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;int&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertSingleResult (query, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__6`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Int32&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;long&gt;&gt; query, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;int64&gt;&gt; query, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``1(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Int64}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), Task(Of Long)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;int64&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;int64&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertSingleResult (query, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__8`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Int64&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;object&gt;&gt; query, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;object&gt;&gt; query, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``1(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Object}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class) (query As Func(Of IQueryable(Of TItem1), Task(Of Object)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;obj&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;obj&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertSingleResult (query, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__4`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Object&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;bool&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;bool&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``1(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Boolean}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), Task(Of Boolean)), expectedQuery As Func(Of IQueryable(Of TItem1), Task(Of Boolean)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__11`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;decimal&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;decimal&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``1(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Decimal}},System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Decimal}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), Task(Of Decimal)), expectedQuery As Func(Of IQueryable(Of TItem1), Task(Of Decimal)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;decimal&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;decimal&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;decimal&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;decimal&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__13`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Decimal&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Decimal&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;double&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;double&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;float64&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;float64&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``1(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Double}},System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Double}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), Task(Of Double)), expectedQuery As Func(Of IQueryable(Of TItem1), Task(Of Double)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;double&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;double&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;double&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;double&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__15`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Double&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Double&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;int&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;int&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;int32&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;int32&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``1(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Int32}},System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Int32}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), Task(Of Integer)), expectedQuery As Func(Of IQueryable(Of TItem1), Task(Of Integer)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;int&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;int&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;int&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;int&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__7`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Int32&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Int32&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;long&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;long&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;int64&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;int64&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``1(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Int64}},System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Int64}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), Task(Of Long)), expectedQuery As Func(Of IQueryable(Of TItem1), Task(Of Long)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;int64&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;int64&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;int64&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;int64&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__9`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Int64&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Int64&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;object&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;object&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;object&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;object&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``1(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{System.Object}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), Task(Of Object)), expectedQuery As Func(Of IQueryable(Of TItem1), Task(Of Object)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;obj&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;obj&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__5`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;System.Object&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;bool&gt;&gt; query, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; query, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{System.Boolean}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of Boolean)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertSingleResult (query, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__24`2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;int&gt;&gt; query, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;int32&gt;&gt; query, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{System.Int32}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of Integer)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;int&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;int&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertSingleResult (query, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__20`2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;System.Int32&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;long&gt;&gt; query, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;int64&gt;&gt; query, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{System.Int64}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of Long)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;int64&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;int64&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertSingleResult (query, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__22`2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;System.Int64&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;object&gt;&gt; query, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;object&gt;&gt; query, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{System.Object}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of Object)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;obj&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;obj&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertSingleResult (query, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__18`2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;System.Object&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;bool&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;bool&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{System.Boolean}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of Boolean)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of Boolean)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__25`2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;int&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;int&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;int32&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;int32&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{System.Int32}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{System.Int32}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of Integer)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of Integer)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;int&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;int&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;int&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;int&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__21`2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;System.Int32&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;System.Int32&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;long&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;long&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;int64&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;int64&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{System.Int64}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{System.Int64}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of Long)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of Long)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;int64&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;int64&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;int64&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;int64&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__23`2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;System.Int64&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;System.Int64&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;object&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;object&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;object&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;object&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{System.Object}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of Object)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of Object)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;obj&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;obj&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__19`2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;System.Object&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TResult&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; query, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, TResult&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; query, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``2(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{``1}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class, TResult As Class) (query As Func(Of IQueryable(Of TItem1), Task(Of TResult)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertSingleResult (query, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__16`2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TResult&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, TResult&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``2(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{``1}},System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{``1}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class, TResult As Class) (actualQuery As Func(Of IQueryable(Of TItem1), Task(Of TResult)), expectedQuery As Func(Of IQueryable(Of TItem1), Task(Of TResult)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="asyncQueryTestBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__17`2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2,TItem3&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2,TItem3&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Threading.Tasks.Task&lt;bool&gt;&gt; query, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class where TItem3 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2, class TItem3&gt;(class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; query, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``3(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Threading.Tasks.Task{System.Boolean}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class, TItem3 As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), Task(Of Boolean)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)" Usage="asyncQueryTestBase.AssertSingleResult (query, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__28`3))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem3">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TItem3">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2,TResult&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; query, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2, TResult&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; query, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``3(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{``2}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class, TResult As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of TResult)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertSingleResult (query, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__26`3))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2,TResult&gt;">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2, TResult&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``3(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{``2}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{``2}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class, TResult As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of TResult)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of TResult)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="asyncQueryTestBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__27`3))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2,TItem3,TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2,TItem3,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; query, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class where TItem3 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2, class TItem3, TResult&gt;(class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; query, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``4(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Threading.Tasks.Task{``3}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class, TItem3 As Class, TResult As Class) (query As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), Task(Of TResult)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)" Usage="asyncQueryTestBase.AssertSingleResult (query, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__29`4))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem3">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TItem3">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2,TItem3,TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2,TItem3,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class where TItem3 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2, class TItem3, TResult&gt;(class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; actualQuery, class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.AssertSingleResult``4(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Threading.Tasks.Task{``3}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Threading.Tasks.Task{``3}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class, TItem3 As Class, TResult As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), Task(Of TResult)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), Task(Of TResult)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)&#xA;override this.AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)" Usage="asyncQueryTestBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1/&lt;AssertSingleResult&gt;d__30`4))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem3">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TItem3">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionAsserter&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public static Action&lt;dynamic,dynamic&gt; CollectionAsserter&lt;TElement&gt; (Func&lt;TElement,object&gt; elementSorter = null, Action&lt;TElement,TElement&gt; elementAsserter = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Action`2&lt;object, object&gt; CollectionAsserter&lt;TElement&gt;(class System.Func`2&lt;!!TElement, object&gt; elementSorter, class System.Action`2&lt;!!TElement, !!TElement&gt; elementAsserter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.CollectionAsserter``1(System.Func{``0,System.Object},System.Action{``0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionAsserter(Of TElement) (Optional elementSorter As Func(Of TElement, Object) = null, Optional elementAsserter As Action(Of TElement, TElement) = null) As Action(Of Object, Object)" />
      <MemberSignature Language="F#" Value="static member CollectionAsserter : Func&lt;'Element, obj&gt; * Action&lt;'Element, 'Element&gt; -&gt; Action&lt;obj, obj&gt;" Usage="Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase&lt;'Fixture (requires 'Fixture : null and 'Fixture :&gt; Microsoft.EntityFrameworkCore.Query.IQueryFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.CollectionAsserter (elementSorter, elementAsserter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Object,System.Object&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="elementSorter" Type="System.Func&lt;TElement,System.Object&gt;" />
        <Parameter Name="elementAsserter" Type="System.Action&lt;TElement,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TElement">To be added.</typeparam>
        <param name="elementSorter">To be added.</param>
        <param name="elementAsserter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionSorter&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;dynamic,dynamic&gt; CollectionSorter&lt;TElement&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`2&lt;object, object&gt; CollectionSorter&lt;TElement&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.CollectionSorter``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionSorter(Of TElement) () As Func(Of Object, Object)" />
      <MemberSignature Language="F#" Value="static member CollectionSorter : unit -&gt; Func&lt;obj, obj&gt;" Usage="Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase&lt;'Fixture (requires 'Fixture : null and 'Fixture :&gt; Microsoft.EntityFrameworkCore.Query.IQueryFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.CollectionSorter " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; static Func&lt;System::Object ^, System::Object ^&gt; ^ CollectionSorter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Object,System.Object&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TElement">To be added.</typeparam>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixture">
      <MemberSignature Language="C#" Value="protected TFixture Fixture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TFixture Fixture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.Fixture" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Fixture As TFixture" />
      <MemberSignature Language="F#" Value="member this.Fixture : 'Fixture" Usage="Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase&lt;'Fixture (requires 'Fixture : null and 'Fixture :&gt; Microsoft.EntityFrameworkCore.Query.IQueryFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.Fixture" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property TFixture Fixture { TFixture get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; property TFixture Fixture { TFixture get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TFixture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupingAsserter&lt;TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static Action&lt;dynamic,dynamic&gt; GroupingAsserter&lt;TKey,TElement&gt; (Func&lt;TElement,object&gt; elementSorter = null, Action&lt;TElement,TElement&gt; elementAsserter = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Action`2&lt;object, object&gt; GroupingAsserter&lt;TKey, TElement&gt;(class System.Func`2&lt;!!TElement, object&gt; elementSorter, class System.Action`2&lt;!!TElement, !!TElement&gt; elementAsserter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.GroupingAsserter``2(System.Func{``1,System.Object},System.Action{``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GroupingAsserter(Of TKey, TElement) (Optional elementSorter As Func(Of TElement, Object) = null, Optional elementAsserter As Action(Of TElement, TElement) = null) As Action(Of Object, Object)" />
      <MemberSignature Language="F#" Value="static member GroupingAsserter : Func&lt;'Element, obj&gt; * Action&lt;'Element, 'Element&gt; -&gt; Action&lt;obj, obj&gt;" Usage="Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase&lt;'Fixture (requires 'Fixture : null and 'Fixture :&gt; Microsoft.EntityFrameworkCore.Query.IQueryFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.GroupingAsserter (elementSorter, elementAsserter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Object,System.Object&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="elementSorter" Type="System.Func&lt;TElement,System.Object&gt;" />
        <Parameter Name="elementAsserter" Type="System.Action&lt;TElement,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TElement">To be added.</typeparam>
        <param name="elementSorter">To be added.</param>
        <param name="elementAsserter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupingSorter&lt;TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;dynamic,dynamic&gt; GroupingSorter&lt;TKey,TElement&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`2&lt;object, object&gt; GroupingSorter&lt;TKey, TElement&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.GroupingSorter``2" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GroupingSorter(Of TKey, TElement) () As Func(Of Object, Object)" />
      <MemberSignature Language="F#" Value="static member GroupingSorter : unit -&gt; Func&lt;obj, obj&gt;" Usage="Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase&lt;'Fixture (requires 'Fixture : null and 'Fixture :&gt; Microsoft.EntityFrameworkCore.Query.IQueryFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.GroupingSorter " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TElement&gt;&#xA; static Func&lt;System::Object ^, System::Object ^&gt; ^ GroupingSorter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Object,System.Object&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TElement">To be added.</typeparam>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Maybe&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Maybe&lt;TResult&gt; (object caller, Func&lt;TResult&gt; expression) where TResult : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Maybe&lt;class TResult&gt;(object caller, class System.Func`1&lt;!!TResult&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.Maybe``1(System.Object,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Maybe(Of TResult As Class) (caller As Object, expression As Func(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="static member Maybe : obj * Func&lt;'Result (requires 'Result : null)&gt; -&gt; 'Result (requires 'Result : null)" Usage="Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase&lt;'Fixture (requires 'Fixture : null and 'Fixture :&gt; Microsoft.EntityFrameworkCore.Query.IQueryFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.Maybe (caller, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; where TResult : class static TResult Maybe(System::Object ^ caller, Func&lt;TResult&gt; ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="caller" Type="System.Object" />
        <Parameter Name="expression" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="caller">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaybeScalar&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;TResult&gt; MaybeScalar&lt;TResult&gt; (object caller, Func&lt;Nullable&lt;TResult&gt;&gt; expression) where TResult : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;!!TResult&gt; MaybeScalar&lt;struct .ctor (class System.ValueType) TResult&gt;(object caller, class System.Func`1&lt;valuetype System.Nullable`1&lt;!!TResult&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase`1.MaybeScalar``1(System.Object,System.Func{System.Nullable{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MaybeScalar(Of TResult As Structure) (caller As Object, expression As Func(Of Nullable(Of TResult))) As Nullable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member MaybeScalar : obj * Func&lt;Nullable&lt;'Result&gt;&gt; -&gt; Nullable&lt;'Result (requires 'Result : struct)&gt; (requires 'Result : struct)" Usage="Microsoft.EntityFrameworkCore.Query.AsyncQueryTestBase&lt;'Fixture (requires 'Fixture : null and 'Fixture :&gt; Microsoft.EntityFrameworkCore.Query.IQueryFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.MaybeScalar (caller, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; where TResult : value class static Nullable&lt;TResult&gt; MaybeScalar(System::Object ^ caller, Func&lt;Nullable&lt;TResult&gt;&gt; ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="caller" Type="System.Object" />
        <Parameter Name="expression" Type="System.Func&lt;System.Nullable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="caller">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>