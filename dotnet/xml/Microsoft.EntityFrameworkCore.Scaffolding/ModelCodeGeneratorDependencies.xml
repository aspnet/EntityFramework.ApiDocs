<Type Name="ModelCodeGeneratorDependencies" FullName="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGeneratorDependencies">
  <TypeSignature Language="C#" Value="public sealed class ModelCodeGeneratorDependencies" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ModelCodeGeneratorDependencies extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGeneratorDependencies" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ModelCodeGeneratorDependencies" />
  <TypeSignature Language="F#" Value="type ModelCodeGeneratorDependencies = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ModelCodeGeneratorDependencies sealed" />
  <TypeSignature Language="C++ CX" Value="public ref class ModelCodeGeneratorDependencies sealed" />
  <TypeSignature Language="C++ WINRT" Value="class ModelCodeGeneratorDependencies sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerator" /></para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
      <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ModelCodeGeneratorDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGeneratorDependencies.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ModelCodeGeneratorDependencies();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; ModelCodeGeneratorDependencies();" />
      <MemberSignature Language="C++ WINRT" Value=" ModelCodeGeneratorDependencies();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerator" />.
                </para>
          <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>