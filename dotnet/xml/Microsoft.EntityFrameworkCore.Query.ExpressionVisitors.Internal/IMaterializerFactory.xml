<Type Name="IMaterializerFactory" FullName="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory">
  <TypeSignature Language="C#" Value="public interface IMaterializerFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMaterializerFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMaterializerFactory" />
  <TypeSignature Language="F#" Value="type IMaterializerFactory = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMaterializerFactory" />
  <TypeSignature Language="C++ CX" Value="public interface class IMaterializerFactory" />
  <TypeSignature Language="C++ WINRT" Value="__interface IMaterializerFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateMaterializer">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression&lt;Func&lt;Microsoft.EntityFrameworkCore.Storage.ValueBuffer,object&gt;&gt; CreateMaterializer (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,int&gt; projectionAdder, Remotion.Linq.Clauses.IQuerySource querySource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;valuetype Microsoft.EntityFrameworkCore.Storage.ValueBuffer, object&gt;&gt; CreateMaterializer(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, int32&gt; projectionAdder, class Remotion.Linq.Clauses.IQuerySource querySource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory.CreateMaterializer(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Int32},Remotion.Linq.Clauses.IQuerySource)" />
      <MemberSignature Language="F#" Value="abstract member CreateMaterializer : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, int&gt; * Remotion.Linq.Clauses.IQuerySource -&gt; System.Linq.Expressions.Expression&lt;Func&lt;Microsoft.EntityFrameworkCore.Storage.ValueBuffer, obj&gt;&gt;" Usage="iMaterializerFactory.CreateMaterializer (entityType, selectExpression, projectionAdder, querySource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression&lt;Func&lt;Microsoft::EntityFrameworkCore::Storage::ValueBuffer, System::Object ^&gt; ^&gt; ^ CreateMaterializer(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Query::Expressions::SelectExpression ^ selectExpression, Func&lt;Microsoft::EntityFrameworkCore::Metadata::IProperty ^, Microsoft::EntityFrameworkCore::Query::Expressions::SelectExpression ^, int&gt; ^ projectionAdder, Remotion::Linq::Clauses::IQuerySource ^ querySource);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression" />
        <Parameter Name="projectionAdder" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Int32&gt;" />
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="selectExpression">To be added.</param>
        <param name="projectionAdder">To be added.</param>
        <param name="querySource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMaterializer">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.LambdaExpression CreateMaterializer (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,int&gt; projectionAdder, out System.Collections.Generic.Dictionary&lt;Type,int[]&gt; typeIndexMap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.LambdaExpression CreateMaterializer(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, int32&gt; projectionAdder, [out] class System.Collections.Generic.Dictionary`2&lt;class System.Type, int32[]&gt;&amp; typeIndexMap) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory.CreateMaterializer(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Int32},System.Collections.Generic.Dictionary{System.Type,System.Int32[]}@)" />
      <MemberSignature Language="F#" Value="abstract member CreateMaterializer : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, int&gt; *  -&gt; System.Linq.Expressions.LambdaExpression" Usage="iMaterializerFactory.CreateMaterializer (entityType, selectExpression, projectionAdder, typeIndexMap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::LambdaExpression ^ CreateMaterializer(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Query::Expressions::SelectExpression ^ selectExpression, Func&lt;Microsoft::EntityFrameworkCore::Metadata::IProperty ^, Microsoft::EntityFrameworkCore::Query::Expressions::SelectExpression ^, int&gt; ^ projectionAdder, [Runtime::InteropServices::Out] System::Collections::Generic::Dictionary&lt;Type ^, cli::array &lt;int&gt; ^&gt; ^ % typeIndexMap);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression" />
        <Parameter Name="projectionAdder" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Int32&gt;" />
        <Parameter Name="typeIndexMap" Type="System.Collections.Generic.Dictionary&lt;System.Type,System.Int32[]&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="selectExpression">To be added.</param>
        <param name="projectionAdder">To be added.</param>
        <param name="typeIndexMap">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMaterializer">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression&lt;Func&lt;Microsoft.EntityFrameworkCore.Storage.ValueBuffer,object&gt;&gt; CreateMaterializer (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,int&gt; projectionAdder, Remotion.Linq.Clauses.IQuerySource querySource, out System.Collections.Generic.Dictionary&lt;Type,int[]&gt; typeIndexMap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;valuetype Microsoft.EntityFrameworkCore.Storage.ValueBuffer, object&gt;&gt; CreateMaterializer(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, int32&gt; projectionAdder, class Remotion.Linq.Clauses.IQuerySource querySource, [out] class System.Collections.Generic.Dictionary`2&lt;class System.Type, int32[]&gt;&amp; typeIndexMap) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory.CreateMaterializer(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Int32},Remotion.Linq.Clauses.IQuerySource,System.Collections.Generic.Dictionary{System.Type,System.Int32[]}@)" />
      <MemberSignature Language="F#" Value="abstract member CreateMaterializer : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, int&gt; * Remotion.Linq.Clauses.IQuerySource *  -&gt; System.Linq.Expressions.Expression&lt;Func&lt;Microsoft.EntityFrameworkCore.Storage.ValueBuffer, obj&gt;&gt;" Usage="iMaterializerFactory.CreateMaterializer (entityType, selectExpression, projectionAdder, querySource, typeIndexMap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression&lt;Func&lt;Microsoft::EntityFrameworkCore::Storage::ValueBuffer, System::Object ^&gt; ^&gt; ^ CreateMaterializer(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Query::Expressions::SelectExpression ^ selectExpression, Func&lt;Microsoft::EntityFrameworkCore::Metadata::IProperty ^, Microsoft::EntityFrameworkCore::Query::Expressions::SelectExpression ^, int&gt; ^ projectionAdder, Remotion::Linq::Clauses::IQuerySource ^ querySource, [Runtime::InteropServices::Out] System::Collections::Generic::Dictionary&lt;Type ^, cli::array &lt;int&gt; ^&gt; ^ % typeIndexMap);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression" />
        <Parameter Name="projectionAdder" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Int32&gt;" />
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
        <Parameter Name="typeIndexMap" Type="System.Collections.Generic.Dictionary&lt;System.Type,System.Int32[]&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="selectExpression">To be added.</param>
        <param name="projectionAdder">To be added.</param>
        <param name="querySource">To be added.</param>
        <param name="typeIndexMap">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>