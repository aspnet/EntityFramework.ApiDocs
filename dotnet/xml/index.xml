<Overview>
  <Assemblies>
    <Assembly Name="Microsoft.EntityFrameworkCore.Relational.Design" Version="1.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Shared design-time Entity Framework Core components for relational database providers.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("1.1.0.21115")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.1.0-rtm-22752")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "539c9e66977c7d18358aa036e27367b380c64014")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft EntityFramework Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.EntityFrameworkCore.Relational.Design.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.3")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.EntityFrameworkCore.Sqlite.Design" Version="1.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Design-time Entity Framework Core functionality for SQLite")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("1.1.0.21115")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.1.0-rtm-22752")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "539c9e66977c7d18358aa036e27367b380c64014")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft EntityFramework Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.EntityFrameworkCore.Sqlite.Design.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.3")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.EntityFrameworkCore.SqlServer.Design" Version="1.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Design-time Entity Framework Core Functionality for Microsoft SQL Server.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("1.1.0.21115")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.1.0-rtm-22752")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "539c9e66977c7d18358aa036e27367b380c64014")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft EntityFramework Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.EntityFrameworkCore.SqlServer.Design.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.3")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.EntityFrameworkCore.Relational.Design.Specification.Tests" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Shared design-time test suite for Entity Framework Core relational database providers.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "0012a7050ed09a9d447a4289b3052d8564eb512c")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Entity Framework Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.EntityFrameworkCore.Relational.Design.Specification.Tests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="2.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware for Entity Framework Core error pages. Use this middleware to detect and diagnose errors with Entity Framework Core migrations.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.1.0.18096")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.1.0-preview2-30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "4ef2bc2e916117b765d03a86c8f88555532166ad")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("BuildNumber", "30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.EntityFrameworkCore.Abstractions" Version="2.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Provides abstractions and attributes that are used to configure Entity Framework Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.1.0.18096")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.1.0-preview2-30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "be80ab089a7165f93c984552a22a41b398868693")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("BuildNumber", "30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Entity Framework Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.EntityFrameworkCore.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.EntityFrameworkCore.Design" Version="2.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Shared design-time components for Entity Framework Core tools.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.1.0.18096")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.1.0-preview2-30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "be80ab089a7165f93c984552a22a41b398868693")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("BuildNumber", "30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Entity Framework Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.EntityFrameworkCore.Design")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.EntityFrameworkCore.Design.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.EntityFrameworkCore" Version="2.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Entity Framework Core is a lightweight and extensible version of the popular Entity Framework data access technology.\n\nCommonly Used Types:\nMicrosoft.EntityFrameworkCore.DbContext\nMicrosoft.EntityFrameworkCore.DbSet\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.1.0.18096")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.1.0-preview2-30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "be80ab089a7165f93c984552a22a41b398868693")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("BuildNumber", "30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Entity Framework Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.EntityFrameworkCore")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.EntityFrameworkCore.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.EntityFrameworkCore.InMemory" Version="2.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("In-memory database provider for Entity Framework Core (to be used for testing purposes).")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.1.0.18096")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.1.0-preview2-30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "be80ab089a7165f93c984552a22a41b398868693")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("BuildNumber", "30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Entity Framework Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.EntityFrameworkCore.InMemory")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.EntityFrameworkCore.InMemory.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.EntityFrameworkCore.Proxies" Version="2.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Lazy-loading proxies for EF Core.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.1.0.18096")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.1.0-preview2-30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "be80ab089a7165f93c984552a22a41b398868693")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("BuildNumber", "30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Entity Framework Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.EntityFrameworkCore.Proxies")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.EntityFrameworkCore.Relational" Version="2.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Shared Entity Framework Core components for relational database providers.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.1.0.18096")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.1.0-preview2-30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "be80ab089a7165f93c984552a22a41b398868693")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("BuildNumber", "30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Entity Framework Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.EntityFrameworkCore.Relational")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.EntityFrameworkCore.Relational.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.EntityFrameworkCore.Sqlite" Version="2.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.Design.DesignTimeProviderServices("Microsoft.EntityFrameworkCore.Sqlite.Design.Internal.SqliteDesignTimeServices")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("SQLite database provider for Entity Framework Core.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.1.0.18096")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.1.0-preview2-30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "be80ab089a7165f93c984552a22a41b398868693")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("BuildNumber", "30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Entity Framework Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.EntityFrameworkCore.Sqlite")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.EntityFrameworkCore.Sqlite.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.EntityFrameworkCore.SqlServer" Version="2.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.Design.DesignTimeProviderServices("Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerDesignTimeServices")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft SQL Server database provider for Entity Framework Core.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.1.0.18096")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.1.0-preview2-30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "be80ab089a7165f93c984552a22a41b398868693")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("BuildNumber", "30571")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Entity Framework Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.EntityFrameworkCore.SqlServer")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.EntityFrameworkCore.SqlServer.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="Microsoft.AspNetCore.Builder">
      <Type Name="DatabaseErrorPageExtensions" Kind="Class" />
      <Type Name="DatabaseErrorPageOptions" Kind="Class" />
      <Type Name="MigrationsEndPointExtensions" Kind="Class" />
      <Type Name="MigrationsEndPointOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore">
      <Type Name="DatabaseErrorPageMiddleware" Kind="Class" />
      <Type Name="DataStoreErrorLogger" Kind="Class" />
      <Type Name="DataStoreErrorLogger+DataStoreErrorLog" Kind="Class" />
      <Type Name="DataStoreErrorLoggerProvider" Kind="Class" />
      <Type Name="MigrationsEndPointMiddleware" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.Views">
      <Type Name="DatabaseErrorPage" Kind="Class" />
      <Type Name="DatabaseErrorPageModel" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.DiagnosticsViewPage.Views">
      <Type Name="AttributeValue" Kind="Class" />
      <Type Name="BaseView" Kind="Class" />
      <Type Name="HelperResult" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore">
      <Type Name="ChangeTrackingStrategy" Kind="Enumeration" />
      <Type Name="DbContext" Kind="Class" />
      <Type Name="DbContextOptions" Kind="Class" />
      <Type Name="DbContextOptions`1" DisplayName="DbContextOptions&lt;TContext&gt;" Kind="Class" />
      <Type Name="DbContextOptionsBuilder" Kind="Class" />
      <Type Name="DbContextOptionsBuilder`1" DisplayName="DbContextOptionsBuilder&lt;TContext&gt;" Kind="Class" />
      <Type Name="DbFunctionAttribute" Kind="Class" />
      <Type Name="DbFunctions" Kind="Class" />
      <Type Name="DbFunctionsExtensions" Kind="Class" />
      <Type Name="DbLoggerCategory" Kind="Class" />
      <Type Name="DbLoggerCategory+ChangeTracking" Kind="Class" />
      <Type Name="DbLoggerCategory+Database" Kind="Class" />
      <Type Name="DbLoggerCategory+Database+Command" Kind="Class" />
      <Type Name="DbLoggerCategory+Database+Connection" Kind="Class" />
      <Type Name="DbLoggerCategory+Database+Transaction" Kind="Class" />
      <Type Name="DbLoggerCategory+Infrastructure" Kind="Class" />
      <Type Name="DbLoggerCategory+Migrations" Kind="Class" />
      <Type Name="DbLoggerCategory+Model" Kind="Class" />
      <Type Name="DbLoggerCategory+Model+Validation" Kind="Class" />
      <Type Name="DbLoggerCategory+Query" Kind="Class" />
      <Type Name="DbLoggerCategory+Scaffolding" Kind="Class" />
      <Type Name="DbLoggerCategory+Update" Kind="Class" />
      <Type Name="DbQuery`1" DisplayName="DbQuery&lt;TQuery&gt;" Kind="Class" />
      <Type Name="DbSet`1" DisplayName="DbSet&lt;TEntity&gt;" Kind="Class" />
      <Type Name="DbUpdateConcurrencyException" Kind="Class" />
      <Type Name="DbUpdateException" Kind="Class" />
      <Type Name="DeleteBehavior" Kind="Enumeration" />
      <Type Name="EF" Kind="Class" />
      <Type Name="EntityFrameworkQueryableExtensions" Kind="Class" />
      <Type Name="EntityState" Kind="Enumeration" />
      <Type Name="EntityTypeExtensions" Kind="Class" />
      <Type Name="ExecutionStrategyExtensions" Kind="Class" />
      <Type Name="IEntityTypeConfiguration`1" DisplayName="IEntityTypeConfiguration&lt;TEntity&gt;" Kind="Interface" />
      <Type Name="InMemoryDatabaseFacadeExtensions" Kind="Class" />
      <Type Name="InMemoryDbContextOptionsExtensions" Kind="Class" />
      <Type Name="IQueryTypeConfiguration`1" DisplayName="IQueryTypeConfiguration&lt;TQuery&gt;" Kind="Interface" />
      <Type Name="KeyExtensions" Kind="Class" />
      <Type Name="ModelBuilder" Kind="Class" />
      <Type Name="ModelExtensions" Kind="Class" />
      <Type Name="MutableAnnotatableExtensions" Kind="Class" />
      <Type Name="MutableEntityTypeExtensions" Kind="Class" />
      <Type Name="MutableKeyExtensions" Kind="Class" />
      <Type Name="MutableModelExtensions" Kind="Class" />
      <Type Name="MutableNavigationExtensions" Kind="Class" />
      <Type Name="MutablePropertyBaseExtensions" Kind="Class" />
      <Type Name="MutablePropertyExtensions" Kind="Class" />
      <Type Name="NavigationExtensions" Kind="Class" />
      <Type Name="ObservableCollectionExtensions" Kind="Class" />
      <Type Name="OwnedAttribute" Kind="Class" />
      <Type Name="PropertyAccessMode" Kind="Enumeration" />
      <Type Name="PropertyBaseExtensions" Kind="Class" />
      <Type Name="PropertyExtensions" Kind="Class" />
      <Type Name="ProxiesExtensions" Kind="Class" />
      <Type Name="QueryTrackingBehavior" Kind="Enumeration" />
      <Type Name="RawSqlString" Kind="Structure" />
      <Type Name="RelationalDatabaseFacadeExtensions" Kind="Class" />
      <Type Name="RelationalEntityTypeBuilderExtensions" Kind="Class" />
      <Type Name="RelationalIndexBuilderExtensions" Kind="Class" />
      <Type Name="RelationalKeyBuilderExtensions" Kind="Class" />
      <Type Name="RelationalMetadataExtensions" Kind="Class" />
      <Type Name="RelationalModelBuilderExtensions" Kind="Class" />
      <Type Name="RelationalPropertyBuilderExtensions" Kind="Class" />
      <Type Name="RelationalQueryableExtensions" Kind="Class" />
      <Type Name="RelationalQueryTypeBuilderExtensions" Kind="Class" />
      <Type Name="RelationalReferenceCollectionBuilderExtensions" Kind="Class" />
      <Type Name="RelationalReferenceOwnershipBuilderExtensions" Kind="Class" />
      <Type Name="RelationalReferenceReferenceBuilderExtensions" Kind="Class" />
      <Type Name="SqliteDatabaseFacadeExtensions" Kind="Class" />
      <Type Name="SqliteDbContextOptionsBuilderExtensions" Kind="Class" />
      <Type Name="SqliteEntityTypeBuilderExtensions" Kind="Class" />
      <Type Name="SqliteIndexBuilderExtensions" Kind="Class" />
      <Type Name="SqliteKeyBuilderExtensions" Kind="Class" />
      <Type Name="SqliteMetadataExtensions" Kind="Class" />
      <Type Name="SqlitePropertyBuilderExtensions" Kind="Class" />
      <Type Name="SqliteReferenceCollectionBuilderExtensions" Kind="Class" />
      <Type Name="SqliteReferenceReferenceBuilderExtensions" Kind="Class" />
      <Type Name="SqlServerDatabaseFacadeExtensions" Kind="Class" />
      <Type Name="SqlServerDbContextOptionsExtensions" Kind="Class" />
      <Type Name="SqlServerDbFunctionsExtensions" Kind="Class" />
      <Type Name="SqlServerEntityTypeBuilderExtensions" Kind="Class" />
      <Type Name="SqlServerIndexBuilderExtensions" Kind="Class" />
      <Type Name="SqlServerKeyBuilderExtensions" Kind="Class" />
      <Type Name="SqlServerMetadataExtensions" Kind="Class" />
      <Type Name="SqlServerModelBuilderExtensions" Kind="Class" />
      <Type Name="SqlServerPropertyBuilderExtensions" Kind="Class" />
      <Type Name="SqlServerReferenceCollectionBuilderExtensions" Kind="Class" />
      <Type Name="SqlServerReferenceOwnershipBuilderExtensions" Kind="Class" />
      <Type Name="SqlServerReferenceReferenceBuilderExtensions" Kind="Class" />
      <Type Name="SqlServerRetryingExecutionStrategy" Kind="Class" />
      <Type Name="TypeBaseExtensions" Kind="Class" />
      <Type Name="WarningBehavior" Kind="Enumeration" />
      <Type Name="WarningConfigurationBuilderExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.ChangeTracking">
      <Type Name="ChangeTracker" Kind="Class" />
      <Type Name="CollectionEntry" Kind="Class" />
      <Type Name="CollectionEntry`2" DisplayName="CollectionEntry&lt;TEntity,TProperty&gt;" Kind="Class" />
      <Type Name="EntityEntry" Kind="Class" />
      <Type Name="EntityEntry`1" DisplayName="EntityEntry&lt;TEntity&gt;" Kind="Class" />
      <Type Name="EntityEntryEventArgs" Kind="Class" />
      <Type Name="EntityEntryGraphNode" Kind="Class" />
      <Type Name="EntityStateChangedEventArgs" Kind="Class" />
      <Type Name="EntityTrackedEventArgs" Kind="Class" />
      <Type Name="IEntityEntryGraphIterator" Kind="Interface" />
      <Type Name="LocalView`1" DisplayName="LocalView&lt;TEntity&gt;" Kind="Class" />
      <Type Name="MemberEntry" Kind="Class" />
      <Type Name="NavigationEntry" Kind="Class" />
      <Type Name="ObservableCollectionListSource`1" DisplayName="ObservableCollectionListSource&lt;T&gt;" Kind="Class" />
      <Type Name="ObservableHashSet`1" DisplayName="ObservableHashSet&lt;T&gt;" Kind="Class" />
      <Type Name="PropertyEntry" Kind="Class" />
      <Type Name="PropertyEntry`2" DisplayName="PropertyEntry&lt;TEntity,TProperty&gt;" Kind="Class" />
      <Type Name="PropertyValues" Kind="Class" />
      <Type Name="ReferenceEntry" Kind="Class" />
      <Type Name="ReferenceEntry`2" DisplayName="ReferenceEntry&lt;TEntity,TProperty&gt;" Kind="Class" />
      <Type Name="ValueComparer" Kind="Class" />
      <Type Name="ValueComparer`1" DisplayName="ValueComparer&lt;T&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.ChangeTracking.Internal">
      <Type Name="ArrayPropertyValues" Kind="Class" />
      <Type Name="ChangeDetector" Kind="Class" />
      <Type Name="ChangeTrackerFactory" Kind="Class" />
      <Type Name="CompositeDependentValueFactory" Kind="Class" />
      <Type Name="CompositeNullableValueFactory" Kind="Class" />
      <Type Name="CompositePrincipalKeyValueFactory" Kind="Class" />
      <Type Name="CompositeValueFactory" Kind="Class" />
      <Type Name="CurrentPropertyValues" Kind="Class" />
      <Type Name="DependentKeyValueFactoryFactory" Kind="Class" />
      <Type Name="DependentsMap`1" DisplayName="DependentsMap&lt;TKey&gt;" Kind="Class" />
      <Type Name="DependentsMapFactoryFactory" Kind="Class" />
      <Type Name="EmptyShadowValuesFactoryFactory" Kind="Class" />
      <Type Name="EntityEntryGraphIterator" Kind="Class" />
      <Type Name="EntityGraphAttacher" Kind="Class" />
      <Type Name="EntryPropertyValues" Kind="Class" />
      <Type Name="IChangeDetector" Kind="Interface" />
      <Type Name="IChangeTrackerFactory" Kind="Interface" />
      <Type Name="IdentityMap`1" DisplayName="IdentityMap&lt;TKey&gt;" Kind="Class" />
      <Type Name="IdentityMapFactoryFactory" Kind="Class" />
      <Type Name="IdentityMapFactoryFactoryBase" Kind="Class" />
      <Type Name="IDependentKeyValueFactory`1" DisplayName="IDependentKeyValueFactory&lt;TKey&gt;" Kind="Interface" />
      <Type Name="IDependentsMap" Kind="Interface" />
      <Type Name="IEntityEntryGraphIterator" Kind="Interface" />
      <Type Name="IEntityGraphAttacher" Kind="Interface" />
      <Type Name="IEntityStateListener" Kind="Interface" />
      <Type Name="IIdentityMap" Kind="Interface" />
      <Type Name="IInternalEntityEntryFactory" Kind="Interface" />
      <Type Name="IInternalEntityEntryNotifier" Kind="Interface" />
      <Type Name="IInternalEntityEntrySubscriber" Kind="Interface" />
      <Type Name="IKeyListener" Kind="Interface" />
      <Type Name="IKeyPropagator" Kind="Interface" />
      <Type Name="ILocalViewListener" Kind="Interface" />
      <Type Name="INavigationFixer" Kind="Interface" />
      <Type Name="INavigationListener" Kind="Interface" />
      <Type Name="InternalClrEntityEntry" Kind="Class" />
      <Type Name="InternalEntityEntry" Kind="Class" />
      <Type Name="InternalEntityEntryFactory" Kind="Class" />
      <Type Name="InternalEntityEntryNotifier" Kind="Class" />
      <Type Name="InternalEntityEntrySubscriber" Kind="Class" />
      <Type Name="InternalMixedEntityEntry" Kind="Class" />
      <Type Name="InternalShadowEntityEntry" Kind="Class" />
      <Type Name="INullableValueFactory`1" DisplayName="INullableValueFactory&lt;TKey&gt;" Kind="Interface" />
      <Type Name="IPrincipalKeyValueFactory`1" DisplayName="IPrincipalKeyValueFactory&lt;TKey&gt;" Kind="Interface" />
      <Type Name="IPropertyListener" Kind="Interface" />
      <Type Name="IQueryTrackingListener" Kind="Interface" />
      <Type Name="ISnapshot" Kind="Interface" />
      <Type Name="IStateManager" Kind="Interface" />
      <Type Name="IValueGenerationManager" Kind="Interface" />
      <Type Name="KeyPropagator" Kind="Class" />
      <Type Name="KeyValueFactoryFactory" Kind="Class" />
      <Type Name="LocalViewListener" Kind="Class" />
      <Type Name="MultiSnapshot" Kind="Structure" />
      <Type Name="NavigationFixer" Kind="Class" />
      <Type Name="NullableKeyIdentityMap`1" DisplayName="NullableKeyIdentityMap&lt;TKey&gt;" Kind="Class" />
      <Type Name="ObservableBackedBindingList`1" DisplayName="ObservableBackedBindingList&lt;T&gt;" Kind="Class" />
      <Type Name="OriginalPropertyValues" Kind="Class" />
      <Type Name="OriginalValuesFactoryFactory" Kind="Class" />
      <Type Name="RelationshipSnapshotFactoryFactory" Kind="Class" />
      <Type Name="ShadowValuesFactoryFactory" Kind="Class" />
      <Type Name="SimpleFullyNullableDependentKeyValueFactory`1" DisplayName="SimpleFullyNullableDependentKeyValueFactory&lt;TKey&gt;" Kind="Class" />
      <Type Name="SimpleNonNullableDependentKeyValueFactory`1" DisplayName="SimpleNonNullableDependentKeyValueFactory&lt;TKey&gt;" Kind="Class" />
      <Type Name="SimpleNullableDependentKeyValueFactory`1" DisplayName="SimpleNullableDependentKeyValueFactory&lt;TKey&gt;" Kind="Class" />
      <Type Name="SimpleNullablePrincipalDependentKeyValueFactory`2" DisplayName="SimpleNullablePrincipalDependentKeyValueFactory&lt;TKey,TNonNullableKey&gt;" Kind="Class" />
      <Type Name="SimplePrincipalKeyValueFactory`1" DisplayName="SimplePrincipalKeyValueFactory&lt;TKey&gt;" Kind="Class" />
      <Type Name="Snapshot" Kind="Class" />
      <Type Name="Snapshot`1" DisplayName="Snapshot&lt;T0&gt;" Kind="Class" />
      <Type Name="Snapshot`10" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;" Kind="Class" />
      <Type Name="Snapshot`11" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;" Kind="Class" />
      <Type Name="Snapshot`12" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;" Kind="Class" />
      <Type Name="Snapshot`13" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;" Kind="Class" />
      <Type Name="Snapshot`14" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;" Kind="Class" />
      <Type Name="Snapshot`15" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;" Kind="Class" />
      <Type Name="Snapshot`16" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;" Kind="Class" />
      <Type Name="Snapshot`17" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;" Kind="Class" />
      <Type Name="Snapshot`18" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17&gt;" Kind="Class" />
      <Type Name="Snapshot`19" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18&gt;" Kind="Class" />
      <Type Name="Snapshot`2" DisplayName="Snapshot&lt;T0,T1&gt;" Kind="Class" />
      <Type Name="Snapshot`20" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19&gt;" Kind="Class" />
      <Type Name="Snapshot`21" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20&gt;" Kind="Class" />
      <Type Name="Snapshot`22" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21&gt;" Kind="Class" />
      <Type Name="Snapshot`23" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22&gt;" Kind="Class" />
      <Type Name="Snapshot`24" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23&gt;" Kind="Class" />
      <Type Name="Snapshot`25" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24&gt;" Kind="Class" />
      <Type Name="Snapshot`26" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25&gt;" Kind="Class" />
      <Type Name="Snapshot`27" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26&gt;" Kind="Class" />
      <Type Name="Snapshot`28" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27&gt;" Kind="Class" />
      <Type Name="Snapshot`29" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28&gt;" Kind="Class" />
      <Type Name="Snapshot`3" DisplayName="Snapshot&lt;T0,T1,T2&gt;" Kind="Class" />
      <Type Name="Snapshot`30" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29&gt;" Kind="Class" />
      <Type Name="Snapshot`4" DisplayName="Snapshot&lt;T0,T1,T2,T3&gt;" Kind="Class" />
      <Type Name="Snapshot`5" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4&gt;" Kind="Class" />
      <Type Name="Snapshot`6" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5&gt;" Kind="Class" />
      <Type Name="Snapshot`7" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6&gt;" Kind="Class" />
      <Type Name="Snapshot`8" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7&gt;" Kind="Class" />
      <Type Name="Snapshot`9" DisplayName="Snapshot&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8&gt;" Kind="Class" />
      <Type Name="SnapshotFactoryFactory" Kind="Class" />
      <Type Name="SnapshotFactoryFactory`1" DisplayName="SnapshotFactoryFactory&lt;TInput&gt;" Kind="Class" />
      <Type Name="SortableBindingList`1" DisplayName="SortableBindingList&lt;T&gt;" Kind="Class" />
      <Type Name="StateManager" Kind="Class" />
      <Type Name="StateManagerDependencies" Kind="Class" />
      <Type Name="TrackingQueryMode" Kind="Enumeration" />
      <Type Name="ValueComparerExtensions" Kind="Class" />
      <Type Name="ValueGenerationManager" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Design">
      <Type Name="AnnotationCodeGenerator" Kind="Class" />
      <Type Name="AnnotationCodeGeneratorDependencies" Kind="Class" />
      <Type Name="DbContextActivator" Kind="Class" />
      <Type Name="DesignTimeProviderServicesAttribute" Kind="Class" />
      <Type Name="DesignTimeServiceCollectionExtensions" Kind="Class" />
      <Type Name="DesignTimeServicesReferenceAttribute" Kind="Class" />
      <Type Name="IAnnotationCodeGenerator" Kind="Interface" />
      <Type Name="ICSharpHelper" Kind="Interface" />
      <Type Name="IDesignTimeDbContextFactory`1" DisplayName="IDesignTimeDbContextFactory&lt;TContext&gt;" Kind="Interface" />
      <Type Name="IDesignTimeServices" Kind="Interface" />
      <Type Name="ILanguageBasedService" Kind="Interface" />
      <Type Name="IOperationReportHandler" Kind="Interface" />
      <Type Name="IOperationResultHandler" Kind="Interface" />
      <Type Name="IPluralizer" Kind="Interface" />
      <Type Name="MethodCallCodeFragment" Kind="Class" />
      <Type Name="NestedClosureCodeFragment" Kind="Class" />
      <Type Name="OperationException" Kind="Class" />
      <Type Name="OperationExecutor" Kind="Class" />
      <Type Name="OperationExecutor+AddMigration" Kind="Class" />
      <Type Name="OperationExecutor+DropDatabase" Kind="Class" />
      <Type Name="OperationExecutor+GetContextInfo" Kind="Class" />
      <Type Name="OperationExecutor+GetContextType" Kind="Class" />
      <Type Name="OperationExecutor+GetContextTypes" Kind="Class" />
      <Type Name="OperationExecutor+GetMigrations" Kind="Class" />
      <Type Name="OperationExecutor+OperationBase" Kind="Class" />
      <Type Name="OperationExecutor+RemoveMigration" Kind="Class" />
      <Type Name="OperationExecutor+ScaffoldContext" Kind="Class" />
      <Type Name="OperationExecutor+ScriptMigration" Kind="Class" />
      <Type Name="OperationExecutor+UpdateDatabase" Kind="Class" />
      <Type Name="OperationReportHandler" Kind="Class" />
      <Type Name="OperationResultHandler" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Design.Internal">
      <Type Name="AppServiceProviderFactory" Kind="Class" />
      <Type Name="ContextInfo" Kind="Class" />
      <Type Name="CSharpHelper" Kind="Class" />
      <Type Name="DatabaseOperations" Kind="Class" />
      <Type Name="DbContextOperations" Kind="Class" />
      <Type Name="DesignTimeConnectionStringResolver" Kind="Class" />
      <Type Name="DesignTimeServicesBuilder" Kind="Class" />
      <Type Name="ForwardingProxy" Kind="Class" />
      <Type Name="HostingEnvironment" Kind="Class" />
      <Type Name="IOperationReporter" Kind="Interface" />
      <Type Name="LanguageBasedSelector`1" DisplayName="LanguageBasedSelector&lt;T&gt;" Kind="Class" />
      <Type Name="LoggerProvider" Kind="Class" />
      <Type Name="MigrationInfo" Kind="Class" />
      <Type Name="MigrationsOperations" Kind="Class" />
      <Type Name="NamespaceComparer" Kind="Class" />
      <Type Name="NullPluralizer" Kind="Class" />
      <Type Name="OperationLogger" Kind="Class" />
      <Type Name="OperationLoggerProvider" Kind="Class" />
      <Type Name="OperationReporter" Kind="Class" />
      <Type Name="SqliteDesignTimeServices" Kind="Class" />
      <Type Name="SqlServerAnnotationCodeGenerator" Kind="Class" />
      <Type Name="SqlServerDesignTimeServices" Kind="Class" />
      <Type Name="StartupInvoker" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Diagnostics">
      <Type Name="BatchEventData" Kind="Class" />
      <Type Name="BinaryExpressionEventData" Kind="Class" />
      <Type Name="CascadeDeleteEventData" Kind="Class" />
      <Type Name="CascadeDeleteOrphanEventData" Kind="Class" />
      <Type Name="CollectionChangedEventData" Kind="Class" />
      <Type Name="CommandEndEventData" Kind="Class" />
      <Type Name="CommandErrorEventData" Kind="Class" />
      <Type Name="CommandEventData" Kind="Class" />
      <Type Name="CommandExecutedEventData" Kind="Class" />
      <Type Name="ConnectionEndEventData" Kind="Class" />
      <Type Name="ConnectionErrorEventData" Kind="Class" />
      <Type Name="ConnectionEventData" Kind="Class" />
      <Type Name="ContextInitializedEventData" Kind="Class" />
      <Type Name="CoreEventId" Kind="Class" />
      <Type Name="DataReaderDisposingEventData" Kind="Class" />
      <Type Name="DbCommandMethod" Kind="Enumeration" />
      <Type Name="DbContextErrorEventData" Kind="Class" />
      <Type Name="DbContextEventData" Kind="Class" />
      <Type Name="DbContextTypeErrorEventData" Kind="Class" />
      <Type Name="DbContextTypeEventData" Kind="Class" />
      <Type Name="EntityEntryEventData" Kind="Class" />
      <Type Name="EntityTypeSchemaEventData" Kind="Class" />
      <Type Name="EventData" Kind="Class" />
      <Type Name="EventDefinition" Kind="Class" />
      <Type Name="EventDefinition`1" DisplayName="EventDefinition&lt;TParam&gt;" Kind="Class" />
      <Type Name="EventDefinition`2" DisplayName="EventDefinition&lt;TParam1,TParam2&gt;" Kind="Class" />
      <Type Name="EventDefinition`3" DisplayName="EventDefinition&lt;TParam1,TParam2,TParam3&gt;" Kind="Class" />
      <Type Name="EventDefinition`4" DisplayName="EventDefinition&lt;TParam1,TParam2,TParam3,TParam4&gt;" Kind="Class" />
      <Type Name="EventDefinition`5" DisplayName="EventDefinition&lt;TParam1,TParam2,TParam3,TParam4,TParam5&gt;" Kind="Class" />
      <Type Name="EventDefinition`6" DisplayName="EventDefinition&lt;TParam1,TParam2,TParam3,TParam4,TParam5,TParam6&gt;" Kind="Class" />
      <Type Name="EventDefinitionBase" Kind="Class" />
      <Type Name="EventDefinitionBase+MessageExtractingLogger" Kind="Class" />
      <Type Name="ExecutionStrategyEventData" Kind="Class" />
      <Type Name="ExpressionEventData" Kind="Class" />
      <Type Name="FallbackEventDefinition" Kind="Class" />
      <Type Name="ForeignKeyEventData" Kind="Class" />
      <Type Name="IDiagnosticsLogger`1" DisplayName="IDiagnosticsLogger&lt;TLoggerCategory&gt;" Kind="Interface" />
      <Type Name="IErrorEventData" Kind="Interface" />
      <Type Name="ILoggingOptions" Kind="Interface" />
      <Type Name="IncludeEventData" Kind="Class" />
      <Type Name="InMemoryEventId" Kind="Class" />
      <Type Name="LazyLoadingEventData" Kind="Class" />
      <Type Name="LoggerCategory`1" DisplayName="LoggerCategory&lt;T&gt;" Kind="Class" />
      <Type Name="MigrationAssemblyEventData" Kind="Class" />
      <Type Name="MigrationEventData" Kind="Class" />
      <Type Name="MigrationScriptingEventData" Kind="Class" />
      <Type Name="MigrationTypeEventData" Kind="Class" />
      <Type Name="MigratorConnectionEventData" Kind="Class" />
      <Type Name="MigratorEventData" Kind="Class" />
      <Type Name="MinBatchSizeEventData" Kind="Class" />
      <Type Name="NavigationEventData" Kind="Class" />
      <Type Name="NavigationPathEventData" Kind="Class" />
      <Type Name="PropertyChangedEventData" Kind="Class" />
      <Type Name="PropertyEventData" Kind="Class" />
      <Type Name="PropertyValueEventData" Kind="Class" />
      <Type Name="QueryExpressionEventData" Kind="Class" />
      <Type Name="QueryModelClientEvalEventData" Kind="Class" />
      <Type Name="QueryModelEventData" Kind="Class" />
      <Type Name="ReferenceChangedEventData" Kind="Class" />
      <Type Name="RelationalEventId" Kind="Class" />
      <Type Name="SaveChangesCompletedEventData" Kind="Class" />
      <Type Name="SaveChangesEventData" Kind="Class" />
      <Type Name="SequenceEventData" Kind="Class" />
      <Type Name="ServiceProviderEventData" Kind="Class" />
      <Type Name="ServiceProvidersEventData" Kind="Class" />
      <Type Name="SharedDependentEntityEventData" Kind="Class" />
      <Type Name="SqliteEventId" Kind="Class" />
      <Type Name="SqlServerEventId" Kind="Class" />
      <Type Name="StateChangedEventData" Kind="Class" />
      <Type Name="TransactionEndEventData" Kind="Class" />
      <Type Name="TransactionEnlistedEventData" Kind="Class" />
      <Type Name="TransactionErrorEventData" Kind="Class" />
      <Type Name="TransactionEventData" Kind="Class" />
      <Type Name="TwoPropertyBaseCollectionsEventData" Kind="Class" />
      <Type Name="TwoUnmappedPropertyCollectionsEventData" Kind="Class" />
      <Type Name="WarningsConfiguration" Kind="Class" />
      <Type Name="WarningsConfigurationBuilder" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Extensions.Internal">
      <Type Name="AsyncQueryProviderExtensions" Kind="Class" />
      <Type Name="EFPropertyExtensions" Kind="Class" />
      <Type Name="MethodInfoExtensions" Kind="Class" />
      <Type Name="QueryableExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Infrastructure">
      <Type Name="AccessorExtensions" Kind="Class" />
      <Type Name="Annotatable" Kind="Class" />
      <Type Name="AnnotatableExtensions" Kind="Class" />
      <Type Name="Annotation" Kind="Class" />
      <Type Name="CoreEventId" Kind="Enumeration" />
      <Type Name="CoreOptionsExtension" Kind="Class" />
      <Type Name="DatabaseFacade" Kind="Class" />
      <Type Name="DbContextAttribute" Kind="Class" />
      <Type Name="DbContextFactoryOptions" Kind="Class" />
      <Type Name="DesignEventId" Kind="Enumeration" />
      <Type Name="DesignTimeProviderServicesAttribute" Kind="Class" />
      <Type Name="EntityFrameworkRelationalServicesBuilder" Kind="Class" />
      <Type Name="EntityFrameworkServiceCollectionExtensions" Kind="Class" />
      <Type Name="EntityFrameworkServicesBuilder" Kind="Class" />
      <Type Name="EntityFrameworkServicesBuilder+ServiceCharacteristics" Kind="Structure" />
      <Type Name="IAnnotatable" Kind="Interface" />
      <Type Name="IAnnotation" Kind="Interface" />
      <Type Name="IDbContextFactory`1" DisplayName="IDbContextFactory&lt;TContext&gt;" Kind="Interface" />
      <Type Name="IDbContextOptions" Kind="Interface" />
      <Type Name="IDbContextOptionsBuilderInfrastructure" Kind="Interface" />
      <Type Name="IDbContextOptionsExtension" Kind="Interface" />
      <Type Name="IDesignTimeServices" Kind="Interface" />
      <Type Name="IInfrastructure`1" DisplayName="IInfrastructure&lt;T&gt;" Kind="Interface" />
      <Type Name="ILazyLoader" Kind="Interface" />
      <Type Name="IModelCacheKeyFactory" Kind="Interface" />
      <Type Name="IModelCustomizer" Kind="Interface" />
      <Type Name="IModelSource" Kind="Interface" />
      <Type Name="IModelValidator" Kind="Interface" />
      <Type Name="InMemoryDbContextOptionsBuilder" Kind="Class" />
      <Type Name="InMemoryEventId" Kind="Enumeration" />
      <Type Name="IResettableService" Kind="Interface" />
      <Type Name="ISensitiveDataLogger" Kind="Interface" />
      <Type Name="ISensitiveDataLogger`1" DisplayName="ISensitiveDataLogger&lt;T&gt;" Kind="Interface" />
      <Type Name="ISingletonOptions" Kind="Interface" />
      <Type Name="LazyLoaderExtensions" Kind="Class" />
      <Type Name="ModelCacheKey" Kind="Class" />
      <Type Name="ModelCacheKeyFactory" Kind="Class" />
      <Type Name="ModelCacheKeyFactoryDependencies" Kind="Class" />
      <Type Name="ModelCustomizer" Kind="Class" />
      <Type Name="ModelCustomizerDependencies" Kind="Class" />
      <Type Name="ModelSnapshot" Kind="Class" />
      <Type Name="ModelSource" Kind="Class" />
      <Type Name="ModelSourceDependencies" Kind="Class" />
      <Type Name="ModelValidator" Kind="Class" />
      <Type Name="ModelValidatorDependencies" Kind="Class" />
      <Type Name="RelationalDbContextOptionsBuilder`2" DisplayName="RelationalDbContextOptionsBuilder&lt;TBuilder,TExtension&gt;" Kind="Class" />
      <Type Name="RelationalDesignEventId" Kind="Enumeration" />
      <Type Name="RelationalEventId" Kind="Enumeration" />
      <Type Name="RelationalModelCustomizer" Kind="Class" />
      <Type Name="RelationalModelValidator" Kind="Class" />
      <Type Name="RelationalModelValidatorDependencies" Kind="Class" />
      <Type Name="RelationalOptionsExtension" Kind="Class" />
      <Type Name="RelationalServiceCollectionExtensions" Kind="Class" />
      <Type Name="SensitiveDataLogger`1" DisplayName="SensitiveDataLogger&lt;T&gt;" Kind="Class" />
      <Type Name="ServiceCollectionMap" Kind="Class" />
      <Type Name="SqliteDbContextOptionsBuilder" Kind="Class" />
      <Type Name="SqliteDesignEventId" Kind="Enumeration" />
      <Type Name="SqlServerDbContextOptionsBuilder" Kind="Class" />
      <Type Name="SqlServerDesignEventId" Kind="Enumeration" />
      <Type Name="WarningsConfigurationBuilder" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Infrastructure.Internal">
      <Type Name="InMemoryModelSource" Kind="Class" />
      <Type Name="InMemoryOptionsExtension" Kind="Class" />
      <Type Name="ISqlServerOptions" Kind="Interface" />
      <Type Name="RelationalModelSource" Kind="Class" />
      <Type Name="SqliteModelSource" Kind="Class" />
      <Type Name="SqliteOptionsExtension" Kind="Class" />
      <Type Name="SqlServerModelSource" Kind="Class" />
      <Type Name="SqlServerOptionsExtension" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.InMemory.Infrastructure.Internal">
      <Type Name="IInMemorySingletonOptions" Kind="Interface" />
      <Type Name="InMemoryOptionsExtension" Kind="Class" />
      <Type Name="InMemorySingletonOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.InMemory.Internal">
      <Type Name="InMemoryStrings" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.InMemory.Metadata.Conventions.Internal">
      <Type Name="InMemoryConventionSetBuilder" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.InMemory.Query.ExpressionVisitors.Internal">
      <Type Name="InMemoryEntityQueryableExpressionVisitor" Kind="Class" />
      <Type Name="InMemoryEntityQueryableExpressionVisitorFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.InMemory.Query.Internal">
      <Type Name="IInMemoryMaterializerFactory" Kind="Interface" />
      <Type Name="InMemoryMaterializerFactory" Kind="Class" />
      <Type Name="InMemoryQueryContext" Kind="Class" />
      <Type Name="InMemoryQueryContextFactory" Kind="Class" />
      <Type Name="InMemoryQueryModelVisitor" Kind="Class" />
      <Type Name="InMemoryQueryModelVisitorFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.InMemory.Storage.Internal">
      <Type Name="IInMemoryDatabase" Kind="Interface" />
      <Type Name="IInMemoryStore" Kind="Interface" />
      <Type Name="IInMemoryStoreCache" Kind="Interface" />
      <Type Name="IInMemoryTable" Kind="Interface" />
      <Type Name="IInMemoryTableFactory" Kind="Interface" />
      <Type Name="InMemoryDatabase" Kind="Class" />
      <Type Name="InMemoryDatabaseCreator" Kind="Class" />
      <Type Name="InMemoryStore" Kind="Class" />
      <Type Name="InMemoryStoreCache" Kind="Class" />
      <Type Name="InMemoryStoreCacheExtensions" Kind="Class" />
      <Type Name="InMemoryTable`1" DisplayName="InMemoryTable&lt;TKey&gt;" Kind="Class" />
      <Type Name="InMemoryTableFactory" Kind="Class" />
      <Type Name="InMemoryTableSnapshot" Kind="Class" />
      <Type Name="InMemoryTransaction" Kind="Class" />
      <Type Name="InMemoryTransactionManager" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.InMemory.ValueGeneration.Internal">
      <Type Name="InMemoryIntegerValueGenerator`1" DisplayName="InMemoryIntegerValueGenerator&lt;TValue&gt;" Kind="Class" />
      <Type Name="InMemoryIntegerValueGeneratorFactory" Kind="Class" />
      <Type Name="InMemoryValueGeneratorSelector" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Internal">
      <Type Name="AbstractionsStrings" Kind="Class" />
      <Type Name="AsyncLock" Kind="Class" />
      <Type Name="AsyncLock+Releaser" Kind="Structure" />
      <Type Name="ConcurrencyDetector" Kind="Class" />
      <Type Name="CoreLoggerExtensions" Kind="Class" />
      <Type Name="CoreOptionsExtension" Kind="Class" />
      <Type Name="CoreStrings" Kind="Class" />
      <Type Name="CurrentDbContext" Kind="Class" />
      <Type Name="DatabaseProviderSelector" Kind="Class" />
      <Type Name="DbContextDependencies" Kind="Class" />
      <Type Name="DbContextDependenciesExtensions" Kind="Class" />
      <Type Name="DbContextOptionsExtensions" Kind="Class" />
      <Type Name="DbContextPool`1" DisplayName="DbContextPool&lt;TContext&gt;" Kind="Class" />
      <Type Name="DbContextPool`1+Lease" DisplayName="DbContextPool&lt;TContext&gt;+Lease" Kind="Class" />
      <Type Name="DbContextPoolConfigurationSnapshot" Kind="Class" />
      <Type Name="DbContextServices" Kind="Class" />
      <Type Name="DbSetFinder" Kind="Class" />
      <Type Name="DbSetFinderExtensions" Kind="Class" />
      <Type Name="DbSetInitializer" Kind="Class" />
      <Type Name="DbSetProperty" Kind="Structure" />
      <Type Name="DbSetSource" Kind="Class" />
      <Type Name="DesignStrings" Kind="Class" />
      <Type Name="DiagnosticsLogger`1" DisplayName="DiagnosticsLogger&lt;TLoggerCategory&gt;" Kind="Class" />
      <Type Name="EntityFinder`1" DisplayName="EntityFinder&lt;TEntity&gt;" Kind="Class" />
      <Type Name="EntityFinderFactory" Kind="Class" />
      <Type Name="EntityFinderSource" Kind="Class" />
      <Type Name="EnumerableExtensions" Kind="Class" />
      <Type Name="ExpressionExtensions" Kind="Class" />
      <Type Name="Graph`1" DisplayName="Graph&lt;TVertex&gt;" Kind="Class" />
      <Type Name="IConcurrencyDetector" Kind="Interface" />
      <Type Name="ICurrentDbContext" Kind="Interface" />
      <Type Name="IDatabaseProviderSelector" Kind="Interface" />
      <Type Name="IDbContextDependencies" Kind="Interface" />
      <Type Name="IDbContextPool" Kind="Interface" />
      <Type Name="IDbContextPoolable" Kind="Interface" />
      <Type Name="IDbContextServices" Kind="Interface" />
      <Type Name="IDbQueryCache" Kind="Interface" />
      <Type Name="IDbQuerySource" Kind="Interface" />
      <Type Name="IDbSetCache" Kind="Interface" />
      <Type Name="IDbSetFinder" Kind="Interface" />
      <Type Name="IDbSetInitializer" Kind="Interface" />
      <Type Name="IDbSetSource" Kind="Interface" />
      <Type Name="IEntityFinder" Kind="Interface" />
      <Type Name="IEntityFinder`1" DisplayName="IEntityFinder&lt;TEntity&gt;" Kind="Interface" />
      <Type Name="IEntityFinderFactory" Kind="Interface" />
      <Type Name="IEntityFinderSource" Kind="Interface" />
      <Type Name="IModelValidator" Kind="Interface" />
      <Type Name="IndentedStringBuilder" Kind="Class" />
      <Type Name="InMemoryLoggerExtensions" Kind="Class" />
      <Type Name="InMemoryStrings" Kind="Class" />
      <Type Name="InterceptingLogger`1" DisplayName="InterceptingLogger&lt;T&gt;" Kind="Class" />
      <Type Name="InternalAccessorExtensions" Kind="Class" />
      <Type Name="InternalDbQuery`1" DisplayName="InternalDbQuery&lt;TQuery&gt;" Kind="Class" />
      <Type Name="InternalDbSet`1" DisplayName="InternalDbSet&lt;TEntity&gt;" Kind="Class" />
      <Type Name="InternalServiceCollectionMap" Kind="Class" />
      <Type Name="IPatchServiceInjectionSite" Kind="Interface" />
      <Type Name="IReferenceRoot`1" DisplayName="IReferenceRoot&lt;T&gt;" Kind="Interface" />
      <Type Name="IRegisteredServices" Kind="Interface" />
      <Type Name="IServiceInjectionSite" Kind="Interface" />
      <Type Name="ISingletonOptionsInitializer" Kind="Interface" />
      <Type Name="ISingletonOptionsInitialzer" Kind="Interface" />
      <Type Name="LazyLoader" Kind="Class" />
      <Type Name="LazyRef`1" DisplayName="LazyRef&lt;T&gt;" Kind="Class" />
      <Type Name="LoggingModelValidator" Kind="Class" />
      <Type Name="LoggingOptions" Kind="Class" />
      <Type Name="MethodInfoExtensions" Kind="Class" />
      <Type Name="ModelValidator" Kind="Class" />
      <Type Name="Multigraph`2" DisplayName="Multigraph&lt;TVertex,TEdge&gt;" Kind="Class" />
      <Type Name="NonCapturingLazyInitializer" Kind="Class" />
      <Type Name="ProductInfo" Kind="Class" />
      <Type Name="ProxiesStrings" Kind="Class" />
      <Type Name="Reference`1" DisplayName="Reference&lt;T&gt;" Kind="Class" />
      <Type Name="ReferenceEnumerableEqualityComparer`2" DisplayName="ReferenceEnumerableEqualityComparer&lt;TEnumerable,TValue&gt;" Kind="Class" />
      <Type Name="ReferenceEqualityComparer" Kind="Class" />
      <Type Name="RegisteredServices" Kind="Class" />
      <Type Name="RelationalDesignLoggerExtensions" Kind="Class" />
      <Type Name="RelationalDesignStrings" Kind="Class" />
      <Type Name="RelationalExpressionExtensions" Kind="Class" />
      <Type Name="RelationalLoggerExtensions" Kind="Class" />
      <Type Name="RelationalModelValidator" Kind="Class" />
      <Type Name="RelationalPropertyExtensions" Kind="Class" />
      <Type Name="RelationalStrings" Kind="Class" />
      <Type Name="SemanticVersionComparer" Kind="Class" />
      <Type Name="ServiceProviderCache" Kind="Class" />
      <Type Name="ServiceProviderExtensions" Kind="Class" />
      <Type Name="SingletonOptionsInitializer" Kind="Class" />
      <Type Name="SingletonOptionsInitialzer" Kind="Class" />
      <Type Name="SqliteDesignLoggerExtensions" Kind="Class" />
      <Type Name="SqliteDesignStrings" Kind="Class" />
      <Type Name="SqliteLoggerExtensions" Kind="Class" />
      <Type Name="SqliteModelValidator" Kind="Class" />
      <Type Name="SqliteStrings" Kind="Class" />
      <Type Name="SqlServerDesignLoggerExtensions" Kind="Class" />
      <Type Name="SqlServerDesignStrings" Kind="Class" />
      <Type Name="SqlServerLoggerExtensions" Kind="Class" />
      <Type Name="SqlServerModelValidator" Kind="Class" />
      <Type Name="SqlServerOptions" Kind="Class" />
      <Type Name="SqlServerStrings" Kind="Class" />
      <Type Name="TypeExtensions" Kind="Class" />
      <Type Name="WarningsConfiguration" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Metadata">
      <Type Name="ChangeTrackingStrategy" Kind="Enumeration" />
      <Type Name="DeleteBehavior" Kind="Enumeration" />
      <Type Name="IDbFunction" Kind="Interface" />
      <Type Name="IEntityType" Kind="Interface" />
      <Type Name="IForeignKey" Kind="Interface" />
      <Type Name="IIndex" Kind="Interface" />
      <Type Name="IKey" Kind="Interface" />
      <Type Name="IModel" Kind="Interface" />
      <Type Name="IMutableAnnotatable" Kind="Interface" />
      <Type Name="IMutableDbFunction" Kind="Interface" />
      <Type Name="IMutableEntityType" Kind="Interface" />
      <Type Name="IMutableForeignKey" Kind="Interface" />
      <Type Name="IMutableIndex" Kind="Interface" />
      <Type Name="IMutableKey" Kind="Interface" />
      <Type Name="IMutableModel" Kind="Interface" />
      <Type Name="IMutableNavigation" Kind="Interface" />
      <Type Name="IMutableProperty" Kind="Interface" />
      <Type Name="IMutablePropertyBase" Kind="Interface" />
      <Type Name="IMutableSequence" Kind="Interface" />
      <Type Name="IMutableServiceProperty" Kind="Interface" />
      <Type Name="IMutableTypeBase" Kind="Interface" />
      <Type Name="INavigation" Kind="Interface" />
      <Type Name="IProperty" Kind="Interface" />
      <Type Name="IPropertyBase" Kind="Interface" />
      <Type Name="IRelationalAnnotationProvider" Kind="Interface" />
      <Type Name="IRelationalEntityTypeAnnotations" Kind="Interface" />
      <Type Name="IRelationalForeignKeyAnnotations" Kind="Interface" />
      <Type Name="IRelationalIndexAnnotations" Kind="Interface" />
      <Type Name="IRelationalKeyAnnotations" Kind="Interface" />
      <Type Name="IRelationalModelAnnotations" Kind="Interface" />
      <Type Name="IRelationalPropertyAnnotations" Kind="Interface" />
      <Type Name="ISequence" Kind="Interface" />
      <Type Name="IServiceProperty" Kind="Interface" />
      <Type Name="ISqlServerEntityTypeAnnotations" Kind="Interface" />
      <Type Name="ISqlServerIndexAnnotations" Kind="Interface" />
      <Type Name="ISqlServerKeyAnnotations" Kind="Interface" />
      <Type Name="ISqlServerModelAnnotations" Kind="Interface" />
      <Type Name="ISqlServerPropertyAnnotations" Kind="Interface" />
      <Type Name="ITypeBase" Kind="Interface" />
      <Type Name="PropertyAccessMode" Kind="Enumeration" />
      <Type Name="PropertySaveBehavior" Kind="Enumeration" />
      <Type Name="RelationalAnnotationNames" Kind="Class" />
      <Type Name="RelationalAnnotations" Kind="Class" />
      <Type Name="RelationalEntityTypeAnnotations" Kind="Class" />
      <Type Name="RelationalForeignKeyAnnotations" Kind="Class" />
      <Type Name="RelationalIndexAnnotations" Kind="Class" />
      <Type Name="RelationalKeyAnnotations" Kind="Class" />
      <Type Name="RelationalModelAnnotations" Kind="Class" />
      <Type Name="RelationalPropertyAnnotations" Kind="Class" />
      <Type Name="RelationalPropertyExtensions" Kind="Class" />
      <Type Name="RelationalSequenceBuilder" Kind="Class" />
      <Type Name="ScaffoldingMetadataExtensions" Kind="Class" />
      <Type Name="Sequence" Kind="Class" />
      <Type Name="SequenceBuilder" Kind="Class" />
      <Type Name="SimpleModelFactory" Kind="Class" />
      <Type Name="SqlServerAnnotationProvider" Kind="Class" />
      <Type Name="SqlServerEntityTypeAnnotations" Kind="Class" />
      <Type Name="SqlServerIndexAnnotations" Kind="Class" />
      <Type Name="SqlServerKeyAnnotations" Kind="Class" />
      <Type Name="SqlServerModelAnnotations" Kind="Class" />
      <Type Name="SqlServerPropertyAnnotations" Kind="Class" />
      <Type Name="SqlServerValueGenerationStrategy" Kind="Enumeration" />
      <Type Name="ValueGenerated" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Metadata.Builders">
      <Type Name="CollectionNavigationBuilder" Kind="Class" />
      <Type Name="CollectionNavigationBuilder`2" DisplayName="CollectionNavigationBuilder&lt;TEntity,TRelatedEntity&gt;" Kind="Class" />
      <Type Name="DataBuilder" Kind="Class" />
      <Type Name="DataBuilder`1" DisplayName="DataBuilder&lt;TEntity&gt;" Kind="Class" />
      <Type Name="DbFunctionBuilder" Kind="Class" />
      <Type Name="DiscriminatorBuilder" Kind="Class" />
      <Type Name="DiscriminatorBuilder`1" DisplayName="DiscriminatorBuilder&lt;TDiscriminator&gt;" Kind="Class" />
      <Type Name="EntityTypeBuilder" Kind="Class" />
      <Type Name="EntityTypeBuilder`1" DisplayName="EntityTypeBuilder&lt;TEntity&gt;" Kind="Class" />
      <Type Name="IndexBuilder" Kind="Class" />
      <Type Name="KeyBuilder" Kind="Class" />
      <Type Name="OwnedEntityTypeBuilder" Kind="Class" />
      <Type Name="OwnedEntityTypeBuilder`1" DisplayName="OwnedEntityTypeBuilder&lt;T&gt;" Kind="Class" />
      <Type Name="PropertyBuilder" Kind="Class" />
      <Type Name="PropertyBuilder`1" DisplayName="PropertyBuilder&lt;TProperty&gt;" Kind="Class" />
      <Type Name="QueryTypeBuilder" Kind="Class" />
      <Type Name="QueryTypeBuilder`1" DisplayName="QueryTypeBuilder&lt;TQuery&gt;" Kind="Class" />
      <Type Name="ReferenceCollectionBuilder" Kind="Class" />
      <Type Name="ReferenceCollectionBuilder`2" DisplayName="ReferenceCollectionBuilder&lt;TPrincipalEntity,TDependentEntity&gt;" Kind="Class" />
      <Type Name="ReferenceNavigationBuilder" Kind="Class" />
      <Type Name="ReferenceNavigationBuilder`2" DisplayName="ReferenceNavigationBuilder&lt;TEntity,TRelatedEntity&gt;" Kind="Class" />
      <Type Name="ReferenceOwnershipBuilder" Kind="Class" />
      <Type Name="ReferenceOwnershipBuilder`2" DisplayName="ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;" Kind="Class" />
      <Type Name="ReferenceReferenceBuilder" Kind="Class" />
      <Type Name="ReferenceReferenceBuilder`2" DisplayName="ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;" Kind="Class" />
      <Type Name="ReferenceReferenceBuilderBase" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Metadata.Conventions">
      <Type Name="ConventionSet" Kind="Class" />
      <Type Name="SqliteConventionSetBuilder" Kind="Class" />
      <Type Name="SqlServerConventionSetBuilder" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal">
      <Type Name="BackingFieldConvention" Kind="Class" />
      <Type Name="BaseTypeDiscoveryConvention" Kind="Class" />
      <Type Name="CascadeDeleteConvention" Kind="Class" />
      <Type Name="ChangeTrackingStrategyConvention" Kind="Class" />
      <Type Name="CompositeConventionSetBuilder" Kind="Class" />
      <Type Name="ConcurrencyCheckAttributeConvention" Kind="Class" />
      <Type Name="ConstructorBindingConvention" Kind="Class" />
      <Type Name="ConventionBatchExtensions" Kind="Class" />
      <Type Name="ConventionDispatcher" Kind="Class" />
      <Type Name="CoreConventionSetBuilder" Kind="Class" />
      <Type Name="CoreConventionSetBuilderDependencies" Kind="Class" />
      <Type Name="DatabaseGeneratedAttributeConvention" Kind="Class" />
      <Type Name="DerivedTypeDiscoveryConvention" Kind="Class" />
      <Type Name="DiscriminatorConvention" Kind="Class" />
      <Type Name="EntityTypeAttributeConvention`1" DisplayName="EntityTypeAttributeConvention&lt;TAttribute&gt;" Kind="Class" />
      <Type Name="ForeignKeyAttributeConvention" Kind="Class" />
      <Type Name="ForeignKeyIndexConvention" Kind="Class" />
      <Type Name="ForeignKeyPropertyDiscoveryConvention" Kind="Class" />
      <Type Name="IBaseTypeChangedConvention" Kind="Interface" />
      <Type Name="IBaseTypeConvention" Kind="Interface" />
      <Type Name="IConventionBatch" Kind="Interface" />
      <Type Name="IConventionSetBuilder" Kind="Interface" />
      <Type Name="ICoreConventionSetBuilder" Kind="Interface" />
      <Type Name="IEntityTypeAddedConvention" Kind="Interface" />
      <Type Name="IEntityTypeAnnotationChangedConvention" Kind="Interface" />
      <Type Name="IEntityTypeAnnotationSetConvention" Kind="Interface" />
      <Type Name="IEntityTypeConvention" Kind="Interface" />
      <Type Name="IEntityTypeIgnoredConvention" Kind="Interface" />
      <Type Name="IEntityTypeMemberIgnoredConvention" Kind="Interface" />
      <Type Name="IEntityTypeRemovedConvention" Kind="Interface" />
      <Type Name="IForeignKeyAddedConvention" Kind="Interface" />
      <Type Name="IForeignKeyConvention" Kind="Interface" />
      <Type Name="IForeignKeyOwnershipChangedConvention" Kind="Interface" />
      <Type Name="IForeignKeyRemovedConvention" Kind="Interface" />
      <Type Name="IForeignKeyUniquenessChangedConvention" Kind="Interface" />
      <Type Name="IForeignKeyUniquenessConvention" Kind="Interface" />
      <Type Name="IgnoredMembersValidationConvention" Kind="Class" />
      <Type Name="IIndexAddedConvention" Kind="Interface" />
      <Type Name="IIndexAnnotationChangedConvention" Kind="Interface" />
      <Type Name="IIndexConvention" Kind="Interface" />
      <Type Name="IIndexRemovedConvention" Kind="Interface" />
      <Type Name="IIndexUniquenessChangedConvention" Kind="Interface" />
      <Type Name="IIndexUniquenessConvention" Kind="Interface" />
      <Type Name="IKeyAddedConvention" Kind="Interface" />
      <Type Name="IKeyConvention" Kind="Interface" />
      <Type Name="IKeyRemovedConvention" Kind="Interface" />
      <Type Name="IModelAnnotationChangedConvention" Kind="Interface" />
      <Type Name="IModelBuiltConvention" Kind="Interface" />
      <Type Name="IModelConvention" Kind="Interface" />
      <Type Name="IModelInitializedConvention" Kind="Interface" />
      <Type Name="INavigationAddedConvention" Kind="Interface" />
      <Type Name="INavigationConvention" Kind="Interface" />
      <Type Name="INavigationRemovedConvention" Kind="Interface" />
      <Type Name="InheritanceDiscoveryConventionBase" Kind="Class" />
      <Type Name="InversePropertyAttributeConvention" Kind="Class" />
      <Type Name="IPrimaryKeyChangedConvention" Kind="Interface" />
      <Type Name="IPrimaryKeyConvention" Kind="Interface" />
      <Type Name="IPrincipalEndChangedConvention" Kind="Interface" />
      <Type Name="IPrincipalEndConvention" Kind="Interface" />
      <Type Name="IPropertyAddedConvention" Kind="Interface" />
      <Type Name="IPropertyAnnotationChangedConvention" Kind="Interface" />
      <Type Name="IPropertyConvention" Kind="Interface" />
      <Type Name="IPropertyFieldChangedConvention" Kind="Interface" />
      <Type Name="IPropertyNullabilityChangedConvention" Kind="Interface" />
      <Type Name="IPropertyNullableConvention" Kind="Interface" />
      <Type Name="KeyAttributeConvention" Kind="Class" />
      <Type Name="KeyConvention" Kind="Class" />
      <Type Name="KeyDiscoveryConvention" Kind="Class" />
      <Type Name="MaxLengthAttributeConvention" Kind="Class" />
      <Type Name="MetadataTracker" Kind="Class" />
      <Type Name="ModelCleanupConvention" Kind="Class" />
      <Type Name="NavigationAttributeEntityTypeConvention`1" DisplayName="NavigationAttributeEntityTypeConvention&lt;TAttribute&gt;" Kind="Class" />
      <Type Name="NavigationAttributeNavigationConvention`1" DisplayName="NavigationAttributeNavigationConvention&lt;TAttribute&gt;" Kind="Class" />
      <Type Name="NavigationEagerLoadingConvention" Kind="Class" />
      <Type Name="NotMappedEntityTypeAttributeConvention" Kind="Class" />
      <Type Name="NotMappedMemberAttributeConvention" Kind="Class" />
      <Type Name="NullConventionSetBuilder" Kind="Class" />
      <Type Name="OwnedEntityTypeAttributeConvention" Kind="Class" />
      <Type Name="PropertyAttributeConvention`1" DisplayName="PropertyAttributeConvention&lt;TAttribute&gt;" Kind="Class" />
      <Type Name="PropertyDiscoveryConvention" Kind="Class" />
      <Type Name="PropertyMappingValidationConvention" Kind="Class" />
      <Type Name="RelationalColumnAttributeConvention" Kind="Class" />
      <Type Name="RelationalConventionSetBuilder" Kind="Class" />
      <Type Name="RelationalConventionSetBuilderDependencies" Kind="Class" />
      <Type Name="RelationalDbFunctionConvention" Kind="Class" />
      <Type Name="RelationalForeignKeyAttributeConvention" Kind="Class" />
      <Type Name="RelationalInversePropertyAttributeConvention" Kind="Class" />
      <Type Name="RelationalMaxIdentifierLengthConvention" Kind="Class" />
      <Type Name="RelationalPropertyDiscoveryConvention" Kind="Class" />
      <Type Name="RelationalPropertyMappingValidationConvention" Kind="Class" />
      <Type Name="RelationalRelationshipDiscoveryConvention" Kind="Class" />
      <Type Name="RelationalTableAttributeConvention" Kind="Class" />
      <Type Name="RelationalTypeMappingConvention" Kind="Class" />
      <Type Name="RelationalValueGeneratorConvention" Kind="Class" />
      <Type Name="RelationshipDiscoveryConvention" Kind="Class" />
      <Type Name="RelationshipValidationConvention" Kind="Class" />
      <Type Name="RequiredNavigationAttributeConvention" Kind="Class" />
      <Type Name="RequiredPropertyAttributeConvention" Kind="Class" />
      <Type Name="ServicePropertyDiscoveryConvention" Kind="Class" />
      <Type Name="SharedTableConvention" Kind="Class" />
      <Type Name="SqlServerIndexConvention" Kind="Class" />
      <Type Name="SqlServerMemoryOptimizedTablesConvention" Kind="Class" />
      <Type Name="SqlServerValueGenerationStrategyConvention" Kind="Class" />
      <Type Name="SqlServerValueGeneratorConvention" Kind="Class" />
      <Type Name="StringLengthAttributeConvention" Kind="Class" />
      <Type Name="TableNameFromDbSetConvention" Kind="Class" />
      <Type Name="TimestampAttributeConvention" Kind="Class" />
      <Type Name="TypeMappingConvention" Kind="Class" />
      <Type Name="ValueGeneratorConvention" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Metadata.Internal">
      <Type Name="AnnotatableExtensions" Kind="Class" />
      <Type Name="ClrAccessorFactory`1" DisplayName="ClrAccessorFactory&lt;TAccessor&gt;" Kind="Class" />
      <Type Name="ClrCollectionAccessorFactory" Kind="Class" />
      <Type Name="ClrICollectionAccessor`3" DisplayName="ClrICollectionAccessor&lt;TEntity,TCollection,TElement&gt;" Kind="Class" />
      <Type Name="ClrPropertyGetter`2" DisplayName="ClrPropertyGetter&lt;TEntity,TValue&gt;" Kind="Class" />
      <Type Name="ClrPropertyGetterFactory" Kind="Class" />
      <Type Name="ClrPropertySetter`2" DisplayName="ClrPropertySetter&lt;TEntity,TValue&gt;" Kind="Class" />
      <Type Name="ClrPropertySetterFactory" Kind="Class" />
      <Type Name="CollectionTypeFactory" Kind="Class" />
      <Type Name="ConfigurationSource" Kind="Enumeration" />
      <Type Name="ConfigurationSourceExtensions" Kind="Class" />
      <Type Name="ConstraintNamer" Kind="Class" />
      <Type Name="ConstructorBinding" Kind="Class" />
      <Type Name="ConstructorBindingFactory" Kind="Class" />
      <Type Name="ContextParameterBinding" Kind="Class" />
      <Type Name="ContextParameterBindingFactory" Kind="Class" />
      <Type Name="ConventionalAnnotatable" Kind="Class" />
      <Type Name="ConventionalAnnotation" Kind="Class" />
      <Type Name="CoreAnnotationNames" Kind="Class" />
      <Type Name="DbFunction" Kind="Class" />
      <Type Name="DebugView`1" DisplayName="DebugView&lt;TMetadata&gt;" Kind="Class" />
      <Type Name="DefaultServiceParameterBinding" Kind="Class" />
      <Type Name="DirectConstructorBinding" Kind="Class" />
      <Type Name="EntityMaterializerSource" Kind="Class" />
      <Type Name="EntityType" Kind="Class" />
      <Type Name="EntityType+Snapshot" Kind="Class" />
      <Type Name="EntityTypeExtensions" Kind="Class" />
      <Type Name="EntityTypeNameComparer" Kind="Class" />
      <Type Name="EntityTypeParameterBinding" Kind="Class" />
      <Type Name="EntityTypeParameterBindingFactory" Kind="Class" />
      <Type Name="EntityTypePathComparer" Kind="Class" />
      <Type Name="FactoryMethodConstructorBinding" Kind="Class" />
      <Type Name="FieldMatcher" Kind="Class" />
      <Type Name="ForeignKey" Kind="Class" />
      <Type Name="ForeignKeyComparer" Kind="Class" />
      <Type Name="ForeignKeyExtensions" Kind="Class" />
      <Type Name="IClrCollectionAccessor" Kind="Interface" />
      <Type Name="IClrPropertyGetter" Kind="Interface" />
      <Type Name="IClrPropertySetter" Kind="Interface" />
      <Type Name="ICollectionTypeFactory" Kind="Interface" />
      <Type Name="IConstructorBindingFactory" Kind="Interface" />
      <Type Name="IEntityMaterializer" Kind="Interface" />
      <Type Name="IEntityMaterializerSource" Kind="Interface" />
      <Type Name="IFieldMatcher" Kind="Interface" />
      <Type Name="IMemberMapper" Kind="Interface" />
      <Type Name="Index" Kind="Class" />
      <Type Name="IndexExtensions" Kind="Class" />
      <Type Name="InternalDbFunctionBuilder" Kind="Class" />
      <Type Name="InternalEntityTypeBuilder" Kind="Class" />
      <Type Name="InternalIndexBuilder" Kind="Class" />
      <Type Name="InternalKeyBuilder" Kind="Class" />
      <Type Name="InternalMetadataBuilder" Kind="Class" />
      <Type Name="InternalMetadataBuilder`1" DisplayName="InternalMetadataBuilder&lt;TMetadata&gt;" Kind="Class" />
      <Type Name="InternalMetadataItemBuilder`1" DisplayName="InternalMetadataItemBuilder&lt;TMetadata&gt;" Kind="Class" />
      <Type Name="InternalModelBuilder" Kind="Class" />
      <Type Name="InternalNavigationBuilder" Kind="Class" />
      <Type Name="InternalPropertyBuilder" Kind="Class" />
      <Type Name="InternalRelationshipBuilder" Kind="Class" />
      <Type Name="InternalServicePropertyBuilder" Kind="Class" />
      <Type Name="IParameterBindingFactories" Kind="Interface" />
      <Type Name="IParameterBindingFactory" Kind="Interface" />
      <Type Name="IPropertyParameterBindingFactory" Kind="Interface" />
      <Type Name="Key" Kind="Class" />
      <Type Name="KeyExtensions" Kind="Class" />
      <Type Name="LazyLoaderParameterBindingFactory" Kind="Class" />
      <Type Name="MemberMapper" Kind="Class" />
      <Type Name="MetadataExtensions" Kind="Class" />
      <Type Name="Model" Kind="Class" />
      <Type Name="ModelExtensions" Kind="Class" />
      <Type Name="ModelNavigationsGraphAdapter" Kind="Class" />
      <Type Name="MutableEntityTypeExtensions" Kind="Class" />
      <Type Name="MutableServicePropertyExtensions" Kind="Class" />
      <Type Name="Navigation" Kind="Class" />
      <Type Name="NavigationExtensions" Kind="Class" />
      <Type Name="NullableEnumClrPropertySetter`3" DisplayName="NullableEnumClrPropertySetter&lt;TEntity,TValue,TNonNullableEnumValue&gt;" Kind="Class" />
      <Type Name="ObjectArrayParameterBinding" Kind="Class" />
      <Type Name="ParameterBinding" Kind="Class" />
      <Type Name="ParameterBindingFactories" Kind="Class" />
      <Type Name="ParameterBindingInfo" Kind="Structure" />
      <Type Name="PropertiesSnapshot" Kind="Class" />
      <Type Name="Property" Kind="Class" />
      <Type Name="PropertyAccessors" Kind="Class" />
      <Type Name="PropertyAccessorsFactory" Kind="Class" />
      <Type Name="PropertyBase" Kind="Class" />
      <Type Name="PropertyBaseExtensions" Kind="Class" />
      <Type Name="PropertyCounts" Kind="Class" />
      <Type Name="PropertyExtensions" Kind="Class" />
      <Type Name="PropertyIdentity" Kind="Structure" />
      <Type Name="PropertyIndexes" Kind="Class" />
      <Type Name="PropertyListComparer" Kind="Class" />
      <Type Name="PropertyParameterBinding" Kind="Class" />
      <Type Name="PropertyParameterBindingFactory" Kind="Class" />
      <Type Name="RelationalAnnotationNames" Kind="Class" />
      <Type Name="RelationalAnnotationsBuilder" Kind="Class" />
      <Type Name="RelationalEntityTypeBuilderAnnotations" Kind="Class" />
      <Type Name="RelationalForeignKeyBuilderAnnotations" Kind="Class" />
      <Type Name="RelationalFullAnnotationNames" Kind="Class" />
      <Type Name="RelationalIndexBuilderAnnotations" Kind="Class" />
      <Type Name="RelationalInternalMetadataBuilderExtensions" Kind="Class" />
      <Type Name="RelationalKeyBuilderAnnotations" Kind="Class" />
      <Type Name="RelationalModelBuilderAnnotations" Kind="Class" />
      <Type Name="RelationalModelExtensions" Kind="Class" />
      <Type Name="RelationalPropertyBuilderAnnotations" Kind="Class" />
      <Type Name="ScaffoldingAnnotationNames" Kind="Class" />
      <Type Name="ScaffoldingEntityTypeAnnotations" Kind="Class" />
      <Type Name="ScaffoldingMetadataExtensions" Kind="Class" />
      <Type Name="ScaffoldingModelAnnotations" Kind="Class" />
      <Type Name="ScaffoldingPropertyAnnotations" Kind="Class" />
      <Type Name="Sequence" Kind="Class" />
      <Type Name="ServiceMethodParameterBinding" Kind="Class" />
      <Type Name="ServiceParameterBinding" Kind="Class" />
      <Type Name="ServiceParameterBindingFactory" Kind="Class" />
      <Type Name="ServiceProperty" Kind="Class" />
      <Type Name="ServicePropertyExtensions" Kind="Class" />
      <Type Name="SqliteAnnotationNames" Kind="Class" />
      <Type Name="SqliteAnnotationProvider" Kind="Class" />
      <Type Name="SqliteFullAnnotationNames" Kind="Class" />
      <Type Name="SqliteInternalMetadataBuilderExtensions" Kind="Class" />
      <Type Name="SqlServerAnnotationNames" Kind="Class" />
      <Type Name="SqlServerEntityTypeBuilderAnnotations" Kind="Class" />
      <Type Name="SqlServerFullAnnotationNames" Kind="Class" />
      <Type Name="SqlServerIndexBuilderAnnotations" Kind="Class" />
      <Type Name="SqlServerInternalMetadataBuilderExtensions" Kind="Class" />
      <Type Name="SqlServerKeyBuilderAnnotations" Kind="Class" />
      <Type Name="SqlServerModelBuilderAnnotations" Kind="Class" />
      <Type Name="SqlServerPropertyBuilderAnnotations" Kind="Class" />
      <Type Name="TableMapping" Kind="Class" />
      <Type Name="TypeBase" Kind="Class" />
      <Type Name="TypeBaseExtensions" Kind="Class" />
      <Type Name="TypeIdentity" Kind="Structure" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Migrations">
      <Type Name="HistoryRepository" Kind="Class" />
      <Type Name="HistoryRepositoryDependencies" Kind="Class" />
      <Type Name="HistoryRow" Kind="Class" />
      <Type Name="IHistoryRepository" Kind="Interface" />
      <Type Name="IMigrationCommandExecutor" Kind="Interface" />
      <Type Name="IMigrationsAnnotationProvider" Kind="Interface" />
      <Type Name="IMigrationsAssembly" Kind="Interface" />
      <Type Name="IMigrationsIdGenerator" Kind="Interface" />
      <Type Name="IMigrationsModelDiffer" Kind="Interface" />
      <Type Name="IMigrationsSqlGenerator" Kind="Interface" />
      <Type Name="IMigrator" Kind="Interface" />
      <Type Name="Migration" Kind="Class" />
      <Type Name="MigrationAttribute" Kind="Class" />
      <Type Name="MigrationBuilder" Kind="Class" />
      <Type Name="MigrationCommand" Kind="Class" />
      <Type Name="MigrationCommandListBuilder" Kind="Class" />
      <Type Name="MigrationsAnnotationProvider" Kind="Class" />
      <Type Name="MigrationsAnnotationProviderDependencies" Kind="Class" />
      <Type Name="MigrationsAssemblyExtensions" Kind="Class" />
      <Type Name="MigrationsSqlGenerator" Kind="Class" />
      <Type Name="MigrationsSqlGeneratorDependencies" Kind="Class" />
      <Type Name="ModelSnapshotTest" Kind="Class" />
      <Type Name="ReferentialAction" Kind="Enumeration" />
      <Type Name="SqliteMigrationsAnnotationProvider" Kind="Class" />
      <Type Name="SqliteMigrationsSqlGenerator" Kind="Class" />
      <Type Name="SqlServerMigrationsSqlGenerator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Migrations.Design">
      <Type Name="CSharpHelper" Kind="Class" />
      <Type Name="CSharpMigrationOperationGenerator" Kind="Class" />
      <Type Name="CSharpMigrationOperationGeneratorDependencies" Kind="Class" />
      <Type Name="CSharpMigrationsGenerator" Kind="Class" />
      <Type Name="CSharpMigrationsGeneratorDependencies" Kind="Class" />
      <Type Name="CSharpSnapshotGenerator" Kind="Class" />
      <Type Name="CSharpSnapshotGeneratorDependencies" Kind="Class" />
      <Type Name="ICSharpMigrationOperationGenerator" Kind="Interface" />
      <Type Name="ICSharpSnapshotGenerator" Kind="Interface" />
      <Type Name="IMigrationsCodeGenerator" Kind="Interface" />
      <Type Name="IMigrationsCodeGeneratorSelector" Kind="Interface" />
      <Type Name="IMigrationsScaffolder" Kind="Interface" />
      <Type Name="MigrationFiles" Kind="Class" />
      <Type Name="MigrationsCodeGenerator" Kind="Class" />
      <Type Name="MigrationsCodeGeneratorDependencies" Kind="Class" />
      <Type Name="MigrationsScaffolder" Kind="Class" />
      <Type Name="MigrationsScaffolderDependencies" Kind="Class" />
      <Type Name="ScaffoldedMigration" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Migrations.Internal">
      <Type Name="ISnapshotModelProcessor" Kind="Interface" />
      <Type Name="MigrationCommandExecutor" Kind="Class" />
      <Type Name="MigrationExtensions" Kind="Class" />
      <Type Name="MigrationsAssembly" Kind="Class" />
      <Type Name="MigrationsCodeGeneratorSelector" Kind="Class" />
      <Type Name="MigrationsIdGenerator" Kind="Class" />
      <Type Name="MigrationsModelDiffer" Kind="Class" />
      <Type Name="MigrationsModelDiffer+DiffContext" Kind="Class" />
      <Type Name="Migrator" Kind="Class" />
      <Type Name="SnapshotModelProcessor" Kind="Class" />
      <Type Name="SqliteHistoryRepository" Kind="Class" />
      <Type Name="SqliteMigrationsAnnotationProvider" Kind="Class" />
      <Type Name="SqlServerHistoryRepository" Kind="Class" />
      <Type Name="SqlServerMigrationsAnnotationProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Migrations.Operations">
      <Type Name="AddColumnOperation" Kind="Class" />
      <Type Name="AddForeignKeyOperation" Kind="Class" />
      <Type Name="AddPrimaryKeyOperation" Kind="Class" />
      <Type Name="AddUniqueConstraintOperation" Kind="Class" />
      <Type Name="AlterColumnOperation" Kind="Class" />
      <Type Name="AlterDatabaseOperation" Kind="Class" />
      <Type Name="AlterSequenceOperation" Kind="Class" />
      <Type Name="AlterTableOperation" Kind="Class" />
      <Type Name="ColumnOperation" Kind="Class" />
      <Type Name="CreateIndexOperation" Kind="Class" />
      <Type Name="CreateSequenceOperation" Kind="Class" />
      <Type Name="CreateTableOperation" Kind="Class" />
      <Type Name="DeleteDataOperation" Kind="Class" />
      <Type Name="DropColumnOperation" Kind="Class" />
      <Type Name="DropForeignKeyOperation" Kind="Class" />
      <Type Name="DropIndexOperation" Kind="Class" />
      <Type Name="DropPrimaryKeyOperation" Kind="Class" />
      <Type Name="DropSchemaOperation" Kind="Class" />
      <Type Name="DropSequenceOperation" Kind="Class" />
      <Type Name="DropTableOperation" Kind="Class" />
      <Type Name="DropUniqueConstraintOperation" Kind="Class" />
      <Type Name="EnsureSchemaOperation" Kind="Class" />
      <Type Name="IAlterMigrationOperation" Kind="Interface" />
      <Type Name="InsertDataOperation" Kind="Class" />
      <Type Name="MigrationOperation" Kind="Class" />
      <Type Name="RenameColumnOperation" Kind="Class" />
      <Type Name="RenameIndexOperation" Kind="Class" />
      <Type Name="RenameSequenceOperation" Kind="Class" />
      <Type Name="RenameTableOperation" Kind="Class" />
      <Type Name="RestartSequenceOperation" Kind="Class" />
      <Type Name="SequenceOperation" Kind="Class" />
      <Type Name="SqlOperation" Kind="Class" />
      <Type Name="SqlServerCreateDatabaseOperation" Kind="Class" />
      <Type Name="SqlServerDropDatabaseOperation" Kind="Class" />
      <Type Name="UpdateDataOperation" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Migrations.Operations.Builders">
      <Type Name="AlterOperationBuilder`1" DisplayName="AlterOperationBuilder&lt;TOperation&gt;" Kind="Class" />
      <Type Name="ColumnsBuilder" Kind="Class" />
      <Type Name="CreateTableBuilder`1" DisplayName="CreateTableBuilder&lt;TColumns&gt;" Kind="Class" />
      <Type Name="OperationBuilder`1" DisplayName="OperationBuilder&lt;TOperation&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Proxies.Internal">
      <Type Name="IProxyFactory" Kind="Interface" />
      <Type Name="IProxyLazyLoader" Kind="Interface" />
      <Type Name="LazyLoadingInterceptor" Kind="Class" />
      <Type Name="ProxiesConventionSetBuilder" Kind="Class" />
      <Type Name="ProxiesOptionsExtension" Kind="Class" />
      <Type Name="ProxyBindingRewriter" Kind="Class" />
      <Type Name="ProxyFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Query">
      <Type Name="AsyncEnumerable`1" DisplayName="AsyncEnumerable&lt;TResult&gt;" Kind="Structure" />
      <Type Name="AsyncQueryMethodProvider" Kind="Class" />
      <Type Name="CompiledQueryCacheKeyGenerator" Kind="Class" />
      <Type Name="CompiledQueryCacheKeyGenerator+CompiledQueryCacheKey" Kind="Structure" />
      <Type Name="CompiledQueryCacheKeyGeneratorDependencies" Kind="Class" />
      <Type Name="EntityLoadInfo" Kind="Structure" />
      <Type Name="EntityQueryModelVisitor" Kind="Class" />
      <Type Name="EntityQueryModelVisitorDependencies" Kind="Class" />
      <Type Name="EntityQueryModelVisitorFactory" Kind="Class" />
      <Type Name="ICompiledQueryCacheKeyGenerator" Kind="Interface" />
      <Type Name="IEntityQueryModelVisitorFactory" Kind="Interface" />
      <Type Name="IIncludableQueryable`2" DisplayName="IIncludableQueryable&lt;TEntity,TProperty&gt;" Kind="Interface" />
      <Type Name="IncludeSpecification" Kind="Class" />
      <Type Name="IQueryCompilationContextFactory" Kind="Interface" />
      <Type Name="IQueryContextFactory" Kind="Interface" />
      <Type Name="IQueryMethodProvider" Kind="Interface" />
      <Type Name="IRelationalResultOperatorHandler" Kind="Interface" />
      <Type Name="IResultOperatorHandler" Kind="Interface" />
      <Type Name="NotParameterizedAttribute" Kind="Class" />
      <Type Name="QueryCompilationContext" Kind="Class" />
      <Type Name="QueryContext" Kind="Class" />
      <Type Name="QueryContextDependencies" Kind="Class" />
      <Type Name="QueryContextFactory" Kind="Class" />
      <Type Name="QueryMethodProvider" Kind="Class" />
      <Type Name="RelationalCompiledQueryCacheKeyGenerator" Kind="Class" />
      <Type Name="RelationalCompiledQueryCacheKeyGenerator+RelationalCompiledQueryCacheKey" Kind="Structure" />
      <Type Name="RelationalCompiledQueryCacheKeyGeneratorDependencies" Kind="Class" />
      <Type Name="RelationalQueryCompilationContext" Kind="Class" />
      <Type Name="RelationalQueryCompilationContextDependencies" Kind="Class" />
      <Type Name="RelationalQueryCompilationContextFactory" Kind="Class" />
      <Type Name="RelationalQueryContext" Kind="Class" />
      <Type Name="RelationalQueryContextFactory" Kind="Class" />
      <Type Name="RelationalQueryModelVisitor" Kind="Class" />
      <Type Name="RelationalQueryModelVisitorDependencies" Kind="Class" />
      <Type Name="RelationalQueryModelVisitorFactory" Kind="Class" />
      <Type Name="ResultOperatorHandler" Kind="Class" />
      <Type Name="ResultOperatorHandlerDependencies" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Query.Expressions">
      <Type Name="AggregateExpression" Kind="Class" />
      <Type Name="AliasExpression" Kind="Class" />
      <Type Name="ColumnExpression" Kind="Class" />
      <Type Name="ColumnReferenceExpression" Kind="Class" />
      <Type Name="CountExpression" Kind="Class" />
      <Type Name="CrossJoinExpression" Kind="Class" />
      <Type Name="CrossJoinLateralExpression" Kind="Class" />
      <Type Name="DiscriminatorPredicateExpression" Kind="Class" />
      <Type Name="ExistsExpression" Kind="Class" />
      <Type Name="ExplicitCastExpression" Kind="Class" />
      <Type Name="FromSqlExpression" Kind="Class" />
      <Type Name="InExpression" Kind="Class" />
      <Type Name="InnerJoinExpression" Kind="Class" />
      <Type Name="ISelectExpressionFactory" Kind="Interface" />
      <Type Name="IsNullExpression" Kind="Class" />
      <Type Name="JoinExpressionBase" Kind="Class" />
      <Type Name="LateralJoinExpression" Kind="Class" />
      <Type Name="LeftOuterJoinExpression" Kind="Class" />
      <Type Name="LikeExpression" Kind="Class" />
      <Type Name="MaxExpression" Kind="Class" />
      <Type Name="MinExpression" Kind="Class" />
      <Type Name="NotNullableExpression" Kind="Class" />
      <Type Name="NullableExpression" Kind="Class" />
      <Type Name="NullCompensatedExpression" Kind="Class" />
      <Type Name="PredicateJoinExpressionBase" Kind="Class" />
      <Type Name="PropertyParameterExpression" Kind="Class" />
      <Type Name="SelectExpression" Kind="Class" />
      <Type Name="SelectExpressionDependencies" Kind="Class" />
      <Type Name="SelectExpressionFactory" Kind="Class" />
      <Type Name="SqlFragmentExpression" Kind="Class" />
      <Type Name="SqlFunctionExpression" Kind="Class" />
      <Type Name="StringCompareExpression" Kind="Class" />
      <Type Name="SumExpression" Kind="Class" />
      <Type Name="TableExpression" Kind="Class" />
      <Type Name="TableExpressionBase" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Query.Expressions.Internal">
      <Type Name="DatePartExpression" Kind="Class" />
      <Type Name="IPrintable" Kind="Interface" />
      <Type Name="NullConditionalEqualExpression" Kind="Class" />
      <Type Name="NullConditionalExpression" Kind="Class" />
      <Type Name="NullSafeEqualExpression" Kind="Class" />
      <Type Name="RowNumberExpression" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Query.ExpressionTranslators">
      <Type Name="ICompositeMethodCallTranslator" Kind="Interface" />
      <Type Name="IExpressionFragmentTranslator" Kind="Interface" />
      <Type Name="IMemberTranslator" Kind="Interface" />
      <Type Name="IMethodCallTranslator" Kind="Interface" />
      <Type Name="MultipleOverloadStaticMethodCallTranslator" Kind="Class" />
      <Type Name="ParameterlessInstanceMethodCallTranslator" Kind="Class" />
      <Type Name="RelationalCompositeExpressionFragmentTranslator" Kind="Class" />
      <Type Name="RelationalCompositeExpressionFragmentTranslatorDependencies" Kind="Class" />
      <Type Name="RelationalCompositeMemberTranslator" Kind="Class" />
      <Type Name="RelationalCompositeMemberTranslatorDependencies" Kind="Class" />
      <Type Name="RelationalCompositeMethodCallTranslator" Kind="Class" />
      <Type Name="RelationalCompositeMethodCallTranslatorDependencies" Kind="Class" />
      <Type Name="SingleOverloadStaticMethodCallTranslator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.Internal">
      <Type Name="ContainsTranslator" Kind="Class" />
      <Type Name="EndsWithTranslator" Kind="Class" />
      <Type Name="EnumHasFlagTranslator" Kind="Class" />
      <Type Name="EqualsTranslator" Kind="Class" />
      <Type Name="IsNullOrEmptyTranslator" Kind="Class" />
      <Type Name="LikeTranslator" Kind="Class" />
      <Type Name="SqliteCompositeMemberTranslator" Kind="Class" />
      <Type Name="SqliteCompositeMethodCallTranslator" Kind="Class" />
      <Type Name="SqliteContainsOptimizedTranslator" Kind="Class" />
      <Type Name="SqliteEndsWithOptimizedTranslator" Kind="Class" />
      <Type Name="SqliteMathAbsTranslator" Kind="Class" />
      <Type Name="SqliteStartsWithOptimizedTranslator" Kind="Class" />
      <Type Name="SqliteStringIsNullOrWhiteSpaceTranslator" Kind="Class" />
      <Type Name="SqliteStringLengthTranslator" Kind="Class" />
      <Type Name="SqliteStringToLowerTranslator" Kind="Class" />
      <Type Name="SqliteStringToUpperTranslator" Kind="Class" />
      <Type Name="SqliteStringTrimEndTranslator" Kind="Class" />
      <Type Name="SqliteStringTrimStartTranslator" Kind="Class" />
      <Type Name="SqliteStringTrimTranslator" Kind="Class" />
      <Type Name="SqlServerCompositeMemberTranslator" Kind="Class" />
      <Type Name="SqlServerCompositeMethodCallTranslator" Kind="Class" />
      <Type Name="SqlServerContainsOptimizedTranslator" Kind="Class" />
      <Type Name="SqlServerConvertTranslator" Kind="Class" />
      <Type Name="SqlServerDateAddTranslator" Kind="Class" />
      <Type Name="SqlServerDateTimeDateComponentTranslator" Kind="Class" />
      <Type Name="SqlServerDateTimeDatePartComponentTranslator" Kind="Class" />
      <Type Name="SqlServerDateTimeNowTranslator" Kind="Class" />
      <Type Name="SqlServerEndsWithOptimizedTranslator" Kind="Class" />
      <Type Name="SqlServerMathAbsTranslator" Kind="Class" />
      <Type Name="SqlServerMathCeilingTranslator" Kind="Class" />
      <Type Name="SqlServerMathFloorTranslator" Kind="Class" />
      <Type Name="SqlServerMathPowerTranslator" Kind="Class" />
      <Type Name="SqlServerMathRoundTranslator" Kind="Class" />
      <Type Name="SqlServerMathTranslator" Kind="Class" />
      <Type Name="SqlServerMathTruncateTranslator" Kind="Class" />
      <Type Name="SqlServerNewGuidTranslator" Kind="Class" />
      <Type Name="SqlServerObjectToStringTranslator" Kind="Class" />
      <Type Name="SqlServerStartsWithOptimizedTranslator" Kind="Class" />
      <Type Name="SqlServerStringIsNullOrWhiteSpaceTranslator" Kind="Class" />
      <Type Name="SqlServerStringLengthTranslator" Kind="Class" />
      <Type Name="SqlServerStringReplaceTranslator" Kind="Class" />
      <Type Name="SqlServerStringSubstringTranslator" Kind="Class" />
      <Type Name="SqlServerStringToLowerTranslator" Kind="Class" />
      <Type Name="SqlServerStringToUpperTranslator" Kind="Class" />
      <Type Name="SqlServerStringTrimEndTranslator" Kind="Class" />
      <Type Name="SqlServerStringTrimStartTranslator" Kind="Class" />
      <Type Name="SqlServerStringTrimTranslator" Kind="Class" />
      <Type Name="StartsWithTranslator" Kind="Class" />
      <Type Name="StringCompareTranslator" Kind="Class" />
      <Type Name="StringConcatTranslator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors">
      <Type Name="EntityQueryableExpressionVisitor" Kind="Class" />
      <Type Name="ExpressionVisitorBase" Kind="Class" />
      <Type Name="IEntityQueryableExpressionVisitorFactory" Kind="Interface" />
      <Type Name="IProjectionExpressionVisitorFactory" Kind="Interface" />
      <Type Name="ISqlTranslatingExpressionVisitorFactory" Kind="Interface" />
      <Type Name="ProjectionExpressionVisitor" Kind="Class" />
      <Type Name="RelationalEntityQueryableExpressionVisitor" Kind="Class" />
      <Type Name="RelationalEntityQueryableExpressionVisitorDependencies" Kind="Class" />
      <Type Name="RelationalEntityQueryableExpressionVisitorFactory" Kind="Class" />
      <Type Name="RelationalProjectionExpressionVisitor" Kind="Class" />
      <Type Name="RelationalProjectionExpressionVisitorDependencies" Kind="Class" />
      <Type Name="RelationalProjectionExpressionVisitorFactory" Kind="Class" />
      <Type Name="SqlTranslatingExpressionVisitor" Kind="Class" />
      <Type Name="SqlTranslatingExpressionVisitorDependencies" Kind="Class" />
      <Type Name="SqlTranslatingExpressionVisitorFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal">
      <Type Name="AdditionalFromClauseOptimizingQueryModelVisitor" Kind="Class" />
      <Type Name="AllAnyToContainsRewritingExpressionVisitor" Kind="Class" />
      <Type Name="BufferedEntityShaper`1" DisplayName="BufferedEntityShaper&lt;TEntity&gt;" Kind="Class" />
      <Type Name="BufferedOffsetEntityShaper`1" DisplayName="BufferedOffsetEntityShaper&lt;TEntity&gt;" Kind="Class" />
      <Type Name="CollectionNavigationIncludeExpressionRewriter" Kind="Class" />
      <Type Name="CollectionNavigationSetOperatorSubqueryInjector" Kind="Class" />
      <Type Name="CollectionNavigationSubqueryInjector" Kind="Class" />
      <Type Name="CompositeKey" Kind="Structure" />
      <Type Name="CompositePredicateExpressionVisitor" Kind="Class" />
      <Type Name="CompositePredicateExpressionVisitorFactory" Kind="Class" />
      <Type Name="CompositeShaper" Kind="Class" />
      <Type Name="ConditionalOptimizingExpressionVisitor" Kind="Class" />
      <Type Name="ConditionalRemovingExpressionVisitor" Kind="Class" />
      <Type Name="ConditionalRemovingExpressionVisitorFactory" Kind="Class" />
      <Type Name="CorrelatedCollectionFindingExpressionVisitor" Kind="Class" />
      <Type Name="CorrelatedCollectionOptimizingVisitor" Kind="Class" />
      <Type Name="DefaultQueryExpressionVisitor" Kind="Class" />
      <Type Name="EntityEqualityRewritingExpressionVisitor" Kind="Class" />
      <Type Name="EntityResultFindingExpressionVisitor" Kind="Class" />
      <Type Name="EntityResultFindingExpressionVisitorFactory" Kind="Class" />
      <Type Name="EntityShaper" Kind="Class" />
      <Type Name="EqualityPredicateExpandingVisitor" Kind="Class" />
      <Type Name="EqualityPredicateInExpressionOptimizer" Kind="Class" />
      <Type Name="ExpressionTransformingQueryModelVisitor" Kind="Class" />
      <Type Name="ExpressionTransformingQueryModelVisitor`1" DisplayName="ExpressionTransformingQueryModelVisitor&lt;TVisitor&gt;" Kind="Class" />
      <Type Name="FilterApplyingExpressionVisitor" Kind="Class" />
      <Type Name="ICompositePredicateExpressionVisitorFactory" Kind="Interface" />
      <Type Name="IConditionalRemovingExpressionVisitorFactory" Kind="Interface" />
      <Type Name="IdentityShaper" Kind="Class" />
      <Type Name="IEntityResultFindingExpressionVisitorFactory" Kind="Interface" />
      <Type Name="IIncludeExpressionVisitorFactory" Kind="Interface" />
      <Type Name="IMaterializerFactory" Kind="Interface" />
      <Type Name="IMemberAccessBindingExpressionVisitorFactory" Kind="Interface" />
      <Type Name="INavigationRewritingExpressionVisitorFactory" Kind="Interface" />
      <Type Name="IncludeExpressionVisitor" Kind="Class" />
      <Type Name="IncludeExpressionVisitorFactory" Kind="Class" />
      <Type Name="InMemoryEntityQueryableExpressionVisitor" Kind="Class" />
      <Type Name="InMemoryEntityQueryableExpressionVisitorFactory" Kind="Class" />
      <Type Name="IOrderingExpressionVisitorFactory" Kind="Interface" />
      <Type Name="IQueryFlattenerFactory" Kind="Interface" />
      <Type Name="IQuerySourceTracingExpressionVisitorFactory" Kind="Interface" />
      <Type Name="IRequiresMaterializationExpressionVisitorFactory" Kind="Interface" />
      <Type Name="IShaper`1" DisplayName="IShaper&lt;T&gt;" Kind="Interface" />
      <Type Name="IsNullExpressionBuildingVisitor" Kind="Class" />
      <Type Name="ISubQueryMemberPushDownExpressionVisitor" Kind="Interface" />
      <Type Name="ITaskBlockingExpressionVisitor" Kind="Interface" />
      <Type Name="MaterializerFactory" Kind="Class" />
      <Type Name="MemberAccessBindingExpressionVisitor" Kind="Class" />
      <Type Name="MemberAccessBindingExpressionVisitorFactory" Kind="Class" />
      <Type Name="ModelExpressionApplyingExpressionVisitor" Kind="Class" />
      <Type Name="NavigationRewritingExpressionVisitor" Kind="Class" />
      <Type Name="NavigationRewritingExpressionVisitorFactory" Kind="Class" />
      <Type Name="OrderingExpressionVisitorFactory" Kind="Class" />
      <Type Name="ParameterExtractingExpressionVisitor" Kind="Class" />
      <Type Name="PredicateNegationExpressionOptimizer" Kind="Class" />
      <Type Name="PredicateReductionExpressionOptimizer" Kind="Class" />
      <Type Name="ProjectionExpressionVisitorFactory" Kind="Class" />
      <Type Name="ProjectionShaper" Kind="Class" />
      <Type Name="QueryFlattener" Kind="Class" />
      <Type Name="QueryFlattenerFactory" Kind="Class" />
      <Type Name="QuerySourceReferenceFindingExpressionVisitor" Kind="Class" />
      <Type Name="QuerySourceTracingExpressionVisitor" Kind="Class" />
      <Type Name="QuerySourceTracingExpressionVisitorFactory" Kind="Class" />
      <Type Name="ReducingExpressionVisitor" Kind="Class" />
      <Type Name="RelationalNullsExpandingVisitor" Kind="Class" />
      <Type Name="RelationalNullsExpressionVisitorBase" Kind="Class" />
      <Type Name="RelationalNullsOptimizedExpandingVisitor" Kind="Class" />
      <Type Name="RequiresMaterializationExpressionVisitor" Kind="Class" />
      <Type Name="RequiresMaterializationExpressionVisitorFactory" Kind="Class" />
      <Type Name="ResultTransformingExpressionVisitor`1" DisplayName="ResultTransformingExpressionVisitor&lt;TResult&gt;" Kind="Class" />
      <Type Name="Shaper" Kind="Class" />
      <Type Name="SubQueryMemberPushDownExpressionVisitor" Kind="Class" />
      <Type Name="SubqueryProjectingSingleValueOptimizingExpressionVisitor" Kind="Class" />
      <Type Name="TaskBlockingExpressionVisitor" Kind="Class" />
      <Type Name="TaskLiftingExpressionVisitor" Kind="Class" />
      <Type Name="TransformingQueryModelExpressionVisitor`1" DisplayName="TransformingQueryModelExpressionVisitor&lt;TVisitor&gt;" Kind="Class" />
      <Type Name="UnbufferedEntityShaper`1" DisplayName="UnbufferedEntityShaper&lt;TEntity&gt;" Kind="Class" />
      <Type Name="UnbufferedOffsetEntityShaper`1" DisplayName="UnbufferedOffsetEntityShaper&lt;TEntity&gt;" Kind="Class" />
      <Type Name="ValueBufferShaper" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Query.Internal">
      <Type Name="AnonymousObject" Kind="Structure" />
      <Type Name="AsyncGroupJoinInclude" Kind="Class" />
      <Type Name="AsyncGroupJoinInclude+AsyncGroupJoinIncludeContext" Kind="Class" />
      <Type Name="AsyncIncludeCollectionIterator" Kind="Class" />
      <Type Name="AsyncLinqOperatorProvider" Kind="Class" />
      <Type Name="AsyncQueryingEnumerable" Kind="Class" />
      <Type Name="AsyncQueryingEnumerable`1" DisplayName="AsyncQueryingEnumerable&lt;T&gt;" Kind="Class" />
      <Type Name="CompiledAsyncEnumerableQuery`2" DisplayName="CompiledAsyncEnumerableQuery&lt;TContext,TResult&gt;" Kind="Class" />
      <Type Name="CompiledAsyncTaskQuery`2" DisplayName="CompiledAsyncTaskQuery&lt;TContext,TResult&gt;" Kind="Class" />
      <Type Name="CompiledQuery`2" DisplayName="CompiledQuery&lt;TContext,TResult&gt;" Kind="Class" />
      <Type Name="CompiledQueryBase`2" DisplayName="CompiledQueryBase&lt;TContext,TResult&gt;" Kind="Class" />
      <Type Name="CompiledQueryCache" Kind="Class" />
      <Type Name="CorrelatedSubqueryMetadata" Kind="Class" />
      <Type Name="DefaultMethodInfoBasedNodeTypeRegistryFactory" Kind="Class" />
      <Type Name="DependentToPrincipalIncludeComparer`1" DisplayName="DependentToPrincipalIncludeComparer&lt;TKey&gt;" Kind="Class" />
      <Type Name="EntityQueryable`1" DisplayName="EntityQueryable&lt;TResult&gt;" Kind="Class" />
      <Type Name="EntityQueryProvider" Kind="Class" />
      <Type Name="EntityTrackingInfo" Kind="Class" />
      <Type Name="EntityTrackingInfo+IncludedEntity" Kind="Structure" />
      <Type Name="EntityTrackingInfoFactory" Kind="Class" />
      <Type Name="EvaluatableExpressionFilter" Kind="Class" />
      <Type Name="ExpressionEqualityComparer" Kind="Class" />
      <Type Name="ExpressionPrinter" Kind="Class" />
      <Type Name="ExpressionPrinter+ConstantPrinterBase" Kind="Class" />
      <Type Name="ExpressionPrinter+IConstantPrinter" Kind="Interface" />
      <Type Name="Grouping`2" DisplayName="Grouping&lt;TKey,TElement&gt;" Kind="Class" />
      <Type Name="GroupJoinInclude" Kind="Class" />
      <Type Name="GroupJoinInclude+GroupJoinIncludeContext" Kind="Class" />
      <Type Name="GroupJoinIncludeBase" Kind="Class" />
      <Type Name="IAsyncEnumerableAccessor`1" DisplayName="IAsyncEnumerableAccessor&lt;T&gt;" Kind="Interface" />
      <Type Name="IAsyncQueryProvider" Kind="Interface" />
      <Type Name="IAsyncRelatedEntitiesLoader" Kind="Interface" />
      <Type Name="IBufferable" Kind="Interface" />
      <Type Name="ICompiledQueryCache" Kind="Interface" />
      <Type Name="IDetachableContext" Kind="Interface" />
      <Type Name="IEntityTrackingInfoFactory" Kind="Interface" />
      <Type Name="IExpressionPrinter" Kind="Interface" />
      <Type Name="IIncludeKeyComparer" Kind="Interface" />
      <Type Name="ILinqOperatorProvider" Kind="Interface" />
      <Type Name="IMaterializerFactory" Kind="Interface" />
      <Type Name="IncludeCollectionIterator" Kind="Class" />
      <Type Name="IncludeCompiler" Kind="Class" />
      <Type Name="InMemoryQueryContext" Kind="Class" />
      <Type Name="InMemoryQueryContextFactory" Kind="Class" />
      <Type Name="InMemoryQueryModelVisitor" Kind="Class" />
      <Type Name="InMemoryQueryModelVisitorFactory" Kind="Class" />
      <Type Name="INodeTypeProviderFactory" Kind="Interface" />
      <Type Name="IParameterValues" Kind="Interface" />
      <Type Name="IQueryAnnotationExtractor" Kind="Interface" />
      <Type Name="IQueryBuffer" Kind="Interface" />
      <Type Name="IQueryCompiler" Kind="Interface" />
      <Type Name="IQueryModelGenerator" Kind="Interface" />
      <Type Name="IQueryModelPrinter" Kind="Interface" />
      <Type Name="IQueryOptimizer" Kind="Interface" />
      <Type Name="IRelatedEntitiesLoader" Kind="Interface" />
      <Type Name="IShaperCommandContextFactory" Kind="Interface" />
      <Type Name="IValueBufferCursor" Kind="Interface" />
      <Type Name="IWeakReferenceIdentityMap" Kind="Interface" />
      <Type Name="LinqOperatorProvider" Kind="Class" />
      <Type Name="MaterializedAnonymousObject" Kind="Structure" />
      <Type Name="MaterializerFactory" Kind="Class" />
      <Type Name="MethodInfoBasedNodeTypeRegistryFactory" Kind="Class" />
      <Type Name="NullAsyncQueryProvider" Kind="Class" />
      <Type Name="NullIncludeComparer" Kind="Class" />
      <Type Name="PrincipalToDependentIncludeComparer`1" DisplayName="PrincipalToDependentIncludeComparer&lt;TKey&gt;" Kind="Class" />
      <Type Name="QueryAnnotationExtractor" Kind="Class" />
      <Type Name="QueryBuffer" Kind="Class" />
      <Type Name="QueryCompilationContextDependencies" Kind="Class" />
      <Type Name="QueryCompilationContextFactory" Kind="Class" />
      <Type Name="QueryCompiler" Kind="Class" />
      <Type Name="QueryingEnumerable" Kind="Class" />
      <Type Name="QueryingEnumerable`1" DisplayName="QueryingEnumerable&lt;T&gt;" Kind="Class" />
      <Type Name="QueryModelExtensions" Kind="Class" />
      <Type Name="QueryModelGenerator" Kind="Class" />
      <Type Name="QueryModelPrinter" Kind="Class" />
      <Type Name="QueryOptimizer" Kind="Class" />
      <Type Name="QuerySourceExtensions" Kind="Class" />
      <Type Name="RelationalCompiledQueryCacheKeyGenerator" Kind="Class" />
      <Type Name="RelationalCompiledQueryCacheKeyGenerator+RelationalCompiledQueryCacheKey" Kind="Structure" />
      <Type Name="RelationalEvaluatableExpressionFilter" Kind="Class" />
      <Type Name="RelationalExpressionPrinter" Kind="Class" />
      <Type Name="RelationalQueryContextFactory" Kind="Class" />
      <Type Name="RelationalResultOperatorHandler" Kind="Class" />
      <Type Name="ShaperCommandContext" Kind="Class" />
      <Type Name="ShaperCommandContextFactory" Kind="Class" />
      <Type Name="SqlServerCompiledQueryCacheKeyGenerator" Kind="Class" />
      <Type Name="SqlServerQueryCompilationContext" Kind="Class" />
      <Type Name="SqlServerQueryCompilationContextFactory" Kind="Class" />
      <Type Name="SqlServerQueryModelVisitor" Kind="Class" />
      <Type Name="SqlServerQueryModelVisitorFactory" Kind="Class" />
      <Type Name="TaskResultAsyncEnumerable`1" DisplayName="TaskResultAsyncEnumerable&lt;T&gt;" Kind="Class" />
      <Type Name="WeakReferenceIdentityMap`1" DisplayName="WeakReferenceIdentityMap&lt;TKey&gt;" Kind="Class" />
      <Type Name="WeakReferenceIdentityMapFactoryFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Query.ResultOperators">
      <Type Name="ICloneableQueryAnnotation" Kind="Interface" />
      <Type Name="IQueryAnnotation" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal">
      <Type Name="FromSqlExpressionNode" Kind="Class" />
      <Type Name="FromSqlResultOperator" Kind="Class" />
      <Type Name="IgnoreQueryFiltersExpressionNode" Kind="Class" />
      <Type Name="IgnoreQueryFiltersResultOperator" Kind="Class" />
      <Type Name="IncludeExpressionNode" Kind="Class" />
      <Type Name="IncludeExpressionNodeBase" Kind="Class" />
      <Type Name="IncludeResultOperator" Kind="Class" />
      <Type Name="StringIncludeExpressionNode" Kind="Class" />
      <Type Name="ThenIncludeExpressionNode" Kind="Class" />
      <Type Name="TrackingExpressionNode" Kind="Class" />
      <Type Name="TrackingResultOperator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Query.Sql">
      <Type Name="DefaultQuerySqlGenerator" Kind="Class" />
      <Type Name="IQuerySqlGenerator" Kind="Interface" />
      <Type Name="IQuerySqlGeneratorFactory" Kind="Interface" />
      <Type Name="ISqlExpressionVisitor" Kind="Interface" />
      <Type Name="QuerySqlGeneratorDependencies" Kind="Class" />
      <Type Name="QuerySqlGeneratorFactoryBase" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Query.Sql.Internal">
      <Type Name="FromSqlNonComposedQuerySqlGenerator" Kind="Class" />
      <Type Name="ISqlServerExpressionVisitor" Kind="Interface" />
      <Type Name="SqliteQuerySqlGenerator" Kind="Class" />
      <Type Name="SqliteQuerySqlGeneratorFactory" Kind="Class" />
      <Type Name="SqlServerQuerySqlGenerator" Kind="Class" />
      <Type Name="SqlServerQuerySqlGeneratorFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Relational.Design.Specification.Tests">
      <Type Name="DesignTimeProviderServicesTest" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Relational.Design.Specification.Tests.ReverseEngineering">
      <Type Name="E2ETestBase" Kind="Class" />
      <Type Name="FileSet" Kind="Class" />
      <Type Name="InMemoryCommandLogger" Kind="Class" />
      <Type Name="InMemoryFileService" Kind="Class" />
      <Type Name="InMemoryOperationReporter" Kind="Class" />
      <Type Name="LoggerMessages" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Relational.Design.Specification.Tests.TestUtilities">
      <Type Name="BuildFileResult" Kind="Class" />
      <Type Name="BuildReference" Kind="Class" />
      <Type Name="BuildSource" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.ReverseEngineering">
      <Type Name="E2ETestBase" Kind="Class" />
      <Type Name="FileSet" Kind="Class" />
      <Type Name="InMemoryFileService" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Scaffolding">
      <Type Name="IDatabaseModelFactory" Kind="Interface" />
      <Type Name="IModelCodeGenerator" Kind="Interface" />
      <Type Name="IModelCodeGeneratorSelector" Kind="Interface" />
      <Type Name="IProviderConfigurationCodeGenerator" Kind="Interface" />
      <Type Name="IReverseEngineerScaffolder" Kind="Interface" />
      <Type Name="IScaffoldingModelFactory" Kind="Interface" />
      <Type Name="IScaffoldingProviderCodeGenerator" Kind="Interface" />
      <Type Name="ModelCodeGenerationOptions" Kind="Class" />
      <Type Name="ModelCodeGenerator" Kind="Class" />
      <Type Name="ModelCodeGeneratorDependencies" Kind="Class" />
      <Type Name="ModelReverseEngineerOptions" Kind="Class" />
      <Type Name="ProviderCodeGenerator" Kind="Class" />
      <Type Name="ProviderCodeGeneratorDependencies" Kind="Class" />
      <Type Name="RelationalScaffoldingModelFactory" Kind="Class" />
      <Type Name="SavedModelFiles" Kind="Class" />
      <Type Name="ScaffoldedFile" Kind="Class" />
      <Type Name="ScaffoldedModel" Kind="Class" />
      <Type Name="ScaffoldingTypeMapper" Kind="Class" />
      <Type Name="TableSelectionSet" Kind="Class" />
      <Type Name="TableSelectionSet+Selection" Kind="Class" />
      <Type Name="TypeScaffoldingInfo" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal">
      <Type Name="AttributeConfiguration" Kind="Class" />
      <Type Name="CustomConfiguration" Kind="Class" />
      <Type Name="EntityConfiguration" Kind="Class" />
      <Type Name="FluentApiConfiguration" Kind="Class" />
      <Type Name="IAttributeConfiguration" Kind="Interface" />
      <Type Name="IFluentApiConfiguration" Kind="Interface" />
      <Type Name="IndexConfiguration" Kind="Class" />
      <Type Name="KeyFluentApiConfiguration" Kind="Class" />
      <Type Name="ModelConfiguration" Kind="Class" />
      <Type Name="NavigationPropertyConfiguration" Kind="Class" />
      <Type Name="NavigationPropertyInitializerConfiguration" Kind="Class" />
      <Type Name="OptionsBuilderConfiguration" Kind="Class" />
      <Type Name="PropertyConfiguration" Kind="Class" />
      <Type Name="RelationshipConfiguration" Kind="Class" />
      <Type Name="SequenceConfiguration" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Scaffolding.Internal">
      <Type Name="CandidateNamingService" Kind="Class" />
      <Type Name="CodeWriter" Kind="Class" />
      <Type Name="ConfigurationFactory" Kind="Class" />
      <Type Name="CSharpDbContextGenerator" Kind="Class" />
      <Type Name="CSharpEntityTypeGenerator" Kind="Class" />
      <Type Name="CSharpModelGenerator" Kind="Class" />
      <Type Name="CSharpNamer`1" DisplayName="CSharpNamer&lt;T&gt;" Kind="Class" />
      <Type Name="CSharpScaffoldingGenerator" Kind="Class" />
      <Type Name="CSharpUniqueNamer`1" DisplayName="CSharpUniqueNamer&lt;T&gt;" Kind="Class" />
      <Type Name="CSharpUtilities" Kind="Class" />
      <Type Name="DbContextWriter" Kind="Class" />
      <Type Name="DbDataReaderExtension" Kind="Class" />
      <Type Name="EntityTypeWriter" Kind="Class" />
      <Type Name="FileSystemFileService" Kind="Class" />
      <Type Name="ICandidateNamingService" Kind="Interface" />
      <Type Name="ICSharpDbContextGenerator" Kind="Interface" />
      <Type Name="ICSharpEntityTypeGenerator" Kind="Interface" />
      <Type Name="ICSharpUtilities" Kind="Interface" />
      <Type Name="IFileService" Kind="Interface" />
      <Type Name="IInternalDatabaseModelFactory" Kind="Interface" />
      <Type Name="IModelScaffolder" Kind="Interface" />
      <Type Name="IScaffoldingCodeGenerator" Kind="Interface" />
      <Type Name="IScaffoldingModelFactory" Kind="Interface" />
      <Type Name="IScaffoldingTypeMapper" Kind="Interface" />
      <Type Name="ModelCodeGeneratorSelector" Kind="Class" />
      <Type Name="ModelScaffolder" Kind="Class" />
      <Type Name="RelationalScaffoldingModelFactory" Kind="Class" />
      <Type Name="ReverseEngineerFiles" Kind="Class" />
      <Type Name="ReverseEngineeringConfiguration" Kind="Class" />
      <Type Name="ReverseEngineeringGenerator" Kind="Class" />
      <Type Name="ReverseEngineerScaffolder" Kind="Class" />
      <Type Name="ScaffoldingCodeGenerator" Kind="Class" />
      <Type Name="ScaffoldingServiceCollectionExtensions" Kind="Class" />
      <Type Name="ScaffoldingTypeMapper" Kind="Class" />
      <Type Name="ScaffoldingUtilities" Kind="Class" />
      <Type Name="SqlDataReaderExtension" Kind="Class" />
      <Type Name="SqliteDatabaseModelFactory" Kind="Class" />
      <Type Name="SqliteDesignTimeServices" Kind="Class" />
      <Type Name="SqliteScaffoldingCodeGenerator" Kind="Class" />
      <Type Name="SqliteScaffoldingModelFactory" Kind="Class" />
      <Type Name="SqliteTableSelectionSetExtensions" Kind="Class" />
      <Type Name="SqlServerDatabaseModelFactory" Kind="Class" />
      <Type Name="SqlServerDesignTimeServices" Kind="Class" />
      <Type Name="SqlServerScaffoldingCodeGenerator" Kind="Class" />
      <Type Name="SqlServerScaffoldingModelFactory" Kind="Class" />
      <Type Name="StringBuilderCodeWriter" Kind="Class" />
      <Type Name="TableSelectionSet" Kind="Class" />
      <Type Name="TableSelectionSet+Selection" Kind="Class" />
      <Type Name="TypeScaffoldingInfo" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Scaffolding.Metadata">
      <Type Name="ColumnModel" Kind="Class" />
      <Type Name="DatabaseColumn" Kind="Class" />
      <Type Name="DatabaseColumnExtensions" Kind="Class" />
      <Type Name="DatabaseForeignKey" Kind="Class" />
      <Type Name="DatabaseIndex" Kind="Class" />
      <Type Name="DatabaseModel" Kind="Class" />
      <Type Name="DatabasePrimaryKey" Kind="Class" />
      <Type Name="DatabaseSequence" Kind="Class" />
      <Type Name="DatabaseTable" Kind="Class" />
      <Type Name="DatabaseUniqueConstraint" Kind="Class" />
      <Type Name="ForeignKeyColumnModel" Kind="Class" />
      <Type Name="ForeignKeyModel" Kind="Class" />
      <Type Name="IndexColumnModel" Kind="Class" />
      <Type Name="IndexModel" Kind="Class" />
      <Type Name="ScaffoldingModelAnnotations" Kind="Class" />
      <Type Name="ScaffoldingPropertyAnnotations" Kind="Class" />
      <Type Name="SequenceModel" Kind="Class" />
      <Type Name="TableModel" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal">
      <Type Name="DatabaseColumnExtensions" Kind="Class" />
      <Type Name="DatabaseForeignKeyExtensions" Kind="Class" />
      <Type Name="DatabaseTableExtensions" Kind="Class" />
      <Type Name="ScaffoldingAnnotationNames" Kind="Class" />
      <Type Name="ScaffoldingFullAnnotationNames" Kind="Class" />
      <Type Name="SqlServerColumnModelAnnotations" Kind="Class" />
      <Type Name="SqlServerDatabaseModelAnnotationNames" Kind="Class" />
      <Type Name="SqlServerDatabaseModelAnnotations" Kind="Class" />
      <Type Name="SqlServerDatabaseModelExtensions" Kind="Class" />
      <Type Name="SqlServerIndexModelAnnotations" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Sqlite.Design.Internal">
      <Type Name="SqliteDesignTimeServices" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal">
      <Type Name="SqliteOptionsExtension" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Sqlite.Internal">
      <Type Name="SqliteStrings" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal">
      <Type Name="SqliteAnnotationNames" Kind="Class" />
      <Type Name="SqliteInternalMetadataBuilderExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Sqlite.Migrations.Internal">
      <Type Name="SqliteHistoryRepository" Kind="Class" />
      <Type Name="SqliteMigrationsAnnotationProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Sqlite.Query.ExpressionTranslators.Internal">
      <Type Name="SqliteCompositeMemberTranslator" Kind="Class" />
      <Type Name="SqliteCompositeMethodCallTranslator" Kind="Class" />
      <Type Name="SqliteContainsOptimizedTranslator" Kind="Class" />
      <Type Name="SqliteDateAddTranslator" Kind="Class" />
      <Type Name="SqliteDateTimeMemberTranslator" Kind="Class" />
      <Type Name="SqliteEndsWithOptimizedTranslator" Kind="Class" />
      <Type Name="SqliteMathTranslator" Kind="Class" />
      <Type Name="SqliteStartsWithOptimizedTranslator" Kind="Class" />
      <Type Name="SqliteStringIndexOfTranslator" Kind="Class" />
      <Type Name="SqliteStringIsNullOrWhiteSpaceTranslator" Kind="Class" />
      <Type Name="SqliteStringLengthTranslator" Kind="Class" />
      <Type Name="SqliteStringReplaceTranslator" Kind="Class" />
      <Type Name="SqliteStringSubstringTranslator" Kind="Class" />
      <Type Name="SqliteStringToLowerTranslator" Kind="Class" />
      <Type Name="SqliteStringToUpperTranslator" Kind="Class" />
      <Type Name="SqliteStringTrimEndTranslator" Kind="Class" />
      <Type Name="SqliteStringTrimStartTranslator" Kind="Class" />
      <Type Name="SqliteStringTrimTranslator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Sqlite.Query.ExpressionVisitors.Internal">
      <Type Name="SqliteSqlTranslatingExpressionVisitor" Kind="Class" />
      <Type Name="SqliteSqlTranslatingExpressionVisitorFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Sqlite.Query.Sql.Internal">
      <Type Name="SqliteQuerySqlGenerator" Kind="Class" />
      <Type Name="SqliteQuerySqlGeneratorFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Sqlite.Scaffolding.Internal">
      <Type Name="SqliteCodeGenerator" Kind="Class" />
      <Type Name="SqliteDatabaseModelFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal">
      <Type Name="ISqliteRelationalConnection" Kind="Interface" />
      <Type Name="SqliteCharTypeMapping" Kind="Class" />
      <Type Name="SqliteDatabaseCreator" Kind="Class" />
      <Type Name="SqliteDateTimeOffsetTypeMapping" Kind="Class" />
      <Type Name="SqliteDateTimeTypeMapping" Kind="Class" />
      <Type Name="SqliteDecimalTypeMapping" Kind="Class" />
      <Type Name="SqliteGuidTypeMapping" Kind="Class" />
      <Type Name="SqliteRelationalConnection" Kind="Class" />
      <Type Name="SqliteSqlGenerationHelper" Kind="Class" />
      <Type Name="SqliteTypeMappingSource" Kind="Class" />
      <Type Name="SqliteULongTypeMapping" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Sqlite.Update.Internal">
      <Type Name="SqliteModificationCommandBatchFactory" Kind="Class" />
      <Type Name="SqliteUpdateSqlGenerator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.Design.Internal">
      <Type Name="SqlServerAnnotationCodeGenerator" Kind="Class" />
      <Type Name="SqlServerDesignTimeServices" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal">
      <Type Name="ISqlServerOptions" Kind="Interface" />
      <Type Name="SqlServerOptionsExtension" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.Internal">
      <Type Name="SqlServerStrings" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.Metadata.Conventions.Internal">
      <Type Name="SqlServerDbFunctionConvention" Kind="Class" />
      <Type Name="SqlServerIndexConvention" Kind="Class" />
      <Type Name="SqlServerMemoryOptimizedTablesConvention" Kind="Class" />
      <Type Name="SqlServerValueGenerationStrategyConvention" Kind="Class" />
      <Type Name="SqlServerValueGeneratorConvention" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal">
      <Type Name="SqlServerAnnotationNames" Kind="Class" />
      <Type Name="SqlServerEntityTypeBuilderAnnotations" Kind="Class" />
      <Type Name="SqlServerIndexBuilderAnnotations" Kind="Class" />
      <Type Name="SqlServerInternalMetadataBuilderExtensions" Kind="Class" />
      <Type Name="SqlServerKeyBuilderAnnotations" Kind="Class" />
      <Type Name="SqlServerModelBuilderAnnotations" Kind="Class" />
      <Type Name="SqlServerPropertyBuilderAnnotations" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal">
      <Type Name="SqlServerHistoryRepository" Kind="Class" />
      <Type Name="SqlServerMigrationsAnnotationProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.Query.Expressions.Internal">
      <Type Name="RowNumberExpression" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.Query.ExpressionTranslators.Internal">
      <Type Name="SqlServerCompositeMemberTranslator" Kind="Class" />
      <Type Name="SqlServerCompositeMethodCallTranslator" Kind="Class" />
      <Type Name="SqlServerContainsOptimizedTranslator" Kind="Class" />
      <Type Name="SqlServerConvertTranslator" Kind="Class" />
      <Type Name="SqlServerDateAddTranslator" Kind="Class" />
      <Type Name="SqlServerDateDiffTranslator" Kind="Class" />
      <Type Name="SqlServerDateTimeMemberTranslator" Kind="Class" />
      <Type Name="SqlServerEndsWithOptimizedTranslator" Kind="Class" />
      <Type Name="SqlServerFreeTextMethodCallTranslator" Kind="Class" />
      <Type Name="SqlServerMathTranslator" Kind="Class" />
      <Type Name="SqlServerNewGuidTranslator" Kind="Class" />
      <Type Name="SqlServerObjectToStringTranslator" Kind="Class" />
      <Type Name="SqlServerStartsWithOptimizedTranslator" Kind="Class" />
      <Type Name="SqlServerStringIndexOfTranslator" Kind="Class" />
      <Type Name="SqlServerStringIsNullOrWhiteSpaceTranslator" Kind="Class" />
      <Type Name="SqlServerStringLengthTranslator" Kind="Class" />
      <Type Name="SqlServerStringReplaceTranslator" Kind="Class" />
      <Type Name="SqlServerStringSubstringTranslator" Kind="Class" />
      <Type Name="SqlServerStringToLowerTranslator" Kind="Class" />
      <Type Name="SqlServerStringToUpperTranslator" Kind="Class" />
      <Type Name="SqlServerStringTrimEndTranslator" Kind="Class" />
      <Type Name="SqlServerStringTrimStartTranslator" Kind="Class" />
      <Type Name="SqlServerStringTrimTranslator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.Query.ExpressionVisitors.Internal">
      <Type Name="SqlServerSqlTranslatingExpressionVisitor" Kind="Class" />
      <Type Name="SqlServerSqlTranslatingExpressionVisitorFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.Query.Internal">
      <Type Name="SqlServerCompiledQueryCacheKeyGenerator" Kind="Class" />
      <Type Name="SqlServerQueryCompilationContext" Kind="Class" />
      <Type Name="SqlServerQueryCompilationContextFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.Query.Sql.Internal">
      <Type Name="ISqlServerExpressionVisitor" Kind="Interface" />
      <Type Name="SqlServerQuerySqlGenerator" Kind="Class" />
      <Type Name="SqlServerQuerySqlGeneratorFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal">
      <Type Name="SqlDataReaderExtension" Kind="Class" />
      <Type Name="SqlServerCodeGenerator" Kind="Class" />
      <Type Name="SqlServerDatabaseModelFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal">
      <Type Name="ISqlServerConnection" Kind="Interface" />
      <Type Name="SqlServerByteArrayTypeMapping" Kind="Class" />
      <Type Name="SqlServerByteTypeMapping" Kind="Class" />
      <Type Name="SqlServerConnection" Kind="Class" />
      <Type Name="SqlServerDatabaseCreator" Kind="Class" />
      <Type Name="SqlServerDateTimeOffsetTypeMapping" Kind="Class" />
      <Type Name="SqlServerDateTimeTypeMapping" Kind="Class" />
      <Type Name="SqlServerDecimalTypeMapping" Kind="Class" />
      <Type Name="SqlServerDoubleTypeMapping" Kind="Class" />
      <Type Name="SqlServerExecutionStrategy" Kind="Class" />
      <Type Name="SqlServerExecutionStrategyFactory" Kind="Class" />
      <Type Name="SqlServerFloatTypeMapping" Kind="Class" />
      <Type Name="SqlServerLongTypeMapping" Kind="Class" />
      <Type Name="SqlServerShortTypeMapping" Kind="Class" />
      <Type Name="SqlServerSqlGenerationHelper" Kind="Class" />
      <Type Name="SqlServerSqlVariantTypeMapping" Kind="Class" />
      <Type Name="SqlServerStringTypeMapping" Kind="Class" />
      <Type Name="SqlServerTimeSpanTypeMapping" Kind="Class" />
      <Type Name="SqlServerTransientExceptionDetector" Kind="Class" />
      <Type Name="SqlServerTypeMappingSource" Kind="Class" />
      <Type Name="SqlServerUdtTypeMapping" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.Update.Internal">
      <Type Name="ISqlServerUpdateSqlGenerator" Kind="Interface" />
      <Type Name="SqlServerModificationCommandBatch" Kind="Class" />
      <Type Name="SqlServerModificationCommandBatchFactory" Kind="Class" />
      <Type Name="SqlServerUpdateSqlGenerator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal">
      <Type Name="ISqlServerSequenceValueGeneratorFactory" Kind="Interface" />
      <Type Name="ISqlServerValueGeneratorCache" Kind="Interface" />
      <Type Name="SqlServerSequenceHiLoValueGenerator`1" DisplayName="SqlServerSequenceHiLoValueGenerator&lt;TValue&gt;" Kind="Class" />
      <Type Name="SqlServerSequenceValueGeneratorFactory" Kind="Class" />
      <Type Name="SqlServerSequenceValueGeneratorState" Kind="Class" />
      <Type Name="SqlServerValueGeneratorCache" Kind="Class" />
      <Type Name="SqlServerValueGeneratorSelector" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Storage">
      <Type Name="BoolTypeMapping" Kind="Class" />
      <Type Name="ByteArrayRelationalTypeMapper" Kind="Class" />
      <Type Name="ByteArrayTypeMapping" Kind="Class" />
      <Type Name="ByteTypeMapping" Kind="Class" />
      <Type Name="CharTypeMapping" Kind="Class" />
      <Type Name="CoreTypeMapper" Kind="Class" />
      <Type Name="CoreTypeMapperDependencies" Kind="Class" />
      <Type Name="CoreTypeMapping" Kind="Class" />
      <Type Name="CoreTypeMapping+CoreTypeMappingParameters" Kind="Structure" />
      <Type Name="Database" Kind="Class" />
      <Type Name="DatabaseDependencies" Kind="Class" />
      <Type Name="DatabaseErrorLogState" Kind="Class" />
      <Type Name="DatabaseProvider`1" DisplayName="DatabaseProvider&lt;TOptionsExtension&gt;" Kind="Class" />
      <Type Name="DatabaseProvider`2" DisplayName="DatabaseProvider&lt;TProviderServices,TOptionsExtension&gt;" Kind="Class" />
      <Type Name="DatabaseProviderDependencies" Kind="Class" />
      <Type Name="DatabaseProviderServices" Kind="Class" />
      <Type Name="DateTimeOffsetTypeMapping" Kind="Class" />
      <Type Name="DateTimeTypeMapping" Kind="Class" />
      <Type Name="DbCommandLogData" Kind="Class" />
      <Type Name="DbContextTransactionExtensions" Kind="Class" />
      <Type Name="DbParameterLogData" Kind="Class" />
      <Type Name="DecimalTypeMapping" Kind="Class" />
      <Type Name="DoubleTypeMapping" Kind="Class" />
      <Type Name="ExecutionResult`1" DisplayName="ExecutionResult&lt;TResult&gt;" Kind="Class" />
      <Type Name="ExecutionStrategy" Kind="Class" />
      <Type Name="ExecutionStrategyContext" Kind="Class" />
      <Type Name="ExecutionStrategyDependencies" Kind="Class" />
      <Type Name="FloatTypeMapping" Kind="Class" />
      <Type Name="GuidTypeMapping" Kind="Class" />
      <Type Name="IByteArrayRelationalTypeMapper" Kind="Interface" />
      <Type Name="IDatabase" Kind="Interface" />
      <Type Name="IDatabaseCreator" Kind="Interface" />
      <Type Name="IDatabaseProvider" Kind="Interface" />
      <Type Name="IDatabaseProviderServices" Kind="Interface" />
      <Type Name="IDbContextTransaction" Kind="Interface" />
      <Type Name="IDbContextTransactionManager" Kind="Interface" />
      <Type Name="IExecutionStrategy" Kind="Interface" />
      <Type Name="IExecutionStrategyFactory" Kind="Interface" />
      <Type Name="InMemoryDatabaseRoot" Kind="Class" />
      <Type Name="IntTypeMapping" Kind="Class" />
      <Type Name="IParameterNameGeneratorFactory" Kind="Interface" />
      <Type Name="IRawSqlCommandBuilder" Kind="Interface" />
      <Type Name="IRelationalCommand" Kind="Interface" />
      <Type Name="IRelationalCommandBuilder" Kind="Interface" />
      <Type Name="IRelationalCommandBuilderFactory" Kind="Interface" />
      <Type Name="IRelationalConnection" Kind="Interface" />
      <Type Name="IRelationalDatabaseCreator" Kind="Interface" />
      <Type Name="IRelationalDatabaseProviderServices" Kind="Interface" />
      <Type Name="IRelationalParameter" Kind="Interface" />
      <Type Name="IRelationalParameterBuilder" Kind="Interface" />
      <Type Name="IRelationalTransactionFactory" Kind="Interface" />
      <Type Name="IRelationalTransactionManager" Kind="Interface" />
      <Type Name="IRelationalTypeMapper" Kind="Interface" />
      <Type Name="IRelationalTypeMappingSource" Kind="Interface" />
      <Type Name="IRelationalValueBufferFactory" Kind="Interface" />
      <Type Name="IRelationalValueBufferFactoryFactory" Kind="Interface" />
      <Type Name="ISqlGenerationHelper" Kind="Interface" />
      <Type Name="IStringRelationalTypeMapper" Kind="Interface" />
      <Type Name="ITransactionEnlistmentManager" Kind="Interface" />
      <Type Name="ITypeMapper" Kind="Interface" />
      <Type Name="ITypeMappingSource" Kind="Interface" />
      <Type Name="LongTypeMapping" Kind="Class" />
      <Type Name="MaterializationContext" Kind="Structure" />
      <Type Name="ParameterNameGenerator" Kind="Class" />
      <Type Name="ParameterNameGeneratorDependencies" Kind="Class" />
      <Type Name="ParameterNameGeneratorFactory" Kind="Class" />
      <Type Name="RawSqlCommand" Kind="Class" />
      <Type Name="RelationalCommandBuilderExtensions" Kind="Class" />
      <Type Name="RelationalCommandExtensions" Kind="Class" />
      <Type Name="RelationalConnection" Kind="Class" />
      <Type Name="RelationalConnectionDependencies" Kind="Class" />
      <Type Name="RelationalDatabase" Kind="Class" />
      <Type Name="RelationalDatabaseCreator" Kind="Class" />
      <Type Name="RelationalDatabaseCreatorDependencies" Kind="Class" />
      <Type Name="RelationalDatabaseDependencies" Kind="Class" />
      <Type Name="RelationalDatabaseProviderServices" Kind="Class" />
      <Type Name="RelationalDataReader" Kind="Class" />
      <Type Name="RelationalExecutionStrategyExtensions" Kind="Class" />
      <Type Name="RelationalExecutionStrategyFactory" Kind="Class" />
      <Type Name="RelationalSqlGenerationHelper" Kind="Class" />
      <Type Name="RelationalSqlGenerationHelperDependencies" Kind="Class" />
      <Type Name="RelationalTransaction" Kind="Class" />
      <Type Name="RelationalTransactionFactory" Kind="Class" />
      <Type Name="RelationalTransactionFactoryDependencies" Kind="Class" />
      <Type Name="RelationalTypeMapper" Kind="Class" />
      <Type Name="RelationalTypeMapperDependencies" Kind="Class" />
      <Type Name="RelationalTypeMapperExtensions" Kind="Class" />
      <Type Name="RelationalTypeMapping" Kind="Class" />
      <Type Name="RelationalTypeMapping+RelationalTypeMappingParameters" Kind="Structure" />
      <Type Name="RelationalTypeMappingInfo" Kind="Structure" />
      <Type Name="RelationalTypeMappingSource" Kind="Class" />
      <Type Name="RelationalTypeMappingSourceDependencies" Kind="Class" />
      <Type Name="RelationalTypeMappingSourceExtensions" Kind="Class" />
      <Type Name="RelationalValueBufferFactoryDependencies" Kind="Class" />
      <Type Name="RetryLimitExceededException" Kind="Class" />
      <Type Name="SByteTypeMapping" Kind="Class" />
      <Type Name="ShortTypeMapping" Kind="Class" />
      <Type Name="StoreTypePostfix" Kind="Enumeration" />
      <Type Name="StringRelationalTypeMapper" Kind="Class" />
      <Type Name="StringTypeMapping" Kind="Class" />
      <Type Name="TimeSpanTypeMapping" Kind="Class" />
      <Type Name="TypedRelationalValueBufferFactoryFactory" Kind="Class" />
      <Type Name="TypeMappingInfo" Kind="Structure" />
      <Type Name="TypeMappingSource" Kind="Class" />
      <Type Name="TypeMappingSourceBase" Kind="Class" />
      <Type Name="TypeMappingSourceDependencies" Kind="Class" />
      <Type Name="TypeMaterializationInfo" Kind="Class" />
      <Type Name="UIntTypeMapping" Kind="Class" />
      <Type Name="ULongTypeMapping" Kind="Class" />
      <Type Name="UntypedRelationalValueBufferFactoryFactory" Kind="Class" />
      <Type Name="UShortTypeMapping" Kind="Class" />
      <Type Name="ValueBuffer" Kind="Structure" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Storage.Internal">
      <Type Name="CompositeRelationalParameter" Kind="Class" />
      <Type Name="DbParameterCollectionExtensions" Kind="Class" />
      <Type Name="DbParameterLogDataExtensions" Kind="Class" />
      <Type Name="DynamicRelationalParameter" Kind="Class" />
      <Type Name="ExecutionStrategyFactory" Kind="Class" />
      <Type Name="FallbackRelationalTypeMappingSource" Kind="Class" />
      <Type Name="FallbackTypeMappingSource" Kind="Class" />
      <Type Name="IInMemoryDatabase" Kind="Interface" />
      <Type Name="IInMemoryStore" Kind="Interface" />
      <Type Name="IInMemoryStoreCache" Kind="Interface" />
      <Type Name="IInMemoryStoreSource" Kind="Interface" />
      <Type Name="IInMemoryTable" Kind="Interface" />
      <Type Name="IInMemoryTableFactory" Kind="Interface" />
      <Type Name="INamedConnectionStringResolver" Kind="Interface" />
      <Type Name="InMemoryDatabase" Kind="Class" />
      <Type Name="InMemoryDatabaseCreator" Kind="Class" />
      <Type Name="InMemoryDatabaseProviderServices" Kind="Class" />
      <Type Name="InMemoryStore" Kind="Class" />
      <Type Name="InMemoryStoreCache" Kind="Class" />
      <Type Name="InMemoryStoreCacheExtensions" Kind="Class" />
      <Type Name="InMemoryStoreSource" Kind="Class" />
      <Type Name="InMemoryStoreSourceExtensions" Kind="Class" />
      <Type Name="InMemoryTable`1" DisplayName="InMemoryTable&lt;TKey&gt;" Kind="Class" />
      <Type Name="InMemoryTableFactory" Kind="Class" />
      <Type Name="InMemoryTableSnapshot" Kind="Class" />
      <Type Name="InMemoryTransaction" Kind="Class" />
      <Type Name="InMemoryTransactionManager" Kind="Class" />
      <Type Name="ISqliteRelationalConnection" Kind="Interface" />
      <Type Name="ISqlServerConnection" Kind="Interface" />
      <Type Name="NamedConnectionStringResolver" Kind="Class" />
      <Type Name="NamedConnectionStringResolverBase" Kind="Class" />
      <Type Name="NoopExecutionStrategy" Kind="Class" />
      <Type Name="ObsoleteRelationalTypeMapper" Kind="Class" />
      <Type Name="RawRelationalParameter" Kind="Class" />
      <Type Name="RawSqlCommandBuilder" Kind="Class" />
      <Type Name="RelationalCommand" Kind="Class" />
      <Type Name="RelationalCommandBuilder" Kind="Class" />
      <Type Name="RelationalCommandBuilderFactory" Kind="Class" />
      <Type Name="RelationalExecutionStrategyFactory" Kind="Class" />
      <Type Name="RelationalLoggerExtensions" Kind="Class" />
      <Type Name="RelationalParameterBase" Kind="Class" />
      <Type Name="RelationalParameterBuilder" Kind="Class" />
      <Type Name="RemappingUntypedRelationalValueBufferFactory" Kind="Class" />
      <Type Name="SqliteDatabaseCreator" Kind="Class" />
      <Type Name="SqliteDatabaseProviderServices" Kind="Class" />
      <Type Name="SqliteDateTimeOffsetTypeMapping" Kind="Class" />
      <Type Name="SqliteDateTimeTypeMapping" Kind="Class" />
      <Type Name="SqliteGuidTypeMapping" Kind="Class" />
      <Type Name="SqliteRelationalConnection" Kind="Class" />
      <Type Name="SqliteSqlGenerationHelper" Kind="Class" />
      <Type Name="SqliteTypeMapper" Kind="Class" />
      <Type Name="SqlServerByteArrayTypeMapping" Kind="Class" />
      <Type Name="SqlServerConnection" Kind="Class" />
      <Type Name="SqlServerDatabaseCreator" Kind="Class" />
      <Type Name="SqlServerDatabaseProviderServices" Kind="Class" />
      <Type Name="SqlServerDateTimeOffsetTypeMapping" Kind="Class" />
      <Type Name="SqlServerDateTimeTypeMapping" Kind="Class" />
      <Type Name="SqlServerDoubleTypeMapping" Kind="Class" />
      <Type Name="SqlServerExecutionStrategy" Kind="Class" />
      <Type Name="SqlServerExecutionStrategyFactory" Kind="Class" />
      <Type Name="SqlServerExecutionStrategyFactoryContext" Kind="Class" />
      <Type Name="SqlServerFloatTypeMapping" Kind="Class" />
      <Type Name="SqlServerMaxLengthMapping" Kind="Class" />
      <Type Name="SqlServerSqlGenerationHelper" Kind="Class" />
      <Type Name="SqlServerStringTypeMapping" Kind="Class" />
      <Type Name="SqlServerTimeSpanTypeMapping" Kind="Class" />
      <Type Name="SqlServerTransientExceptionDetector" Kind="Class" />
      <Type Name="SqlServerTypeMapper" Kind="Class" />
      <Type Name="TypedRelationalValueBufferFactory" Kind="Class" />
      <Type Name="TypeMappedPropertyRelationalParameter" Kind="Class" />
      <Type Name="TypeMappedRelationalParameter" Kind="Class" />
      <Type Name="UntypedRelationalValueBufferFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Storage.ValueConversion">
      <Type Name="BoolToStringConverter" Kind="Class" />
      <Type Name="BoolToTwoValuesConverter`1" DisplayName="BoolToTwoValuesConverter&lt;TProvider&gt;" Kind="Class" />
      <Type Name="BoolToZeroOneConverter`1" DisplayName="BoolToZeroOneConverter&lt;TProvider&gt;" Kind="Class" />
      <Type Name="BytesToStringConverter" Kind="Class" />
      <Type Name="CastingConverter`2" DisplayName="CastingConverter&lt;TModel,TProvider&gt;" Kind="Class" />
      <Type Name="CharToStringConverter" Kind="Class" />
      <Type Name="ConverterMappingHints" Kind="Class" />
      <Type Name="DateTimeOffsetToBinaryConverter" Kind="Class" />
      <Type Name="DateTimeOffsetToBytesConverter" Kind="Class" />
      <Type Name="DateTimeOffsetToStringConverter" Kind="Class" />
      <Type Name="DateTimeToBinaryConverter" Kind="Class" />
      <Type Name="DateTimeToStringConverter" Kind="Class" />
      <Type Name="DateTimeToTicksConverter" Kind="Class" />
      <Type Name="EnumToNumberConverter`2" DisplayName="EnumToNumberConverter&lt;TEnum,TNumber&gt;" Kind="Class" />
      <Type Name="EnumToStringConverter`1" DisplayName="EnumToStringConverter&lt;TEnum&gt;" Kind="Class" />
      <Type Name="GuidToBytesConverter" Kind="Class" />
      <Type Name="GuidToStringConverter" Kind="Class" />
      <Type Name="IValueConverterSelector" Kind="Interface" />
      <Type Name="NumberToBytesConverter`1" DisplayName="NumberToBytesConverter&lt;TNumber&gt;" Kind="Class" />
      <Type Name="NumberToStringConverter`1" DisplayName="NumberToStringConverter&lt;TNumber&gt;" Kind="Class" />
      <Type Name="RelationalConverterMappingHints" Kind="Class" />
      <Type Name="StringToBytesConverter" Kind="Class" />
      <Type Name="TimeSpanToStringConverter" Kind="Class" />
      <Type Name="TimeSpanToTicksConverter" Kind="Class" />
      <Type Name="ValueConverter" Kind="Class" />
      <Type Name="ValueConverter`2" DisplayName="ValueConverter&lt;TModel,TProvider&gt;" Kind="Class" />
      <Type Name="ValueConverterInfo" Kind="Structure" />
      <Type Name="ValueConverterSelector" Kind="Class" />
      <Type Name="ValueConverterSelectorDependencies" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal">
      <Type Name="CompositeValueConverter`3" DisplayName="CompositeValueConverter&lt;TModel,TMiddle,TProvider&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.TestUtilities">
      <Type Name="BuildFileResult" Kind="Class" />
      <Type Name="BuildReference" Kind="Class" />
      <Type Name="BuildSource" Kind="Class" />
      <Type Name="DesignLogger`1" DisplayName="DesignLogger&lt;T&gt;" Kind="Class" />
      <Type Name="TestDesignLoggerFactory" Kind="Class" />
      <Type Name="TestDesignLoggerFactory+DesignLogger" Kind="Class" />
      <Type Name="TestOperationReporter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Update">
      <Type Name="AffectedCountModificationCommandBatch" Kind="Class" />
      <Type Name="ColumnModification" Kind="Class" />
      <Type Name="IBatchExecutor" Kind="Interface" />
      <Type Name="ICommandBatchPreparer" Kind="Interface" />
      <Type Name="IModificationCommandBatchFactory" Kind="Interface" />
      <Type Name="IUpdateEntry" Kind="Interface" />
      <Type Name="IUpdateSqlGenerator" Kind="Interface" />
      <Type Name="ModificationCommand" Kind="Class" />
      <Type Name="ModificationCommandBatch" Kind="Class" />
      <Type Name="ReaderModificationCommandBatch" Kind="Class" />
      <Type Name="ResultSetMapping" Kind="Enumeration" />
      <Type Name="SingularModificationCommandBatch" Kind="Class" />
      <Type Name="UpdateSqlGenerator" Kind="Class" />
      <Type Name="UpdateSqlGeneratorDependencies" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.Update.Internal">
      <Type Name="BatchExecutor" Kind="Class" />
      <Type Name="CommandBatchPreparer" Kind="Class" />
      <Type Name="CommandBatchPreparerDependencies" Kind="Class" />
      <Type Name="IKeyValueIndex" Kind="Interface" />
      <Type Name="IKeyValueIndexFactory" Kind="Interface" />
      <Type Name="IKeyValueIndexFactorySource" Kind="Interface" />
      <Type Name="ISingletonUpdateSqlGenerator" Kind="Interface" />
      <Type Name="ISqlServerUpdateSqlGenerator" Kind="Interface" />
      <Type Name="KeyValueIndex`1" DisplayName="KeyValueIndex&lt;TKey&gt;" Kind="Class" />
      <Type Name="KeyValueIndexFactory`1" DisplayName="KeyValueIndexFactory&lt;TKey&gt;" Kind="Class" />
      <Type Name="KeyValueIndexFactorySource" Kind="Class" />
      <Type Name="ModificationCommandComparer" Kind="Class" />
      <Type Name="ModificationCommandIdentityMap" Kind="Class" />
      <Type Name="SharedTableEntryMap`1" DisplayName="SharedTableEntryMap&lt;TValue&gt;" Kind="Class" />
      <Type Name="SharedTableEntryMapFactory`1" DisplayName="SharedTableEntryMapFactory&lt;TValue&gt;" Kind="Delegate" />
      <Type Name="SharedTableEntryValueFactory`1" DisplayName="SharedTableEntryValueFactory&lt;TValue&gt;" Kind="Delegate" />
      <Type Name="SqliteModificationCommandBatchFactory" Kind="Class" />
      <Type Name="SqliteUpdateSqlGenerator" Kind="Class" />
      <Type Name="SqlServerModificationCommandBatch" Kind="Class" />
      <Type Name="SqlServerModificationCommandBatchFactory" Kind="Class" />
      <Type Name="SqlServerUpdateSqlGenerator" Kind="Class" />
      <Type Name="UpdateEntryExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.ValueGeneration">
      <Type Name="GuidValueGenerator" Kind="Class" />
      <Type Name="HiLoValueGenerator`1" DisplayName="HiLoValueGenerator&lt;TValue&gt;" Kind="Class" />
      <Type Name="HiLoValueGeneratorState" Kind="Class" />
      <Type Name="IValueGeneratorCache" Kind="Interface" />
      <Type Name="IValueGeneratorSelector" Kind="Interface" />
      <Type Name="RelationalValueGeneratorSelector" Kind="Class" />
      <Type Name="SequentialGuidValueGenerator" Kind="Class" />
      <Type Name="TemporaryGuidValueGenerator" Kind="Class" />
      <Type Name="ValueGenerator" Kind="Class" />
      <Type Name="ValueGenerator`1" DisplayName="ValueGenerator&lt;TValue&gt;" Kind="Class" />
      <Type Name="ValueGeneratorCache" Kind="Class" />
      <Type Name="ValueGeneratorCacheDependencies" Kind="Class" />
      <Type Name="ValueGeneratorFactory" Kind="Class" />
      <Type Name="ValueGeneratorSelector" Kind="Class" />
      <Type Name="ValueGeneratorSelectorDependencies" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.EntityFrameworkCore.ValueGeneration.Internal">
      <Type Name="BinaryValueGenerator" Kind="Class" />
      <Type Name="DiscriminatorValueGenerator" Kind="Class" />
      <Type Name="InMemoryIntegerValueGenerator`1" DisplayName="InMemoryIntegerValueGenerator&lt;TValue&gt;" Kind="Class" />
      <Type Name="InMemoryIntegerValueGeneratorFactory" Kind="Class" />
      <Type Name="InMemoryValueGeneratorCache" Kind="Class" />
      <Type Name="InMemoryValueGeneratorSelector" Kind="Class" />
      <Type Name="ISqlServerSequenceValueGeneratorFactory" Kind="Interface" />
      <Type Name="ISqlServerValueGeneratorCache" Kind="Interface" />
      <Type Name="SqliteValueGeneratorCache" Kind="Class" />
      <Type Name="SqlServerSequenceHiLoValueGenerator`1" DisplayName="SqlServerSequenceHiLoValueGenerator&lt;TValue&gt;" Kind="Class" />
      <Type Name="SqlServerSequenceValueGeneratorFactory" Kind="Class" />
      <Type Name="SqlServerSequenceValueGeneratorState" Kind="Class" />
      <Type Name="SqlServerValueGeneratorCache" Kind="Class" />
      <Type Name="SqlServerValueGeneratorSelector" Kind="Class" />
      <Type Name="StringValueGenerator" Kind="Class" />
      <Type Name="TemporaryByteValueGenerator" Kind="Class" />
      <Type Name="TemporaryCharValueGenerator" Kind="Class" />
      <Type Name="TemporaryDateTimeOffsetValueGenerator" Kind="Class" />
      <Type Name="TemporaryDateTimeValueGenerator" Kind="Class" />
      <Type Name="TemporaryDecimalValueGenerator" Kind="Class" />
      <Type Name="TemporaryDoubleValueGenerator" Kind="Class" />
      <Type Name="TemporaryFloatValueGenerator" Kind="Class" />
      <Type Name="TemporaryIntValueGenerator" Kind="Class" />
      <Type Name="TemporaryLongValueGenerator" Kind="Class" />
      <Type Name="TemporaryNumberValueGenerator`1" DisplayName="TemporaryNumberValueGenerator&lt;TValue&gt;" Kind="Class" />
      <Type Name="TemporaryNumberValueGeneratorFactory" Kind="Class" />
      <Type Name="TemporarySByteValueGenerator" Kind="Class" />
      <Type Name="TemporaryShortValueGenerator" Kind="Class" />
      <Type Name="TemporaryUIntValueGenerator" Kind="Class" />
      <Type Name="TemporaryULongValueGenerator" Kind="Class" />
      <Type Name="TemporaryUShortValueGenerator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.DependencyInjection">
      <Type Name="EntityFrameworkServiceCollectionExtensions" Kind="Class" />
      <Type Name="InMemoryServiceCollectionExtensions" Kind="Class" />
      <Type Name="ProxiesServiceCollectionExtensions" Kind="Class" />
      <Type Name="SqliteServiceCollectionExtensions" Kind="Class" />
      <Type Name="SqlServerServiceCollectionExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Transactions">
      <Type Name="TransactionsDatabaseFacadeExtensions" Kind="Class" />
    </Namespace>
  </Types>
  <Title>Untitled</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseDatabaseErrorPage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseDatabaseErrorPage (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseDatabaseErrorPage(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.DatabaseErrorPageExtensions.UseDatabaseErrorPage(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseDatabaseErrorPage (app As IApplicationBuilder) As IApplicationBuilder" />
        <MemberSignature Language="F#" Value="static member UseDatabaseErrorPage : Microsoft.AspNetCore.Builder.IApplicationBuilder -&gt; Microsoft.AspNetCore.Builder.IApplicationBuilder" Usage="Microsoft.AspNetCore.Builder.DatabaseErrorPageExtensions.UseDatabaseErrorPage app" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::AspNetCore::Builder::IApplicationBuilder ^ UseDatabaseErrorPage(Microsoft::AspNetCore::Builder::IApplicationBuilder ^ app);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::AspNetCore::Builder::IApplicationBuilder ^ UseDatabaseErrorPage(Microsoft::AspNetCore::Builder::IApplicationBuilder ^ app);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to register the middleware with.</param>
          <summary>
            Captures synchronous and asynchronous database related exceptions from the pipeline that may be resolved using Entity Framework
            migrations. When these exceptions occur an HTML response with details of possible actions to resolve the issue is generated.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.DatabaseErrorPageExtensions" Member="M:Microsoft.AspNetCore.Builder.DatabaseErrorPageExtensions.UseDatabaseErrorPage(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseDatabaseErrorPage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseDatabaseErrorPage (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.DatabaseErrorPageOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseDatabaseErrorPage(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.DatabaseErrorPageOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.DatabaseErrorPageExtensions.UseDatabaseErrorPage(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.DatabaseErrorPageOptions)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseDatabaseErrorPage (app As IApplicationBuilder, options As DatabaseErrorPageOptions) As IApplicationBuilder" />
        <MemberSignature Language="F#" Value="static member UseDatabaseErrorPage : Microsoft.AspNetCore.Builder.IApplicationBuilder * Microsoft.AspNetCore.Builder.DatabaseErrorPageOptions -&gt; Microsoft.AspNetCore.Builder.IApplicationBuilder" Usage="Microsoft.AspNetCore.Builder.DatabaseErrorPageExtensions.UseDatabaseErrorPage (app, options)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::AspNetCore::Builder::IApplicationBuilder ^ UseDatabaseErrorPage(Microsoft::AspNetCore::Builder::IApplicationBuilder ^ app, Microsoft::AspNetCore::Builder::DatabaseErrorPageOptions ^ options);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.DatabaseErrorPageOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to register the middleware with.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Builder.DatabaseErrorPageOptions" /> that specifies options for the middleware.</param>
          <summary>
            Captures synchronous and asynchronous database related exceptions from the pipeline that may be resolved using Entity Framework
            migrations. When these exceptions occur an HTML response with details of possible actions to resolve the issue is generated.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.DatabaseErrorPageExtensions" Member="M:Microsoft.AspNetCore.Builder.DatabaseErrorPageExtensions.UseDatabaseErrorPage(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.DatabaseErrorPageOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseMigrationsEndPoint">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseMigrationsEndPoint (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseMigrationsEndPoint(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MigrationsEndPointExtensions.UseMigrationsEndPoint(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseMigrationsEndPoint (app As IApplicationBuilder) As IApplicationBuilder" />
        <MemberSignature Language="F#" Value="static member UseMigrationsEndPoint : Microsoft.AspNetCore.Builder.IApplicationBuilder -&gt; Microsoft.AspNetCore.Builder.IApplicationBuilder" Usage="Microsoft.AspNetCore.Builder.MigrationsEndPointExtensions.UseMigrationsEndPoint app" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::AspNetCore::Builder::IApplicationBuilder ^ UseMigrationsEndPoint(Microsoft::AspNetCore::Builder::IApplicationBuilder ^ app);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::AspNetCore::Builder::IApplicationBuilder ^ UseMigrationsEndPoint(Microsoft::AspNetCore::Builder::IApplicationBuilder ^ app);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to register the middleware with.</param>
          <summary>
            Processes requests to execute migrations operations. The middleware will listen for requests made to <see cref="F:Microsoft.AspNetCore.Builder.MigrationsEndPointOptions.DefaultPath" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MigrationsEndPointExtensions" Member="M:Microsoft.AspNetCore.Builder.MigrationsEndPointExtensions.UseMigrationsEndPoint(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseMigrationsEndPoint">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseMigrationsEndPoint (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.MigrationsEndPointOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseMigrationsEndPoint(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.MigrationsEndPointOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MigrationsEndPointExtensions.UseMigrationsEndPoint(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.MigrationsEndPointOptions)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseMigrationsEndPoint (app As IApplicationBuilder, options As MigrationsEndPointOptions) As IApplicationBuilder" />
        <MemberSignature Language="F#" Value="static member UseMigrationsEndPoint : Microsoft.AspNetCore.Builder.IApplicationBuilder * Microsoft.AspNetCore.Builder.MigrationsEndPointOptions -&gt; Microsoft.AspNetCore.Builder.IApplicationBuilder" Usage="Microsoft.AspNetCore.Builder.MigrationsEndPointExtensions.UseMigrationsEndPoint (app, options)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::AspNetCore::Builder::IApplicationBuilder ^ UseMigrationsEndPoint(Microsoft::AspNetCore::Builder::IApplicationBuilder ^ app, Microsoft::AspNetCore::Builder::MigrationsEndPointOptions ^ options);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.MigrationsEndPointOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to register the middleware with.</param>
          <param name="options">An action to set the options for the middleware.</param>
          <summary>
            Processes requests to execute migrations operations. The middleware will listen for requests to the path configured in <paramref name="options" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MigrationsEndPointExtensions" Member="M:Microsoft.AspNetCore.Builder.MigrationsEndPointExtensions.UseMigrationsEndPoint(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.MigrationsEndPointOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
      </Targets>
      <Member MemberName="ToNonNullNullableComparer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer ToNonNullNullableComparer (this Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer ToNonNullNullableComparer(class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueComparerExtensions.ToNonNullNullableComparer(Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToNonNullNullableComparer (comparer As ValueComparer) As ValueComparer" />
        <MemberSignature Language="F#" Value="static member ToNonNullNullableComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueComparerExtensions.ToNonNullNullableComparer comparer" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ChangeTracking::ValueComparer ^ ToNonNullNullableComparer(Microsoft::EntityFrameworkCore::ChangeTracking::ValueComparer ^ comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="comparer">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueComparerExtensions" Member="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueComparerExtensions.ToNonNullNullableComparer(Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="Like">
        <MemberSignature Language="C#" Value="public static bool Like (this Microsoft.EntityFrameworkCore.DbFunctions _, string matchExpression, string pattern);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Like(class Microsoft.EntityFrameworkCore.DbFunctions _, string matchExpression, string pattern) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbFunctionsExtensions.Like(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Like (_ As DbFunctions, matchExpression As String, pattern As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member Like : Microsoft.EntityFrameworkCore.DbFunctions * string * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.DbFunctionsExtensions.Like (_, matchExpression, pattern)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Like(Microsoft::EntityFrameworkCore::DbFunctions ^ _, System::String ^ matchExpression, System::String ^ pattern);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Like(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Platform::String ^ matchExpression, Platform::String ^ pattern);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="matchExpression" Type="System.String" />
          <Parameter Name="pattern" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="matchExpression">The string that is to be matched.</param>
          <param name="pattern">The pattern which may involve wildcards %,_,[,],^.</param>
          <summary>
                An implementation of the SQL LIKE operation. On relational databases this is usually directly
                translated to SQL.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.DbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.DbFunctionsExtensions.Like(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="Like">
        <MemberSignature Language="C#" Value="public static bool Like (this Microsoft.EntityFrameworkCore.DbFunctions _, string matchExpression, string pattern, string escapeCharacter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Like(class Microsoft.EntityFrameworkCore.DbFunctions _, string matchExpression, string pattern, string escapeCharacter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbFunctionsExtensions.Like(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Like (_ As DbFunctions, matchExpression As String, pattern As String, escapeCharacter As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member Like : Microsoft.EntityFrameworkCore.DbFunctions * string * string * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.DbFunctionsExtensions.Like (_, matchExpression, pattern, escapeCharacter)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Like(Microsoft::EntityFrameworkCore::DbFunctions ^ _, System::String ^ matchExpression, System::String ^ pattern, System::String ^ escapeCharacter);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Like(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Platform::String ^ matchExpression, Platform::String ^ pattern, Platform::String ^ escapeCharacter);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="matchExpression" Type="System.String" />
          <Parameter Name="pattern" Type="System.String" />
          <Parameter Name="escapeCharacter" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="matchExpression">The string that is to be matched.</param>
          <param name="pattern">The pattern which may involve wildcards %,_,[,],^.</param>
          <param name="escapeCharacter">
                The escape character (as a single character string) to use in front of %,_,[,],^
                if they are not used as wildcards.
            </param>
          <summary>
                An implementation of the SQL LIKE operation. On relational databases this is usually directly
                translated to SQL.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.DbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.DbFunctionsExtensions.Like(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDbContextDesignTimeServices">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextDesignTimeServices (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.EntityFrameworkCore.DbContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextDesignTimeServices(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.DesignTimeServiceCollectionExtensions.AddDbContextDesignTimeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.EntityFrameworkCore.DbContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextDesignTimeServices (services As IServiceCollection, context As DbContext) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddDbContextDesignTimeServices : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.EntityFrameworkCore.DbContext -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.EntityFrameworkCore.Design.DesignTimeServiceCollectionExtensions.AddDbContextDesignTimeServices (services, context)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddDbContextDesignTimeServices(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, Microsoft::EntityFrameworkCore::DbContext ^ context);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
        </Parameters>
        <Docs>
          <param name="services"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> the services will be added to. </param>
          <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> the services will be added from. </param>
          <summary>
                Adds services from the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> which are used at design time.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Design.DesignTimeServiceCollectionExtensions" Member="M:Microsoft.EntityFrameworkCore.Design.DesignTimeServiceCollectionExtensions.AddDbContextDesignTimeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.EntityFrameworkCore.DbContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddEntityFrameworkDesignTimeServices">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddEntityFrameworkDesignTimeServices (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.EntityFrameworkCore.Design.Internal.IOperationReporter reporter = null, Func&lt;IServiceProvider&gt; applicationServiceProviderAccessor = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddEntityFrameworkDesignTimeServices(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class Microsoft.EntityFrameworkCore.Design.Internal.IOperationReporter reporter, class System.Func`1&lt;class System.IServiceProvider&gt; applicationServiceProviderAccessor) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.DesignTimeServiceCollectionExtensions.AddEntityFrameworkDesignTimeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.EntityFrameworkCore.Design.Internal.IOperationReporter,System.Func{System.IServiceProvider})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddEntityFrameworkDesignTimeServices (services As IServiceCollection, Optional reporter As IOperationReporter = null, Optional applicationServiceProviderAccessor As Func(Of IServiceProvider) = null) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddEntityFrameworkDesignTimeServices : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.EntityFrameworkCore.Design.Internal.IOperationReporter * Func&lt;IServiceProvider&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.EntityFrameworkCore.Design.DesignTimeServiceCollectionExtensions.AddEntityFrameworkDesignTimeServices (services, reporter, applicationServiceProviderAccessor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="reporter" Type="Microsoft.EntityFrameworkCore.Design.Internal.IOperationReporter" />
          <Parameter Name="applicationServiceProviderAccessor" Type="System.Func&lt;System.IServiceProvider&gt;" />
        </Parameters>
        <Docs>
          <param name="services"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> the services will be added to. </param>
          <param name="reporter"> Used to report design-time messages. </param>
          <param name="applicationServiceProviderAccessor"> An accessor to the application service provider. </param>
          <summary>
                Adds the Entity Framework Core design-time services.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Design.DesignTimeServiceCollectionExtensions" Member="M:Microsoft.EntityFrameworkCore.Design.DesignTimeServiceCollectionExtensions.AddEntityFrameworkDesignTimeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.EntityFrameworkCore.Design.Internal.IOperationReporter,System.Func{System.IServiceProvider})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AllAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AllAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AllAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AllAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AllAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously determines whether all the elements of a sequence satisfy a condition.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AnyAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AnyAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AnyAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AnyAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously determines whether any element of a sequence satisfies a condition.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AnyAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AnyAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AnyAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AnyAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to check for being empty.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously determines whether a sequence contains any elements.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AsNoTracking&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TEntity&gt; AsNoTracking&lt;TEntity&gt; (this System.Linq.IQueryable&lt;TEntity&gt; source) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TEntity&gt; AsNoTracking&lt;class TEntity&gt;(class System.Linq.IQueryable`1&lt;!!TEntity&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsNoTracking(Of TEntity As Class) (source As IQueryable(Of TEntity)) As IQueryable(Of TEntity)" />
        <MemberSignature Language="F#" Value="static member AsNoTracking : System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; -&gt; System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking source" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TEntity&gt; ^ AsNoTracking(System::Linq::IQueryable&lt;TEntity&gt; ^ source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TEntity&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The type of entity being queried. </typeparam>
          <param name="source"> The source query. </param>
          <summary>
            <para>
                    Returns a new query where the change tracker will not track any of the entities that are returned.
                    If the entity instances are modified, this will not be detected by the change tracker and
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> will not persist those changes to the database.
                </para>
            <para>
                    Disabling change tracking is useful for read-only scenarios because it avoids the overhead of setting
                    up change tracking for each entity instance. You should not disable change tracking if you want to
                    manipulate entity instances and persist those changes to the database using
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />.
                </para>
            <para>
                    Identity resolution will still be performed to ensure that all occurrences of an entity with a given key
                    in the result set are represented by the same entity instance.
                </para>
            <para>
                    The default tracking behavior for queries can be controlled by <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior" />.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AsTracking&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TEntity&gt; AsTracking&lt;TEntity&gt; (this System.Linq.IQueryable&lt;TEntity&gt; source) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TEntity&gt; AsTracking&lt;class TEntity&gt;(class System.Linq.IQueryable`1&lt;!!TEntity&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsTracking(Of TEntity As Class) (source As IQueryable(Of TEntity)) As IQueryable(Of TEntity)" />
        <MemberSignature Language="F#" Value="static member AsTracking : System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; -&gt; System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking source" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TEntity&gt; ^ AsTracking(System::Linq::IQueryable&lt;TEntity&gt; ^ source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TEntity&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The type of entity being queried. </typeparam>
          <param name="source"> The source query. </param>
          <summary>
            <para>
                    Returns a new query where the change tracker will keep track of changes for all entities that are returned.
                    Any modification to the entity instances will be detected and persisted to the database during
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />.
                </para>
            <para>
                    The default tracking behavior for queries can be controlled by <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior" />.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; AverageAsync (this System.Linq.IQueryable&lt;decimal&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Decimal&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;decimal&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the average of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;double&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;float64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;double&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the average of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;int&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;int32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the average of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;long&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;int64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;int64&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the average of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the average of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the average of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the average of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;int64&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the average of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;single&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the average of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; AverageAsync (this System.Linq.IQueryable&lt;float&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; AverageAsync(class System.Linq.IQueryable`1&lt;float32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;single&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the average of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, decimal&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float64&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, double&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int32&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int64&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int64&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;decimal&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;double&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int64&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;single&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float32&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, single&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ContainsAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; ContainsAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource item, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; ContainsAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TSource item, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ContainsAsync : System.Linq.IQueryable&lt;'Source&gt; * 'Source * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ContainsAsync (source, item, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="item" Type="TSource" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <param name="item"> The object to locate in the sequence. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="CountAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; CountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; CountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member CountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the number of elements in a sequence that satisfy a condition.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="CountAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; CountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; CountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member CountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the number of elements in a sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member FirstAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member FirstAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the first element of a sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the first element of a sequence that satisfies a specified condition
                or a default value if no such element is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ForEachAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ForEachAsync&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source, Action&lt;T&gt; action, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ForEachAsync&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source, class System.Action`1&lt;!!T&gt; action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ForEachAsync : System.Linq.IQueryable&lt;'T&gt; * Action&lt;'T&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ForEachAsync (source, action, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
          <Parameter Name="action" Type="System.Action&lt;T&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to enumerate.
            </param>
          <param name="action"> The action to perform on each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="IgnoreQueryFilters&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TEntity&gt; IgnoreQueryFilters&lt;TEntity&gt; (this System.Linq.IQueryable&lt;TEntity&gt; source) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TEntity&gt; IgnoreQueryFilters&lt;class TEntity&gt;(class System.Linq.IQueryable`1&lt;!!TEntity&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.IgnoreQueryFilters``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IgnoreQueryFilters(Of TEntity As Class) (source As IQueryable(Of TEntity)) As IQueryable(Of TEntity)" />
        <MemberSignature Language="F#" Value="static member IgnoreQueryFilters : System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; -&gt; System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.IgnoreQueryFilters source" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TEntity&gt; ^ IgnoreQueryFilters(System::Linq::IQueryable&lt;TEntity&gt; ^ source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TEntity&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The type of entity being queried. </typeparam>
          <param name="source"> The source query. </param>
          <summary>
                Specifies that the current Entity Framework LINQ query should not have any
                model-level entity query filters applied.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.IgnoreQueryFilters``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Include&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TEntity&gt; Include&lt;TEntity&gt; (this System.Linq.IQueryable&lt;TEntity&gt; source, string navigationPropertyPath) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TEntity&gt; Include&lt;class TEntity&gt;(class System.Linq.IQueryable`1&lt;!!TEntity&gt; source, string navigationPropertyPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Include(Of TEntity As Class) (source As IQueryable(Of TEntity), navigationPropertyPath As String) As IQueryable(Of TEntity)" />
        <MemberSignature Language="F#" Value="static member Include : System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; * string -&gt; System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include (source, navigationPropertyPath)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TEntity&gt; ^ Include(System::Linq::IQueryable&lt;TEntity&gt; ^ source, System::String ^ navigationPropertyPath);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="navigationPropertyPath" Type="System.String">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.EntityFrameworkCore.Query.NotParameterized</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The type of entity being queried. </typeparam>
          <param name="source"> The source query. </param>
          <param name="navigationPropertyPath"> A string of '.' separated navigation property names to be included.  </param>
          <summary>
                Specifies related entities to include in the query results. The navigation property to be included is
                specified starting with the type of entity being queried (<typeparamref name="TEntity" />). Further
                navigation properties to be included can be appended, separated by the '.' character.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Include&lt;TEntity,TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TEntity,TProperty&gt; Include&lt;TEntity,TProperty&gt; (this System.Linq.IQueryable&lt;TEntity&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TProperty&gt;&gt; navigationPropertyPath) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2&lt;!!TEntity, !!TProperty&gt; Include&lt;class TEntity, TProperty&gt;(class System.Linq.IQueryable`1&lt;!!TEntity&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, !!TProperty&gt;&gt; navigationPropertyPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Include(Of TEntity As Class, TProperty As Class) (source As IQueryable(Of TEntity), navigationPropertyPath As Expression(Of Func(Of TEntity, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)" />
        <MemberSignature Language="F#" Value="static member Include : System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;'Entity, 'Property (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include (source, navigationPropertyPath)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity, typename TProperty&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Query::IIncludableQueryable&lt;TEntity, TProperty&gt; ^ Include(System::Linq::IQueryable&lt;TEntity&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TEntity, TProperty&gt; ^&gt; ^ navigationPropertyPath);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TEntity,TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="navigationPropertyPath" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TProperty&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The type of entity being queried. </typeparam>
          <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
          <param name="source"> The source query. </param>
          <param name="navigationPropertyPath">
                A lambda expression representing the navigation property to be included (<c>t =&gt; t.Property1</c>).
            </param>
          <summary>
                Specifies related entities to include in the query results. The navigation property to be included is specified starting with the
                type of entity being queried (<typeparamref name="TEntity" />). If you wish to include additional types based on the navigation
                properties of the type being included, then chain a call to
                <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.ICollection{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})" />
                after this call.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LastAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; LastAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; LastAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member LastAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the last element of a sequence that satisfies a specified condition.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LastAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; LastAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; LastAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member LastAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the last element of a sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LastOrDefaultAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; LastOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; LastOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member LastOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the last element of a sequence that satisfies a specified condition
                or a default value if no such element is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LastOrDefaultAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; LastOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; LastOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member LastOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the last element of a sequence, or a default value if the sequence contains no elements.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Load&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static void Load&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Load&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Load(Of TSource) (source As IQueryable(Of TSource))" />
        <MemberSignature Language="F#" Value="static member Load : System.Linq.IQueryable&lt;'Source&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load source" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Load(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source"> The source query. </param>
          <summary>
                Enumerates the query. When using Entity Framework, this causes the results of the query to
                be loaded into the associated context. This is equivalent to calling ToList
                and then throwing away the list (without the overhead of actually creating the list).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LoadAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task LoadAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task LoadAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LoadAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member LoadAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LoadAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source"> The source query. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously enumerates the query. When using Entity Framework, this causes the results of the query to
                be loaded into the associated context. This is equivalent to calling ToList
                and then throwing away the list (without the overhead of actually creating the list).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LoadAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LongCountAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; LongCountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; LongCountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member LongCountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence
                that satisfy a condition.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LongCountAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; LongCountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; LongCountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member LongCountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="MaxAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; MaxAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; MaxAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member MaxAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the maximum value of a sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="MaxAsync&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; MaxAsync&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; MaxAsync&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member MaxAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TResult">
                The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="MinAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; MinAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; MinAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member MinAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the minimum value of a sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="MinAsync&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; MinAsync&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; MinAsync&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member MinAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TResult">
                The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SingleAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <param name="predicate"> A function to test an element for a condition. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the only element of a sequence that satisfies a specified condition,
                and throws an exception if more than one such element exists.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SingleAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the only element of a sequence, and throws an exception
                if there is not exactly one element in the sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <param name="predicate"> A function to test an element for a condition. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the only element of a sequence that satisfies a specified condition or
                a default value if no such element exists; this method throws an exception if more than one element
                satisfies the condition.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;
                this method throws an exception if there is more than one element in the sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; SumAsync (this System.Linq.IQueryable&lt;decimal&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Decimal&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;decimal&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the sum of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; SumAsync (this System.Linq.IQueryable&lt;double&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; SumAsync(class System.Linq.IQueryable`1&lt;float64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;double&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the sum of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; SumAsync (this System.Linq.IQueryable&lt;int&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; SumAsync(class System.Linq.IQueryable`1&lt;int32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the sum of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; SumAsync (this System.Linq.IQueryable&lt;long&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; SumAsync(class System.Linq.IQueryable`1&lt;int64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;int64&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the sum of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the sum of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the sum of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the sum of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;long&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;int64&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int64&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int64&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the sum of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;single&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the sum of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; SumAsync (this System.Linq.IQueryable&lt;float&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; SumAsync(class System.Linq.IQueryable`1&lt;float32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;single&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
                A sequence of values to calculate the sum of.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, decimal&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float64&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, double&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int32&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int64&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int64&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;decimal&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;double&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;long&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int64&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int64&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int64&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;single&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float32&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, single&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2" />
      </Targets>
      <Member MemberName="ThenInclude&lt;TEntity,TPreviousProperty,TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TEntity,TProperty&gt; ThenInclude&lt;TEntity,TPreviousProperty,TProperty&gt; (this Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TEntity,TPreviousProperty&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TPreviousProperty,TProperty&gt;&gt; navigationPropertyPath) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2&lt;!!TEntity, !!TProperty&gt; ThenInclude&lt;class TEntity, TPreviousProperty, TProperty&gt;(class Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2&lt;!!TEntity, !!TPreviousProperty&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TPreviousProperty, !!TProperty&gt;&gt; navigationPropertyPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenInclude(Of TEntity As Class, TPreviousProperty As Class, TProperty As Class) (source As IIncludableQueryable(Of TEntity, TPreviousProperty), navigationPropertyPath As Expression(Of Func(Of TPreviousProperty, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)" />
        <MemberSignature Language="F#" Value="static member ThenInclude : Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;'Entity, 'PreviousProperty (requires 'Entity : null)&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'PreviousProperty, 'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;'Entity, 'Property (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude (source, navigationPropertyPath)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity, typename TPreviousProperty, typename TProperty&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Query::IIncludableQueryable&lt;TEntity, TProperty&gt; ^ ThenInclude(Microsoft::EntityFrameworkCore::Query::IIncludableQueryable&lt;TEntity, TPreviousProperty&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TPreviousProperty, TProperty&gt; ^&gt; ^ navigationPropertyPath);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TEntity,TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TPreviousProperty" />
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TEntity,TPreviousProperty&gt;" RefType="this" />
          <Parameter Name="navigationPropertyPath" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TPreviousProperty,TProperty&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The type of entity being queried. </typeparam>
          <typeparam name="TPreviousProperty"> The type of the entity that was just included. </typeparam>
          <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
          <param name="source"> The source query. </param>
          <param name="navigationPropertyPath">
                A lambda expression representing the navigation property to be included (<c>t =&gt; t.Property1</c>).
            </param>
          <summary>
                Specifies additional related data to be further included based on a related type that was just included.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2" />
      </Targets>
      <Member MemberName="ThenInclude&lt;TEntity,TPreviousProperty,TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TEntity,TProperty&gt; ThenInclude&lt;TEntity,TPreviousProperty,TProperty&gt; (this Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TEntity,System.Collections.Generic.ICollection&lt;TPreviousProperty&gt;&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TPreviousProperty,TProperty&gt;&gt; navigationPropertyPath) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2&lt;!!TEntity, !!TProperty&gt; ThenInclude&lt;class TEntity, TPreviousProperty, TProperty&gt;(class Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2&lt;!!TEntity, class System.Collections.Generic.ICollection`1&lt;!!TPreviousProperty&gt;&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TPreviousProperty, !!TProperty&gt;&gt; navigationPropertyPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.ICollection{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenInclude(Of TEntity As Class, TPreviousProperty As Class, TProperty As Class) (source As IIncludableQueryable(Of TEntity, ICollection(Of TPreviousProperty)), navigationPropertyPath As Expression(Of Func(Of TPreviousProperty, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)" />
        <MemberSignature Language="F#" Value="static member ThenInclude : Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;'Entity, System.Collections.Generic.ICollection&lt;'PreviousProperty&gt; (requires 'Entity : null)&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'PreviousProperty, 'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;'Entity, 'Property (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude (source, navigationPropertyPath)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity, typename TPreviousProperty, typename TProperty&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Query::IIncludableQueryable&lt;TEntity, TProperty&gt; ^ ThenInclude(Microsoft::EntityFrameworkCore::Query::IIncludableQueryable&lt;TEntity, System::Collections::Generic::ICollection&lt;TPreviousProperty&gt; ^&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TPreviousProperty, TProperty&gt; ^&gt; ^ navigationPropertyPath);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TEntity,TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TPreviousProperty" />
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TEntity,System.Collections.Generic.ICollection&lt;TPreviousProperty&gt;&gt;" RefType="this" />
          <Parameter Name="navigationPropertyPath" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TPreviousProperty,TProperty&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The type of entity being queried. </typeparam>
          <typeparam name="TPreviousProperty"> The type of the entity that was just included. </typeparam>
          <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
          <param name="source"> The source query. </param>
          <param name="navigationPropertyPath">
                A lambda expression representing the navigation property to be included (<c>t =&gt; t.Property1</c>).
            </param>
          <summary>
                Specifies additional related data to be further included based on a related type that was just included.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.ICollection{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2" />
      </Targets>
      <Member MemberName="ThenInclude&lt;TEntity,TPreviousProperty,TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TEntity,TProperty&gt; ThenInclude&lt;TEntity,TPreviousProperty,TProperty&gt; (this Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TPreviousProperty&gt;&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TPreviousProperty,TProperty&gt;&gt; navigationPropertyPath) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2&lt;!!TEntity, !!TProperty&gt; ThenInclude&lt;class TEntity, TPreviousProperty, TProperty&gt;(class Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2&lt;!!TEntity, class System.Collections.Generic.IEnumerable`1&lt;!!TPreviousProperty&gt;&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TPreviousProperty, !!TProperty&gt;&gt; navigationPropertyPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenInclude(Of TEntity As Class, TPreviousProperty As Class, TProperty As Class) (source As IIncludableQueryable(Of TEntity, IEnumerable(Of TPreviousProperty)), navigationPropertyPath As Expression(Of Func(Of TPreviousProperty, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)" />
        <MemberSignature Language="F#" Value="static member ThenInclude : Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;'Entity, seq&lt;'PreviousProperty&gt; (requires 'Entity : null)&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'PreviousProperty, 'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;'Entity, 'Property (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude (source, navigationPropertyPath)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity, typename TPreviousProperty, typename TProperty&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Query::IIncludableQueryable&lt;TEntity, TProperty&gt; ^ ThenInclude(Microsoft::EntityFrameworkCore::Query::IIncludableQueryable&lt;TEntity, System::Collections::Generic::IEnumerable&lt;TPreviousProperty&gt; ^&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TPreviousProperty, TProperty&gt; ^&gt; ^ navigationPropertyPath);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TEntity,TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TPreviousProperty" />
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TPreviousProperty&gt;&gt;" RefType="this" />
          <Parameter Name="navigationPropertyPath" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TPreviousProperty,TProperty&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The type of entity being queried. </typeparam>
          <typeparam name="TPreviousProperty"> The type of the entity that was just included. </typeparam>
          <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
          <param name="source"> The source query. </param>
          <param name="navigationPropertyPath">
                A lambda expression representing the navigation property to be included (<c>t =&gt; t.Property1</c>).
            </param>
          <summary>
                Specifies additional related data to be further included based on a related type that was just included.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToArrayAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource[]&gt; ToArrayAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource[]&gt; ToArrayAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ToArrayAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source[]&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToArrayAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource[]&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create an array from.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously creates an array from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToDictionaryAsync&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt; ToDictionaryAsync&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt;&gt; ToDictionaryAsync&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync (source, keySelector, comparer, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
          <param name="keySelector"> A function to extract a key from each element. </param>
          <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function and a comparer.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToDictionaryAsync&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt; ToDictionaryAsync&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt;&gt; ToDictionaryAsync&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync (source, keySelector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
          <param name="keySelector"> A function to extract a key from each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToDictionaryAsync&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt;&gt; ToDictionaryAsync&lt;TSource, TKey, TElement&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync (source, keySelector, elementSelector, comparer, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
          <typeparam name="TElement">
                The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
          <param name="keySelector"> A function to extract a key from each element. </param>
          <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
          <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function, a comparer, and an element selector function.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToDictionaryAsync&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt;&gt; ToDictionaryAsync&lt;TSource, TKey, TElement&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync (source, keySelector, elementSelector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
          <typeparam name="TElement">
                The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
          <param name="keySelector"> A function to extract a key from each element. </param>
          <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector and an element selector function.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToListAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TSource&gt;&gt; ToListAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;!!TSource&gt;&gt; ToListAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ToListAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;'Source&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a list from.
            </param>
          <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
                Asynchronously creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindForeignKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IForeignKey FindForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Metadata.IKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IEntityType principalEntityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IForeignKey FindForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Metadata.IKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IEntityType principalEntityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindForeignKey (entityType As IEntityType, property As IProperty, principalKey As IKey, principalEntityType As IEntityType) As IForeignKey" />
        <MemberSignature Language="F#" Value="static member FindForeignKey : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKey (entityType, property, principalKey, principalEntityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ FindForeignKey(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, Microsoft::EntityFrameworkCore::Metadata::IKey ^ principalKey, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ principalEntityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ FindForeignKey(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, Microsoft::EntityFrameworkCore::Metadata::IKey ^ principalKey, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ principalEntityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IForeignKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
          <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" />
          <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the foreign keys on. </param>
          <param name="property"> The property that the foreign key is defined on. </param>
          <param name="principalKey"> The primary or alternate key that is referenced. </param>
          <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
          <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key. Returns null
                if no foreign key is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindForeignKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; FindForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; FindForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindForeignKeys (entityType As IEntityType, property As IProperty) As IEnumerable(Of IForeignKey)" />
        <MemberSignature Language="F#" Value="static member FindForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys (entityType, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^&gt; ^ FindForeignKeys(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the foreign keys on. </param>
          <param name="property"> The property to find the foreign keys on. </param>
          <summary>
                Gets the foreign keys defined on the given property. Only foreign keys that are defined on exactly the specified
                property are returned. Composite foreign keys that include the specified property are not returned.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindForeignKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; FindForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; FindForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindForeignKeys (entityType As IEntityType, properties As IReadOnlyList(Of IProperty)) As IEnumerable(Of IForeignKey)" />
        <MemberSignature Language="F#" Value="static member FindForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys (entityType, properties)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^&gt; ^ FindForeignKeys(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Metadata::IProperty ^&gt; ^ properties);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the foreign keys on. </param>
          <param name="properties"> The properties to find the foreign keys on. </param>
          <summary>
                Gets the foreign keys defined on the given properties. Only foreign keys that are defined on exactly the specified
                set of properties are returned.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindIndex">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IIndex FindIndex (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IIndex FindIndex(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIndex (entityType As IEntityType, property As IProperty) As IIndex" />
        <MemberSignature Language="F#" Value="static member FindIndex : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IIndex" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindIndex (entityType, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IIndex ^ FindIndex(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IIndex ^ FindIndex(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IIndex</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the index on. </param>
          <param name="property"> The property to find the index on. </param>
          <summary>
                Gets the index defined on the given property. Returns null if no index is defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IKey FindKey (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IKey FindKey(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindKey (entityType As IEntityType, property As IProperty) As IKey" />
        <MemberSignature Language="F#" Value="static member FindKey : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IKey" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindKey (entityType, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IKey ^ FindKey(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IKey ^ FindKey(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the key on. </param>
          <param name="property"> The property that the key is defined on. </param>
          <summary>
                Gets the primary or alternate key that is defined on the given property. Returns null if no key is defined
                for the given property.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindNavigation">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.INavigation FindNavigation (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, System.Reflection.PropertyInfo propertyInfo);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.INavigation FindNavigation(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Reflection.PropertyInfo propertyInfo) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)" />
        <MemberSignature Language="F#" Value="static member FindNavigation : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Reflection.PropertyInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.INavigation" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation (entityType, propertyInfo)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::INavigation ^ FindNavigation(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, System::Reflection::PropertyInfo ^ propertyInfo);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.INavigation</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the navigation property on. </param>
          <param name="propertyInfo"> The navigation property on the entity class. </param>
          <summary>
                Gets a navigation property on the given entity type. Returns null if no navigation property is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindNavigation">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.INavigation FindNavigation (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.INavigation FindNavigation(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindNavigation (entityType As IEntityType, name As String) As INavigation" />
        <MemberSignature Language="F#" Value="static member FindNavigation : Microsoft.EntityFrameworkCore.Metadata.IEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.INavigation" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation (entityType, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::INavigation ^ FindNavigation(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, System::String ^ name);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::INavigation ^ FindNavigation(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Platform::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.INavigation</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the navigation property on. </param>
          <param name="name"> The name of the navigation property on the entity class. </param>
          <summary>
                Gets a navigation property on the given entity type. Returns null if no navigation property is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindProperty">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IProperty FindProperty (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, System.Reflection.PropertyInfo propertyInfo);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IProperty FindProperty(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Reflection.PropertyInfo propertyInfo) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)" />
        <MemberSignature Language="F#" Value="static member FindProperty : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Reflection.PropertyInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindProperty (entityType, propertyInfo)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IProperty ^ FindProperty(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, System::Reflection::PropertyInfo ^ propertyInfo);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the property on. </param>
          <param name="propertyInfo"> The property on the entity class. </param>
          <summary>
            <para>
                    Gets a property on the given entity type. Returns null if no property is found.
                </para>
            <para>
                    This API only finds scalar properties and does not find navigation properties. Use
                    <see cref="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)" /> to find a navigation property.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetChangeTrackingStrategy">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy GetChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy GetChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetChangeTrackingStrategy (entityType As IEntityType) As ChangeTrackingStrategy" />
        <MemberSignature Language="F#" Value="static member GetChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetChangeTrackingStrategy entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::ChangeTrackingStrategy GetChangeTrackingStrategy(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::ChangeTrackingStrategy GetChangeTrackingStrategy(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to get the change tracking strategy for. </param>
          <summary>
                Gets the change tracking strategy being used for this entity type. This strategy indicates how the
                context detects changes to properties for an instance of the entity type.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetDerivedTypes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetDerivedTypes (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetDerivedTypes(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function GetDerivedTypes (entityType As IEntityType) As IEnumerable(Of IEntityType)" />
        <MemberSignature Language="F#" Value="static member GetDerivedTypes : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetDerivedTypes entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IEntityType ^&gt; ^ GetDerivedTypes(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The base type to find types that derive from. </param>
          <summary>
                Gets all types in the model that derive from a given entity type.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetNavigations">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; GetNavigations (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; GetNavigations(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetNavigations (entityType As IEntityType) As IEnumerable(Of INavigation)" />
        <MemberSignature Language="F#" Value="static member GetNavigations : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetNavigations entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::INavigation ^&gt; ^ GetNavigations(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to get navigation properties for. </param>
          <summary>
                Gets all navigation properties on the given entity type.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetReferencingForeignKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; GetReferencingForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; GetReferencingForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReferencingForeignKeys (entityType As IEntityType) As IEnumerable(Of IForeignKey)" />
        <MemberSignature Language="F#" Value="static member GetReferencingForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetReferencingForeignKeys entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^&gt; ^ GetReferencingForeignKeys(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the foreign keys for. </param>
          <summary>
                Gets all foreign keys that target a given entity type (i.e. foreign keys where the given entity type
                is the principal).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="HasDefiningNavigation">
        <MemberSignature Language="C#" Value="public static bool HasDefiningNavigation (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasDefiningNavigation(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.HasDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasDefiningNavigation (entityType As IEntityType) As Boolean" />
        <MemberSignature Language="F#" Value="static member HasDefiningNavigation : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.HasDefiningNavigation entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool HasDefiningNavigation(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool HasDefiningNavigation(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                Gets a value indicating whether this entity type has a defining navigation.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.HasDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="IsAssignableFrom">
        <MemberSignature Language="C#" Value="public static bool IsAssignableFrom (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IEntityType derivedType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAssignableFrom(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IEntityType derivedType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsAssignableFrom(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsAssignableFrom (entityType As IEntityType, derivedType As IEntityType) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsAssignableFrom : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsAssignableFrom (entityType, derivedType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsAssignableFrom(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ derivedType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsAssignableFrom(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ derivedType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="derivedType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="entityType"> The base entity type. </param>
          <param name="derivedType"> The entity type to check if it derives from <paramref name="entityType" />. </param>
          <summary>
                Determines if an entity type derives from (or is the same as) a given entity type.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsAssignableFrom(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="IsOwned">
        <MemberSignature Language="C#" Value="public static bool IsOwned (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsOwned(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsOwned(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsOwned (entityType As IEntityType) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsOwned : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsOwned entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsOwned(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsOwned(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                Gets a value indicating whether this entity type is owned by another entity type.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsOwned(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="LeastDerivedType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityType LeastDerivedType (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IEntityType otherEntityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityType LeastDerivedType(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IEntityType otherEntityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LeastDerivedType (entityType As IEntityType, otherEntityType As IEntityType) As IEntityType" />
        <MemberSignature Language="F#" Value="static member LeastDerivedType : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.LeastDerivedType (entityType, otherEntityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ LeastDerivedType(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ otherEntityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ LeastDerivedType(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ otherEntityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="otherEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="entityType"> The type to compare. </param>
          <param name="otherEntityType"> The other entity type to compare with. </param>
          <summary>
                Gets the least derived type between the specified two.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="RootType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityType RootType (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityType RootType(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RootType (entityType As IEntityType) As IEntityType" />
        <MemberSignature Language="F#" Value="static member RootType : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.EntityTypeExtensions.RootType entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ RootType(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ RootType(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The type to find the root of. </param>
          <summary>
                Gets the root base type for a given entity type.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="Execute">
        <MemberSignature Language="C#" Value="public static void Execute (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Action operation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Execute(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Action operation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Execute (strategy As IExecutionStrategy, operation As Action)" />
        <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Action -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, operation)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Execute(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Action ^ operation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Action" />
        </Parameters>
        <Docs>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">A delegate representing an executable operation that doesn't return any results.</param>
          <summary>
                Executes the specified operation.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="Execute&lt;TState&gt;">
        <MemberSignature Language="C#" Value="public static void Execute&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Action&lt;TState&gt; operation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Execute&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Action`1&lt;!!TState&gt; operation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Action{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Execute(Of TState) (strategy As IExecutionStrategy, state As TState, operation As Action(Of TState))" />
        <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Action&lt;'State&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, state, operation)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Execute(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, TState state, Action&lt;TState&gt; ^ operation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Action&lt;TState&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TState">The type of the state.</typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="state">The state that will be passed to the operation.</param>
          <param name="operation">A delegate representing an executable operation that doesn't return any results.</param>
          <summary>
                Executes the specified operation.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="Execute&lt;TState&gt;">
        <MemberSignature Language="C#" Value="public static void Execute&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Action&lt;TState&gt; operation, TState state);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Execute&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Action`1&lt;!!TState&gt; operation, !!TState state) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Execute(Of TState) (strategy As IExecutionStrategy, operation As Action(Of TState), state As TState)" />
        <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Action&lt;'State&gt; * 'State -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, operation, state)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Execute(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Action&lt;TState&gt; ^ operation, TState state);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Action&lt;TState&gt;" />
          <Parameter Name="state" Type="TState" />
        </Parameters>
        <Docs>
          <typeparam name="TState">The type of the state.</typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">A delegate representing an executable operation that doesn't return any results.</param>
          <param name="state">The state that will be passed to the operation.</param>
          <summary>
                Executes the specified operation.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="Execute&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Execute&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TResult&gt; operation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Execute&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`1&lt;!!TResult&gt; operation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Execute(Of TResult) (strategy As IExecutionStrategy, operation As Func(Of TResult)) As TResult" />
        <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'Result&gt; -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, operation)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Execute(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;TResult&gt; ^ operation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
          <summary>
                Executes the specified operation and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="Execute&lt;TState,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Execute&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,TResult&gt; operation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Execute&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`2&lt;!!TState, !!TResult&gt; operation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Execute(Of TState, TResult) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, TResult)) As TResult" />
        <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, 'Result&gt; -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, state, operation)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Execute(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, TState state, Func&lt;TState, TResult&gt; ^ operation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TState">The type of the state.</typeparam>
          <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="state">The state that will be passed to the operation.</param>
          <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
          <summary>
                Executes the specified operation and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="Execute&lt;TState,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Execute&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,TResult&gt; operation, TState state);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Execute&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;!!TState, !!TResult&gt; operation, !!TState state) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,``1},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Execute(Of TState, TResult) (strategy As IExecutionStrategy, operation As Func(Of TState, TResult), state As TState) As TResult" />
        <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, 'Result&gt; * 'State -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, operation, state)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Execute(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;TState, TResult&gt; ^ operation, TState state);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" />
          <Parameter Name="state" Type="TState" />
        </Parameters>
        <Docs>
          <typeparam name="TState">The type of the state.</typeparam>
          <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
          <param name="state">The state that will be passed to the operation.</param>
          <summary>
                Executes the specified operation and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,``1},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="Execute&lt;TState,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Execute&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,TResult&gt; operation, Func&lt;TState,Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt; verifySucceeded, TState state);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Execute&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;!!TState, !!TResult&gt; operation, class System.Func`2&lt;!!TState, class Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1&lt;!!TResult&gt;&gt; verifySucceeded, !!TState state) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,``1},System.Func{``0,Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Execute(Of TState, TResult) (strategy As IExecutionStrategy, operation As Func(Of TState, TResult), verifySucceeded As Func(Of TState, ExecutionResult(Of TResult)), state As TState) As TResult" />
        <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, 'Result&gt; * Func&lt;'State, Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;'Result&gt;&gt; * 'State -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, operation, verifySucceeded, state)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Execute(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;TState, TResult&gt; ^ operation, Func&lt;TState, Microsoft::EntityFrameworkCore::Storage::ExecutionResult&lt;TResult&gt; ^&gt; ^ verifySucceeded, TState state);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;" />
          <Parameter Name="state" Type="TState" />
        </Parameters>
        <Docs>
          <typeparam name="TState"> The type of the state. </typeparam>
          <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
          <param name="verifySucceeded"> A delegate that tests whether the operation succeeded even though an exception was thrown. </param>
          <param name="state"> The state that will be passed to the operation. </param>
          <summary>
                Executes the specified operation and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,``1},System.Func{``0,Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteAsync (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; operation, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteAsync(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; operation, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation, cancellationToken)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ ExecuteAsync(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ operation, System::Threading::CancellationToken cancellationToken);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">A function that returns a started task.</param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteAsync (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.Tasks.Task&gt; operation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteAsync(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`1&lt;class System.Threading.Tasks.Task&gt; operation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync (strategy As IExecutionStrategy, operation As Func(Of Task)) As Task" />
        <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ ExecuteAsync(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;System::Threading::Tasks::Task ^&gt; ^ operation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
        </Parameters>
        <Docs>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">A function that returns a started task.</param>
          <summary>
                Executes the specified asynchronous operation.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteAsync&lt;TState&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; operation, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; operation, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, state, operation, cancellationToken)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ ExecuteAsync(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, TState state, Func&lt;TState, System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ operation, System::Threading::CancellationToken cancellationToken);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TState">The type of the state.</typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="state">The state that will be passed to the operation.</param>
          <param name="operation">A function that returns a started task.</param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteAsync&lt;TState&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.Tasks.Task&gt; operation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`2&lt;!!TState, class System.Threading.Tasks.Task&gt; operation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.Tasks.Task})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TState) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, Task)) As Task" />
        <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, state, operation)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ ExecuteAsync(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, TState state, Func&lt;TState, System::Threading::Tasks::Task ^&gt; ^ operation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.Tasks.Task&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TState">The type of the state.</typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="state">The state that will be passed to the operation.</param>
          <param name="operation">A function that returns a started task.</param>
          <summary>
                Executes the specified asynchronous operation.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.Tasks.Task})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteAsync&lt;TState&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; operation, TState state, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; operation, !!TState state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; * 'State * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation, state, cancellationToken)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ ExecuteAsync(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;TState, System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ operation, TState state, System::Threading::CancellationToken cancellationToken);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TState">The type of the state.</typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">A function that returns a started task.</param>
          <param name="state">The state that will be passed to the operation.</param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteAsync&lt;TState&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,System.Threading.Tasks.Task&gt; operation, TState state);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;!!TState, class System.Threading.Tasks.Task&gt; operation, !!TState state) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TState) (strategy As IExecutionStrategy, operation As Func(Of TState, Task), state As TState) As Task" />
        <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, System.Threading.Tasks.Task&gt; * 'State -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation, state)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ ExecuteAsync(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;TState, System::Threading::Tasks::Task ^&gt; ^ operation, TState state);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.Tasks.Task&gt;" />
          <Parameter Name="state" Type="TState" />
        </Parameters>
        <Docs>
          <typeparam name="TState">The type of the state.</typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">A function that returns a started task.</param>
          <param name="state">The state that will be passed to the operation.</param>
          <summary>
                Executes the specified asynchronous operation.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteAsync&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation, cancellationToken)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ ExecuteAsync(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;System::Threading::CancellationToken, System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ operation, System::Threading::CancellationToken cancellationToken);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteAsync&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TResult) (strategy As IExecutionStrategy, operation As Func(Of Task(Of TResult))) As Task(Of TResult)" />
        <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ ExecuteAsync(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ operation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
          <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteAsync&lt;TState,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;&gt; verifySucceeded, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;class Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1&lt;!!TResult&gt;&gt;&gt; verifySucceeded, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;'Result&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, state, operation, verifySucceeded, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TState"> The type of the state. </typeparam>
          <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="state"> The state that will be passed to the operation. </param>
          <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
          <param name="verifySucceeded"> A delegate that tests whether the operation succeeded even though an exception was thrown. </param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteAsync&lt;TState,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, state, operation, cancellationToken)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ ExecuteAsync(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, TState state, Func&lt;TState, System::Threading::CancellationToken, System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ operation, System::Threading::CancellationToken cancellationToken);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TState">The type of the state.</typeparam>
          <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="state">The state that will be passed to the operation.</param>
          <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteAsync&lt;TState,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`2&lt;!!TState, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.Tasks.Task{``1}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TState, TResult) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, Task(Of TResult))) As Task(Of TResult)" />
        <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, state, operation)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ ExecuteAsync(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, TState state, Func&lt;TState, System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ operation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TState">The type of the state.</typeparam>
          <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="state">The state that will be passed to the operation.</param>
          <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
          <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.Tasks.Task{``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteAsync&lt;TState,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, TState state, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, !!TState state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * 'State * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation, state, cancellationToken)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ ExecuteAsync(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;TState, System::Threading::CancellationToken, System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ operation, TState state, System::Threading::CancellationToken cancellationToken);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TState">The type of the state.</typeparam>
          <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
          <param name="state">The state that will be passed to the operation.</param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteAsync&lt;TState,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, TState state);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;!!TState, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, !!TState state) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TState, TResult) (strategy As IExecutionStrategy, operation As Func(Of TState, Task(Of TResult)), state As TState) As Task(Of TResult)" />
        <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * 'State -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation, state)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ ExecuteAsync(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;TState, System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ operation, TState state);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
          <Parameter Name="state" Type="TState" />
        </Parameters>
        <Docs>
          <typeparam name="TState">The type of the state.</typeparam>
          <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
          <param name="state">The state that will be passed to the operation.</param>
          <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransaction">
        <MemberSignature Language="C#" Value="public static void ExecuteInTransaction (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Action operation, Func&lt;bool&gt; verifySucceeded);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExecuteInTransaction(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Action operation, class System.Func`1&lt;bool&gt; verifySucceeded) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action,System.Func{System.Boolean})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ExecuteInTransaction (strategy As IExecutionStrategy, operation As Action, verifySucceeded As Func(Of Boolean))" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Action * Func&lt;bool&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction (strategy, operation, verifySucceeded)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ExecuteInTransaction(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Action ^ operation, Func&lt;bool&gt; ^ verifySucceeded);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Action" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="operation">
                A delegate representing an executable operation.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <summary>
                Executes the specified operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action,System.Func{System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransaction&lt;TState&gt;">
        <MemberSignature Language="C#" Value="public static void ExecuteInTransaction&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Action&lt;TState&gt; operation, Func&lt;TState,bool&gt; verifySucceeded);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExecuteInTransaction&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Action`1&lt;!!TState&gt; operation, class System.Func`2&lt;!!TState, bool&gt; verifySucceeded) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Action{``0},System.Func{``0,System.Boolean})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ExecuteInTransaction(Of TState) (strategy As IExecutionStrategy, state As TState, operation As Action(Of TState), verifySucceeded As Func(Of TState, Boolean))" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Action&lt;'State&gt; * Func&lt;'State, bool&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction (strategy, state, operation, verifySucceeded)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ExecuteInTransaction(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, TState state, Action&lt;TState&gt; ^ operation, Func&lt;TState, bool&gt; ^ verifySucceeded);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Action&lt;TState&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TState"> The type of the state. </typeparam>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="state"> The state that will be passed to the operation. </param>
          <param name="operation">
                A delegate representing an executable operation.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <summary>
                Executes the specified operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Action{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransaction&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult ExecuteInTransaction&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TResult&gt; operation, Func&lt;bool&gt; verifySucceeded);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult ExecuteInTransaction&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`1&lt;!!TResult&gt; operation, class System.Func`1&lt;bool&gt; verifySucceeded) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0},System.Func{System.Boolean})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransaction(Of TResult) (strategy As IExecutionStrategy, operation As Func(Of TResult), verifySucceeded As Func(Of Boolean)) As TResult" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'Result&gt; * Func&lt;bool&gt; -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction (strategy, operation, verifySucceeded)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult ExecuteInTransaction(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;TResult&gt; ^ operation, Func&lt;bool&gt; ^ verifySucceeded);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;TResult&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <summary>
                Executes the specified operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0},System.Func{System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransaction&lt;TState,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult ExecuteInTransaction&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,TResult&gt; operation, Func&lt;TState,bool&gt; verifySucceeded);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult ExecuteInTransaction&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`2&lt;!!TState, !!TResult&gt; operation, class System.Func`2&lt;!!TState, bool&gt; verifySucceeded) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1},System.Func{``0,System.Boolean})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransaction(Of TState, TResult) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, TResult), verifySucceeded As Func(Of TState, Boolean)) As TResult" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, 'Result&gt; * Func&lt;'State, bool&gt; -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction (strategy, state, operation, verifySucceeded)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult ExecuteInTransaction(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, TState state, Func&lt;TState, TResult&gt; ^ operation, Func&lt;TState, bool&gt; ^ verifySucceeded);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TState"> The type of the state. </typeparam>
          <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="state"> The state that will be passed to the operation. </param>
          <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <summary>
                Executes the specified operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransaction&lt;TState,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult ExecuteInTransaction&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,TResult&gt; operation, Func&lt;TState,bool&gt; verifySucceeded, TState state, Microsoft.EntityFrameworkCore.DbContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult ExecuteInTransaction&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;!!TState, !!TResult&gt; operation, class System.Func`2&lt;!!TState, bool&gt; verifySucceeded, !!TState state, class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,``1},System.Func{``0,System.Boolean},``0,Microsoft.EntityFrameworkCore.DbContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransaction(Of TState, TResult) (strategy As IExecutionStrategy, operation As Func(Of TState, TResult), verifySucceeded As Func(Of TState, Boolean), state As TState, context As DbContext) As TResult" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, 'Result&gt; * Func&lt;'State, bool&gt; * 'State * Microsoft.EntityFrameworkCore.DbContext -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction (strategy, operation, verifySucceeded, state, context)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult ExecuteInTransaction(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;TState, TResult&gt; ^ operation, Func&lt;TState, bool&gt; ^ verifySucceeded, TState state, Microsoft::EntityFrameworkCore::DbContext ^ context);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Boolean&gt;" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
        </Parameters>
        <Docs>
          <typeparam name="TState"> The type of the state. </typeparam>
          <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="state"> The state that will be passed to the operation. </param>
          <param name="context"> The context that will be used to start the transaction. </param>
          <summary>
                Executes the specified operation in a transaction and returns the result after commiting it.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,``1},System.Func{``0,System.Boolean},``0,Microsoft.EntityFrameworkCore.DbContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransactionAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteInTransactionAsync (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; operation, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteInTransactionAsync(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; operation, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, operation, verifySucceeded, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="operation">
                A function that returns a started task.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransactionAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteInTransactionAsync (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.Tasks.Task&gt; operation, Func&lt;System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteInTransactionAsync(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`1&lt;class System.Threading.Tasks.Task&gt; operation, class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task{System.Boolean}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransactionAsync (strategy As IExecutionStrategy, operation As Func(Of Task), verifySucceeded As Func(Of Task(Of Boolean))) As Task" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.Tasks.Task&gt; * Func&lt;System.Threading.Tasks.Task&lt;bool&gt;&gt; -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, operation, verifySucceeded)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ ExecuteInTransactionAsync(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;System::Threading::Tasks::Task ^&gt; ^ operation, Func&lt;System::Threading::Tasks::Task&lt;bool&gt; ^&gt; ^ verifySucceeded);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="operation">
                A function that returns a started task.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task{System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransactionAsync&lt;TState&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteInTransactionAsync&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteInTransactionAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, state, operation, verifySucceeded, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TState"> The type of the state. </typeparam>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="state"> The state that will be passed to the operation. </param>
          <param name="operation">
                A function that returns a started task.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransactionAsync&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteInTransactionAsync&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteInTransactionAsync&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, operation, verifySucceeded, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransactionAsync&lt;TState,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteInTransactionAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteInTransactionAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, state, operation, verifySucceeded, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TState"> The type of the state. </typeparam>
          <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="state"> The state that will be passed to the operation. </param>
          <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransactionAsync&lt;TState,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteInTransactionAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, TState state, Microsoft.EntityFrameworkCore.DbContext context, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteInTransactionAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, !!TState state, class Microsoft.EntityFrameworkCore.DbContext context, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},``0,Microsoft.EntityFrameworkCore.DbContext,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * 'State * Microsoft.EntityFrameworkCore.DbContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, operation, verifySucceeded, state, context, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TState"> The type of the state. </typeparam>
          <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
          <param name="strategy">The strategy that will be used for the execution.</param>
          <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="state"> The state that will be passed to the operation. </param>
          <param name="context"> The context that will be used to start the transaction. </param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},``0,Microsoft.EntityFrameworkCore.DbContext,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider" />
      </Targets>
      <Member MemberName="CreateEntityQueryableExpression">
        <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression CreateEntityQueryableExpression (this Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider entityQueryProvider, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression CreateEntityQueryableExpression(class Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider entityQueryProvider, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Extensions.Internal.AsyncQueryProviderExtensions.CreateEntityQueryableExpression(Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider,System.Type)" />
        <MemberSignature Language="F#" Value="static member CreateEntityQueryableExpression : Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider * Type -&gt; System.Linq.Expressions.ConstantExpression" Usage="Microsoft.EntityFrameworkCore.Extensions.Internal.AsyncQueryProviderExtensions.CreateEntityQueryableExpression (entityQueryProvider, type)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::Expressions::ConstantExpression ^ CreateEntityQueryableExpression(Microsoft::EntityFrameworkCore::Query::Internal::IAsyncQueryProvider ^ entityQueryProvider, Type ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityQueryProvider" Type="Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="entityQueryProvider">To be added.</param>
          <param name="type">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Extensions.Internal.AsyncQueryProviderExtensions" Member="M:Microsoft.EntityFrameworkCore.Extensions.Internal.AsyncQueryProviderExtensions.CreateEntityQueryableExpression(Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="CreateEFPropertyExpression">
        <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression CreateEFPropertyExpression (this System.Linq.Expressions.Expression target, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property, bool makeNullable = true);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression CreateEFPropertyExpression(class System.Linq.Expressions.Expression target, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property, bool makeNullable) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.CreateEFPropertyExpression(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateEFPropertyExpression (target As Expression, property As IPropertyBase, Optional makeNullable As Boolean = true) As Expression" />
        <MemberSignature Language="F#" Value="static member CreateEFPropertyExpression : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * bool -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.CreateEFPropertyExpression (target, property, makeNullable)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.Expressions.Expression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="target" Type="System.Linq.Expressions.Expression" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
          <Parameter Name="makeNullable" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="target">To be added.</param>
          <param name="property">To be added.</param>
          <param name="makeNullable">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.CreateEFPropertyExpression(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="CreateEFPropertyExpression">
        <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression CreateEFPropertyExpression (this System.Linq.Expressions.Expression target, System.Reflection.MemberInfo memberInfo);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression CreateEFPropertyExpression(class System.Linq.Expressions.Expression target, class System.Reflection.MemberInfo memberInfo) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.CreateEFPropertyExpression(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
        <MemberSignature Language="F#" Value="static member CreateEFPropertyExpression : System.Linq.Expressions.Expression * System.Reflection.MemberInfo -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.CreateEFPropertyExpression (target, memberInfo)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::Expressions::Expression ^ CreateEFPropertyExpression(System::Linq::Expressions::Expression ^ target, System::Reflection::MemberInfo ^ memberInfo);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.Expressions.Expression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="target" Type="System.Linq.Expressions.Expression" RefType="this" />
          <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
        </Parameters>
        <Docs>
          <param name="target">To be added.</param>
          <param name="memberInfo">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.CreateEFPropertyExpression(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="CreateEFPropertyExpression">
        <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression CreateEFPropertyExpression (this System.Linq.Expressions.Expression target, System.Reflection.PropertyInfo propertyInfo);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression CreateEFPropertyExpression(class System.Linq.Expressions.Expression target, class System.Reflection.PropertyInfo propertyInfo) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.CreateEFPropertyExpression(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)" />
        <MemberSignature Language="F#" Value="static member CreateEFPropertyExpression : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.CreateEFPropertyExpression (target, propertyInfo)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::Expressions::Expression ^ CreateEFPropertyExpression(System::Linq::Expressions::Expression ^ target, System::Reflection::PropertyInfo ^ propertyInfo);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.Expressions.Expression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="target" Type="System.Linq.Expressions.Expression" RefType="this" />
          <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        </Parameters>
        <Docs>
          <param name="target">To be added.</param>
          <param name="propertyInfo">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.CreateEFPropertyExpression(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.MethodCallExpression" />
      </Targets>
      <Member MemberName="IsEFProperty">
        <MemberSignature Language="C#" Value="public static bool IsEFProperty (this System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEFProperty(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.IsEFProperty(System.Linq.Expressions.MethodCallExpression)" />
        <MemberSignature Language="F#" Value="static member IsEFProperty : System.Linq.Expressions.MethodCallExpression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.IsEFProperty methodCallExpression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsEFProperty(System::Linq::Expressions::MethodCallExpression ^ methodCallExpression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="methodCallExpression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.IsEFProperty(System.Linq.Expressions.MethodCallExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MethodInfo" />
      </Targets>
      <Member MemberName="IsEFPropertyMethod">
        <MemberSignature Language="C#" Value="public static bool IsEFPropertyMethod (this System.Reflection.MethodInfo methodInfo);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEFPropertyMethod(class System.Reflection.MethodInfo methodInfo) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.IsEFPropertyMethod(System.Reflection.MethodInfo)" />
        <MemberSignature Language="F#" Value="static member IsEFPropertyMethod : System.Reflection.MethodInfo -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.IsEFPropertyMethod methodInfo" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsEFPropertyMethod(System::Reflection::MethodInfo ^ methodInfo);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" RefType="this" />
        </Parameters>
        <Docs>
          <param name="methodInfo">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Extensions.Internal.EFPropertyExtensions.IsEFPropertyMethod(System.Reflection.MethodInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MethodInfo" />
      </Targets>
      <Member MemberName="MethodIsClosedFormOf">
        <MemberSignature Language="C#" Value="public static bool MethodIsClosedFormOf (this System.Reflection.MethodInfo methodInfo, System.Reflection.MethodInfo genericMethod);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool MethodIsClosedFormOf(class System.Reflection.MethodInfo methodInfo, class System.Reflection.MethodInfo genericMethod) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Extensions.Internal.MethodInfoExtensions.MethodIsClosedFormOf(System.Reflection.MethodInfo,System.Reflection.MethodInfo)" />
        <MemberSignature Language="F#" Value="static member MethodIsClosedFormOf : System.Reflection.MethodInfo * System.Reflection.MethodInfo -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Extensions.Internal.MethodInfoExtensions.MethodIsClosedFormOf (methodInfo, genericMethod)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool MethodIsClosedFormOf(System::Reflection::MethodInfo ^ methodInfo, System::Reflection::MethodInfo ^ genericMethod);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" RefType="this" />
          <Parameter Name="genericMethod" Type="System.Reflection.MethodInfo" />
        </Parameters>
        <Docs>
          <param name="methodInfo">To be added.</param>
          <param name="genericMethod">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Extensions.Internal.MethodInfoExtensions" Member="M:Microsoft.EntityFrameworkCore.Extensions.Internal.MethodInfoExtensions.MethodIsClosedFormOf(System.Reflection.MethodInfo,System.Reflection.MethodInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AsAsyncEnumerable&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; AsAsyncEnumerable&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; AsAsyncEnumerable&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions.AsAsyncEnumerable``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsAsyncEnumerable(Of TSource) (source As IQueryable(Of TSource)) As IAsyncEnumerable(Of TSource)" />
        <MemberSignature Language="F#" Value="static member AsAsyncEnumerable : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions.AsAsyncEnumerable source" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ AsAsyncEnumerable(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions.AsAsyncEnumerable``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="Select">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable Select (this System.Linq.IQueryable source, string propertyName, Type sourceType, Type resultType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable Select(class System.Linq.IQueryable source, string propertyName, class System.Type sourceType, class System.Type resultType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions.Select(System.Linq.IQueryable,System.String,System.Type,System.Type)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select (source As IQueryable, propertyName As String, sourceType As Type, resultType As Type) As IQueryable" />
        <MemberSignature Language="F#" Value="static member Select : System.Linq.IQueryable * string * Type * Type -&gt; System.Linq.IQueryable" Usage="Microsoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions.Select (source, propertyName, sourceType, resultType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable ^ Select(System::Linq::IQueryable ^ source, System::String ^ propertyName, Type ^ sourceType, Type ^ resultType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
          <Parameter Name="propertyName" Type="System.String" />
          <Parameter Name="sourceType" Type="System.Type" />
          <Parameter Name="resultType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="propertyName">To be added.</param>
          <param name="sourceType">To be added.</param>
          <param name="resultType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions.Select(System.Linq.IQueryable,System.String,System.Type,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Select&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, string propertyName) where TSource : class where TResult : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; Select&lt;class TSource, class TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, string propertyName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions.Select``2(System.Linq.IQueryable{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource As Class, TResult As Class) (source As IQueryable(Of TSource), propertyName As String) As IQueryable(Of TResult)" />
        <MemberSignature Language="F#" Value="static member Select : System.Linq.IQueryable&lt;'Source (requires 'Source : null)&gt; * string -&gt; System.Linq.IQueryable&lt;'Result (requires 'Result : null)&gt; (requires 'Source : null and 'Result : null)" Usage="Microsoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions.Select (source, propertyName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA; where TSource : class where TResult : class[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ Select(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::String ^ propertyName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TResult">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="propertyName" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="propertyName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions.Select``2(System.Linq.IQueryable{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1" />
      </Targets>
      <Member MemberName="GetInfrastructure&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetInfrastructure&lt;T&gt; (this Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;T&gt; accessor);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetInfrastructure&lt;T&gt;(class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;!!T&gt; accessor) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetInfrastructure(Of T) (accessor As IInfrastructure(Of T)) As T" />
        <MemberSignature Language="F#" Value="static member GetInfrastructure : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;'T&gt; -&gt; 'T" Usage="Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure accessor" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T GetInfrastructure(Microsoft::EntityFrameworkCore::Infrastructure::IInfrastructure&lt;T&gt; ^ accessor);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T GetInfrastructure(Microsoft::EntityFrameworkCore::Infrastructure::IInfrastructure&lt;T&gt; ^ accessor);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="accessor" Type="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The type of the property being hidden by <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1" />. </typeparam>
          <param name="accessor"> The object that exposes the property. </param>
          <summary>
            <para>
                    Gets the value from a property that is being hidden using <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1" />.
                </para>
            <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            <para>
              <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1" /> is used to hide properties that are not intended to be used in
                    application code but can be used in extension methods written by database providers etc.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions" Member="M:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1" />
      </Targets>
      <Member MemberName="GetService&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static TService GetService&lt;TService&gt; (this Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt; accessor);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TService GetService&lt;TService&gt;(class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.IServiceProvider&gt; accessor) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetService(Of TService) (accessor As IInfrastructure(Of IServiceProvider)) As TService" />
        <MemberSignature Language="F#" Value="static member GetService : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt; -&gt; 'Service" Usage="Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService accessor" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TService&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TService GetService(Microsoft::EntityFrameworkCore::Infrastructure::IInfrastructure&lt;IServiceProvider ^&gt; ^ accessor);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename TService&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TService GetService(Microsoft::EntityFrameworkCore::Infrastructure::IInfrastructure&lt;IServiceProvider ^&gt; ^ accessor);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TService</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="accessor" Type="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TService"> The type of service to be resolved. </typeparam>
          <param name="accessor"> The object exposing the service provider. </param>
          <summary>
            <para>
                    Resolves a service from the <see cref="T:System.IServiceProvider" /> exposed from a type that implements
                    <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1" />.
                </para>
            <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            <para>
              <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1" /> is used to hide properties that are not intended to be used in
                    application code but can be used in extension methods written by database providers etc.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions" Member="M:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" />
      </Targets>
      <Member MemberName="GetAnnotation">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation GetAnnotation (this Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, string annotationName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation GetAnnotation(class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, string annotationName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableExtensions.GetAnnotation(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAnnotation (annotatable As IAnnotatable, annotationName As String) As IAnnotation" />
        <MemberSignature Language="F#" Value="static member GetAnnotation : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable * string -&gt; Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Usage="Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableExtensions.GetAnnotation (annotatable, annotationName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ GetAnnotation(Microsoft::EntityFrameworkCore::Infrastructure::IAnnotatable ^ annotatable, System::String ^ annotationName);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ GetAnnotation(Microsoft::EntityFrameworkCore::Infrastructure::IAnnotatable ^ annotatable, Platform::String ^ annotationName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="annotatable" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" RefType="this" />
          <Parameter Name="annotationName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="annotatable"> The object to find the annotation on. </param>
          <param name="annotationName"> The key of the annotation to find. </param>
          <summary>
                Gets the annotation with the given name, throwing if it does not exist.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableExtensions" Member="M:Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableExtensions.GetAnnotation(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddEntityFramework">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddEntityFramework (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddEntityFramework(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServiceCollectionExtensions.AddEntityFramework(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddEntityFramework (serviceCollection As IServiceCollection) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddEntityFramework : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServiceCollectionExtensions.AddEntityFramework serviceCollection" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddEntityFramework(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ serviceCollection);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <summary>
                Adds the services required by the core of Entity Framework to an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServiceCollectionExtensions" Member="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServiceCollectionExtensions.AddEntityFramework(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.ILazyLoader" />
      </Targets>
      <Member MemberName="Load&lt;TRelated&gt;">
        <MemberSignature Language="C#" Value="public static TRelated Load&lt;TRelated&gt; (this Microsoft.EntityFrameworkCore.Infrastructure.ILazyLoader loader, object entity, ref TRelated navigationField, string navigationName = null) where TRelated : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRelated Load&lt;class TRelated&gt;(class Microsoft.EntityFrameworkCore.Infrastructure.ILazyLoader loader, object entity, !!TRelated&amp; navigationField, string navigationName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.LazyLoaderExtensions.Load``1(Microsoft.EntityFrameworkCore.Infrastructure.ILazyLoader,System.Object,``0@,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Load(Of TRelated As Class) (loader As ILazyLoader, entity As Object, ByRef navigationField As TRelated, Optional navigationName As String = null) As TRelated" />
        <MemberSignature Language="F#" Value="static member Load : Microsoft.EntityFrameworkCore.Infrastructure.ILazyLoader * obj *  * string -&gt; 'Related (requires 'Related : null)" Usage="Microsoft.EntityFrameworkCore.Infrastructure.LazyLoaderExtensions.Load (loader, entity, navigationField, navigationName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TRelated</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRelated">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="loader" Type="Microsoft.EntityFrameworkCore.Infrastructure.ILazyLoader" RefType="this" />
          <Parameter Name="entity" Type="System.Object" />
          <Parameter Name="navigationField" Type="TRelated&amp;" RefType="ref" />
          <Parameter Name="navigationName" Type="System.String">
            <Attributes>
              <Attribute>
                <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TRelated"> The type of the navigation property. </typeparam>
          <param name="loader">The loader instance, which may be <c>null</c>.</param>
          <param name="entity"> The entity on which the navigation property is located. </param>
          <param name="navigationField"> A reference to the backing field for the navigation. </param>
          <param name="navigationName"> The navigation property name. </param>
          <summary>
                Loads a navigation property if it has not already been loaded.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Infrastructure.LazyLoaderExtensions" Member="M:Microsoft.EntityFrameworkCore.Infrastructure.LazyLoaderExtensions.Load``1(Microsoft.EntityFrameworkCore.Infrastructure.ILazyLoader,System.Object,``0@,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddRelational">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddRelational (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddRelational(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalServiceCollectionExtensions.AddRelational(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddRelational (services As IServiceCollection) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddRelational : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.EntityFrameworkCore.Infrastructure.RelationalServiceCollectionExtensions.AddRelational services" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddRelational(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <summary>
            <para>
                    Adds the base services required by a relational database provider.
                </para>
            <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Infrastructure.RelationalServiceCollectionExtensions" Member="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalServiceCollectionExtensions.AddRelational(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStoreCache" />
      </Targets>
      <Member MemberName="GetStore">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore GetStore (this Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStoreCache storeCache, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore GetStore(class Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStoreCache storeCache, class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCacheExtensions.GetStore(Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStoreCache,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetStore (storeCache As IInMemoryStoreCache, options As IDbContextOptions) As IInMemoryStore" />
        <MemberSignature Language="F#" Value="static member GetStore : Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStoreCache * Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions -&gt; Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore" Usage="Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCacheExtensions.GetStore (storeCache, options)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::InMemory::Storage::Internal::IInMemoryStore ^ GetStore(Microsoft::EntityFrameworkCore::InMemory::Storage::Internal::IInMemoryStoreCache ^ storeCache, Microsoft::EntityFrameworkCore::Infrastructure::IDbContextOptions ^ options);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::InMemory::Storage::Internal::IInMemoryStore ^ GetStore(Microsoft::EntityFrameworkCore::InMemory::Storage::Internal::IInMemoryStoreCache ^ storeCache, Microsoft::EntityFrameworkCore::Infrastructure::IDbContextOptions ^ options);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="storeCache" Type="Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStoreCache" RefType="this" />
          <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions" />
        </Parameters>
        <Docs>
          <param name="storeCache">To be added.</param>
          <param name="options">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCacheExtensions" Member="M:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCacheExtensions.GetStore(Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStoreCache,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="IsInMemory">
        <MemberSignature Language="C#" Value="public static bool IsInMemory (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade database);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInMemory(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade database) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemoryDatabaseFacadeExtensions.IsInMemory(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsInMemory (database As DatabaseFacade) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsInMemory : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade -&gt; bool" Usage="Microsoft.EntityFrameworkCore.InMemoryDatabaseFacadeExtensions.IsInMemory database" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsInMemory(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ database);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="database" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
        </Parameters>
        <Docs>
          <param name="database"> The facade from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" />. </param>
          <summary>
            <para>
                    Returns true if the database provider currently in use is the in-memory provider.
                </para>
            <para>
                    This method can only be used after the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> has been configured because
                    it is only then that the provider is known. This means that this method cannot be used
                    in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> because this is where application code sets the
                    provider to use as part of configuring the context.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.InMemoryDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.InMemoryDatabaseFacadeExtensions.IsInMemory(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />
      </Targets>
      <Member MemberName="UseInMemoryDatabase">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseInMemoryDatabase (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; inMemoryOptionsAction = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseInMemoryDatabase(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; inMemoryOptionsAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseInMemoryDatabase (optionsBuilder As DbContextOptionsBuilder, Optional inMemoryOptionsAction As Action(Of InMemoryDbContextOptionsBuilder) = null) As DbContextOptionsBuilder" />
        <MemberSignature Language="F#" Value="static member UseInMemoryDatabase : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder * Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase (optionsBuilder, inMemoryOptionsAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" RefType="this" />
          <Parameter Name="inMemoryOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="optionsBuilder"> The builder being used to configure the context. </param>
          <param name="inMemoryOptionsAction">An optional action to allow additional in-memory specific configuration.</param>
          <summary>
                Configures the context to connect to an in-memory database. By default, the same in-memory database instance
                will be shared by all instances of a given context type. To change this, use the overload that takes a database name. 
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions" Member="M:Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />
      </Targets>
      <Member MemberName="UseInMemoryDatabase">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseInMemoryDatabase (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, string databaseName, Microsoft.EntityFrameworkCore.Storage.InMemoryDatabaseRoot databaseRoot, Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; inMemoryOptionsAction = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseInMemoryDatabase(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, string databaseName, class Microsoft.EntityFrameworkCore.Storage.InMemoryDatabaseRoot databaseRoot, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; inMemoryOptionsAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,Microsoft.EntityFrameworkCore.Storage.InMemoryDatabaseRoot,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseInMemoryDatabase (optionsBuilder As DbContextOptionsBuilder, databaseName As String, databaseRoot As InMemoryDatabaseRoot, Optional inMemoryOptionsAction As Action(Of InMemoryDbContextOptionsBuilder) = null) As DbContextOptionsBuilder" />
        <MemberSignature Language="F#" Value="static member UseInMemoryDatabase : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder * string * Microsoft.EntityFrameworkCore.Storage.InMemoryDatabaseRoot * Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase (optionsBuilder, databaseName, databaseRoot, inMemoryOptionsAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" RefType="this" />
          <Parameter Name="databaseName" Type="System.String" />
          <Parameter Name="databaseRoot" Type="Microsoft.EntityFrameworkCore.Storage.InMemoryDatabaseRoot" />
          <Parameter Name="inMemoryOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="optionsBuilder"> The builder being used to configure the context. </param>
          <param name="databaseName">
                The name of the in-memory database. This allows the scope of the in-memory database to be controlled
                independently of the context. The in-memory database is shared anywhere the same name is used.
            </param>
          <param name="databaseRoot">
                All in-memory databases will be rooted in this object, allowing the application
                to control their lifetime. This is useful when sometimes the context instance
                is created explicitly with <c>new</c> while at other times it is resolved using dependency injection.
            </param>
          <param name="inMemoryOptionsAction">An optional action to allow additional in-memory specific configuration.</param>
          <summary>
                Configures the context to connect to a named in-memory database.
                The in-memory database is shared anywhere the same name is used, but only for a given
                service provider.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions" Member="M:Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,Microsoft.EntityFrameworkCore.Storage.InMemoryDatabaseRoot,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />
      </Targets>
      <Member MemberName="UseInMemoryDatabase">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseInMemoryDatabase (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, string databaseName, Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; inMemoryOptionsAction = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseInMemoryDatabase(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, string databaseName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; inMemoryOptionsAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseInMemoryDatabase (optionsBuilder As DbContextOptionsBuilder, databaseName As String, Optional inMemoryOptionsAction As Action(Of InMemoryDbContextOptionsBuilder) = null) As DbContextOptionsBuilder" />
        <MemberSignature Language="F#" Value="static member UseInMemoryDatabase : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase (optionsBuilder, databaseName, inMemoryOptionsAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" RefType="this" />
          <Parameter Name="databaseName" Type="System.String" />
          <Parameter Name="inMemoryOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="optionsBuilder"> The builder being used to configure the context. </param>
          <param name="databaseName">
                The name of the in-memory database. This allows the scope of the in-memory database to be controlled
                independently of the context.
            </param>
          <param name="inMemoryOptionsAction">An optional action to allow additional in-memory specific configuration.</param>
          <summary>
                Configures the context to connect to an in-memory database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions" Member="M:Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" />
      </Targets>
      <Member MemberName="UseInMemoryDatabase&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; UseInMemoryDatabase&lt;TContext&gt; (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; optionsBuilder, Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; inMemoryOptionsAction = null) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; UseInMemoryDatabase&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; optionsBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; inMemoryOptionsAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseInMemoryDatabase(Of TContext As DbContext) (optionsBuilder As DbContextOptionsBuilder(Of TContext), Optional inMemoryOptionsAction As Action(Of InMemoryDbContextOptionsBuilder) = null) As DbContextOptionsBuilder(Of TContext)" />
        <MemberSignature Language="F#" Value="static member UseInMemoryDatabase : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; * Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase (optionsBuilder, inMemoryOptionsAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;" RefType="this" />
          <Parameter Name="inMemoryOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context being configured. </typeparam>
          <param name="optionsBuilder"> The builder being used to configure the context. </param>
          <param name="inMemoryOptionsAction">An optional action to allow additional in-memory specific configuration.</param>
          <summary>
                Configures the context to connect to an in-memory database. By default, the same in-memory database instance
                will be shared by all instances of a given context type. To change this, use the overload that takes a database name. 
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions" Member="M:Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" />
      </Targets>
      <Member MemberName="UseInMemoryDatabase&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; UseInMemoryDatabase&lt;TContext&gt; (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; optionsBuilder, string databaseName, Microsoft.EntityFrameworkCore.Storage.InMemoryDatabaseRoot databaseRoot, Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; inMemoryOptionsAction = null) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; UseInMemoryDatabase&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; optionsBuilder, string databaseName, class Microsoft.EntityFrameworkCore.Storage.InMemoryDatabaseRoot databaseRoot, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; inMemoryOptionsAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.String,Microsoft.EntityFrameworkCore.Storage.InMemoryDatabaseRoot,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseInMemoryDatabase(Of TContext As DbContext) (optionsBuilder As DbContextOptionsBuilder(Of TContext), databaseName As String, databaseRoot As InMemoryDatabaseRoot, Optional inMemoryOptionsAction As Action(Of InMemoryDbContextOptionsBuilder) = null) As DbContextOptionsBuilder(Of TContext)" />
        <MemberSignature Language="F#" Value="static member UseInMemoryDatabase : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; * string * Microsoft.EntityFrameworkCore.Storage.InMemoryDatabaseRoot * Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase (optionsBuilder, databaseName, databaseRoot, inMemoryOptionsAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;" RefType="this" />
          <Parameter Name="databaseName" Type="System.String" />
          <Parameter Name="databaseRoot" Type="Microsoft.EntityFrameworkCore.Storage.InMemoryDatabaseRoot" />
          <Parameter Name="inMemoryOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context being configured. </typeparam>
          <param name="optionsBuilder"> The builder being used to configure the context. </param>
          <param name="databaseName">
                The name of the in-memory database. This allows the scope of the in-memory database to be controlled
                independently of the context. The in-memory database is shared anywhere the same name is used.
            </param>
          <param name="databaseRoot">
                All in-memory databases will be rooted in this object, allowing the application
                to control their lifetime. This is useful when sometimes the context instance
                is created explicitly with <c>new</c> while at other times it is resolved using dependency injection.
            </param>
          <param name="inMemoryOptionsAction">An optional action to allow additional in-memory specific configuration.</param>
          <summary>
                Configures the context to connect to an in-memory database.
                The in-memory database is shared anywhere the same name is used, but only for a given
                service provider.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions" Member="M:Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.String,Microsoft.EntityFrameworkCore.Storage.InMemoryDatabaseRoot,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" />
      </Targets>
      <Member MemberName="UseInMemoryDatabase&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; UseInMemoryDatabase&lt;TContext&gt; (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; optionsBuilder, string databaseName, Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; inMemoryOptionsAction = null) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; UseInMemoryDatabase&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; optionsBuilder, string databaseName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; inMemoryOptionsAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseInMemoryDatabase(Of TContext As DbContext) (optionsBuilder As DbContextOptionsBuilder(Of TContext), databaseName As String, Optional inMemoryOptionsAction As Action(Of InMemoryDbContextOptionsBuilder) = null) As DbContextOptionsBuilder(Of TContext)" />
        <MemberSignature Language="F#" Value="static member UseInMemoryDatabase : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase (optionsBuilder, databaseName, inMemoryOptionsAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;" RefType="this" />
          <Parameter Name="databaseName" Type="System.String" />
          <Parameter Name="inMemoryOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context being configured. </typeparam>
          <param name="optionsBuilder"> The builder being used to configure the context. </param>
          <param name="databaseName">
                The name of the in-memory database. This allows the scope of the in-memory database to be controlled
                independently of the context.
            </param>
          <param name="inMemoryOptionsAction">An optional action to allow additional in-memory specific configuration.</param>
          <summary>
                Configures the context to connect to an in-memory database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions" Member="M:Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="CascadeDelete">
        <MemberSignature Language="C#" Value="public static void CascadeDelete (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry childEntry, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry parentEntry, Microsoft.EntityFrameworkCore.EntityState state);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CascadeDelete(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Update&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry childEntry, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry parentEntry, valuetype Microsoft.EntityFrameworkCore.EntityState state) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDelete(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CascadeDelete (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Update), childEntry As InternalEntityEntry, parentEntry As InternalEntityEntry, state As EntityState)" />
        <MemberSignature Language="F#" Value="static member CascadeDelete : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.EntityState -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDelete (diagnostics, childEntry, parentEntry, state)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void CascadeDelete(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Update ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ childEntry, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ parentEntry, Microsoft::EntityFrameworkCore::EntityState state);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Update&gt;" RefType="this" />
          <Parameter Name="childEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="parentEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="state" Type="Microsoft.EntityFrameworkCore.EntityState" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="childEntry">To be added.</param>
          <param name="parentEntry">To be added.</param>
          <param name="state">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDelete(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="CascadeDeleteOrphan">
        <MemberSignature Language="C#" Value="public static void CascadeDeleteOrphan (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry childEntry, Microsoft.EntityFrameworkCore.Metadata.IEntityType parentEntityType, Microsoft.EntityFrameworkCore.EntityState state);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CascadeDeleteOrphan(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Update&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry childEntry, class Microsoft.EntityFrameworkCore.Metadata.IEntityType parentEntityType, valuetype Microsoft.EntityFrameworkCore.EntityState state) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDeleteOrphan(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.EntityState)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CascadeDeleteOrphan (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Update), childEntry As InternalEntityEntry, parentEntityType As IEntityType, state As EntityState)" />
        <MemberSignature Language="F#" Value="static member CascadeDeleteOrphan : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.EntityState -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDeleteOrphan (diagnostics, childEntry, parentEntityType, state)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void CascadeDeleteOrphan(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Update ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ childEntry, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ parentEntityType, Microsoft::EntityFrameworkCore::EntityState state);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Update&gt;" RefType="this" />
          <Parameter Name="childEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="parentEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
          <Parameter Name="state" Type="Microsoft.EntityFrameworkCore.EntityState" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="childEntry">To be added.</param>
          <param name="parentEntityType">To be added.</param>
          <param name="state">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDeleteOrphan(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.EntityState)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="CascadeDeleteOrphanSensitive">
        <MemberSignature Language="C#" Value="public static void CascadeDeleteOrphanSensitive (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry childEntry, Microsoft.EntityFrameworkCore.Metadata.IEntityType parentEntityType, Microsoft.EntityFrameworkCore.EntityState state);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CascadeDeleteOrphanSensitive(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Update&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry childEntry, class Microsoft.EntityFrameworkCore.Metadata.IEntityType parentEntityType, valuetype Microsoft.EntityFrameworkCore.EntityState state) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDeleteOrphanSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.EntityState)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CascadeDeleteOrphanSensitive (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Update), childEntry As InternalEntityEntry, parentEntityType As IEntityType, state As EntityState)" />
        <MemberSignature Language="F#" Value="static member CascadeDeleteOrphanSensitive : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.EntityState -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDeleteOrphanSensitive (diagnostics, childEntry, parentEntityType, state)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void CascadeDeleteOrphanSensitive(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Update ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ childEntry, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ parentEntityType, Microsoft::EntityFrameworkCore::EntityState state);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Update&gt;" RefType="this" />
          <Parameter Name="childEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="parentEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
          <Parameter Name="state" Type="Microsoft.EntityFrameworkCore.EntityState" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="childEntry">To be added.</param>
          <param name="parentEntityType">To be added.</param>
          <param name="state">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDeleteOrphanSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.EntityState)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="CascadeDeleteSensitive">
        <MemberSignature Language="C#" Value="public static void CascadeDeleteSensitive (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry childEntry, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry parentEntry, Microsoft.EntityFrameworkCore.EntityState state);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CascadeDeleteSensitive(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Update&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry childEntry, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry parentEntry, valuetype Microsoft.EntityFrameworkCore.EntityState state) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDeleteSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CascadeDeleteSensitive (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Update), childEntry As InternalEntityEntry, parentEntry As InternalEntityEntry, state As EntityState)" />
        <MemberSignature Language="F#" Value="static member CascadeDeleteSensitive : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.EntityState -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDeleteSensitive (diagnostics, childEntry, parentEntry, state)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void CascadeDeleteSensitive(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Update ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ childEntry, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ parentEntry, Microsoft::EntityFrameworkCore::EntityState state);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Update&gt;" RefType="this" />
          <Parameter Name="childEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="parentEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="state" Type="Microsoft.EntityFrameworkCore.EntityState" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="childEntry">To be added.</param>
          <param name="parentEntry">To be added.</param>
          <param name="state">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CascadeDeleteSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="CollectionChangeDetected">
        <MemberSignature Language="C#" Value="public static void CollectionChangeDetected (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, System.Collections.Generic.ISet&lt;object&gt; added, System.Collections.Generic.ISet&lt;object&gt; removed);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CollectionChangeDetected(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class System.Collections.Generic.ISet`1&lt;object&gt; added, class System.Collections.Generic.ISet`1&lt;object&gt; removed) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CollectionChangeDetected(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.ISet{System.Object},System.Collections.Generic.ISet{System.Object})" />
        <MemberSignature Language="F#" Value="static member CollectionChangeDetected : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.INavigation * System.Collections.Generic.ISet&lt;obj&gt; * System.Collections.Generic.ISet&lt;obj&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CollectionChangeDetected (diagnostics, internalEntityEntry, navigation, added, removed)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void CollectionChangeDetected(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ internalEntityEntry, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation, System::Collections::Generic::ISet&lt;System::Object ^&gt; ^ added, System::Collections::Generic::ISet&lt;System::Object ^&gt; ^ removed);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="internalEntityEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
          <Parameter Name="added" Type="System.Collections.Generic.ISet&lt;System.Object&gt;" />
          <Parameter Name="removed" Type="System.Collections.Generic.ISet&lt;System.Object&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="internalEntityEntry">To be added.</param>
          <param name="navigation">To be added.</param>
          <param name="added">To be added.</param>
          <param name="removed">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CollectionChangeDetected(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.ISet{System.Object},System.Collections.Generic.ISet{System.Object})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="CollectionChangeDetectedSensitive">
        <MemberSignature Language="C#" Value="public static void CollectionChangeDetectedSensitive (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, System.Collections.Generic.ISet&lt;object&gt; added, System.Collections.Generic.ISet&lt;object&gt; removed);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CollectionChangeDetectedSensitive(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class System.Collections.Generic.ISet`1&lt;object&gt; added, class System.Collections.Generic.ISet`1&lt;object&gt; removed) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CollectionChangeDetectedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.ISet{System.Object},System.Collections.Generic.ISet{System.Object})" />
        <MemberSignature Language="F#" Value="static member CollectionChangeDetectedSensitive : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.INavigation * System.Collections.Generic.ISet&lt;obj&gt; * System.Collections.Generic.ISet&lt;obj&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CollectionChangeDetectedSensitive (diagnostics, internalEntityEntry, navigation, added, removed)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void CollectionChangeDetectedSensitive(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ internalEntityEntry, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation, System::Collections::Generic::ISet&lt;System::Object ^&gt; ^ added, System::Collections::Generic::ISet&lt;System::Object ^&gt; ^ removed);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="internalEntityEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
          <Parameter Name="added" Type="System.Collections.Generic.ISet&lt;System.Object&gt;" />
          <Parameter Name="removed" Type="System.Collections.Generic.ISet&lt;System.Object&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="internalEntityEntry">To be added.</param>
          <param name="navigation">To be added.</param>
          <param name="added">To be added.</param>
          <param name="removed">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.CollectionChangeDetectedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.ISet{System.Object},System.Collections.Generic.ISet{System.Object})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning">
        <MemberSignature Language="C#" Value="public static void ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, System.Reflection.MemberInfo property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class System.Reflection.MemberInfo property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Reflection.MemberInfo)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model), navigation As INavigation, property As MemberInfo)" />
        <MemberSignature Language="F#" Value="static member ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; * Microsoft.EntityFrameworkCore.Metadata.INavigation * System.Reflection.MemberInfo -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning (diagnostics, navigation, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation, System::Reflection::MemberInfo ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" RefType="this" />
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
          <Parameter Name="property" Type="System.Reflection.MemberInfo" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="navigation">To be added.</param>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Reflection.MemberInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ConflictingShadowForeignKeysWarning">
        <MemberSignature Language="C#" Value="public static void ConflictingShadowForeignKeysWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConflictingShadowForeignKeysWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ConflictingShadowForeignKeysWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ConflictingShadowForeignKeysWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model), foreignKey As IForeignKey)" />
        <MemberSignature Language="F#" Value="static member ConflictingShadowForeignKeysWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; * Microsoft.EntityFrameworkCore.Metadata.IForeignKey -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ConflictingShadowForeignKeysWarning (diagnostics, foreignKey)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ConflictingShadowForeignKeysWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" RefType="this" />
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="foreignKey">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ConflictingShadowForeignKeysWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ContextDisposed">
        <MemberSignature Language="C#" Value="public static void ContextDisposed (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; diagnostics, Microsoft.EntityFrameworkCore.DbContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ContextDisposed(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Infrastructure&gt; diagnostics, class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ContextDisposed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},Microsoft.EntityFrameworkCore.DbContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ContextDisposed (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Infrastructure), context As DbContext)" />
        <MemberSignature Language="F#" Value="static member ContextDisposed : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; * Microsoft.EntityFrameworkCore.DbContext -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ContextDisposed (diagnostics, context)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ContextDisposed(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Infrastructure ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::DbContext ^ context);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Infrastructure&gt;" RefType="this" />
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="context">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ContextDisposed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},Microsoft.EntityFrameworkCore.DbContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ContextInitialized">
        <MemberSignature Language="C#" Value="public static void ContextInitialized (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; diagnostics, Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.DbContextOptions contextOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ContextInitialized(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Infrastructure&gt; diagnostics, class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.DbContextOptions contextOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ContextInitialized(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.DbContextOptions)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ContextInitialized (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Infrastructure), context As DbContext, contextOptions As DbContextOptions)" />
        <MemberSignature Language="F#" Value="static member ContextInitialized : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; * Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.DbContextOptions -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ContextInitialized (diagnostics, context, contextOptions)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ContextInitialized(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Infrastructure ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::DbContext ^ context, Microsoft::EntityFrameworkCore::DbContextOptions ^ contextOptions);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Infrastructure&gt;" RefType="this" />
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
          <Parameter Name="contextOptions" Type="Microsoft.EntityFrameworkCore.DbContextOptions" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="context">To be added.</param>
          <param name="contextOptions">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ContextInitialized(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.DbContextOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="DetectChangesCompleted">
        <MemberSignature Language="C#" Value="public static void DetectChangesCompleted (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.DbContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DetectChangesCompleted(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.DetectChangesCompleted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.DbContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub DetectChangesCompleted (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.ChangeTracking), context As DbContext)" />
        <MemberSignature Language="F#" Value="static member DetectChangesCompleted : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.DbContext -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.DetectChangesCompleted (diagnostics, context)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void DetectChangesCompleted(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::DbContext ^ context);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="context">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.DetectChangesCompleted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.DbContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="DetectChangesStarting">
        <MemberSignature Language="C#" Value="public static void DetectChangesStarting (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.DbContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DetectChangesStarting(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.DetectChangesStarting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.DbContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub DetectChangesStarting (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.ChangeTracking), context As DbContext)" />
        <MemberSignature Language="F#" Value="static member DetectChangesStarting : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.DbContext -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.DetectChangesStarting (diagnostics, context)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void DetectChangesStarting(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::DbContext ^ context);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="context">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.DetectChangesStarting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.DbContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="DuplicateDependentEntityTypeInstanceWarning">
        <MemberSignature Language="C#" Value="public static void DuplicateDependentEntityTypeInstanceWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.IEntityType dependent1, Microsoft.EntityFrameworkCore.Metadata.IEntityType dependent2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DuplicateDependentEntityTypeInstanceWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Update&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.IEntityType dependent1, class Microsoft.EntityFrameworkCore.Metadata.IEntityType dependent2) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.DuplicateDependentEntityTypeInstanceWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub DuplicateDependentEntityTypeInstanceWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Update), dependent1 As IEntityType, dependent2 As IEntityType)" />
        <MemberSignature Language="F#" Value="static member DuplicateDependentEntityTypeInstanceWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; * Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.DuplicateDependentEntityTypeInstanceWarning (diagnostics, dependent1, dependent2)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void DuplicateDependentEntityTypeInstanceWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Update ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ dependent1, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ dependent2);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Update&gt;" RefType="this" />
          <Parameter Name="dependent1" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
          <Parameter Name="dependent2" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="dependent1">To be added.</param>
          <param name="dependent2">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.DuplicateDependentEntityTypeInstanceWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ExecutionStrategyRetrying">
        <MemberSignature Language="C#" Value="public static void ExecutionStrategyRetrying (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; diagnostics, System.Collections.Generic.IReadOnlyList&lt;Exception&gt; exceptionsEncountered, TimeSpan delay, bool async);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExecutionStrategyRetrying(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Infrastructure&gt; diagnostics, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Exception&gt; exceptionsEncountered, valuetype System.TimeSpan delay, bool async) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ExecutionStrategyRetrying(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},System.Collections.Generic.IReadOnlyList{System.Exception},System.TimeSpan,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ExecutionStrategyRetrying (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Infrastructure), exceptionsEncountered As IReadOnlyList(Of Exception), delay As TimeSpan, async As Boolean)" />
        <MemberSignature Language="F#" Value="static member ExecutionStrategyRetrying : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; * System.Collections.Generic.IReadOnlyList&lt;Exception&gt; * TimeSpan * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ExecutionStrategyRetrying (diagnostics, exceptionsEncountered, delay, async)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ExecutionStrategyRetrying(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Infrastructure ^&gt; ^ diagnostics, System::Collections::Generic::IReadOnlyList&lt;Exception ^&gt; ^ exceptionsEncountered, TimeSpan delay, bool async);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Infrastructure&gt;" RefType="this" />
          <Parameter Name="exceptionsEncountered" Type="System.Collections.Generic.IReadOnlyList&lt;System.Exception&gt;" />
          <Parameter Name="delay" Type="System.TimeSpan" />
          <Parameter Name="async" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="exceptionsEncountered">To be added.</param>
          <param name="delay">To be added.</param>
          <param name="async">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ExecutionStrategyRetrying(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},System.Collections.Generic.IReadOnlyList{System.Exception},System.TimeSpan,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="FirstWithoutOrderByAndFilterWarning">
        <MemberSignature Language="C#" Value="public static void FirstWithoutOrderByAndFilterWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; diagnostics, Remotion.Linq.QueryModel queryModel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FirstWithoutOrderByAndFilterWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; diagnostics, class Remotion.Linq.QueryModel queryModel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.FirstWithoutOrderByAndFilterWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Remotion.Linq.QueryModel)" />
        <MemberSignature Language="F#" Value="static member FirstWithoutOrderByAndFilterWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * Remotion.Linq.QueryModel -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.FirstWithoutOrderByAndFilterWarning (diagnostics, queryModel)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void FirstWithoutOrderByAndFilterWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Query ^&gt; ^ diagnostics, Remotion::Linq::QueryModel ^ queryModel);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" RefType="this" />
          <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="queryModel">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.FirstWithoutOrderByAndFilterWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Remotion.Linq.QueryModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyAttributesOnBothNavigationsWarning">
        <MemberSignature Language="C#" Value="public static void ForeignKeyAttributesOnBothNavigationsWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.INavigation firstNavigation, Microsoft.EntityFrameworkCore.Metadata.INavigation secondNavigation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyAttributesOnBothNavigationsWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.INavigation firstNavigation, class Microsoft.EntityFrameworkCore.Metadata.INavigation secondNavigation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyAttributesOnBothNavigationsWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ForeignKeyAttributesOnBothNavigationsWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model), firstNavigation As INavigation, secondNavigation As INavigation)" />
        <MemberSignature Language="F#" Value="static member ForeignKeyAttributesOnBothNavigationsWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; * Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyAttributesOnBothNavigationsWarning (diagnostics, firstNavigation, secondNavigation)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyAttributesOnBothNavigationsWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ firstNavigation, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ secondNavigation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" RefType="this" />
          <Parameter Name="firstNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
          <Parameter Name="secondNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="firstNavigation">To be added.</param>
          <param name="secondNavigation">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyAttributesOnBothNavigationsWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyAttributesOnBothPropertiesWarning">
        <MemberSignature Language="C#" Value="public static void ForeignKeyAttributesOnBothPropertiesWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.INavigation firstNavigation, Microsoft.EntityFrameworkCore.Metadata.INavigation secondNavigation, System.Reflection.MemberInfo firstProperty, System.Reflection.MemberInfo secondProperty);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyAttributesOnBothPropertiesWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.INavigation firstNavigation, class Microsoft.EntityFrameworkCore.Metadata.INavigation secondNavigation, class System.Reflection.MemberInfo firstProperty, class System.Reflection.MemberInfo secondProperty) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyAttributesOnBothPropertiesWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Reflection.MemberInfo,System.Reflection.MemberInfo)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ForeignKeyAttributesOnBothPropertiesWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model), firstNavigation As INavigation, secondNavigation As INavigation, firstProperty As MemberInfo, secondProperty As MemberInfo)" />
        <MemberSignature Language="F#" Value="static member ForeignKeyAttributesOnBothPropertiesWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; * Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Metadata.INavigation * System.Reflection.MemberInfo * System.Reflection.MemberInfo -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyAttributesOnBothPropertiesWarning (diagnostics, firstNavigation, secondNavigation, firstProperty, secondProperty)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyAttributesOnBothPropertiesWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ firstNavigation, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ secondNavigation, System::Reflection::MemberInfo ^ firstProperty, System::Reflection::MemberInfo ^ secondProperty);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" RefType="this" />
          <Parameter Name="firstNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
          <Parameter Name="secondNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
          <Parameter Name="firstProperty" Type="System.Reflection.MemberInfo" />
          <Parameter Name="secondProperty" Type="System.Reflection.MemberInfo" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="firstNavigation">To be added.</param>
          <param name="secondNavigation">To be added.</param>
          <param name="firstProperty">To be added.</param>
          <param name="secondProperty">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyAttributesOnBothPropertiesWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Reflection.MemberInfo,System.Reflection.MemberInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyChangeDetected">
        <MemberSignature Language="C#" Value="public static void ForeignKeyChangeDetected (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IProperty property, object oldValue, object newValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyChangeDetected(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, object oldValue, object newValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyChangeDetected(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Object)" />
        <MemberSignature Language="F#" Value="static member ForeignKeyChangeDetected : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IProperty * obj * obj -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyChangeDetected (diagnostics, internalEntityEntry, property, oldValue, newValue)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyChangeDetected(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ internalEntityEntry, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, System::Object ^ oldValue, System::Object ^ newValue);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="internalEntityEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
          <Parameter Name="oldValue" Type="System.Object" />
          <Parameter Name="newValue" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="internalEntityEntry">To be added.</param>
          <param name="property">To be added.</param>
          <param name="oldValue">To be added.</param>
          <param name="newValue">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyChangeDetected(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyChangeDetectedSensitive">
        <MemberSignature Language="C#" Value="public static void ForeignKeyChangeDetectedSensitive (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IProperty property, object oldValue, object newValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyChangeDetectedSensitive(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, object oldValue, object newValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyChangeDetectedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Object)" />
        <MemberSignature Language="F#" Value="static member ForeignKeyChangeDetectedSensitive : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IProperty * obj * obj -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyChangeDetectedSensitive (diagnostics, internalEntityEntry, property, oldValue, newValue)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyChangeDetectedSensitive(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ internalEntityEntry, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, System::Object ^ oldValue, System::Object ^ newValue);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="internalEntityEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
          <Parameter Name="oldValue" Type="System.Object" />
          <Parameter Name="newValue" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="internalEntityEntry">To be added.</param>
          <param name="property">To be added.</param>
          <param name="oldValue">To be added.</param>
          <param name="newValue">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ForeignKeyChangeDetectedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="IncludeIgnoredWarning">
        <MemberSignature Language="C#" Value="public static void IncludeIgnoredWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; diagnostics, Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator includeResultOperator);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IncludeIgnoredWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; diagnostics, class Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator includeResultOperator) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.IncludeIgnoredWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator)" />
        <MemberSignature Language="F#" Value="static member IncludeIgnoredWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.IncludeIgnoredWarning (diagnostics, includeResultOperator)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void IncludeIgnoredWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Query ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Query::ResultOperators::Internal::IncludeResultOperator ^ includeResultOperator);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" RefType="this" />
          <Parameter Name="includeResultOperator" Type="Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="includeResultOperator">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.IncludeIgnoredWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="IncompatibleMatchingForeignKeyProperties">
        <MemberSignature Language="C#" Value="public static void IncompatibleMatchingForeignKeyProperties (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; diagnostics, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; foreignKeyProperties, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; principalKeyProperties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IncompatibleMatchingForeignKeyProperties(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; diagnostics, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; foreignKeyProperties, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; principalKeyProperties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.IncompatibleMatchingForeignKeyProperties(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub IncompatibleMatchingForeignKeyProperties (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model), foreignKeyProperties As IReadOnlyList(Of IPropertyBase), principalKeyProperties As IReadOnlyList(Of IPropertyBase))" />
        <MemberSignature Language="F#" Value="static member IncompatibleMatchingForeignKeyProperties : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.IncompatibleMatchingForeignKeyProperties (diagnostics, foreignKeyProperties, principalKeyProperties)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void IncompatibleMatchingForeignKeyProperties(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model ^&gt; ^ diagnostics, System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^&gt; ^ foreignKeyProperties, System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^&gt; ^ principalKeyProperties);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" RefType="this" />
          <Parameter Name="foreignKeyProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;" />
          <Parameter Name="principalKeyProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="foreignKeyProperties">To be added.</param>
          <param name="principalKeyProperties">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.IncompatibleMatchingForeignKeyProperties(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="LazyLoadOnDisposedContextWarning">
        <MemberSignature Language="C#" Value="public static void LazyLoadOnDisposedContextWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; diagnostics, Microsoft.EntityFrameworkCore.DbContext context, object entityType, string navigationName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LazyLoadOnDisposedContextWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Infrastructure&gt; diagnostics, class Microsoft.EntityFrameworkCore.DbContext context, object entityType, string navigationName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.LazyLoadOnDisposedContextWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},Microsoft.EntityFrameworkCore.DbContext,System.Object,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub LazyLoadOnDisposedContextWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Infrastructure), context As DbContext, entityType As Object, navigationName As String)" />
        <MemberSignature Language="F#" Value="static member LazyLoadOnDisposedContextWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; * Microsoft.EntityFrameworkCore.DbContext * obj * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.LazyLoadOnDisposedContextWarning (diagnostics, context, entityType, navigationName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void LazyLoadOnDisposedContextWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Infrastructure ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::DbContext ^ context, System::Object ^ entityType, System::String ^ navigationName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Infrastructure&gt;" RefType="this" />
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
          <Parameter Name="entityType" Type="System.Object" />
          <Parameter Name="navigationName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="context">To be added.</param>
          <param name="entityType">To be added.</param>
          <param name="navigationName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.LazyLoadOnDisposedContextWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},Microsoft.EntityFrameworkCore.DbContext,System.Object,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ManyServiceProvidersCreatedWarning">
        <MemberSignature Language="C#" Value="public static void ManyServiceProvidersCreatedWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; diagnostics, System.Collections.Generic.ICollection&lt;IServiceProvider&gt; serviceProviders);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ManyServiceProvidersCreatedWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Infrastructure&gt; diagnostics, class System.Collections.Generic.ICollection`1&lt;class System.IServiceProvider&gt; serviceProviders) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ManyServiceProvidersCreatedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},System.Collections.Generic.ICollection{System.IServiceProvider})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ManyServiceProvidersCreatedWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Infrastructure), serviceProviders As ICollection(Of IServiceProvider))" />
        <MemberSignature Language="F#" Value="static member ManyServiceProvidersCreatedWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; * System.Collections.Generic.ICollection&lt;IServiceProvider&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ManyServiceProvidersCreatedWarning (diagnostics, serviceProviders)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ManyServiceProvidersCreatedWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Infrastructure ^&gt; ^ diagnostics, System::Collections::Generic::ICollection&lt;IServiceProvider ^&gt; ^ serviceProviders);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Infrastructure&gt;" RefType="this" />
          <Parameter Name="serviceProviders" Type="System.Collections.Generic.ICollection&lt;System.IServiceProvider&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="serviceProviders">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ManyServiceProvidersCreatedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},System.Collections.Generic.ICollection{System.IServiceProvider})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="MultipleInversePropertiesSameTargetWarning">
        <MemberSignature Language="C#" Value="public static void MultipleInversePropertiesSameTargetWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; diagnostics, System.Collections.Generic.IEnumerable&lt;Tuple&lt;System.Reflection.MemberInfo,Type&gt;&gt; conflictingNavigations, System.Reflection.MemberInfo inverseNavigation, Type targetType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MultipleInversePropertiesSameTargetWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; diagnostics, class System.Collections.Generic.IEnumerable`1&lt;class System.Tuple`2&lt;class System.Reflection.MemberInfo, class System.Type&gt;&gt; conflictingNavigations, class System.Reflection.MemberInfo inverseNavigation, class System.Type targetType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.MultipleInversePropertiesSameTargetWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.MemberInfo,System.Type}},System.Reflection.MemberInfo,System.Type)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub MultipleInversePropertiesSameTargetWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model), conflictingNavigations As IEnumerable(Of Tuple(Of MemberInfo, Type)), inverseNavigation As MemberInfo, targetType As Type)" />
        <MemberSignature Language="F#" Value="static member MultipleInversePropertiesSameTargetWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; * seq&lt;System.Reflection.MemberInfo * Type&gt; * System.Reflection.MemberInfo * Type -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.MultipleInversePropertiesSameTargetWarning (diagnostics, conflictingNavigations, inverseNavigation, targetType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MultipleInversePropertiesSameTargetWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model ^&gt; ^ diagnostics, System::Collections::Generic::IEnumerable&lt;Tuple&lt;System::Reflection::MemberInfo ^, Type ^&gt; ^&gt; ^ conflictingNavigations, System::Reflection::MemberInfo ^ inverseNavigation, Type ^ targetType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" RefType="this" />
          <Parameter Name="conflictingNavigations" Type="System.Collections.Generic.IEnumerable&lt;System.Tuple&lt;System.Reflection.MemberInfo,System.Type&gt;&gt;" />
          <Parameter Name="inverseNavigation" Type="System.Reflection.MemberInfo" />
          <Parameter Name="targetType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="conflictingNavigations">To be added.</param>
          <param name="inverseNavigation">To be added.</param>
          <param name="targetType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.MultipleInversePropertiesSameTargetWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.MemberInfo,System.Type}},System.Reflection.MemberInfo,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="MultipleNavigationProperties">
        <MemberSignature Language="C#" Value="public static void MultipleNavigationProperties (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; diagnostics, System.Collections.Generic.IEnumerable&lt;Tuple&lt;System.Reflection.MemberInfo,Type&gt;&gt; firstPropertyCollection, System.Collections.Generic.IEnumerable&lt;Tuple&lt;System.Reflection.MemberInfo,Type&gt;&gt; secondPropertyCollection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MultipleNavigationProperties(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; diagnostics, class System.Collections.Generic.IEnumerable`1&lt;class System.Tuple`2&lt;class System.Reflection.MemberInfo, class System.Type&gt;&gt; firstPropertyCollection, class System.Collections.Generic.IEnumerable`1&lt;class System.Tuple`2&lt;class System.Reflection.MemberInfo, class System.Type&gt;&gt; secondPropertyCollection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.MultipleNavigationProperties(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.MemberInfo,System.Type}},System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.MemberInfo,System.Type}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub MultipleNavigationProperties (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model), firstPropertyCollection As IEnumerable(Of Tuple(Of MemberInfo, Type)), secondPropertyCollection As IEnumerable(Of Tuple(Of MemberInfo, Type)))" />
        <MemberSignature Language="F#" Value="static member MultipleNavigationProperties : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; * seq&lt;System.Reflection.MemberInfo * Type&gt; * seq&lt;System.Reflection.MemberInfo * Type&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.MultipleNavigationProperties (diagnostics, firstPropertyCollection, secondPropertyCollection)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MultipleNavigationProperties(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model ^&gt; ^ diagnostics, System::Collections::Generic::IEnumerable&lt;Tuple&lt;System::Reflection::MemberInfo ^, Type ^&gt; ^&gt; ^ firstPropertyCollection, System::Collections::Generic::IEnumerable&lt;Tuple&lt;System::Reflection::MemberInfo ^, Type ^&gt; ^&gt; ^ secondPropertyCollection);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" RefType="this" />
          <Parameter Name="firstPropertyCollection" Type="System.Collections.Generic.IEnumerable&lt;System.Tuple&lt;System.Reflection.MemberInfo,System.Type&gt;&gt;" />
          <Parameter Name="secondPropertyCollection" Type="System.Collections.Generic.IEnumerable&lt;System.Tuple&lt;System.Reflection.MemberInfo,System.Type&gt;&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="firstPropertyCollection">To be added.</param>
          <param name="secondPropertyCollection">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.MultipleNavigationProperties(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.MemberInfo,System.Type}},System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.MemberInfo,System.Type}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="MultiplePrimaryKeyCandidates">
        <MemberSignature Language="C#" Value="public static void MultiplePrimaryKeyCandidates (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.IProperty firstProperty, Microsoft.EntityFrameworkCore.Metadata.IProperty secondProperty);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MultiplePrimaryKeyCandidates(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.IProperty firstProperty, class Microsoft.EntityFrameworkCore.Metadata.IProperty secondProperty) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.MultiplePrimaryKeyCandidates(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub MultiplePrimaryKeyCandidates (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model), firstProperty As IProperty, secondProperty As IProperty)" />
        <MemberSignature Language="F#" Value="static member MultiplePrimaryKeyCandidates : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; * Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.MultiplePrimaryKeyCandidates (diagnostics, firstProperty, secondProperty)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MultiplePrimaryKeyCandidates(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ firstProperty, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ secondProperty);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" RefType="this" />
          <Parameter Name="firstProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
          <Parameter Name="secondProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="firstProperty">To be added.</param>
          <param name="secondProperty">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.MultiplePrimaryKeyCandidates(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="NavigationIncluded">
        <MemberSignature Language="C#" Value="public static void NavigationIncluded (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; diagnostics, Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator includeResultOperator);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void NavigationIncluded(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; diagnostics, class Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator includeResultOperator) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NavigationIncluded(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator)" />
        <MemberSignature Language="F#" Value="static member NavigationIncluded : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NavigationIncluded (diagnostics, includeResultOperator)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void NavigationIncluded(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Query ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Query::ResultOperators::Internal::IncludeResultOperator ^ includeResultOperator);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" RefType="this" />
          <Parameter Name="includeResultOperator" Type="Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="includeResultOperator">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NavigationIncluded(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.IncludeResultOperator)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="NavigationLazyLoading">
        <MemberSignature Language="C#" Value="public static void NavigationLazyLoading (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; diagnostics, Microsoft.EntityFrameworkCore.DbContext context, object entityType, string navigationName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void NavigationLazyLoading(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Infrastructure&gt; diagnostics, class Microsoft.EntityFrameworkCore.DbContext context, object entityType, string navigationName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NavigationLazyLoading(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},Microsoft.EntityFrameworkCore.DbContext,System.Object,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub NavigationLazyLoading (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Infrastructure), context As DbContext, entityType As Object, navigationName As String)" />
        <MemberSignature Language="F#" Value="static member NavigationLazyLoading : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; * Microsoft.EntityFrameworkCore.DbContext * obj * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NavigationLazyLoading (diagnostics, context, entityType, navigationName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void NavigationLazyLoading(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Infrastructure ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::DbContext ^ context, System::Object ^ entityType, System::String ^ navigationName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Infrastructure&gt;" RefType="this" />
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
          <Parameter Name="entityType" Type="System.Object" />
          <Parameter Name="navigationName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="context">To be added.</param>
          <param name="entityType">To be added.</param>
          <param name="navigationName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NavigationLazyLoading(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},Microsoft.EntityFrameworkCore.DbContext,System.Object,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="NonDefiningInverseNavigationWarning">
        <MemberSignature Language="C#" Value="public static void NonDefiningInverseNavigationWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.IEntityType declaringType, System.Reflection.MemberInfo navigation, Microsoft.EntityFrameworkCore.Metadata.IEntityType targetType, System.Reflection.MemberInfo inverseNavigation, System.Reflection.MemberInfo definingNavigation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void NonDefiningInverseNavigationWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.IEntityType declaringType, class System.Reflection.MemberInfo navigation, class Microsoft.EntityFrameworkCore.Metadata.IEntityType targetType, class System.Reflection.MemberInfo inverseNavigation, class System.Reflection.MemberInfo definingNavigation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NonDefiningInverseNavigationWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.MemberInfo,System.Reflection.MemberInfo)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub NonDefiningInverseNavigationWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model), declaringType As IEntityType, navigation As MemberInfo, targetType As IEntityType, inverseNavigation As MemberInfo, definingNavigation As MemberInfo)" />
        <MemberSignature Language="F#" Value="static member NonDefiningInverseNavigationWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; * Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Reflection.MemberInfo * System.Reflection.MemberInfo -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NonDefiningInverseNavigationWarning (diagnostics, declaringType, navigation, targetType, inverseNavigation, definingNavigation)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void NonDefiningInverseNavigationWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ declaringType, System::Reflection::MemberInfo ^ navigation, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ targetType, System::Reflection::MemberInfo ^ inverseNavigation, System::Reflection::MemberInfo ^ definingNavigation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" RefType="this" />
          <Parameter Name="declaringType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
          <Parameter Name="navigation" Type="System.Reflection.MemberInfo" />
          <Parameter Name="targetType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
          <Parameter Name="inverseNavigation" Type="System.Reflection.MemberInfo" />
          <Parameter Name="definingNavigation" Type="System.Reflection.MemberInfo" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="declaringType">To be added.</param>
          <param name="navigation">To be added.</param>
          <param name="targetType">To be added.</param>
          <param name="inverseNavigation">To be added.</param>
          <param name="definingNavigation">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NonDefiningInverseNavigationWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.MemberInfo,System.Reflection.MemberInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="NonOwnershipInverseNavigationWarning">
        <MemberSignature Language="C#" Value="public static void NonOwnershipInverseNavigationWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.IEntityType declaringType, System.Reflection.MemberInfo navigation, Microsoft.EntityFrameworkCore.Metadata.IEntityType targetType, System.Reflection.MemberInfo inverseNavigation, System.Reflection.MemberInfo ownershipNavigation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void NonOwnershipInverseNavigationWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.IEntityType declaringType, class System.Reflection.MemberInfo navigation, class Microsoft.EntityFrameworkCore.Metadata.IEntityType targetType, class System.Reflection.MemberInfo inverseNavigation, class System.Reflection.MemberInfo ownershipNavigation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NonOwnershipInverseNavigationWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.MemberInfo,System.Reflection.MemberInfo)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub NonOwnershipInverseNavigationWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model), declaringType As IEntityType, navigation As MemberInfo, targetType As IEntityType, inverseNavigation As MemberInfo, ownershipNavigation As MemberInfo)" />
        <MemberSignature Language="F#" Value="static member NonOwnershipInverseNavigationWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; * Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Reflection.MemberInfo * System.Reflection.MemberInfo -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NonOwnershipInverseNavigationWarning (diagnostics, declaringType, navigation, targetType, inverseNavigation, ownershipNavigation)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void NonOwnershipInverseNavigationWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ declaringType, System::Reflection::MemberInfo ^ navigation, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ targetType, System::Reflection::MemberInfo ^ inverseNavigation, System::Reflection::MemberInfo ^ ownershipNavigation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" RefType="this" />
          <Parameter Name="declaringType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
          <Parameter Name="navigation" Type="System.Reflection.MemberInfo" />
          <Parameter Name="targetType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
          <Parameter Name="inverseNavigation" Type="System.Reflection.MemberInfo" />
          <Parameter Name="ownershipNavigation" Type="System.Reflection.MemberInfo" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="declaringType">To be added.</param>
          <param name="navigation">To be added.</param>
          <param name="targetType">To be added.</param>
          <param name="inverseNavigation">To be added.</param>
          <param name="ownershipNavigation">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.NonOwnershipInverseNavigationWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.MemberInfo,System.Reflection.MemberInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="PossibleUnintendedCollectionNavigationNullComparisonWarning">
        <MemberSignature Language="C#" Value="public static void PossibleUnintendedCollectionNavigationNullComparisonWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; diagnostics, System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; navigationPath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PossibleUnintendedCollectionNavigationNullComparisonWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; diagnostics, class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; navigationPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PossibleUnintendedCollectionNavigationNullComparisonWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub PossibleUnintendedCollectionNavigationNullComparisonWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Query), navigationPath As IReadOnlyCollection(Of IPropertyBase))" />
        <MemberSignature Language="F#" Value="static member PossibleUnintendedCollectionNavigationNullComparisonWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PossibleUnintendedCollectionNavigationNullComparisonWarning (diagnostics, navigationPath)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void PossibleUnintendedCollectionNavigationNullComparisonWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Query ^&gt; ^ diagnostics, System::Collections::Generic::IReadOnlyCollection&lt;Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^&gt; ^ navigationPath);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" RefType="this" />
          <Parameter Name="navigationPath" Type="System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="navigationPath">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PossibleUnintendedCollectionNavigationNullComparisonWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="PossibleUnintendedCollectionNavigationNullComparisonWarning">
        <MemberSignature Language="C#" Value="public static void PossibleUnintendedCollectionNavigationNullComparisonWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; diagnostics, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; navigationPath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PossibleUnintendedCollectionNavigationNullComparisonWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; diagnostics, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; navigationPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PossibleUnintendedCollectionNavigationNullComparisonWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub PossibleUnintendedCollectionNavigationNullComparisonWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Query), navigationPath As IReadOnlyList(Of IPropertyBase))" />
        <MemberSignature Language="F#" Value="static member PossibleUnintendedCollectionNavigationNullComparisonWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PossibleUnintendedCollectionNavigationNullComparisonWarning (diagnostics, navigationPath)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void PossibleUnintendedCollectionNavigationNullComparisonWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Query ^&gt; ^ diagnostics, System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^&gt; ^ navigationPath);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" RefType="this" />
          <Parameter Name="navigationPath" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="navigationPath">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PossibleUnintendedCollectionNavigationNullComparisonWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="PossibleUnintendedReferenceComparisonWarning">
        <MemberSignature Language="C#" Value="public static void PossibleUnintendedReferenceComparisonWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; diagnostics, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PossibleUnintendedReferenceComparisonWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; diagnostics, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PossibleUnintendedReferenceComparisonWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub PossibleUnintendedReferenceComparisonWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Query), left As Expression, right As Expression)" />
        <MemberSignature Language="F#" Value="static member PossibleUnintendedReferenceComparisonWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PossibleUnintendedReferenceComparisonWarning (diagnostics, left, right)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void PossibleUnintendedReferenceComparisonWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Query ^&gt; ^ diagnostics, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" RefType="this" />
          <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
          <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PossibleUnintendedReferenceComparisonWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="PropertyChangeDetected">
        <MemberSignature Language="C#" Value="public static void PropertyChangeDetected (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IProperty property, object oldValue, object newValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PropertyChangeDetected(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, object oldValue, object newValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PropertyChangeDetected(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Object)" />
        <MemberSignature Language="F#" Value="static member PropertyChangeDetected : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IProperty * obj * obj -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PropertyChangeDetected (diagnostics, internalEntityEntry, property, oldValue, newValue)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void PropertyChangeDetected(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ internalEntityEntry, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, System::Object ^ oldValue, System::Object ^ newValue);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="internalEntityEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
          <Parameter Name="oldValue" Type="System.Object" />
          <Parameter Name="newValue" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="internalEntityEntry">To be added.</param>
          <param name="property">To be added.</param>
          <param name="oldValue">To be added.</param>
          <param name="newValue">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PropertyChangeDetected(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="PropertyChangeDetectedSensitive">
        <MemberSignature Language="C#" Value="public static void PropertyChangeDetectedSensitive (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IProperty property, object oldValue, object newValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PropertyChangeDetectedSensitive(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, object oldValue, object newValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PropertyChangeDetectedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Object)" />
        <MemberSignature Language="F#" Value="static member PropertyChangeDetectedSensitive : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IProperty * obj * obj -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PropertyChangeDetectedSensitive (diagnostics, internalEntityEntry, property, oldValue, newValue)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void PropertyChangeDetectedSensitive(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ internalEntityEntry, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, System::Object ^ oldValue, System::Object ^ newValue);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="internalEntityEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
          <Parameter Name="oldValue" Type="System.Object" />
          <Parameter Name="newValue" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="internalEntityEntry">To be added.</param>
          <param name="property">To be added.</param>
          <param name="oldValue">To be added.</param>
          <param name="newValue">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.PropertyChangeDetectedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="QueryExecutionPlanned">
        <MemberSignature Language="C#" Value="public static void QueryExecutionPlanned (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; diagnostics, Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter expressionPrinter, System.Linq.Expressions.Expression queryExecutorExpression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void QueryExecutionPlanned(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; diagnostics, class Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter expressionPrinter, class System.Linq.Expressions.Expression queryExecutorExpression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryExecutionPlanned(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter,System.Linq.Expressions.Expression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub QueryExecutionPlanned (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Query), expressionPrinter As IExpressionPrinter, queryExecutorExpression As Expression)" />
        <MemberSignature Language="F#" Value="static member QueryExecutionPlanned : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter * System.Linq.Expressions.Expression -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryExecutionPlanned (diagnostics, expressionPrinter, queryExecutorExpression)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void QueryExecutionPlanned(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Query ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Query::Internal::IExpressionPrinter ^ expressionPrinter, System::Linq::Expressions::Expression ^ queryExecutorExpression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" RefType="this" />
          <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter" />
          <Parameter Name="queryExecutorExpression" Type="System.Linq.Expressions.Expression" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="expressionPrinter">To be added.</param>
          <param name="queryExecutorExpression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryExecutionPlanned(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter,System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="QueryIterationFailed">
        <MemberSignature Language="C#" Value="public static void QueryIterationFailed (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; diagnostics, Type contextType, Exception exception);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void QueryIterationFailed(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; diagnostics, class System.Type contextType, class System.Exception exception) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryIterationFailed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Type,System.Exception)" />
        <MemberSignature Language="F#" Value="static member QueryIterationFailed : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * Type * Exception -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryIterationFailed (diagnostics, contextType, exception)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void QueryIterationFailed(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Query ^&gt; ^ diagnostics, Type ^ contextType, Exception ^ exception);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" RefType="this" />
          <Parameter Name="contextType" Type="System.Type" />
          <Parameter Name="exception" Type="System.Exception" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="contextType">To be added.</param>
          <param name="exception">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryIterationFailed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Type,System.Exception)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="QueryModelCompiling">
        <MemberSignature Language="C#" Value="public static void QueryModelCompiling (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; diagnostics, Remotion.Linq.QueryModel queryModel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void QueryModelCompiling(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; diagnostics, class Remotion.Linq.QueryModel queryModel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryModelCompiling(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Remotion.Linq.QueryModel)" />
        <MemberSignature Language="F#" Value="static member QueryModelCompiling : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * Remotion.Linq.QueryModel -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryModelCompiling (diagnostics, queryModel)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void QueryModelCompiling(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Query ^&gt; ^ diagnostics, Remotion::Linq::QueryModel ^ queryModel);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" RefType="this" />
          <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="queryModel">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryModelCompiling(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Remotion.Linq.QueryModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="QueryModelOptimized">
        <MemberSignature Language="C#" Value="public static void QueryModelOptimized (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; diagnostics, Remotion.Linq.QueryModel queryModel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void QueryModelOptimized(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; diagnostics, class Remotion.Linq.QueryModel queryModel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryModelOptimized(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Remotion.Linq.QueryModel)" />
        <MemberSignature Language="F#" Value="static member QueryModelOptimized : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * Remotion.Linq.QueryModel -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryModelOptimized (diagnostics, queryModel)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void QueryModelOptimized(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Query ^&gt; ^ diagnostics, Remotion::Linq::QueryModel ^ queryModel);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" RefType="this" />
          <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="queryModel">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryModelOptimized(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Remotion.Linq.QueryModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="RedundantIndexRemoved">
        <MemberSignature Language="C#" Value="public static void RedundantIndexRemoved (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; diagnostics, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; redundantIndex, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; otherIndex);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedundantIndexRemoved(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; diagnostics, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; redundantIndex, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; otherIndex) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RedundantIndexRemoved(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RedundantIndexRemoved (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model), redundantIndex As IReadOnlyList(Of IPropertyBase), otherIndex As IReadOnlyList(Of IPropertyBase))" />
        <MemberSignature Language="F#" Value="static member RedundantIndexRemoved : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RedundantIndexRemoved (diagnostics, redundantIndex, otherIndex)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void RedundantIndexRemoved(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model ^&gt; ^ diagnostics, System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^&gt; ^ redundantIndex, System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^&gt; ^ otherIndex);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" RefType="this" />
          <Parameter Name="redundantIndex" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;" />
          <Parameter Name="otherIndex" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="redundantIndex">To be added.</param>
          <param name="otherIndex">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RedundantIndexRemoved(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ReferenceChangeDetected">
        <MemberSignature Language="C#" Value="public static void ReferenceChangeDetected (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, object oldValue, object newValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReferenceChangeDetected(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, object oldValue, object newValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ReferenceChangeDetected(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Object,System.Object)" />
        <MemberSignature Language="F#" Value="static member ReferenceChangeDetected : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.INavigation * obj * obj -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ReferenceChangeDetected (diagnostics, internalEntityEntry, navigation, oldValue, newValue)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ReferenceChangeDetected(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ internalEntityEntry, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation, System::Object ^ oldValue, System::Object ^ newValue);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="internalEntityEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
          <Parameter Name="oldValue" Type="System.Object" />
          <Parameter Name="newValue" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="internalEntityEntry">To be added.</param>
          <param name="navigation">To be added.</param>
          <param name="oldValue">To be added.</param>
          <param name="newValue">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ReferenceChangeDetected(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ReferenceChangeDetectedSensitive">
        <MemberSignature Language="C#" Value="public static void ReferenceChangeDetectedSensitive (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, object oldValue, object newValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReferenceChangeDetectedSensitive(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, object oldValue, object newValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ReferenceChangeDetectedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Object,System.Object)" />
        <MemberSignature Language="F#" Value="static member ReferenceChangeDetectedSensitive : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.INavigation * obj * obj -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ReferenceChangeDetectedSensitive (diagnostics, internalEntityEntry, navigation, oldValue, newValue)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ReferenceChangeDetectedSensitive(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ internalEntityEntry, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation, System::Object ^ oldValue, System::Object ^ newValue);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="internalEntityEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
          <Parameter Name="oldValue" Type="System.Object" />
          <Parameter Name="newValue" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="internalEntityEntry">To be added.</param>
          <param name="navigation">To be added.</param>
          <param name="oldValue">To be added.</param>
          <param name="newValue">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ReferenceChangeDetectedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="RequiredAttributeOnBothNavigations">
        <MemberSignature Language="C#" Value="public static void RequiredAttributeOnBothNavigations (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.INavigation firstNavigation, Microsoft.EntityFrameworkCore.Metadata.INavigation secondNavigation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RequiredAttributeOnBothNavigations(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.INavigation firstNavigation, class Microsoft.EntityFrameworkCore.Metadata.INavigation secondNavigation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RequiredAttributeOnBothNavigations(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RequiredAttributeOnBothNavigations (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model), firstNavigation As INavigation, secondNavigation As INavigation)" />
        <MemberSignature Language="F#" Value="static member RequiredAttributeOnBothNavigations : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; * Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RequiredAttributeOnBothNavigations (diagnostics, firstNavigation, secondNavigation)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void RequiredAttributeOnBothNavigations(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ firstNavigation, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ secondNavigation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" RefType="this" />
          <Parameter Name="firstNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
          <Parameter Name="secondNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="firstNavigation">To be added.</param>
          <param name="secondNavigation">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RequiredAttributeOnBothNavigations(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="RequiredAttributeOnDependent">
        <MemberSignature Language="C#" Value="public static void RequiredAttributeOnDependent (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RequiredAttributeOnDependent(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RequiredAttributeOnDependent(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RequiredAttributeOnDependent (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model), navigation As INavigation)" />
        <MemberSignature Language="F#" Value="static member RequiredAttributeOnDependent : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; * Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RequiredAttributeOnDependent (diagnostics, navigation)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void RequiredAttributeOnDependent(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" RefType="this" />
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="navigation">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RequiredAttributeOnDependent(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="RowLimitingOperationWithoutOrderByWarning">
        <MemberSignature Language="C#" Value="public static void RowLimitingOperationWithoutOrderByWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; diagnostics, Remotion.Linq.QueryModel queryModel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RowLimitingOperationWithoutOrderByWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; diagnostics, class Remotion.Linq.QueryModel queryModel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RowLimitingOperationWithoutOrderByWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Remotion.Linq.QueryModel)" />
        <MemberSignature Language="F#" Value="static member RowLimitingOperationWithoutOrderByWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * Remotion.Linq.QueryModel -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RowLimitingOperationWithoutOrderByWarning (diagnostics, queryModel)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void RowLimitingOperationWithoutOrderByWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Query ^&gt; ^ diagnostics, Remotion::Linq::QueryModel ^ queryModel);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" RefType="this" />
          <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="queryModel">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.RowLimitingOperationWithoutOrderByWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Remotion.Linq.QueryModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="SaveChangesCompleted">
        <MemberSignature Language="C#" Value="public static void SaveChangesCompleted (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; diagnostics, Microsoft.EntityFrameworkCore.DbContext context, int entitiesSavedCount);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SaveChangesCompleted(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Update&gt; diagnostics, class Microsoft.EntityFrameworkCore.DbContext context, int32 entitiesSavedCount) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SaveChangesCompleted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.DbContext,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SaveChangesCompleted (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Update), context As DbContext, entitiesSavedCount As Integer)" />
        <MemberSignature Language="F#" Value="static member SaveChangesCompleted : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; * Microsoft.EntityFrameworkCore.DbContext * int -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SaveChangesCompleted (diagnostics, context, entitiesSavedCount)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SaveChangesCompleted(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Update ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::DbContext ^ context, int entitiesSavedCount);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Update&gt;" RefType="this" />
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
          <Parameter Name="entitiesSavedCount" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="context">To be added.</param>
          <param name="entitiesSavedCount">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SaveChangesCompleted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.DbContext,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="SaveChangesFailed">
        <MemberSignature Language="C#" Value="public static void SaveChangesFailed (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; diagnostics, Microsoft.EntityFrameworkCore.DbContext context, Exception exception);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SaveChangesFailed(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Update&gt; diagnostics, class Microsoft.EntityFrameworkCore.DbContext context, class System.Exception exception) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SaveChangesFailed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.DbContext,System.Exception)" />
        <MemberSignature Language="F#" Value="static member SaveChangesFailed : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; * Microsoft.EntityFrameworkCore.DbContext * Exception -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SaveChangesFailed (diagnostics, context, exception)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SaveChangesFailed(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Update ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::DbContext ^ context, Exception ^ exception);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Update&gt;" RefType="this" />
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
          <Parameter Name="exception" Type="System.Exception" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="context">To be added.</param>
          <param name="exception">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SaveChangesFailed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.DbContext,System.Exception)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="SaveChangesStarting">
        <MemberSignature Language="C#" Value="public static void SaveChangesStarting (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; diagnostics, Microsoft.EntityFrameworkCore.DbContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SaveChangesStarting(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Update&gt; diagnostics, class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SaveChangesStarting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.DbContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SaveChangesStarting (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Update), context As DbContext)" />
        <MemberSignature Language="F#" Value="static member SaveChangesStarting : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; * Microsoft.EntityFrameworkCore.DbContext -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SaveChangesStarting (diagnostics, context)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SaveChangesStarting(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Update ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::DbContext ^ context);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Update&gt;" RefType="this" />
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="context">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SaveChangesStarting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.DbContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="SensitiveDataLoggingEnabledWarning&lt;TLoggerCategory&gt;">
        <MemberSignature Language="C#" Value="public static void SensitiveDataLoggingEnabledWarning&lt;TLoggerCategory&gt; (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;TLoggerCategory&gt; diagnostics) where TLoggerCategory : Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;TLoggerCategory&gt;new();" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SensitiveDataLoggingEnabledWarning&lt;.ctor (class Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory`1&lt;!!TLoggerCategory&gt;) TLoggerCategory&gt;(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;!!TLoggerCategory&gt; diagnostics) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SensitiveDataLoggingEnabledWarning``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SensitiveDataLoggingEnabledWarning(Of TLoggerCategory As {LoggerCategory(Of TLoggerCategory)New}) (diagnostics As IDiagnosticsLogger(Of TLoggerCategory))" />
        <MemberSignature Language="F#" Value="static member SensitiveDataLoggingEnabledWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt; -&gt; unit (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SensitiveDataLoggingEnabledWarning diagnostics" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLoggerCategory&gt;&#xA; where TLoggerCategory : Microsoft::EntityFrameworkCore::Diagnostics::LoggerCategory&lt;TLoggerCategory&gt;gcnew()[System::Runtime::CompilerServices::Extension]&#xA; static void SensitiveDataLoggingEnabledWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;TLoggerCategory&gt; ^ diagnostics);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLoggerCategory">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <BaseTypeName>Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;TLoggerCategory&gt;</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;TLoggerCategory&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TLoggerCategory">To be added.</typeparam>
          <param name="diagnostics">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SensitiveDataLoggingEnabledWarning``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ServiceProviderCreated">
        <MemberSignature Language="C#" Value="public static void ServiceProviderCreated (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; diagnostics, IServiceProvider serviceProvider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ServiceProviderCreated(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Infrastructure&gt; diagnostics, class System.IServiceProvider serviceProvider) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ServiceProviderCreated(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},System.IServiceProvider)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ServiceProviderCreated (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Infrastructure), serviceProvider As IServiceProvider)" />
        <MemberSignature Language="F#" Value="static member ServiceProviderCreated : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; * IServiceProvider -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ServiceProviderCreated (diagnostics, serviceProvider)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ServiceProviderCreated(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Infrastructure ^&gt; ^ diagnostics, IServiceProvider ^ serviceProvider);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Infrastructure&gt;" RefType="this" />
          <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="serviceProvider">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ServiceProviderCreated(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},System.IServiceProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ShadowPropertyCreated">
        <MemberSignature Language="C#" Value="public static void ShadowPropertyCreated (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ShadowPropertyCreated(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ShadowPropertyCreated(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ShadowPropertyCreated (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model), property As IProperty)" />
        <MemberSignature Language="F#" Value="static member ShadowPropertyCreated : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ShadowPropertyCreated (diagnostics, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ShadowPropertyCreated(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ShadowPropertyCreated(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="StartedTracking">
        <MemberSignature Language="C#" Value="public static void StartedTracking (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartedTracking(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StartedTracking(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub StartedTracking (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.ChangeTracking), entry As InternalEntityEntry)" />
        <MemberSignature Language="F#" Value="static member StartedTracking : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StartedTracking (diagnostics, entry)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void StartedTracking(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="entry">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StartedTracking(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="StartedTrackingSensitive">
        <MemberSignature Language="C#" Value="public static void StartedTrackingSensitive (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartedTrackingSensitive(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StartedTrackingSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub StartedTrackingSensitive (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.ChangeTracking), entry As InternalEntityEntry)" />
        <MemberSignature Language="F#" Value="static member StartedTrackingSensitive : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StartedTrackingSensitive (diagnostics, entry)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void StartedTrackingSensitive(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="entry">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StartedTrackingSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="StateChanged">
        <MemberSignature Language="C#" Value="public static void StateChanged (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.EntityState oldState, Microsoft.EntityFrameworkCore.EntityState newState);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StateChanged(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, valuetype Microsoft.EntityFrameworkCore.EntityState oldState, valuetype Microsoft.EntityFrameworkCore.EntityState newState) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StateChanged(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,Microsoft.EntityFrameworkCore.EntityState)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub StateChanged (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.ChangeTracking), entry As InternalEntityEntry, oldState As EntityState, newState As EntityState)" />
        <MemberSignature Language="F#" Value="static member StateChanged : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.EntityState * Microsoft.EntityFrameworkCore.EntityState -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StateChanged (diagnostics, entry, oldState, newState)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void StateChanged(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, Microsoft::EntityFrameworkCore::EntityState oldState, Microsoft::EntityFrameworkCore::EntityState newState);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="oldState" Type="Microsoft.EntityFrameworkCore.EntityState" />
          <Parameter Name="newState" Type="Microsoft.EntityFrameworkCore.EntityState" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="entry">To be added.</param>
          <param name="oldState">To be added.</param>
          <param name="newState">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StateChanged(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,Microsoft.EntityFrameworkCore.EntityState)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="StateChangedSensitive">
        <MemberSignature Language="C#" Value="public static void StateChangedSensitive (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.EntityState oldState, Microsoft.EntityFrameworkCore.EntityState newState);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StateChangedSensitive(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, valuetype Microsoft.EntityFrameworkCore.EntityState oldState, valuetype Microsoft.EntityFrameworkCore.EntityState newState) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StateChangedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,Microsoft.EntityFrameworkCore.EntityState)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub StateChangedSensitive (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.ChangeTracking), entry As InternalEntityEntry, oldState As EntityState, newState As EntityState)" />
        <MemberSignature Language="F#" Value="static member StateChangedSensitive : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.EntityState * Microsoft.EntityFrameworkCore.EntityState -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StateChangedSensitive (diagnostics, entry, oldState, newState)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void StateChangedSensitive(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, Microsoft::EntityFrameworkCore::EntityState oldState, Microsoft::EntityFrameworkCore::EntityState newState);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="oldState" Type="Microsoft.EntityFrameworkCore.EntityState" />
          <Parameter Name="newState" Type="Microsoft.EntityFrameworkCore.EntityState" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="entry">To be added.</param>
          <param name="oldState">To be added.</param>
          <param name="newState">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.StateChangedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,Microsoft.EntityFrameworkCore.EntityState)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ValueGenerated">
        <MemberSignature Language="C#" Value="public static void ValueGenerated (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.Metadata.IProperty property, object value, bool temporary);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValueGenerated(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, object value, bool temporary) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ValueGenerated(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ValueGenerated (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.ChangeTracking), entry As InternalEntityEntry, property As IProperty, value As Object, temporary As Boolean)" />
        <MemberSignature Language="F#" Value="static member ValueGenerated : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IProperty * obj * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ValueGenerated (diagnostics, entry, property, value, temporary)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ValueGenerated(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, System::Object ^ value, bool temporary);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
          <Parameter Name="value" Type="System.Object" />
          <Parameter Name="temporary" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="entry">To be added.</param>
          <param name="property">To be added.</param>
          <param name="value">To be added.</param>
          <param name="temporary">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ValueGenerated(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ValueGeneratedSensitive">
        <MemberSignature Language="C#" Value="public static void ValueGeneratedSensitive (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; diagnostics, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.Metadata.IProperty property, object value, bool temporary);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValueGeneratedSensitive(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; diagnostics, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, object value, bool temporary) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ValueGeneratedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ValueGeneratedSensitive (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.ChangeTracking), entry As InternalEntityEntry, property As IProperty, value As Object, temporary As Boolean)" />
        <MemberSignature Language="F#" Value="static member ValueGeneratedSensitive : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IProperty * obj * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ValueGeneratedSensitive (diagnostics, entry, property, value, temporary)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ValueGeneratedSensitive(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::ChangeTracking ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, System::Object ^ value, bool temporary);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" RefType="this" />
          <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
          <Parameter Name="value" Type="System.Object" />
          <Parameter Name="temporary" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="entry">To be added.</param>
          <param name="property">To be added.</param>
          <param name="value">To be added.</param>
          <param name="temporary">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.ValueGeneratedSensitive(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext" />
      </Targets>
      <Member MemberName="GetDependencies">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies GetDependencies (this Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies GetDependencies(class Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextDependenciesExtensions.GetDependencies(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDependencies (context As ICurrentDbContext) As IDbContextDependencies" />
        <MemberSignature Language="F#" Value="static member GetDependencies : Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext -&gt; Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies" Usage="Microsoft.EntityFrameworkCore.Internal.DbContextDependenciesExtensions.GetDependencies context" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Internal::IDbContextDependencies ^ GetDependencies(Microsoft::EntityFrameworkCore::Internal::ICurrentDbContext ^ context);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Internal::IDbContextDependencies ^ GetDependencies(Microsoft::EntityFrameworkCore::Internal::ICurrentDbContext ^ context);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.DbContextDependenciesExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.DbContextDependenciesExtensions.GetDependencies(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies" />
      </Targets>
      <Member MemberName="GetDependencies">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies GetDependencies (this Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies GetDependencies(class Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextDependenciesExtensions.GetDependencies(Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDependencies (context As IDbContextDependencies) As IDbContextDependencies" />
        <MemberSignature Language="F#" Value="static member GetDependencies : Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies -&gt; Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies" Usage="Microsoft.EntityFrameworkCore.Internal.DbContextDependenciesExtensions.GetDependencies context" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Internal::IDbContextDependencies ^ GetDependencies(Microsoft::EntityFrameworkCore::Internal::IDbContextDependencies ^ context);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Internal::IDbContextDependencies ^ GetDependencies(Microsoft::EntityFrameworkCore::Internal::IDbContextDependencies ^ context);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies" RefType="this" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.DbContextDependenciesExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.DbContextDependenciesExtensions.GetDependencies(Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions" />
      </Targets>
      <Member MemberName="BuildOptionsFragment">
        <MemberSignature Language="C#" Value="public static string BuildOptionsFragment (this Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions contextOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string BuildOptionsFragment(class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions contextOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextOptionsExtensions.BuildOptionsFragment(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BuildOptionsFragment (contextOptions As IDbContextOptions) As String" />
        <MemberSignature Language="F#" Value="static member BuildOptionsFragment : Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions -&gt; string" Usage="Microsoft.EntityFrameworkCore.Internal.DbContextOptionsExtensions.BuildOptionsFragment contextOptions" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ BuildOptionsFragment(Microsoft::EntityFrameworkCore::Infrastructure::IDbContextOptions ^ contextOptions);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ BuildOptionsFragment(Microsoft::EntityFrameworkCore::Infrastructure::IDbContextOptions ^ contextOptions);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="contextOptions" Type="Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions" RefType="this" />
        </Parameters>
        <Docs>
          <param name="contextOptions">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.DbContextOptionsExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.DbContextOptionsExtensions.BuildOptionsFragment(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Internal.IDbSetFinder" />
      </Targets>
      <Member MemberName="CreateClrTypeDbSetMapping">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;Type,Microsoft.EntityFrameworkCore.Internal.DbSetProperty&gt; CreateClrTypeDbSetMapping (this Microsoft.EntityFrameworkCore.Internal.IDbSetFinder setFinder, Microsoft.EntityFrameworkCore.DbContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;class System.Type, valuetype Microsoft.EntityFrameworkCore.Internal.DbSetProperty&gt; CreateClrTypeDbSetMapping(class Microsoft.EntityFrameworkCore.Internal.IDbSetFinder setFinder, class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbSetFinderExtensions.CreateClrTypeDbSetMapping(Microsoft.EntityFrameworkCore.Internal.IDbSetFinder,Microsoft.EntityFrameworkCore.DbContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateClrTypeDbSetMapping (setFinder As IDbSetFinder, context As DbContext) As IDictionary(Of Type, DbSetProperty)" />
        <MemberSignature Language="F#" Value="static member CreateClrTypeDbSetMapping : Microsoft.EntityFrameworkCore.Internal.IDbSetFinder * Microsoft.EntityFrameworkCore.DbContext -&gt; System.Collections.Generic.IDictionary&lt;Type, Microsoft.EntityFrameworkCore.Internal.DbSetProperty&gt;" Usage="Microsoft.EntityFrameworkCore.Internal.DbSetFinderExtensions.CreateClrTypeDbSetMapping (setFinder, context)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IDictionary&lt;Type ^, Microsoft::EntityFrameworkCore::Internal::DbSetProperty&gt; ^ CreateClrTypeDbSetMapping(Microsoft::EntityFrameworkCore::Internal::IDbSetFinder ^ setFinder, Microsoft::EntityFrameworkCore::DbContext ^ context);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IDictionary&lt;System.Type,Microsoft.EntityFrameworkCore.Internal.DbSetProperty&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="setFinder" Type="Microsoft.EntityFrameworkCore.Internal.IDbSetFinder" RefType="this" />
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
        </Parameters>
        <Docs>
          <param name="setFinder">To be added.</param>
          <param name="context">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.DbSetFinderExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.DbSetFinderExtensions.CreateClrTypeDbSetMapping(Microsoft.EntityFrameworkCore.Internal.IDbSetFinder,Microsoft.EntityFrameworkCore.DbContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.IEnumerable" />
      </Targets>
      <Member MemberName="Any">
        <MemberSignature Language="C#" Value="public static bool Any (this System.Collections.IEnumerable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any(class System.Collections.IEnumerable source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Any(System.Collections.IEnumerable)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any (source As IEnumerable) As Boolean" />
        <MemberSignature Language="F#" Value="static member Any : System.Collections.IEnumerable -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Any source" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::IEnumerable ^ source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Any(System.Collections.IEnumerable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Distinct&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; Distinct&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, Func&lt;T,T,bool&gt; comparer) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; Distinct&lt;class T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Func`3&lt;!!T, !!T, bool&gt; comparer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of T As Class) (source As IEnumerable(Of T), comparer As Func(Of T, T, Boolean)) As IEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'T (requires 'T : null)&gt; * Func&lt;'T, 'T, bool (requires 'T : null and 'T : null)&gt; -&gt; seq&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct (source, comparer)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, Func&lt;T, T, bool&gt; ^ comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
          <Parameter Name="comparer" Type="System.Func&lt;T,T,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="FirstOr&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T FirstOr&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, T alternate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FirstOr&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, !!T alternate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOr(Of T) (source As IEnumerable(Of T), alternate As T) As T" />
        <MemberSignature Language="F#" Value="static member FirstOr : seq&lt;'T&gt; * 'T -&gt; 'T" Usage="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.FirstOr (source, alternate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T FirstOr(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, T alternate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
          <Parameter Name="alternate" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="alternate">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="FirstOr&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T FirstOr&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, Func&lt;T,bool&gt; predicate, T alternate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FirstOr&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Func`2&lt;!!T, bool&gt; predicate, !!T alternate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.FirstOr``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOr(Of T) (source As IEnumerable(Of T), predicate As Func(Of T, Boolean), alternate As T) As T" />
        <MemberSignature Language="F#" Value="static member FirstOr : seq&lt;'T&gt; * Func&lt;'T, bool&gt; * 'T -&gt; 'T" Usage="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.FirstOr (source, predicate, alternate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T FirstOr(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, Func&lt;T, bool&gt; ^ predicate, T alternate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;T,System.Boolean&gt;" />
          <Parameter Name="alternate" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <param name="alternate">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.FirstOr``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="IndexOf&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, T item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, !!T item) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf(Of T) (source As IEnumerable(Of T), item As T) As Integer" />
        <MemberSignature Language="F#" Value="static member IndexOf : seq&lt;'T&gt; * 'T -&gt; int" Usage="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.IndexOf (source, item)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, T item);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
          <Parameter Name="item" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="item">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="IndexOf&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, T item, System.Collections.Generic.IEqualityComparer&lt;T&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, !!T item, class System.Collections.Generic.IEqualityComparer`1&lt;!!T&gt; comparer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf(Of T) (source As IEnumerable(Of T), item As T, comparer As IEqualityComparer(Of T)) As Integer" />
        <MemberSignature Language="F#" Value="static member IndexOf : seq&lt;'T&gt; * 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.IndexOf (source, item, comparer)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, T item, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
          <Parameter Name="item" Type="T" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="item">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Join">
        <MemberSignature Language="C#" Value="public static string Join (this System.Collections.Generic.IEnumerable&lt;object&gt; source, string separator = &quot;, &quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(class System.Collections.Generic.IEnumerable`1&lt;object&gt; source, string separator) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.Object},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join (source As IEnumerable(Of Object), Optional separator As String = &quot;, &quot;) As String" />
        <MemberSignature Language="F#" Value="static member Join : seq&lt;obj&gt; * string -&gt; string" Usage="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join (source, separator)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" RefType="this" />
          <Parameter Name="separator" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="separator">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.Object},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="OrderByOrdinal&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByOrdinal&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,string&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByOrdinal&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, string&gt; keySelector) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByOrdinal(Of TSource) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, String)) As IOrderedEnumerable(Of TSource)" />
        <MemberSignature Language="F#" Value="static member OrderByOrdinal : seq&lt;'Source&gt; * Func&lt;'Source, string&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal (source, keySelector)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByOrdinal(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::String ^&gt; ^ keySelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.String&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="StartsWith&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool StartsWith&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StartsWith&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartsWith(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As Boolean" />
        <MemberSignature Language="F#" Value="static member StartsWith : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith (first, second)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool StartsWith(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="StructuralSequenceEqual&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool StructuralSequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StructuralSequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StructuralSequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As Boolean" />
        <MemberSignature Language="F#" Value="static member StructuralSequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual (first, second)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool StructuralSequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="CreateAssignExpression">
        <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression CreateAssignExpression (this System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression CreateAssignExpression(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.CreateAssignExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateAssignExpression (left As Expression, right As Expression) As BinaryExpression" />
        <MemberSignature Language="F#" Value="static member CreateAssignExpression : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.CreateAssignExpression (left, right)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::Expressions::BinaryExpression ^ CreateAssignExpression(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Linq.Expressions.Expression" RefType="this" />
          <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.CreateAssignExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="CreateKeyAccessExpression">
        <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression CreateKeyAccessExpression (this System.Linq.Expressions.Expression target, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression CreateKeyAccessExpression(class System.Linq.Expressions.Expression target, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.CreateKeyAccessExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateKeyAccessExpression (target As Expression, properties As IReadOnlyList(Of IProperty)) As Expression" />
        <MemberSignature Language="F#" Value="static member CreateKeyAccessExpression : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.CreateKeyAccessExpression (target, properties)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::Expressions::Expression ^ CreateKeyAccessExpression(System::Linq::Expressions::Expression ^ target, System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Metadata::IProperty ^&gt; ^ properties);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.Expressions.Expression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="target" Type="System.Linq.Expressions.Expression" RefType="this" />
          <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" />
        </Parameters>
        <Docs>
          <param name="target">To be added.</param>
          <param name="properties">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.CreateKeyAccessExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.Expressions.LambdaExpression" />
      </Targets>
      <Member MemberName="GetComplexPropertyAccess">
        <MemberSignature Language="C#" Value="public static System.Reflection.PropertyInfo[] GetComplexPropertyAccess (this System.Linq.Expressions.LambdaExpression propertyAccessExpression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.PropertyInfo[] GetComplexPropertyAccess(class System.Linq.Expressions.LambdaExpression propertyAccessExpression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess(System.Linq.Expressions.LambdaExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetComplexPropertyAccess (propertyAccessExpression As LambdaExpression) As PropertyInfo()" />
        <MemberSignature Language="F#" Value="static member GetComplexPropertyAccess : System.Linq.Expressions.LambdaExpression -&gt; System.Reflection.PropertyInfo[]" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess propertyAccessExpression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetComplexPropertyAccess(System::Linq::Expressions::LambdaExpression ^ propertyAccessExpression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyAccessExpression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess(System.Linq.Expressions.LambdaExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.LambdaExpression" />
      </Targets>
      <Member MemberName="GetComplexPropertyAccess">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; GetComplexPropertyAccess (this System.Linq.Expressions.LambdaExpression propertyAccessExpression, string methodName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.PropertyInfo&gt; GetComplexPropertyAccess(class System.Linq.Expressions.LambdaExpression propertyAccessExpression, string methodName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess(System.Linq.Expressions.LambdaExpression,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetComplexPropertyAccess (propertyAccessExpression As LambdaExpression, methodName As String) As IReadOnlyList(Of PropertyInfo)" />
        <MemberSignature Language="F#" Value="static member GetComplexPropertyAccess : System.Linq.Expressions.LambdaExpression * string -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess (propertyAccessExpression, methodName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IReadOnlyList&lt;System::Reflection::PropertyInfo ^&gt; ^ GetComplexPropertyAccess(System::Linq::Expressions::LambdaExpression ^ propertyAccessExpression, System::String ^ methodName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" />
          <Parameter Name="methodName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="propertyAccessExpression">To be added.</param>
          <param name="methodName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess(System.Linq.Expressions.LambdaExpression,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.Expressions.LambdaExpression" />
      </Targets>
      <Member MemberName="GetPropertyAccess">
        <MemberSignature Language="C#" Value="public static System.Reflection.PropertyInfo GetPropertyAccess (this System.Linq.Expressions.LambdaExpression propertyAccessExpression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.PropertyInfo GetPropertyAccess(class System.Linq.Expressions.LambdaExpression propertyAccessExpression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccess(System.Linq.Expressions.LambdaExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccess (propertyAccessExpression As LambdaExpression) As PropertyInfo" />
        <MemberSignature Language="F#" Value="static member GetPropertyAccess : System.Linq.Expressions.LambdaExpression -&gt; System.Reflection.PropertyInfo" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccess propertyAccessExpression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Reflection::PropertyInfo ^ GetPropertyAccess(System::Linq::Expressions::LambdaExpression ^ propertyAccessExpression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.PropertyInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyAccessExpression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccess(System.Linq.Expressions.LambdaExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.Expressions.LambdaExpression" />
      </Targets>
      <Member MemberName="GetPropertyAccessList">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; GetPropertyAccessList (this System.Linq.Expressions.LambdaExpression propertyAccessExpression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.PropertyInfo&gt; GetPropertyAccessList(class System.Linq.Expressions.LambdaExpression propertyAccessExpression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccessList(System.Linq.Expressions.LambdaExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccessList (propertyAccessExpression As LambdaExpression) As IReadOnlyList(Of PropertyInfo)" />
        <MemberSignature Language="F#" Value="static member GetPropertyAccessList : System.Linq.Expressions.LambdaExpression -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccessList propertyAccessExpression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IReadOnlyList&lt;System::Reflection::PropertyInfo ^&gt; ^ GetPropertyAccessList(System::Linq::Expressions::LambdaExpression ^ propertyAccessExpression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyAccessExpression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccessList(System.Linq.Expressions.LambdaExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="GetRootExpression&lt;TExpression&gt;">
        <MemberSignature Language="C#" Value="public static TExpression GetRootExpression&lt;TExpression&gt; (this System.Linq.Expressions.Expression expression) where TExpression : System.Linq.Expressions.Expression;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TExpression GetRootExpression&lt;(class System.Linq.Expressions.Expression) TExpression&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression``1(System.Linq.Expressions.Expression)" />
        <MemberSignature Language="F#" Value="static member GetRootExpression : System.Linq.Expressions.Expression -&gt; 'Expression (requires 'Expression :&gt; System.Linq.Expressions.Expression)" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression expression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExpression&gt;&#xA; where TExpression : System::Linq::Expressions::Expression[System::Runtime::CompilerServices::Extension]&#xA; static TExpression GetRootExpression(System::Linq::Expressions::Expression ^ expression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TExpression</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TExpression">
            <Constraints>
              <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TExpression">To be added.</typeparam>
          <param name="expression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression``1(System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="IsComparisonOperation">
        <MemberSignature Language="C#" Value="public static bool IsComparisonOperation (this System.Linq.Expressions.Expression expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsComparisonOperation(class System.Linq.Expressions.Expression expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsComparisonOperation(System.Linq.Expressions.Expression)" />
        <MemberSignature Language="F#" Value="static member IsComparisonOperation : System.Linq.Expressions.Expression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsComparisonOperation expression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsComparisonOperation(System::Linq::Expressions::Expression ^ expression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="expression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsComparisonOperation(System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.ConstantExpression" />
      </Targets>
      <Member MemberName="IsEntityQueryable">
        <MemberSignature Language="C#" Value="public static bool IsEntityQueryable (this System.Linq.Expressions.ConstantExpression constantExpression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntityQueryable(class System.Linq.Expressions.ConstantExpression constantExpression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsEntityQueryable(System.Linq.Expressions.ConstantExpression)" />
        <MemberSignature Language="F#" Value="static member IsEntityQueryable : System.Linq.Expressions.ConstantExpression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsEntityQueryable constantExpression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsEntityQueryable(System::Linq::Expressions::ConstantExpression ^ constantExpression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="constantExpression" Type="System.Linq.Expressions.ConstantExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="constantExpression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsEntityQueryable(System.Linq.Expressions.ConstantExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="IsLogicalOperation">
        <MemberSignature Language="C#" Value="public static bool IsLogicalOperation (this System.Linq.Expressions.Expression expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLogicalOperation(class System.Linq.Expressions.Expression expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalOperation(System.Linq.Expressions.Expression)" />
        <MemberSignature Language="F#" Value="static member IsLogicalOperation : System.Linq.Expressions.Expression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalOperation expression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsLogicalOperation(System::Linq::Expressions::Expression ^ expression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="expression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalOperation(System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="IsNullConstantExpression">
        <MemberSignature Language="C#" Value="public static bool IsNullConstantExpression (this System.Linq.Expressions.Expression expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullConstantExpression(class System.Linq.Expressions.Expression expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsNullConstantExpression(System.Linq.Expressions.Expression)" />
        <MemberSignature Language="F#" Value="static member IsNullConstantExpression : System.Linq.Expressions.Expression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsNullConstantExpression expression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsNullConstantExpression(System::Linq::Expressions::Expression ^ expression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="expression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsNullConstantExpression(System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.ConditionalExpression" />
      </Targets>
      <Member MemberName="IsNullPropagationCandidate">
        <MemberSignature Language="C#" Value="public static bool IsNullPropagationCandidate (this System.Linq.Expressions.ConditionalExpression conditionalExpression, out System.Linq.Expressions.Expression testExpression, out System.Linq.Expressions.Expression resultExpression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullPropagationCandidate(class System.Linq.Expressions.ConditionalExpression conditionalExpression, [out] class System.Linq.Expressions.Expression&amp; testExpression, [out] class System.Linq.Expressions.Expression&amp; resultExpression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsNullPropagationCandidate(System.Linq.Expressions.ConditionalExpression,System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)" />
        <MemberSignature Language="F#" Value="static member IsNullPropagationCandidate : System.Linq.Expressions.ConditionalExpression *  *  -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsNullPropagationCandidate (conditionalExpression, testExpression, resultExpression)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsNullPropagationCandidate(System::Linq::Expressions::ConditionalExpression ^ conditionalExpression, [Runtime::InteropServices::Out] System::Linq::Expressions::Expression ^ % testExpression, [Runtime::InteropServices::Out] System::Linq::Expressions::Expression ^ % resultExpression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="conditionalExpression" Type="System.Linq.Expressions.ConditionalExpression" RefType="this" />
          <Parameter Name="testExpression" Type="System.Linq.Expressions.Expression&amp;" RefType="out" />
          <Parameter Name="resultExpression" Type="System.Linq.Expressions.Expression&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <param name="conditionalExpression">To be added.</param>
          <param name="testExpression">To be added.</param>
          <param name="resultExpression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsNullPropagationCandidate(System.Linq.Expressions.ConditionalExpression,System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="MakeMemberAccess">
        <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression MakeMemberAccess (this System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression MakeMemberAccess(class System.Linq.Expressions.Expression expression, class System.Reflection.MemberInfo member) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
        <MemberSignature Language="F#" Value="static member MakeMemberAccess : System.Linq.Expressions.Expression * System.Reflection.MemberInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MakeMemberAccess (expression, member)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::Expressions::MemberExpression ^ MakeMemberAccess(System::Linq::Expressions::Expression ^ expression, System::Reflection::MemberInfo ^ member);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
          <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        </Parameters>
        <Docs>
          <param name="expression">To be added.</param>
          <param name="member">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="RemoveConvert">
        <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression RemoveConvert (this System.Linq.Expressions.Expression expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression RemoveConvert(class System.Linq.Expressions.Expression expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveConvert(System.Linq.Expressions.Expression)" />
        <MemberSignature Language="F#" Value="static member RemoveConvert : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveConvert expression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::Expressions::Expression ^ RemoveConvert(System::Linq::Expressions::Expression ^ expression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.Expressions.Expression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="expression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveConvert(System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="RemoveTypeAs">
        <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression RemoveTypeAs (this System.Linq.Expressions.Expression expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression RemoveTypeAs(class System.Linq.Expressions.Expression expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveTypeAs(System.Linq.Expressions.Expression)" />
        <MemberSignature Language="F#" Value="static member RemoveTypeAs : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveTypeAs expression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::Expressions::Expression ^ RemoveTypeAs(System::Linq::Expressions::Expression ^ expression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.Expressions.Expression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="expression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveTypeAs(System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="TryGetReferencedQuerySource">
        <MemberSignature Language="C#" Value="public static Remotion.Linq.Clauses.IQuerySource TryGetReferencedQuerySource (this System.Linq.Expressions.Expression expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Remotion.Linq.Clauses.IQuerySource TryGetReferencedQuerySource(class System.Linq.Expressions.Expression expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.TryGetReferencedQuerySource(System.Linq.Expressions.Expression)" />
        <MemberSignature Language="F#" Value="static member TryGetReferencedQuerySource : System.Linq.Expressions.Expression -&gt; Remotion.Linq.Clauses.IQuerySource" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.TryGetReferencedQuerySource expression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Remotion::Linq::Clauses::IQuerySource ^ TryGetReferencedQuerySource(System::Linq::Expressions::Expression ^ expression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Remotion.Linq.Clauses.IQuerySource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="expression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.TryGetReferencedQuerySource(System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ChangesSaved">
        <MemberSignature Language="C#" Value="public static void ChangesSaved (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; diagnostics, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; entries, int rowsAffected);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChangesSaved(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Update&gt; diagnostics, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; entries, int32 rowsAffected) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.InMemoryLoggerExtensions.ChangesSaved(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ChangesSaved (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Update), entries As IEnumerable(Of IUpdateEntry), rowsAffected As Integer)" />
        <MemberSignature Language="F#" Value="static member ChangesSaved : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; * seq&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; * int -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.InMemoryLoggerExtensions.ChangesSaved (diagnostics, entries, rowsAffected)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ChangesSaved(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Update ^&gt; ^ diagnostics, System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Update::IUpdateEntry ^&gt; ^ entries, int rowsAffected);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Update&gt;" RefType="this" />
          <Parameter Name="entries" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;" />
          <Parameter Name="rowsAffected" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="entries">To be added.</param>
          <param name="rowsAffected">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.InMemoryLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.InMemoryLoggerExtensions.ChangesSaved(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="TransactionIgnoredWarning">
        <MemberSignature Language="C#" Value="public static void TransactionIgnoredWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; diagnostics);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TransactionIgnoredWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Transaction&gt; diagnostics) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.InMemoryLoggerExtensions.TransactionIgnoredWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub TransactionIgnoredWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Database.Transaction))" />
        <MemberSignature Language="F#" Value="static member TransactionIgnoredWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.InMemoryLoggerExtensions.TransactionIgnoredWarning diagnostics" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void TransactionIgnoredWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Transaction ^&gt; ^ diagnostics);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Transaction&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.InMemoryLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.InMemoryLoggerExtensions.TransactionIgnoredWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MethodInfo" />
      </Targets>
      <Member MemberName="DisplayName">
        <MemberSignature Language="C#" Value="public static string DisplayName (this System.Reflection.MethodInfo methodInfo);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string DisplayName(class System.Reflection.MethodInfo methodInfo) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.MethodInfoExtensions.DisplayName(System.Reflection.MethodInfo)" />
        <MemberSignature Language="F#" Value="static member DisplayName : System.Reflection.MethodInfo -&gt; string" Usage="Microsoft.EntityFrameworkCore.Internal.MethodInfoExtensions.DisplayName methodInfo" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ DisplayName(System::Reflection::MethodInfo ^ methodInfo);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" RefType="this" />
        </Parameters>
        <Docs>
          <param name="methodInfo">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.MethodInfoExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.MethodInfoExtensions.DisplayName(System.Reflection.MethodInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogDebug">
        <MemberSignature Language="C#" Value="public static void LogDebug (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.EntityFrameworkCore.Infrastructure.RelationalDesignEventId eventId, Func&lt;string&gt; formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogDebug(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.EntityFrameworkCore.Infrastructure.RelationalDesignEventId eventId, class System.Func`1&lt;string&gt; formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalDesignLoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.RelationalDesignEventId,System.Func{System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub LogDebug (logger As ILogger, eventId As RelationalDesignEventId, formatter As Func(Of String))" />
        <MemberSignature Language="F#" Value="static member LogDebug : Microsoft.Extensions.Logging.ILogger * Microsoft.EntityFrameworkCore.Infrastructure.RelationalDesignEventId * Func&lt;string&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalDesignLoggerExtensions.LogDebug (logger, eventId, formatter)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void LogDebug(Microsoft::Extensions::Logging::ILogger ^ logger, Microsoft::EntityFrameworkCore::Infrastructure::RelationalDesignEventId eventId, Func&lt;System::String ^&gt; ^ formatter);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.EntityFrameworkCore.Infrastructure.RelationalDesignEventId" />
          <Parameter Name="formatter" Type="System.Func&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="eventId">To be added.</param>
          <param name="formatter">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalDesignLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalDesignLoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.RelationalDesignEventId,System.Func{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogWarning">
        <MemberSignature Language="C#" Value="public static void LogWarning (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.EntityFrameworkCore.Infrastructure.RelationalDesignEventId eventId, Func&lt;string&gt; formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogWarning(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.EntityFrameworkCore.Infrastructure.RelationalDesignEventId eventId, class System.Func`1&lt;string&gt; formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalDesignLoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.RelationalDesignEventId,System.Func{System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub LogWarning (logger As ILogger, eventId As RelationalDesignEventId, formatter As Func(Of String))" />
        <MemberSignature Language="F#" Value="static member LogWarning : Microsoft.Extensions.Logging.ILogger * Microsoft.EntityFrameworkCore.Infrastructure.RelationalDesignEventId * Func&lt;string&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalDesignLoggerExtensions.LogWarning (logger, eventId, formatter)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void LogWarning(Microsoft::Extensions::Logging::ILogger ^ logger, Microsoft::EntityFrameworkCore::Infrastructure::RelationalDesignEventId eventId, Func&lt;System::String ^&gt; ^ formatter);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.EntityFrameworkCore.Infrastructure.RelationalDesignEventId" />
          <Parameter Name="formatter" Type="System.Func&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="eventId">To be added.</param>
          <param name="formatter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalDesignLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalDesignLoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.RelationalDesignEventId,System.Func{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="FindProperty">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IProperty FindProperty (this System.Linq.Expressions.Expression expression, Type targetType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IProperty FindProperty(class System.Linq.Expressions.Expression expression, class System.Type targetType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.FindProperty(System.Linq.Expressions.Expression,System.Type)" />
        <MemberSignature Language="F#" Value="static member FindProperty : System.Linq.Expressions.Expression * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.FindProperty (expression, targetType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IProperty ^ FindProperty(System::Linq::Expressions::Expression ^ expression, Type ^ targetType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
          <Parameter Name="targetType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="expression">To be added.</param>
          <param name="targetType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.FindProperty(System.Linq.Expressions.Expression,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression" />
      </Targets>
      <Member MemberName="HasColumnExpression">
        <MemberSignature Language="C#" Value="public static bool HasColumnExpression (this Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression aliasExpression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasColumnExpression(class Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression aliasExpression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.HasColumnExpression(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)" />
        <MemberSignature Language="F#" Value="static member HasColumnExpression : Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.HasColumnExpression aliasExpression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool HasColumnExpression(Microsoft::EntityFrameworkCore::Query::Expressions::AliasExpression ^ aliasExpression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="aliasExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="aliasExpression">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.HasColumnExpression(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="IsAliasWithColumnExpression">
        <MemberSignature Language="C#" Value="public static bool IsAliasWithColumnExpression (this System.Linq.Expressions.Expression expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAliasWithColumnExpression(class System.Linq.Expressions.Expression expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithColumnExpression(System.Linq.Expressions.Expression)" />
        <MemberSignature Language="F#" Value="static member IsAliasWithColumnExpression : System.Linq.Expressions.Expression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithColumnExpression expression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsAliasWithColumnExpression(System::Linq::Expressions::Expression ^ expression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="expression">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithColumnExpression(System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="IsAliasWithSelectExpression">
        <MemberSignature Language="C#" Value="public static bool IsAliasWithSelectExpression (this System.Linq.Expressions.Expression expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAliasWithSelectExpression(class System.Linq.Expressions.Expression expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithSelectExpression(System.Linq.Expressions.Expression)" />
        <MemberSignature Language="F#" Value="static member IsAliasWithSelectExpression : System.Linq.Expressions.Expression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithSelectExpression expression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsAliasWithSelectExpression(System::Linq::Expressions::Expression ^ expression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="expression">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithSelectExpression(System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="IsSimpleExpression">
        <MemberSignature Language="C#" Value="public static bool IsSimpleExpression (this System.Linq.Expressions.Expression expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSimpleExpression(class System.Linq.Expressions.Expression expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsSimpleExpression(System.Linq.Expressions.Expression)" />
        <MemberSignature Language="F#" Value="static member IsSimpleExpression : System.Linq.Expressions.Expression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsSimpleExpression expression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsSimpleExpression(System::Linq::Expressions::Expression ^ expression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="expression">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsSimpleExpression(System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="LiftExpressionFromSubquery">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Query.Expressions.ColumnReferenceExpression LiftExpressionFromSubquery (this System.Linq.Expressions.Expression expression, Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase table);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Query.Expressions.ColumnReferenceExpression LiftExpressionFromSubquery(class System.Linq.Expressions.Expression expression, class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase table) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.LiftExpressionFromSubquery(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase)" />
        <MemberSignature Language="F#" Value="static member LiftExpressionFromSubquery : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.ColumnReferenceExpression" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.LiftExpressionFromSubquery (expression, table)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Query::Expressions::ColumnReferenceExpression ^ LiftExpressionFromSubquery(System::Linq::Expressions::Expression ^ expression, Microsoft::EntityFrameworkCore::Query::Expressions::TableExpressionBase ^ table);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.ColumnReferenceExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
          <Parameter Name="table" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
        </Parameters>
        <Docs>
          <param name="expression">To be added.</param>
          <param name="table">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.LiftExpressionFromSubquery(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression" />
      </Targets>
      <Member MemberName="TryGetColumnExpression">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression TryGetColumnExpression (this Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression aliasExpression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression TryGetColumnExpression(class Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression aliasExpression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)" />
        <MemberSignature Language="F#" Value="static member TryGetColumnExpression : Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression aliasExpression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Query::Expressions::ColumnExpression ^ TryGetColumnExpression(Microsoft::EntityFrameworkCore::Query::Expressions::AliasExpression ^ aliasExpression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="aliasExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="aliasExpression">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="TryGetColumnExpression">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression TryGetColumnExpression (this System.Linq.Expressions.Expression expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression TryGetColumnExpression(class System.Linq.Expressions.Expression expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression(System.Linq.Expressions.Expression)" />
        <MemberSignature Language="F#" Value="static member TryGetColumnExpression : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression expression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Query::Expressions::ColumnExpression ^ TryGetColumnExpression(System::Linq::Expressions::Expression ^ expression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="expression">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression(System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.Expressions.Expression" />
      </Targets>
      <Member MemberName="UnwrapNullableExpression">
        <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression UnwrapNullableExpression (this System.Linq.Expressions.Expression expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression UnwrapNullableExpression(class System.Linq.Expressions.Expression expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.UnwrapNullableExpression(System.Linq.Expressions.Expression)" />
        <MemberSignature Language="F#" Value="static member UnwrapNullableExpression : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.UnwrapNullableExpression expression" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::Expressions::Expression ^ UnwrapNullableExpression(System::Linq::Expressions::Expression ^ expression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.Expressions.Expression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="expression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.UnwrapNullableExpression(System.Linq.Expressions.Expression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="AmbientTransactionEnlisted">
        <MemberSignature Language="C#" Value="public static void AmbientTransactionEnlisted (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, System.Transactions.Transaction transaction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AmbientTransactionEnlisted(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Transaction&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, class System.Transactions.Transaction transaction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.AmbientTransactionEnlisted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Transactions.Transaction)" />
        <MemberSignature Language="F#" Value="static member AmbientTransactionEnlisted : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * System.Transactions.Transaction -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.AmbientTransactionEnlisted (diagnostics, connection, transaction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void AmbientTransactionEnlisted(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Transaction ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, System::Transactions::Transaction ^ transaction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Transaction&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="transaction" Type="System.Transactions.Transaction" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="transaction">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.AmbientTransactionEnlisted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Transactions.Transaction)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="AmbientTransactionWarning">
        <MemberSignature Language="C#" Value="public static void AmbientTransactionWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, DateTimeOffset startDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AmbientTransactionWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Transaction&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, valuetype System.DateTimeOffset startDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.AmbientTransactionWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AmbientTransactionWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Database.Transaction), connection As IRelationalConnection, startDate As DateTimeOffset)" />
        <MemberSignature Language="F#" Value="static member AmbientTransactionWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * DateTimeOffset -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.AmbientTransactionWarning (diagnostics, connection, startDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void AmbientTransactionWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Transaction ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, DateTimeOffset startDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Transaction&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="startDate" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="startDate">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.AmbientTransactionWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="BatchReadyForExecution">
        <MemberSignature Language="C#" Value="public static void BatchReadyForExecution (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; diagnostics, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; entries, int commandCount);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BatchReadyForExecution(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Update&gt; diagnostics, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; entries, int32 commandCount) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.BatchReadyForExecution(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub BatchReadyForExecution (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Update), entries As IEnumerable(Of IUpdateEntry), commandCount As Integer)" />
        <MemberSignature Language="F#" Value="static member BatchReadyForExecution : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; * seq&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; * int -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.BatchReadyForExecution (diagnostics, entries, commandCount)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void BatchReadyForExecution(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Update ^&gt; ^ diagnostics, System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Update::IUpdateEntry ^&gt; ^ entries, int commandCount);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Update&gt;" RefType="this" />
          <Parameter Name="entries" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;" />
          <Parameter Name="commandCount" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="entries">To be added.</param>
          <param name="commandCount">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.BatchReadyForExecution(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="BatchSmallerThanMinBatchSize">
        <MemberSignature Language="C#" Value="public static void BatchSmallerThanMinBatchSize (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; diagnostics, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; entries, int commandCount, int minBatchSize);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BatchSmallerThanMinBatchSize(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Update&gt; diagnostics, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; entries, int32 commandCount, int32 minBatchSize) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.BatchSmallerThanMinBatchSize(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Int32,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub BatchSmallerThanMinBatchSize (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Update), entries As IEnumerable(Of IUpdateEntry), commandCount As Integer, minBatchSize As Integer)" />
        <MemberSignature Language="F#" Value="static member BatchSmallerThanMinBatchSize : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; * seq&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; * int * int -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.BatchSmallerThanMinBatchSize (diagnostics, entries, commandCount, minBatchSize)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void BatchSmallerThanMinBatchSize(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Update ^&gt; ^ diagnostics, System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Update::IUpdateEntry ^&gt; ^ entries, int commandCount, int minBatchSize);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Update&gt;" RefType="this" />
          <Parameter Name="entries" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;" />
          <Parameter Name="commandCount" Type="System.Int32" />
          <Parameter Name="minBatchSize" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="entries">To be added.</param>
          <param name="commandCount">To be added.</param>
          <param name="minBatchSize">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.BatchSmallerThanMinBatchSize(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="BoolWithDefaultWarning">
        <MemberSignature Language="C#" Value="public static void BoolWithDefaultWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BoolWithDefaultWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model/Validation&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.BoolWithDefaultWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub BoolWithDefaultWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model.Validation), property As IProperty)" />
        <MemberSignature Language="F#" Value="static member BoolWithDefaultWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation&gt; * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.BoolWithDefaultWarning (diagnostics, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void BoolWithDefaultWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model::Validation ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model+Validation&gt;" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.BoolWithDefaultWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="CommandError">
        <MemberSignature Language="C#" Value="public static void CommandError (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt; diagnostics, System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod executeMethod, Guid commandId, Guid connectionId, Exception exception, bool async, DateTimeOffset startTime, TimeSpan duration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CommandError(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Command&gt; diagnostics, class System.Data.Common.DbCommand command, valuetype Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod executeMethod, valuetype System.Guid commandId, valuetype System.Guid connectionId, class System.Exception exception, bool async, valuetype System.DateTimeOffset startTime, valuetype System.TimeSpan duration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.CommandError(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,System.Guid,System.Guid,System.Exception,System.Boolean,System.DateTimeOffset,System.TimeSpan)" />
        <MemberSignature Language="F#" Value="static member CommandError : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt; * System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod * Guid * Guid * Exception * bool * DateTimeOffset * TimeSpan -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.CommandError (diagnostics, command, executeMethod, commandId, connectionId, exception, async, startTime, duration)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void CommandError(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Command ^&gt; ^ diagnostics, System::Data::Common::DbCommand ^ command, Microsoft::EntityFrameworkCore::Diagnostics::DbCommandMethod executeMethod, Guid commandId, Guid connectionId, Exception ^ exception, bool async, DateTimeOffset startTime, TimeSpan duration);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Command&gt;" RefType="this" />
          <Parameter Name="command" Type="System.Data.Common.DbCommand" />
          <Parameter Name="executeMethod" Type="Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod" />
          <Parameter Name="commandId" Type="System.Guid" />
          <Parameter Name="connectionId" Type="System.Guid" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="async" Type="System.Boolean" />
          <Parameter Name="startTime" Type="System.DateTimeOffset" />
          <Parameter Name="duration" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="command">To be added.</param>
          <param name="executeMethod">To be added.</param>
          <param name="commandId">To be added.</param>
          <param name="connectionId">To be added.</param>
          <param name="exception">To be added.</param>
          <param name="async">To be added.</param>
          <param name="startTime">To be added.</param>
          <param name="duration">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.CommandError(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,System.Guid,System.Guid,System.Exception,System.Boolean,System.DateTimeOffset,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="CommandExecuted">
        <MemberSignature Language="C#" Value="public static void CommandExecuted (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt; diagnostics, System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod executeMethod, Guid commandId, Guid connectionId, object methodResult, bool async, DateTimeOffset startTime, TimeSpan duration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CommandExecuted(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Command&gt; diagnostics, class System.Data.Common.DbCommand command, valuetype Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod executeMethod, valuetype System.Guid commandId, valuetype System.Guid connectionId, object methodResult, bool async, valuetype System.DateTimeOffset startTime, valuetype System.TimeSpan duration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.CommandExecuted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,System.Guid,System.Guid,System.Object,System.Boolean,System.DateTimeOffset,System.TimeSpan)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CommandExecuted (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Database.Command), command As DbCommand, executeMethod As DbCommandMethod, commandId As Guid, connectionId As Guid, methodResult As Object, async As Boolean, startTime As DateTimeOffset, duration As TimeSpan)" />
        <MemberSignature Language="F#" Value="static member CommandExecuted : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt; * System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod * Guid * Guid * obj * bool * DateTimeOffset * TimeSpan -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.CommandExecuted (diagnostics, command, executeMethod, commandId, connectionId, methodResult, async, startTime, duration)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void CommandExecuted(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Command ^&gt; ^ diagnostics, System::Data::Common::DbCommand ^ command, Microsoft::EntityFrameworkCore::Diagnostics::DbCommandMethod executeMethod, Guid commandId, Guid connectionId, System::Object ^ methodResult, bool async, DateTimeOffset startTime, TimeSpan duration);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Command&gt;" RefType="this" />
          <Parameter Name="command" Type="System.Data.Common.DbCommand" />
          <Parameter Name="executeMethod" Type="Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod" />
          <Parameter Name="commandId" Type="System.Guid" />
          <Parameter Name="connectionId" Type="System.Guid" />
          <Parameter Name="methodResult" Type="System.Object" />
          <Parameter Name="async" Type="System.Boolean" />
          <Parameter Name="startTime" Type="System.DateTimeOffset" />
          <Parameter Name="duration" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="command">To be added.</param>
          <param name="executeMethod">To be added.</param>
          <param name="commandId">To be added.</param>
          <param name="connectionId">To be added.</param>
          <param name="methodResult">To be added.</param>
          <param name="async">To be added.</param>
          <param name="startTime">To be added.</param>
          <param name="duration">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.CommandExecuted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,System.Guid,System.Guid,System.Object,System.Boolean,System.DateTimeOffset,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="CommandExecuting">
        <MemberSignature Language="C#" Value="public static void CommandExecuting (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt; diagnostics, System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, DateTimeOffset startTime);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CommandExecuting(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Command&gt; diagnostics, class System.Data.Common.DbCommand command, valuetype Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod executeMethod, valuetype System.Guid commandId, valuetype System.Guid connectionId, bool async, valuetype System.DateTimeOffset startTime) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.CommandExecuting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,System.Guid,System.Guid,System.Boolean,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CommandExecuting (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Database.Command), command As DbCommand, executeMethod As DbCommandMethod, commandId As Guid, connectionId As Guid, async As Boolean, startTime As DateTimeOffset)" />
        <MemberSignature Language="F#" Value="static member CommandExecuting : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt; * System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod * Guid * Guid * bool * DateTimeOffset -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.CommandExecuting (diagnostics, command, executeMethod, commandId, connectionId, async, startTime)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void CommandExecuting(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Command ^&gt; ^ diagnostics, System::Data::Common::DbCommand ^ command, Microsoft::EntityFrameworkCore::Diagnostics::DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, DateTimeOffset startTime);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Command&gt;" RefType="this" />
          <Parameter Name="command" Type="System.Data.Common.DbCommand" />
          <Parameter Name="executeMethod" Type="Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod" />
          <Parameter Name="commandId" Type="System.Guid" />
          <Parameter Name="connectionId" Type="System.Guid" />
          <Parameter Name="async" Type="System.Boolean" />
          <Parameter Name="startTime" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="command">To be added.</param>
          <param name="executeMethod">To be added.</param>
          <param name="commandId">To be added.</param>
          <param name="connectionId">To be added.</param>
          <param name="async">To be added.</param>
          <param name="startTime">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.CommandExecuting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,System.Guid,System.Guid,System.Boolean,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ConnectionClosed">
        <MemberSignature Language="C#" Value="public static void ConnectionClosed (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConnectionClosed(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Connection&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, valuetype System.DateTimeOffset startTime, valuetype System.TimeSpan duration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionClosed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset,System.TimeSpan)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ConnectionClosed (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Database.Connection), connection As IRelationalConnection, startTime As DateTimeOffset, duration As TimeSpan)" />
        <MemberSignature Language="F#" Value="static member ConnectionClosed : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * DateTimeOffset * TimeSpan -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionClosed (diagnostics, connection, startTime, duration)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ConnectionClosed(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Connection ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, DateTimeOffset startTime, TimeSpan duration);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Connection&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="startTime" Type="System.DateTimeOffset" />
          <Parameter Name="duration" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="startTime">To be added.</param>
          <param name="duration">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionClosed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ConnectionClosing">
        <MemberSignature Language="C#" Value="public static void ConnectionClosing (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, DateTimeOffset startTime);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConnectionClosing(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Connection&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, valuetype System.DateTimeOffset startTime) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionClosing(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ConnectionClosing (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Database.Connection), connection As IRelationalConnection, startTime As DateTimeOffset)" />
        <MemberSignature Language="F#" Value="static member ConnectionClosing : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * DateTimeOffset -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionClosing (diagnostics, connection, startTime)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ConnectionClosing(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Connection ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, DateTimeOffset startTime);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Connection&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="startTime" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="startTime">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionClosing(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ConnectionError">
        <MemberSignature Language="C#" Value="public static void ConnectionError (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, Exception exception, DateTimeOffset startTime, TimeSpan duration, bool async, bool logErrorAsDebug);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConnectionError(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Connection&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, class System.Exception exception, valuetype System.DateTimeOffset startTime, valuetype System.TimeSpan duration, bool async, bool logErrorAsDebug) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionError(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Exception,System.DateTimeOffset,System.TimeSpan,System.Boolean,System.Boolean)" />
        <MemberSignature Language="F#" Value="static member ConnectionError : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * Exception * DateTimeOffset * TimeSpan * bool * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionError (diagnostics, connection, exception, startTime, duration, async, logErrorAsDebug)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ConnectionError(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Connection ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, Exception ^ exception, DateTimeOffset startTime, TimeSpan duration, bool async, bool logErrorAsDebug);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Connection&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="startTime" Type="System.DateTimeOffset" />
          <Parameter Name="duration" Type="System.TimeSpan" />
          <Parameter Name="async" Type="System.Boolean" />
          <Parameter Name="logErrorAsDebug" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="exception">To be added.</param>
          <param name="startTime">To be added.</param>
          <param name="duration">To be added.</param>
          <param name="async">To be added.</param>
          <param name="logErrorAsDebug">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionError(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Exception,System.DateTimeOffset,System.TimeSpan,System.Boolean,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ConnectionOpened">
        <MemberSignature Language="C#" Value="public static void ConnectionOpened (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration, bool async);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConnectionOpened(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Connection&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, valuetype System.DateTimeOffset startTime, valuetype System.TimeSpan duration, bool async) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionOpened(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset,System.TimeSpan,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ConnectionOpened (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Database.Connection), connection As IRelationalConnection, startTime As DateTimeOffset, duration As TimeSpan, async As Boolean)" />
        <MemberSignature Language="F#" Value="static member ConnectionOpened : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * DateTimeOffset * TimeSpan * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionOpened (diagnostics, connection, startTime, duration, async)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ConnectionOpened(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Connection ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, DateTimeOffset startTime, TimeSpan duration, bool async);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Connection&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="startTime" Type="System.DateTimeOffset" />
          <Parameter Name="duration" Type="System.TimeSpan" />
          <Parameter Name="async" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="startTime">To be added.</param>
          <param name="duration">To be added.</param>
          <param name="async">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionOpened(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset,System.TimeSpan,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ConnectionOpening">
        <MemberSignature Language="C#" Value="public static void ConnectionOpening (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, DateTimeOffset startTime, bool async);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConnectionOpening(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Connection&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, valuetype System.DateTimeOffset startTime, bool async) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionOpening(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ConnectionOpening (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Database.Connection), connection As IRelationalConnection, startTime As DateTimeOffset, async As Boolean)" />
        <MemberSignature Language="F#" Value="static member ConnectionOpening : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * DateTimeOffset * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionOpening (diagnostics, connection, startTime, async)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ConnectionOpening(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Connection ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, DateTimeOffset startTime, bool async);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Connection&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="startTime" Type="System.DateTimeOffset" />
          <Parameter Name="async" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="startTime">To be added.</param>
          <param name="async">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ConnectionOpening(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="DataReaderDisposing">
        <MemberSignature Language="C#" Value="public static void DataReaderDisposing (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, System.Data.Common.DbCommand command, System.Data.Common.DbDataReader dataReader, Guid commandId, int recordsAffected, int readCount, DateTimeOffset startTime, TimeSpan duration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DataReaderDisposing(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Command&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, class System.Data.Common.DbCommand command, class System.Data.Common.DbDataReader dataReader, valuetype System.Guid commandId, int32 recordsAffected, int32 readCount, valuetype System.DateTimeOffset startTime, valuetype System.TimeSpan duration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.DataReaderDisposing(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,System.Data.Common.DbDataReader,System.Guid,System.Int32,System.Int32,System.DateTimeOffset,System.TimeSpan)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub DataReaderDisposing (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Database.Command), connection As IRelationalConnection, command As DbCommand, dataReader As DbDataReader, commandId As Guid, recordsAffected As Integer, readCount As Integer, startTime As DateTimeOffset, duration As TimeSpan)" />
        <MemberSignature Language="F#" Value="static member DataReaderDisposing : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * System.Data.Common.DbCommand * System.Data.Common.DbDataReader * Guid * int * int * DateTimeOffset * TimeSpan -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.DataReaderDisposing (diagnostics, connection, command, dataReader, commandId, recordsAffected, readCount, startTime, duration)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void DataReaderDisposing(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Command ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, System::Data::Common::DbCommand ^ command, System::Data::Common::DbDataReader ^ dataReader, Guid commandId, int recordsAffected, int readCount, DateTimeOffset startTime, TimeSpan duration);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Command&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="command" Type="System.Data.Common.DbCommand" />
          <Parameter Name="dataReader" Type="System.Data.Common.DbDataReader" />
          <Parameter Name="commandId" Type="System.Guid" />
          <Parameter Name="recordsAffected" Type="System.Int32" />
          <Parameter Name="readCount" Type="System.Int32" />
          <Parameter Name="startTime" Type="System.DateTimeOffset" />
          <Parameter Name="duration" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="command">To be added.</param>
          <param name="dataReader">To be added.</param>
          <param name="commandId">To be added.</param>
          <param name="recordsAffected">To be added.</param>
          <param name="readCount">To be added.</param>
          <param name="startTime">To be added.</param>
          <param name="duration">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.DataReaderDisposing(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,System.Data.Common.DbDataReader,System.Guid,System.Int32,System.Int32,System.DateTimeOffset,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ExplicitTransactionEnlisted">
        <MemberSignature Language="C#" Value="public static void ExplicitTransactionEnlisted (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, System.Transactions.Transaction transaction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExplicitTransactionEnlisted(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Transaction&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, class System.Transactions.Transaction transaction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ExplicitTransactionEnlisted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Transactions.Transaction)" />
        <MemberSignature Language="F#" Value="static member ExplicitTransactionEnlisted : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * System.Transactions.Transaction -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ExplicitTransactionEnlisted (diagnostics, connection, transaction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ExplicitTransactionEnlisted(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Transaction ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, System::Transactions::Transaction ^ transaction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Transaction&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="transaction" Type="System.Transactions.Transaction" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="transaction">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ExplicitTransactionEnlisted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Transactions.Transaction)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="MigrateUsingConnection">
        <MemberSignature Language="C#" Value="public static void MigrateUsingConnection (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; diagnostics, Microsoft.EntityFrameworkCore.Migrations.IMigrator migrator, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MigrateUsingConnection(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Migrations&gt; diagnostics, class Microsoft.EntityFrameworkCore.Migrations.IMigrator migrator, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrateUsingConnection(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub MigrateUsingConnection (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Migrations), migrator As IMigrator, connection As IRelationalConnection)" />
        <MemberSignature Language="F#" Value="static member MigrateUsingConnection : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; * Microsoft.EntityFrameworkCore.Migrations.IMigrator * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrateUsingConnection (diagnostics, migrator, connection)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MigrateUsingConnection(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Migrations ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Migrations::IMigrator ^ migrator, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Migrations&gt;" RefType="this" />
          <Parameter Name="migrator" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrator" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="migrator">To be added.</param>
          <param name="connection">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrateUsingConnection(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="MigrationApplying">
        <MemberSignature Language="C#" Value="public static void MigrationApplying (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; diagnostics, Microsoft.EntityFrameworkCore.Migrations.IMigrator migrator, Microsoft.EntityFrameworkCore.Migrations.Migration migration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MigrationApplying(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Migrations&gt; diagnostics, class Microsoft.EntityFrameworkCore.Migrations.IMigrator migrator, class Microsoft.EntityFrameworkCore.Migrations.Migration migration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationApplying(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.Migration)" />
        <MemberSignature Language="F#" Value="static member MigrationApplying : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; * Microsoft.EntityFrameworkCore.Migrations.IMigrator * Microsoft.EntityFrameworkCore.Migrations.Migration -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationApplying (diagnostics, migrator, migration)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MigrationApplying(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Migrations ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Migrations::IMigrator ^ migrator, Microsoft::EntityFrameworkCore::Migrations::Migration ^ migration);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Migrations&gt;" RefType="this" />
          <Parameter Name="migrator" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrator" />
          <Parameter Name="migration" Type="Microsoft.EntityFrameworkCore.Migrations.Migration" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="migrator">To be added.</param>
          <param name="migration">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationApplying(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.Migration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="MigrationAttributeMissingWarning">
        <MemberSignature Language="C#" Value="public static void MigrationAttributeMissingWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; diagnostics, System.Reflection.TypeInfo migrationType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MigrationAttributeMissingWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Migrations&gt; diagnostics, class System.Reflection.TypeInfo migrationType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationAttributeMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},System.Reflection.TypeInfo)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub MigrationAttributeMissingWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Migrations), migrationType As TypeInfo)" />
        <MemberSignature Language="F#" Value="static member MigrationAttributeMissingWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; * System.Reflection.TypeInfo -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationAttributeMissingWarning (diagnostics, migrationType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MigrationAttributeMissingWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Migrations ^&gt; ^ diagnostics, System::Reflection::TypeInfo ^ migrationType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Migrations&gt;" RefType="this" />
          <Parameter Name="migrationType" Type="System.Reflection.TypeInfo" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="migrationType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationAttributeMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},System.Reflection.TypeInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="MigrationGeneratingDownScript">
        <MemberSignature Language="C#" Value="public static void MigrationGeneratingDownScript (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; diagnostics, Microsoft.EntityFrameworkCore.Migrations.IMigrator migrator, Microsoft.EntityFrameworkCore.Migrations.Migration migration, string fromMigration, string toMigration, bool idempotent);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MigrationGeneratingDownScript(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Migrations&gt; diagnostics, class Microsoft.EntityFrameworkCore.Migrations.IMigrator migrator, class Microsoft.EntityFrameworkCore.Migrations.Migration migration, string fromMigration, string toMigration, bool idempotent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationGeneratingDownScript(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.Migration,System.String,System.String,System.Boolean)" />
        <MemberSignature Language="F#" Value="static member MigrationGeneratingDownScript : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; * Microsoft.EntityFrameworkCore.Migrations.IMigrator * Microsoft.EntityFrameworkCore.Migrations.Migration * string * string * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationGeneratingDownScript (diagnostics, migrator, migration, fromMigration, toMigration, idempotent)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MigrationGeneratingDownScript(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Migrations ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Migrations::IMigrator ^ migrator, Microsoft::EntityFrameworkCore::Migrations::Migration ^ migration, System::String ^ fromMigration, System::String ^ toMigration, bool idempotent);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Migrations&gt;" RefType="this" />
          <Parameter Name="migrator" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrator" />
          <Parameter Name="migration" Type="Microsoft.EntityFrameworkCore.Migrations.Migration" />
          <Parameter Name="fromMigration" Type="System.String" />
          <Parameter Name="toMigration" Type="System.String" />
          <Parameter Name="idempotent" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="migrator">To be added.</param>
          <param name="migration">To be added.</param>
          <param name="fromMigration">To be added.</param>
          <param name="toMigration">To be added.</param>
          <param name="idempotent">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationGeneratingDownScript(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.Migration,System.String,System.String,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="MigrationGeneratingUpScript">
        <MemberSignature Language="C#" Value="public static void MigrationGeneratingUpScript (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; diagnostics, Microsoft.EntityFrameworkCore.Migrations.IMigrator migrator, Microsoft.EntityFrameworkCore.Migrations.Migration migration, string fromMigration, string toMigration, bool idempotent);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MigrationGeneratingUpScript(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Migrations&gt; diagnostics, class Microsoft.EntityFrameworkCore.Migrations.IMigrator migrator, class Microsoft.EntityFrameworkCore.Migrations.Migration migration, string fromMigration, string toMigration, bool idempotent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationGeneratingUpScript(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.Migration,System.String,System.String,System.Boolean)" />
        <MemberSignature Language="F#" Value="static member MigrationGeneratingUpScript : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; * Microsoft.EntityFrameworkCore.Migrations.IMigrator * Microsoft.EntityFrameworkCore.Migrations.Migration * string * string * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationGeneratingUpScript (diagnostics, migrator, migration, fromMigration, toMigration, idempotent)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MigrationGeneratingUpScript(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Migrations ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Migrations::IMigrator ^ migrator, Microsoft::EntityFrameworkCore::Migrations::Migration ^ migration, System::String ^ fromMigration, System::String ^ toMigration, bool idempotent);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Migrations&gt;" RefType="this" />
          <Parameter Name="migrator" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrator" />
          <Parameter Name="migration" Type="Microsoft.EntityFrameworkCore.Migrations.Migration" />
          <Parameter Name="fromMigration" Type="System.String" />
          <Parameter Name="toMigration" Type="System.String" />
          <Parameter Name="idempotent" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="migrator">To be added.</param>
          <param name="migration">To be added.</param>
          <param name="fromMigration">To be added.</param>
          <param name="toMigration">To be added.</param>
          <param name="idempotent">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationGeneratingUpScript(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.Migration,System.String,System.String,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="MigrationReverting">
        <MemberSignature Language="C#" Value="public static void MigrationReverting (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; diagnostics, Microsoft.EntityFrameworkCore.Migrations.IMigrator migrator, Microsoft.EntityFrameworkCore.Migrations.Migration migration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MigrationReverting(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Migrations&gt; diagnostics, class Microsoft.EntityFrameworkCore.Migrations.IMigrator migrator, class Microsoft.EntityFrameworkCore.Migrations.Migration migration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationReverting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.Migration)" />
        <MemberSignature Language="F#" Value="static member MigrationReverting : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; * Microsoft.EntityFrameworkCore.Migrations.IMigrator * Microsoft.EntityFrameworkCore.Migrations.Migration -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationReverting (diagnostics, migrator, migration)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MigrationReverting(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Migrations ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Migrations::IMigrator ^ migrator, Microsoft::EntityFrameworkCore::Migrations::Migration ^ migration);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Migrations&gt;" RefType="this" />
          <Parameter Name="migrator" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrator" />
          <Parameter Name="migration" Type="Microsoft.EntityFrameworkCore.Migrations.Migration" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="migrator">To be added.</param>
          <param name="migration">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationReverting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.Migration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="MigrationsNotApplied">
        <MemberSignature Language="C#" Value="public static void MigrationsNotApplied (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; diagnostics, Microsoft.EntityFrameworkCore.Migrations.IMigrator migrator);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MigrationsNotApplied(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Migrations&gt; diagnostics, class Microsoft.EntityFrameworkCore.Migrations.IMigrator migrator) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationsNotApplied(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub MigrationsNotApplied (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Migrations), migrator As IMigrator)" />
        <MemberSignature Language="F#" Value="static member MigrationsNotApplied : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; * Microsoft.EntityFrameworkCore.Migrations.IMigrator -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationsNotApplied (diagnostics, migrator)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MigrationsNotApplied(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Migrations ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Migrations::IMigrator ^ migrator);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Migrations&gt;" RefType="this" />
          <Parameter Name="migrator" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrator" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="migrator">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationsNotApplied(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="MigrationsNotFound">
        <MemberSignature Language="C#" Value="public static void MigrationsNotFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; diagnostics, Microsoft.EntityFrameworkCore.Migrations.IMigrator migrator, Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly migrationsAssembly);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MigrationsNotFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Migrations&gt; diagnostics, class Microsoft.EntityFrameworkCore.Migrations.IMigrator migrator, class Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly migrationsAssembly) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationsNotFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub MigrationsNotFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Migrations), migrator As IMigrator, migrationsAssembly As IMigrationsAssembly)" />
        <MemberSignature Language="F#" Value="static member MigrationsNotFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations&gt; * Microsoft.EntityFrameworkCore.Migrations.IMigrator * Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationsNotFound (diagnostics, migrator, migrationsAssembly)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MigrationsNotFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Migrations ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Migrations::IMigrator ^ migrator, Microsoft::EntityFrameworkCore::Migrations::IMigrationsAssembly ^ migrationsAssembly);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Migrations&gt;" RefType="this" />
          <Parameter Name="migrator" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrator" />
          <Parameter Name="migrationsAssembly" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="migrator">To be added.</param>
          <param name="migrationsAssembly">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.MigrationsNotFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ModelValidationKeyDefaultValueWarning">
        <MemberSignature Language="C#" Value="public static void ModelValidationKeyDefaultValueWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ModelValidationKeyDefaultValueWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model/Validation&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ModelValidationKeyDefaultValueWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ModelValidationKeyDefaultValueWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model.Validation), property As IProperty)" />
        <MemberSignature Language="F#" Value="static member ModelValidationKeyDefaultValueWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation&gt; * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ModelValidationKeyDefaultValueWarning (diagnostics, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ModelValidationKeyDefaultValueWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model::Validation ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model+Validation&gt;" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.ModelValidationKeyDefaultValueWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="QueryClientEvaluationWarning">
        <MemberSignature Language="C#" Value="public static void QueryClientEvaluationWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; diagnostics, Remotion.Linq.QueryModel queryModel, object queryModelElement);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void QueryClientEvaluationWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; diagnostics, class Remotion.Linq.QueryModel queryModel, object queryModelElement) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.QueryClientEvaluationWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Remotion.Linq.QueryModel,System.Object)" />
        <MemberSignature Language="F#" Value="static member QueryClientEvaluationWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * Remotion.Linq.QueryModel * obj -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.QueryClientEvaluationWarning (diagnostics, queryModel, queryModelElement)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void QueryClientEvaluationWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Query ^&gt; ^ diagnostics, Remotion::Linq::QueryModel ^ queryModel, System::Object ^ queryModelElement);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" RefType="this" />
          <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
          <Parameter Name="queryModelElement" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="queryModel">To be added.</param>
          <param name="queryModelElement">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.QueryClientEvaluationWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Remotion.Linq.QueryModel,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="QueryPossibleExceptionWithAggregateOperator">
        <MemberSignature Language="C#" Value="public static void QueryPossibleExceptionWithAggregateOperator (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; diagnostics);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void QueryPossibleExceptionWithAggregateOperator(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; diagnostics) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.QueryPossibleExceptionWithAggregateOperator(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub QueryPossibleExceptionWithAggregateOperator (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Query))" />
        <MemberSignature Language="F#" Value="static member QueryPossibleExceptionWithAggregateOperator : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.QueryPossibleExceptionWithAggregateOperator diagnostics" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void QueryPossibleExceptionWithAggregateOperator(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Query ^&gt; ^ diagnostics);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.QueryPossibleExceptionWithAggregateOperator(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="QueryPossibleUnintendedUseOfEqualsWarning">
        <MemberSignature Language="C#" Value="public static void QueryPossibleUnintendedUseOfEqualsWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; diagnostics, System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void QueryPossibleUnintendedUseOfEqualsWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; diagnostics, class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.QueryPossibleUnintendedUseOfEqualsWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Linq.Expressions.MethodCallExpression)" />
        <MemberSignature Language="F#" Value="static member QueryPossibleUnintendedUseOfEqualsWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * System.Linq.Expressions.MethodCallExpression -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.QueryPossibleUnintendedUseOfEqualsWarning (diagnostics, methodCallExpression)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void QueryPossibleUnintendedUseOfEqualsWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Query ^&gt; ^ diagnostics, System::Linq::Expressions::MethodCallExpression ^ methodCallExpression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" RefType="this" />
          <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="methodCallExpression">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.QueryPossibleUnintendedUseOfEqualsWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Linq.Expressions.MethodCallExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="TransactionCommitted">
        <MemberSignature Language="C#" Value="public static void TransactionCommitted (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, System.Data.Common.DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TransactionCommitted(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Transaction&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, class System.Data.Common.DbTransaction transaction, valuetype System.Guid transactionId, valuetype System.DateTimeOffset startTime, valuetype System.TimeSpan duration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionCommitted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.TimeSpan)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub TransactionCommitted (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Database.Transaction), connection As IRelationalConnection, transaction As DbTransaction, transactionId As Guid, startTime As DateTimeOffset, duration As TimeSpan)" />
        <MemberSignature Language="F#" Value="static member TransactionCommitted : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * System.Data.Common.DbTransaction * Guid * DateTimeOffset * TimeSpan -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionCommitted (diagnostics, connection, transaction, transactionId, startTime, duration)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void TransactionCommitted(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Transaction ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, System::Data::Common::DbTransaction ^ transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Transaction&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
          <Parameter Name="transactionId" Type="System.Guid" />
          <Parameter Name="startTime" Type="System.DateTimeOffset" />
          <Parameter Name="duration" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="transaction">To be added.</param>
          <param name="transactionId">To be added.</param>
          <param name="startTime">To be added.</param>
          <param name="duration">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionCommitted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="TransactionDisposed">
        <MemberSignature Language="C#" Value="public static void TransactionDisposed (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, System.Data.Common.DbTransaction transaction, Guid transactionId, DateTimeOffset startDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TransactionDisposed(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Transaction&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, class System.Data.Common.DbTransaction transaction, valuetype System.Guid transactionId, valuetype System.DateTimeOffset startDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionDisposed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub TransactionDisposed (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Database.Transaction), connection As IRelationalConnection, transaction As DbTransaction, transactionId As Guid, startDate As DateTimeOffset)" />
        <MemberSignature Language="F#" Value="static member TransactionDisposed : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * System.Data.Common.DbTransaction * Guid * DateTimeOffset -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionDisposed (diagnostics, connection, transaction, transactionId, startDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void TransactionDisposed(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Transaction ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, System::Data::Common::DbTransaction ^ transaction, Guid transactionId, DateTimeOffset startDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Transaction&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
          <Parameter Name="transactionId" Type="System.Guid" />
          <Parameter Name="startDate" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="transaction">To be added.</param>
          <param name="transactionId">To be added.</param>
          <param name="startDate">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionDisposed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="TransactionError">
        <MemberSignature Language="C#" Value="public static void TransactionError (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, System.Data.Common.DbTransaction transaction, Guid transactionId, string action, Exception exception, DateTimeOffset startTime, TimeSpan duration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TransactionError(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Transaction&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, class System.Data.Common.DbTransaction transaction, valuetype System.Guid transactionId, string action, class System.Exception exception, valuetype System.DateTimeOffset startTime, valuetype System.TimeSpan duration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionError(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.String,System.Exception,System.DateTimeOffset,System.TimeSpan)" />
        <MemberSignature Language="F#" Value="static member TransactionError : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * System.Data.Common.DbTransaction * Guid * string * Exception * DateTimeOffset * TimeSpan -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionError (diagnostics, connection, transaction, transactionId, action, exception, startTime, duration)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void TransactionError(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Transaction ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, System::Data::Common::DbTransaction ^ transaction, Guid transactionId, System::String ^ action, Exception ^ exception, DateTimeOffset startTime, TimeSpan duration);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Transaction&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
          <Parameter Name="transactionId" Type="System.Guid" />
          <Parameter Name="action" Type="System.String" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="startTime" Type="System.DateTimeOffset" />
          <Parameter Name="duration" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="transaction">To be added.</param>
          <param name="transactionId">To be added.</param>
          <param name="action">To be added.</param>
          <param name="exception">To be added.</param>
          <param name="startTime">To be added.</param>
          <param name="duration">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionError(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.String,System.Exception,System.DateTimeOffset,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="TransactionRolledBack">
        <MemberSignature Language="C#" Value="public static void TransactionRolledBack (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, System.Data.Common.DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TransactionRolledBack(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Transaction&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, class System.Data.Common.DbTransaction transaction, valuetype System.Guid transactionId, valuetype System.DateTimeOffset startTime, valuetype System.TimeSpan duration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionRolledBack(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.TimeSpan)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub TransactionRolledBack (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Database.Transaction), connection As IRelationalConnection, transaction As DbTransaction, transactionId As Guid, startTime As DateTimeOffset, duration As TimeSpan)" />
        <MemberSignature Language="F#" Value="static member TransactionRolledBack : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * System.Data.Common.DbTransaction * Guid * DateTimeOffset * TimeSpan -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionRolledBack (diagnostics, connection, transaction, transactionId, startTime, duration)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void TransactionRolledBack(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Transaction ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, System::Data::Common::DbTransaction ^ transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Transaction&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
          <Parameter Name="transactionId" Type="System.Guid" />
          <Parameter Name="startTime" Type="System.DateTimeOffset" />
          <Parameter Name="duration" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="transaction">To be added.</param>
          <param name="transactionId">To be added.</param>
          <param name="startTime">To be added.</param>
          <param name="duration">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionRolledBack(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="TransactionStarted">
        <MemberSignature Language="C#" Value="public static void TransactionStarted (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, System.Data.Common.DbTransaction transaction, Guid transactionId, DateTimeOffset startDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TransactionStarted(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Transaction&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, class System.Data.Common.DbTransaction transaction, valuetype System.Guid transactionId, valuetype System.DateTimeOffset startDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionStarted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub TransactionStarted (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Database.Transaction), connection As IRelationalConnection, transaction As DbTransaction, transactionId As Guid, startDate As DateTimeOffset)" />
        <MemberSignature Language="F#" Value="static member TransactionStarted : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * System.Data.Common.DbTransaction * Guid * DateTimeOffset -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionStarted (diagnostics, connection, transaction, transactionId, startDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void TransactionStarted(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Transaction ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, System::Data::Common::DbTransaction ^ transaction, Guid transactionId, DateTimeOffset startDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Transaction&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
          <Parameter Name="transactionId" Type="System.Guid" />
          <Parameter Name="startDate" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="transaction">To be added.</param>
          <param name="transactionId">To be added.</param>
          <param name="startDate">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionStarted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="TransactionUsed">
        <MemberSignature Language="C#" Value="public static void TransactionUsed (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; diagnostics, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, System.Data.Common.DbTransaction transaction, Guid transactionId, DateTimeOffset startDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TransactionUsed(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Transaction&gt; diagnostics, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, class System.Data.Common.DbTransaction transaction, valuetype System.Guid transactionId, valuetype System.DateTimeOffset startDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionUsed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub TransactionUsed (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Database.Transaction), connection As IRelationalConnection, transaction As DbTransaction, transactionId As Guid, startDate As DateTimeOffset)" />
        <MemberSignature Language="F#" Value="static member TransactionUsed : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * System.Data.Common.DbTransaction * Guid * DateTimeOffset -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionUsed (diagnostics, connection, transaction, transactionId, startDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void TransactionUsed(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Transaction ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, System::Data::Common::DbTransaction ^ transaction, Guid transactionId, DateTimeOffset startDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Transaction&gt;" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
          <Parameter Name="transactionId" Type="System.Guid" />
          <Parameter Name="startDate" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="connection">To be added.</param>
          <param name="transaction">To be added.</param>
          <param name="transactionId">To be added.</param>
          <param name="startDate">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalLoggerExtensions.TransactionUsed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="FindRelationalMapping">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindRelationalMapping (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindRelationalMapping(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalPropertyExtensions.FindRelationalMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindRelationalMapping (property As IProperty) As RelationalTypeMapping" />
        <MemberSignature Language="F#" Value="static member FindRelationalMapping : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalPropertyExtensions.FindRelationalMapping property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ FindRelationalMapping(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ FindRelationalMapping(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalPropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalPropertyExtensions.FindRelationalMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="FormatColumns">
        <MemberSignature Language="C#" Value="public static string FormatColumns (this System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatColumns(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalPropertyExtensions.FormatColumns(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FormatColumns (properties As IEnumerable(Of IProperty)) As String" />
        <MemberSignature Language="F#" Value="static member FormatColumns : seq&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; -&gt; string" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalPropertyExtensions.FormatColumns properties" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ FormatColumns(System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IProperty ^&gt; ^ properties);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="properties" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="properties">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalPropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalPropertyExtensions.FormatColumns(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetConfiguredColumnType">
        <MemberSignature Language="C#" Value="public static string GetConfiguredColumnType (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetConfiguredColumnType(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.RelationalPropertyExtensions.GetConfiguredColumnType(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConfiguredColumnType (property As IProperty) As String" />
        <MemberSignature Language="F#" Value="static member GetConfiguredColumnType : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; string" Usage="Microsoft.EntityFrameworkCore.Internal.RelationalPropertyExtensions.GetConfiguredColumnType property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GetConfiguredColumnType(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ GetConfiguredColumnType(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.RelationalPropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.RelationalPropertyExtensions.GetConfiguredColumnType(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IServiceProvider" />
      </Targets>
      <Member MemberName="InjectAdditionalServices&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static TService InjectAdditionalServices&lt;TService&gt; (this IServiceProvider serviceProvider, TService service);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TService InjectAdditionalServices&lt;TService&gt;(class System.IServiceProvider serviceProvider, !!TService service) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ServiceProviderExtensions.InjectAdditionalServices``1(System.IServiceProvider,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InjectAdditionalServices(Of TService) (serviceProvider As IServiceProvider, service As TService) As TService" />
        <MemberSignature Language="F#" Value="static member InjectAdditionalServices : IServiceProvider * 'Service -&gt; 'Service" Usage="Microsoft.EntityFrameworkCore.Internal.ServiceProviderExtensions.InjectAdditionalServices (serviceProvider, service)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TService&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TService InjectAdditionalServices(IServiceProvider ^ serviceProvider, TService service);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TService</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="serviceProvider" Type="System.IServiceProvider" RefType="this" />
          <Parameter Name="service" Type="TService" />
        </Parameters>
        <Docs>
          <typeparam name="TService">To be added.</typeparam>
          <param name="serviceProvider">To be added.</param>
          <param name="service">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.ServiceProviderExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.ServiceProviderExtensions.InjectAdditionalServices``1(System.IServiceProvider,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogDebug">
        <MemberSignature Language="C#" Value="public static void LogDebug (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.EntityFrameworkCore.Infrastructure.SqliteDesignEventId eventId, Func&lt;string&gt; formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogDebug(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.EntityFrameworkCore.Infrastructure.SqliteDesignEventId eventId, class System.Func`1&lt;string&gt; formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqliteDesignLoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.SqliteDesignEventId,System.Func{System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub LogDebug (logger As ILogger, eventId As SqliteDesignEventId, formatter As Func(Of String))" />
        <MemberSignature Language="F#" Value="static member LogDebug : Microsoft.Extensions.Logging.ILogger * Microsoft.EntityFrameworkCore.Infrastructure.SqliteDesignEventId * Func&lt;string&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqliteDesignLoggerExtensions.LogDebug (logger, eventId, formatter)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void LogDebug(Microsoft::Extensions::Logging::ILogger ^ logger, Microsoft::EntityFrameworkCore::Infrastructure::SqliteDesignEventId eventId, Func&lt;System::String ^&gt; ^ formatter);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.EntityFrameworkCore.Infrastructure.SqliteDesignEventId" />
          <Parameter Name="formatter" Type="System.Func&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="eventId">To be added.</param>
          <param name="formatter">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqliteDesignLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqliteDesignLoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.SqliteDesignEventId,System.Func{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogWarning">
        <MemberSignature Language="C#" Value="public static void LogWarning (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.EntityFrameworkCore.Infrastructure.SqliteDesignEventId eventId, Func&lt;string&gt; formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogWarning(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.EntityFrameworkCore.Infrastructure.SqliteDesignEventId eventId, class System.Func`1&lt;string&gt; formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqliteDesignLoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.SqliteDesignEventId,System.Func{System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub LogWarning (logger As ILogger, eventId As SqliteDesignEventId, formatter As Func(Of String))" />
        <MemberSignature Language="F#" Value="static member LogWarning : Microsoft.Extensions.Logging.ILogger * Microsoft.EntityFrameworkCore.Infrastructure.SqliteDesignEventId * Func&lt;string&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqliteDesignLoggerExtensions.LogWarning (logger, eventId, formatter)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void LogWarning(Microsoft::Extensions::Logging::ILogger ^ logger, Microsoft::EntityFrameworkCore::Infrastructure::SqliteDesignEventId eventId, Func&lt;System::String ^&gt; ^ formatter);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.EntityFrameworkCore.Infrastructure.SqliteDesignEventId" />
          <Parameter Name="formatter" Type="System.Func&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="eventId">To be added.</param>
          <param name="formatter">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqliteDesignLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqliteDesignLoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.SqliteDesignEventId,System.Func{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ColumnFound">
        <MemberSignature Language="C#" Value="public static void ColumnFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName, string columnName, string dataTypeName, bool notNull, string defaultValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ColumnFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName, string columnName, string dataTypeName, bool notNull, string defaultValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.ColumnFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.Boolean,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ColumnFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String, columnName As String, dataTypeName As String, notNull As Boolean, defaultValue As String)" />
        <MemberSignature Language="F#" Value="static member ColumnFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * string * bool * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.ColumnFound (diagnostics, tableName, columnName, dataTypeName, notNull, defaultValue)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ColumnFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName, System::String ^ columnName, System::String ^ dataTypeName, bool notNull, System::String ^ defaultValue);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
          <Parameter Name="columnName" Type="System.String" />
          <Parameter Name="dataTypeName" Type="System.String" />
          <Parameter Name="notNull" Type="System.Boolean" />
          <Parameter Name="defaultValue" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <param name="columnName">To be added.</param>
          <param name="dataTypeName">To be added.</param>
          <param name="notNull">To be added.</param>
          <param name="defaultValue">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.ColumnFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.Boolean,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyFound">
        <MemberSignature Language="C#" Value="public static void ForeignKeyFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName, long id, string principalTableName, string deleteAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName, int64 id, string principalTableName, string deleteAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.ForeignKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.Int64,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ForeignKeyFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String, id As Long, principalTableName As String, deleteAction As String)" />
        <MemberSignature Language="F#" Value="static member ForeignKeyFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * int64 * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.ForeignKeyFound (diagnostics, tableName, id, principalTableName, deleteAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName, long id, System::String ^ principalTableName, System::String ^ deleteAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
          <Parameter Name="id" Type="System.Int64" />
          <Parameter Name="principalTableName" Type="System.String" />
          <Parameter Name="deleteAction" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <param name="id">To be added.</param>
          <param name="principalTableName">To be added.</param>
          <param name="deleteAction">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.ForeignKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.Int64,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyPrincipalColumnMissingWarning">
        <MemberSignature Language="C#" Value="public static void ForeignKeyPrincipalColumnMissingWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string foreignKeyName, string tableName, string principalColumnName, string principalTableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyPrincipalColumnMissingWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string foreignKeyName, string tableName, string principalColumnName, string principalTableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.ForeignKeyPrincipalColumnMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ForeignKeyPrincipalColumnMissingWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), foreignKeyName As String, tableName As String, principalColumnName As String, principalTableName As String)" />
        <MemberSignature Language="F#" Value="static member ForeignKeyPrincipalColumnMissingWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.ForeignKeyPrincipalColumnMissingWarning (diagnostics, foreignKeyName, tableName, principalColumnName, principalTableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyPrincipalColumnMissingWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ foreignKeyName, System::String ^ tableName, System::String ^ principalColumnName, System::String ^ principalTableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="foreignKeyName" Type="System.String" />
          <Parameter Name="tableName" Type="System.String" />
          <Parameter Name="principalColumnName" Type="System.String" />
          <Parameter Name="principalTableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="foreignKeyName">To be added.</param>
          <param name="tableName">To be added.</param>
          <param name="principalColumnName">To be added.</param>
          <param name="principalTableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.ForeignKeyPrincipalColumnMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyReferencesMissingTableWarning">
        <MemberSignature Language="C#" Value="public static void ForeignKeyReferencesMissingTableWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string foreignKeyName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyReferencesMissingTableWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string foreignKeyName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.ForeignKeyReferencesMissingTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ForeignKeyReferencesMissingTableWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), foreignKeyName As String)" />
        <MemberSignature Language="F#" Value="static member ForeignKeyReferencesMissingTableWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.ForeignKeyReferencesMissingTableWarning (diagnostics, foreignKeyName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyReferencesMissingTableWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ foreignKeyName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="foreignKeyName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="foreignKeyName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.ForeignKeyReferencesMissingTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="IndexFound">
        <MemberSignature Language="C#" Value="public static void IndexFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string indexName, string tableName, Nullable&lt;bool&gt; unique);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IndexFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string indexName, string tableName, valuetype System.Nullable`1&lt;bool&gt; unique) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.IndexFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Nullable{System.Boolean})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub IndexFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), indexName As String, tableName As String, unique As Nullable(Of Boolean))" />
        <MemberSignature Language="F#" Value="static member IndexFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * Nullable&lt;bool&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.IndexFound (diagnostics, indexName, tableName, unique)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void IndexFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ indexName, System::String ^ tableName, Nullable&lt;bool&gt; unique);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="indexName" Type="System.String" />
          <Parameter Name="tableName" Type="System.String" />
          <Parameter Name="unique" Type="System.Nullable&lt;System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="indexName">To be added.</param>
          <param name="tableName">To be added.</param>
          <param name="unique">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.IndexFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Nullable{System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="MissingTableWarning">
        <MemberSignature Language="C#" Value="public static void MissingTableWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MissingTableWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.MissingTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub MissingTableWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String)" />
        <MemberSignature Language="F#" Value="static member MissingTableWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.MissingTableWarning (diagnostics, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MissingTableWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.MissingTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="PrimaryKeyFound">
        <MemberSignature Language="C#" Value="public static void PrimaryKeyFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string primaryKeyName, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PrimaryKeyFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string primaryKeyName, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.PrimaryKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub PrimaryKeyFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), primaryKeyName As String, tableName As String)" />
        <MemberSignature Language="F#" Value="static member PrimaryKeyFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.PrimaryKeyFound (diagnostics, primaryKeyName, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void PrimaryKeyFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ primaryKeyName, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="primaryKeyName" Type="System.String" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="primaryKeyName">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.PrimaryKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="SchemaConfiguredWarning">
        <MemberSignature Language="C#" Value="public static void SchemaConfiguredWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string schema);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SchemaConfiguredWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model/Validation&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.SchemaConfiguredWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SchemaConfiguredWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model.Validation), entityType As IEntityType, schema As String)" />
        <MemberSignature Language="F#" Value="static member SchemaConfiguredWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation&gt; * Microsoft.EntityFrameworkCore.Metadata.IEntityType * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.SchemaConfiguredWarning (diagnostics, entityType, schema)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SchemaConfiguredWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model::Validation ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, System::String ^ schema);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model+Validation&gt;" RefType="this" />
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="entityType">To be added.</param>
          <param name="schema">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.SchemaConfiguredWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="SchemasNotSupportedWarning">
        <MemberSignature Language="C#" Value="public static void SchemasNotSupportedWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SchemasNotSupportedWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.SchemasNotSupportedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SchemasNotSupportedWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding))" />
        <MemberSignature Language="F#" Value="static member SchemasNotSupportedWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.SchemasNotSupportedWarning diagnostics" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SchemasNotSupportedWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.SchemasNotSupportedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="SequenceConfiguredWarning">
        <MemberSignature Language="C#" Value="public static void SequenceConfiguredWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.ISequence sequence);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SequenceConfiguredWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model/Validation&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.ISequence sequence) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.SequenceConfiguredWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.ISequence)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SequenceConfiguredWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model.Validation), sequence As ISequence)" />
        <MemberSignature Language="F#" Value="static member SequenceConfiguredWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation&gt; * Microsoft.EntityFrameworkCore.Metadata.ISequence -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.SequenceConfiguredWarning (diagnostics, sequence)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SequenceConfiguredWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model::Validation ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::ISequence ^ sequence);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model+Validation&gt;" RefType="this" />
          <Parameter Name="sequence" Type="Microsoft.EntityFrameworkCore.Metadata.ISequence" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="sequence">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.SequenceConfiguredWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.ISequence)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="TableFound">
        <MemberSignature Language="C#" Value="public static void TableFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TableFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.TableFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub TableFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String)" />
        <MemberSignature Language="F#" Value="static member TableFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.TableFound (diagnostics, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void TableFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.TableFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="UniqueConstraintFound">
        <MemberSignature Language="C#" Value="public static void UniqueConstraintFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string uniqueConstraintName, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UniqueConstraintFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string uniqueConstraintName, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.UniqueConstraintFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UniqueConstraintFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), uniqueConstraintName As String, tableName As String)" />
        <MemberSignature Language="F#" Value="static member UniqueConstraintFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.UniqueConstraintFound (diagnostics, uniqueConstraintName, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void UniqueConstraintFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ uniqueConstraintName, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="uniqueConstraintName" Type="System.String" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="uniqueConstraintName">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqliteLoggerExtensions.UniqueConstraintFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogDebug">
        <MemberSignature Language="C#" Value="public static void LogDebug (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDesignEventId eventId, Func&lt;string&gt; formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogDebug(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDesignEventId eventId, class System.Func`1&lt;string&gt; formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerDesignLoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDesignEventId,System.Func{System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub LogDebug (logger As ILogger, eventId As SqlServerDesignEventId, formatter As Func(Of String))" />
        <MemberSignature Language="F#" Value="static member LogDebug : Microsoft.Extensions.Logging.ILogger * Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDesignEventId * Func&lt;string&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerDesignLoggerExtensions.LogDebug (logger, eventId, formatter)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void LogDebug(Microsoft::Extensions::Logging::ILogger ^ logger, Microsoft::EntityFrameworkCore::Infrastructure::SqlServerDesignEventId eventId, Func&lt;System::String ^&gt; ^ formatter);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDesignEventId" />
          <Parameter Name="formatter" Type="System.Func&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="eventId">To be added.</param>
          <param name="formatter">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerDesignLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerDesignLoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDesignEventId,System.Func{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogWarning">
        <MemberSignature Language="C#" Value="public static void LogWarning (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDesignEventId eventId, Func&lt;string&gt; formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogWarning(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDesignEventId eventId, class System.Func`1&lt;string&gt; formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerDesignLoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDesignEventId,System.Func{System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub LogWarning (logger As ILogger, eventId As SqlServerDesignEventId, formatter As Func(Of String))" />
        <MemberSignature Language="F#" Value="static member LogWarning : Microsoft.Extensions.Logging.ILogger * Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDesignEventId * Func&lt;string&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerDesignLoggerExtensions.LogWarning (logger, eventId, formatter)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void LogWarning(Microsoft::Extensions::Logging::ILogger ^ logger, Microsoft::EntityFrameworkCore::Infrastructure::SqlServerDesignEventId eventId, Func&lt;System::String ^&gt; ^ formatter);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDesignEventId" />
          <Parameter Name="formatter" Type="System.Func&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="eventId">To be added.</param>
          <param name="formatter">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerDesignLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerDesignLoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDesignEventId,System.Func{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ByteIdentityColumnWarning">
        <MemberSignature Language="C#" Value="public static void ByteIdentityColumnWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ByteIdentityColumnWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model/Validation&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ByteIdentityColumnWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ByteIdentityColumnWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model.Validation), property As IProperty)" />
        <MemberSignature Language="F#" Value="static member ByteIdentityColumnWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation&gt; * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ByteIdentityColumnWarning (diagnostics, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ByteIdentityColumnWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model::Validation ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model+Validation&gt;" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ByteIdentityColumnWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ColumnFound">
        <MemberSignature Language="C#" Value="public static void ColumnFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName, string columnName, int ordinal, string dataTypeName, int maxLength, int precision, int scale, bool nullable, bool identity, string defaultValue, string computedValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ColumnFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName, string columnName, int32 ordinal, string dataTypeName, int32 maxLength, int32 precision, int32 scale, bool nullable, bool identity, string defaultValue, string computedValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ColumnFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ColumnFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String, columnName As String, ordinal As Integer, dataTypeName As String, maxLength As Integer, precision As Integer, scale As Integer, nullable As Boolean, identity As Boolean, defaultValue As String, computedValue As String)" />
        <MemberSignature Language="F#" Value="static member ColumnFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * int * string * int * int * int * bool * bool * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ColumnFound (diagnostics, tableName, columnName, ordinal, dataTypeName, maxLength, precision, scale, nullable, identity, defaultValue, computedValue)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ColumnFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName, System::String ^ columnName, int ordinal, System::String ^ dataTypeName, int maxLength, int precision, int scale, bool nullable, bool identity, System::String ^ defaultValue, System::String ^ computedValue);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
          <Parameter Name="columnName" Type="System.String" />
          <Parameter Name="ordinal" Type="System.Int32" />
          <Parameter Name="dataTypeName" Type="System.String" />
          <Parameter Name="maxLength" Type="System.Int32" />
          <Parameter Name="precision" Type="System.Int32" />
          <Parameter Name="scale" Type="System.Int32" />
          <Parameter Name="nullable" Type="System.Boolean" />
          <Parameter Name="identity" Type="System.Boolean" />
          <Parameter Name="defaultValue" Type="System.String" />
          <Parameter Name="computedValue" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <param name="columnName">To be added.</param>
          <param name="ordinal">To be added.</param>
          <param name="dataTypeName">To be added.</param>
          <param name="maxLength">To be added.</param>
          <param name="precision">To be added.</param>
          <param name="scale">To be added.</param>
          <param name="nullable">To be added.</param>
          <param name="identity">To be added.</param>
          <param name="defaultValue">To be added.</param>
          <param name="computedValue">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ColumnFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ColumnFound">
        <MemberSignature Language="C#" Value="public static void ColumnFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName, string columnName, string dataTypeName, Nullable&lt;int&gt; ordinal, Nullable&lt;bool&gt; nullable, Nullable&lt;int&gt; primaryKeyOrdinal, string defaultValue, string computedValue, Nullable&lt;int&gt; precision, Nullable&lt;int&gt; scale, Nullable&lt;int&gt; maxLength, Nullable&lt;bool&gt; identity, Nullable&lt;bool&gt; computed);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ColumnFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName, string columnName, string dataTypeName, valuetype System.Nullable`1&lt;int32&gt; ordinal, valuetype System.Nullable`1&lt;bool&gt; nullable, valuetype System.Nullable`1&lt;int32&gt; primaryKeyOrdinal, string defaultValue, string computedValue, valuetype System.Nullable`1&lt;int32&gt; precision, valuetype System.Nullable`1&lt;int32&gt; scale, valuetype System.Nullable`1&lt;int32&gt; maxLength, valuetype System.Nullable`1&lt;bool&gt; identity, valuetype System.Nullable`1&lt;bool&gt; computed) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ColumnFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ColumnFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String, columnName As String, dataTypeName As String, ordinal As Nullable(Of Integer), nullable As Nullable(Of Boolean), primaryKeyOrdinal As Nullable(Of Integer), defaultValue As String, computedValue As String, precision As Nullable(Of Integer), scale As Nullable(Of Integer), maxLength As Nullable(Of Integer), identity As Nullable(Of Boolean), computed As Nullable(Of Boolean))" />
        <MemberSignature Language="F#" Value="static member ColumnFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * string * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ColumnFound (diagnostics, tableName, columnName, dataTypeName, ordinal, nullable, primaryKeyOrdinal, defaultValue, computedValue, precision, scale, maxLength, identity, computed)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ColumnFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName, System::String ^ columnName, System::String ^ dataTypeName, Nullable&lt;int&gt; ordinal, Nullable&lt;bool&gt; nullable, Nullable&lt;int&gt; primaryKeyOrdinal, System::String ^ defaultValue, System::String ^ computedValue, Nullable&lt;int&gt; precision, Nullable&lt;int&gt; scale, Nullable&lt;int&gt; maxLength, Nullable&lt;bool&gt; identity, Nullable&lt;bool&gt; computed);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
          <Parameter Name="columnName" Type="System.String" />
          <Parameter Name="dataTypeName" Type="System.String" />
          <Parameter Name="ordinal" Type="System.Nullable&lt;System.Int32&gt;" />
          <Parameter Name="nullable" Type="System.Nullable&lt;System.Boolean&gt;" />
          <Parameter Name="primaryKeyOrdinal" Type="System.Nullable&lt;System.Int32&gt;" />
          <Parameter Name="defaultValue" Type="System.String" />
          <Parameter Name="computedValue" Type="System.String" />
          <Parameter Name="precision" Type="System.Nullable&lt;System.Int32&gt;" />
          <Parameter Name="scale" Type="System.Nullable&lt;System.Int32&gt;" />
          <Parameter Name="maxLength" Type="System.Nullable&lt;System.Int32&gt;" />
          <Parameter Name="identity" Type="System.Nullable&lt;System.Boolean&gt;" />
          <Parameter Name="computed" Type="System.Nullable&lt;System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <param name="columnName">To be added.</param>
          <param name="dataTypeName">To be added.</param>
          <param name="ordinal">To be added.</param>
          <param name="nullable">To be added.</param>
          <param name="primaryKeyOrdinal">To be added.</param>
          <param name="defaultValue">To be added.</param>
          <param name="computedValue">To be added.</param>
          <param name="precision">To be added.</param>
          <param name="scale">To be added.</param>
          <param name="maxLength">To be added.</param>
          <param name="identity">To be added.</param>
          <param name="computed">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ColumnFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ColumnNotNamedWarning">
        <MemberSignature Language="C#" Value="public static void ColumnNotNamedWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ColumnNotNamedWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ColumnNotNamedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ColumnNotNamedWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String)" />
        <MemberSignature Language="F#" Value="static member ColumnNotNamedWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ColumnNotNamedWarning (diagnostics, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ColumnNotNamedWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ColumnNotNamedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ColumnSkipped">
        <MemberSignature Language="C#" Value="public static void ColumnSkipped (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName, string columnName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ColumnSkipped(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName, string columnName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ColumnSkipped(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ColumnSkipped (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String, columnName As String)" />
        <MemberSignature Language="F#" Value="static member ColumnSkipped : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ColumnSkipped (diagnostics, tableName, columnName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ColumnSkipped(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName, System::String ^ columnName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
          <Parameter Name="columnName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <param name="columnName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ColumnSkipped(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="DecimalTypeDefaultWarning">
        <MemberSignature Language="C#" Value="public static void DecimalTypeDefaultWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation&gt; diagnostics, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DecimalTypeDefaultWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model/Validation&gt; diagnostics, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.DecimalTypeDefaultWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub DecimalTypeDefaultWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Model.Validation), property As IProperty)" />
        <MemberSignature Language="F#" Value="static member DecimalTypeDefaultWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation&gt; * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.DecimalTypeDefaultWarning (diagnostics, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void DecimalTypeDefaultWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Model::Validation ^&gt; ^ diagnostics, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model+Validation&gt;" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.DecimalTypeDefaultWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="DefaultSchemaFound">
        <MemberSignature Language="C#" Value="public static void DefaultSchemaFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string schemaName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DefaultSchemaFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string schemaName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.DefaultSchemaFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub DefaultSchemaFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), schemaName As String)" />
        <MemberSignature Language="F#" Value="static member DefaultSchemaFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.DefaultSchemaFound (diagnostics, schemaName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void DefaultSchemaFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ schemaName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="schemaName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="schemaName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.DefaultSchemaFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyColumnFound">
        <MemberSignature Language="C#" Value="public static void ForeignKeyColumnFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName, string foreignKeyName, string principalTableName, string columnName, string principalColumnName, string updateAction, string deleteAction, Nullable&lt;int&gt; ordinal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyColumnFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName, string foreignKeyName, string principalTableName, string columnName, string principalColumnName, string updateAction, string deleteAction, valuetype System.Nullable`1&lt;int32&gt; ordinal) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyColumnFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ForeignKeyColumnFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String, foreignKeyName As String, principalTableName As String, columnName As String, principalColumnName As String, updateAction As String, deleteAction As String, ordinal As Nullable(Of Integer))" />
        <MemberSignature Language="F#" Value="static member ForeignKeyColumnFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * string * string * string * string * string * Nullable&lt;int&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyColumnFound (diagnostics, tableName, foreignKeyName, principalTableName, columnName, principalColumnName, updateAction, deleteAction, ordinal)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyColumnFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName, System::String ^ foreignKeyName, System::String ^ principalTableName, System::String ^ columnName, System::String ^ principalColumnName, System::String ^ updateAction, System::String ^ deleteAction, Nullable&lt;int&gt; ordinal);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
          <Parameter Name="foreignKeyName" Type="System.String" />
          <Parameter Name="principalTableName" Type="System.String" />
          <Parameter Name="columnName" Type="System.String" />
          <Parameter Name="principalColumnName" Type="System.String" />
          <Parameter Name="updateAction" Type="System.String" />
          <Parameter Name="deleteAction" Type="System.String" />
          <Parameter Name="ordinal" Type="System.Nullable&lt;System.Int32&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <param name="foreignKeyName">To be added.</param>
          <param name="principalTableName">To be added.</param>
          <param name="columnName">To be added.</param>
          <param name="principalColumnName">To be added.</param>
          <param name="updateAction">To be added.</param>
          <param name="deleteAction">To be added.</param>
          <param name="ordinal">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyColumnFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyColumnMissingWarning">
        <MemberSignature Language="C#" Value="public static void ForeignKeyColumnMissingWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string columnName, string foreignKeyName, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyColumnMissingWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string columnName, string foreignKeyName, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyColumnMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ForeignKeyColumnMissingWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), columnName As String, foreignKeyName As String, tableName As String)" />
        <MemberSignature Language="F#" Value="static member ForeignKeyColumnMissingWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyColumnMissingWarning (diagnostics, columnName, foreignKeyName, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyColumnMissingWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ columnName, System::String ^ foreignKeyName, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="columnName" Type="System.String" />
          <Parameter Name="foreignKeyName" Type="System.String" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="columnName">To be added.</param>
          <param name="foreignKeyName">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyColumnMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyColumnNotNamedWarning">
        <MemberSignature Language="C#" Value="public static void ForeignKeyColumnNotNamedWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string foreignKeyName, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyColumnNotNamedWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string foreignKeyName, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyColumnNotNamedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ForeignKeyColumnNotNamedWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), foreignKeyName As String, tableName As String)" />
        <MemberSignature Language="F#" Value="static member ForeignKeyColumnNotNamedWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyColumnNotNamedWarning (diagnostics, foreignKeyName, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyColumnNotNamedWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ foreignKeyName, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="foreignKeyName" Type="System.String" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="foreignKeyName">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyColumnNotNamedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyColumnsNotMappedWarning">
        <MemberSignature Language="C#" Value="public static void ForeignKeyColumnsNotMappedWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string foreignKeyName, System.Collections.Generic.IList&lt;string&gt; unmappedColumnNames);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyColumnsNotMappedWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string foreignKeyName, class System.Collections.Generic.IList`1&lt;string&gt; unmappedColumnNames) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyColumnsNotMappedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.Collections.Generic.IList{System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ForeignKeyColumnsNotMappedWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), foreignKeyName As String, unmappedColumnNames As IList(Of String))" />
        <MemberSignature Language="F#" Value="static member ForeignKeyColumnsNotMappedWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * System.Collections.Generic.IList&lt;string&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyColumnsNotMappedWarning (diagnostics, foreignKeyName, unmappedColumnNames)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyColumnsNotMappedWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ foreignKeyName, System::Collections::Generic::IList&lt;System::String ^&gt; ^ unmappedColumnNames);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="foreignKeyName" Type="System.String" />
          <Parameter Name="unmappedColumnNames" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="foreignKeyName">To be added.</param>
          <param name="unmappedColumnNames">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyColumnsNotMappedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.Collections.Generic.IList{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyFound">
        <MemberSignature Language="C#" Value="public static void ForeignKeyFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string foreignKeyName, string tableName, string principalTableName, string onDeleteAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string foreignKeyName, string tableName, string principalTableName, string onDeleteAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ForeignKeyFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), foreignKeyName As String, tableName As String, principalTableName As String, onDeleteAction As String)" />
        <MemberSignature Language="F#" Value="static member ForeignKeyFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyFound (diagnostics, foreignKeyName, tableName, principalTableName, onDeleteAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ foreignKeyName, System::String ^ tableName, System::String ^ principalTableName, System::String ^ onDeleteAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="foreignKeyName" Type="System.String" />
          <Parameter Name="tableName" Type="System.String" />
          <Parameter Name="principalTableName" Type="System.String" />
          <Parameter Name="onDeleteAction" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="foreignKeyName">To be added.</param>
          <param name="tableName">To be added.</param>
          <param name="principalTableName">To be added.</param>
          <param name="onDeleteAction">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyNotNamedWarning">
        <MemberSignature Language="C#" Value="public static void ForeignKeyNotNamedWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyNotNamedWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyNotNamedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ForeignKeyNotNamedWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String)" />
        <MemberSignature Language="F#" Value="static member ForeignKeyNotNamedWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyNotNamedWarning (diagnostics, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyNotNamedWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyNotNamedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyPrincipalColumnMissingWarning">
        <MemberSignature Language="C#" Value="public static void ForeignKeyPrincipalColumnMissingWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string foreignKeyName, string tableName, string principalColumnName, string principalTableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyPrincipalColumnMissingWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string foreignKeyName, string tableName, string principalColumnName, string principalTableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyPrincipalColumnMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ForeignKeyPrincipalColumnMissingWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), foreignKeyName As String, tableName As String, principalColumnName As String, principalTableName As String)" />
        <MemberSignature Language="F#" Value="static member ForeignKeyPrincipalColumnMissingWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyPrincipalColumnMissingWarning (diagnostics, foreignKeyName, tableName, principalColumnName, principalTableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyPrincipalColumnMissingWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ foreignKeyName, System::String ^ tableName, System::String ^ principalColumnName, System::String ^ principalTableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="foreignKeyName" Type="System.String" />
          <Parameter Name="tableName" Type="System.String" />
          <Parameter Name="principalColumnName" Type="System.String" />
          <Parameter Name="principalTableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="foreignKeyName">To be added.</param>
          <param name="tableName">To be added.</param>
          <param name="principalColumnName">To be added.</param>
          <param name="principalTableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyPrincipalColumnMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="ForeignKeyReferencesMissingPrincipalTableWarning">
        <MemberSignature Language="C#" Value="public static void ForeignKeyReferencesMissingPrincipalTableWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string foreignKeyName, string tableName, string principalTableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForeignKeyReferencesMissingPrincipalTableWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string foreignKeyName, string tableName, string principalTableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyReferencesMissingPrincipalTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ForeignKeyReferencesMissingPrincipalTableWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), foreignKeyName As String, tableName As String, principalTableName As String)" />
        <MemberSignature Language="F#" Value="static member ForeignKeyReferencesMissingPrincipalTableWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyReferencesMissingPrincipalTableWarning (diagnostics, foreignKeyName, tableName, principalTableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ForeignKeyReferencesMissingPrincipalTableWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ foreignKeyName, System::String ^ tableName, System::String ^ principalTableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="foreignKeyName" Type="System.String" />
          <Parameter Name="tableName" Type="System.String" />
          <Parameter Name="principalTableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="foreignKeyName">To be added.</param>
          <param name="tableName">To be added.</param>
          <param name="principalTableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.ForeignKeyReferencesMissingPrincipalTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="IndexColumnFound">
        <MemberSignature Language="C#" Value="public static void IndexColumnFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName, string indexName, Nullable&lt;bool&gt; unique, string columnName, Nullable&lt;int&gt; ordinal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IndexColumnFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName, string indexName, valuetype System.Nullable`1&lt;bool&gt; unique, string columnName, valuetype System.Nullable`1&lt;int32&gt; ordinal) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexColumnFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub IndexColumnFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String, indexName As String, unique As Nullable(Of Boolean), columnName As String, ordinal As Nullable(Of Integer))" />
        <MemberSignature Language="F#" Value="static member IndexColumnFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * Nullable&lt;bool&gt; * string * Nullable&lt;int&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexColumnFound (diagnostics, tableName, indexName, unique, columnName, ordinal)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void IndexColumnFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName, System::String ^ indexName, Nullable&lt;bool&gt; unique, System::String ^ columnName, Nullable&lt;int&gt; ordinal);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
          <Parameter Name="indexName" Type="System.String" />
          <Parameter Name="unique" Type="System.Nullable&lt;System.Boolean&gt;" />
          <Parameter Name="columnName" Type="System.String" />
          <Parameter Name="ordinal" Type="System.Nullable&lt;System.Int32&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <param name="indexName">To be added.</param>
          <param name="unique">To be added.</param>
          <param name="columnName">To be added.</param>
          <param name="ordinal">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexColumnFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="IndexColumnNotNamedWarning">
        <MemberSignature Language="C#" Value="public static void IndexColumnNotNamedWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string indexName, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IndexColumnNotNamedWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string indexName, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexColumnNotNamedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub IndexColumnNotNamedWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), indexName As String, tableName As String)" />
        <MemberSignature Language="F#" Value="static member IndexColumnNotNamedWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexColumnNotNamedWarning (diagnostics, indexName, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void IndexColumnNotNamedWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ indexName, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="indexName" Type="System.String" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="indexName">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexColumnNotNamedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="IndexColumnSkipped">
        <MemberSignature Language="C#" Value="public static void IndexColumnSkipped (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName, string indexName, string columnName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IndexColumnSkipped(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName, string indexName, string columnName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexColumnSkipped(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub IndexColumnSkipped (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String, indexName As String, columnName As String)" />
        <MemberSignature Language="F#" Value="static member IndexColumnSkipped : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexColumnSkipped (diagnostics, tableName, indexName, columnName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void IndexColumnSkipped(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName, System::String ^ indexName, System::String ^ columnName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
          <Parameter Name="indexName" Type="System.String" />
          <Parameter Name="columnName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <param name="indexName">To be added.</param>
          <param name="columnName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexColumnSkipped(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="IndexColumnsNotMappedWarning">
        <MemberSignature Language="C#" Value="public static void IndexColumnsNotMappedWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string indexName, System.Collections.Generic.IList&lt;string&gt; unmappedColumnNames);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IndexColumnsNotMappedWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string indexName, class System.Collections.Generic.IList`1&lt;string&gt; unmappedColumnNames) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexColumnsNotMappedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.Collections.Generic.IList{System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub IndexColumnsNotMappedWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), indexName As String, unmappedColumnNames As IList(Of String))" />
        <MemberSignature Language="F#" Value="static member IndexColumnsNotMappedWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * System.Collections.Generic.IList&lt;string&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexColumnsNotMappedWarning (diagnostics, indexName, unmappedColumnNames)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void IndexColumnsNotMappedWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ indexName, System::Collections::Generic::IList&lt;System::String ^&gt; ^ unmappedColumnNames);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="indexName" Type="System.String" />
          <Parameter Name="unmappedColumnNames" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="indexName">To be added.</param>
          <param name="unmappedColumnNames">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexColumnsNotMappedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.Collections.Generic.IList{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="IndexFound">
        <MemberSignature Language="C#" Value="public static void IndexFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string indexName, string tableName, bool unique);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IndexFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string indexName, string tableName, bool unique) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub IndexFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), indexName As String, tableName As String, unique As Boolean)" />
        <MemberSignature Language="F#" Value="static member IndexFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexFound (diagnostics, indexName, tableName, unique)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void IndexFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ indexName, System::String ^ tableName, bool unique);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="indexName" Type="System.String" />
          <Parameter Name="tableName" Type="System.String" />
          <Parameter Name="unique" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="indexName">To be added.</param>
          <param name="tableName">To be added.</param>
          <param name="unique">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="IndexNotNamedWarning">
        <MemberSignature Language="C#" Value="public static void IndexNotNamedWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IndexNotNamedWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexNotNamedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub IndexNotNamedWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String)" />
        <MemberSignature Language="F#" Value="static member IndexNotNamedWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexNotNamedWarning (diagnostics, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void IndexNotNamedWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexNotNamedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="IndexTableMissingWarning">
        <MemberSignature Language="C#" Value="public static void IndexTableMissingWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string indexName, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IndexTableMissingWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string indexName, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexTableMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub IndexTableMissingWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), indexName As String, tableName As String)" />
        <MemberSignature Language="F#" Value="static member IndexTableMissingWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexTableMissingWarning (diagnostics, indexName, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void IndexTableMissingWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ indexName, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="indexName" Type="System.String" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="indexName">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.IndexTableMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="MissingSchemaWarning">
        <MemberSignature Language="C#" Value="public static void MissingSchemaWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string schemaName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MissingSchemaWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string schemaName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.MissingSchemaWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub MissingSchemaWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), schemaName As String)" />
        <MemberSignature Language="F#" Value="static member MissingSchemaWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.MissingSchemaWarning (diagnostics, schemaName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MissingSchemaWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ schemaName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="schemaName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="schemaName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.MissingSchemaWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="MissingTableWarning">
        <MemberSignature Language="C#" Value="public static void MissingTableWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MissingTableWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.MissingTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub MissingTableWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String)" />
        <MemberSignature Language="F#" Value="static member MissingTableWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.MissingTableWarning (diagnostics, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MissingTableWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.MissingTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="PrimaryKeyFound">
        <MemberSignature Language="C#" Value="public static void PrimaryKeyFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string primaryKeyName, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PrimaryKeyFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string primaryKeyName, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.PrimaryKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub PrimaryKeyFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), primaryKeyName As String, tableName As String)" />
        <MemberSignature Language="F#" Value="static member PrimaryKeyFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.PrimaryKeyFound (diagnostics, primaryKeyName, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void PrimaryKeyFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ primaryKeyName, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="primaryKeyName" Type="System.String" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="primaryKeyName">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.PrimaryKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="SequenceFound">
        <MemberSignature Language="C#" Value="public static void SequenceFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string sequenceName, string sequenceTypeName, bool cyclic, int increment, long start, long min, long max);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SequenceFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string sequenceName, string sequenceTypeName, bool cyclic, int32 increment, int64 start, int64 min, int64 max) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.SequenceFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Boolean,System.Int32,System.Int64,System.Int64,System.Int64)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SequenceFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), sequenceName As String, sequenceTypeName As String, cyclic As Boolean, increment As Integer, start As Long, min As Long, max As Long)" />
        <MemberSignature Language="F#" Value="static member SequenceFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * bool * int * int64 * int64 * int64 -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.SequenceFound (diagnostics, sequenceName, sequenceTypeName, cyclic, increment, start, min, max)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SequenceFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ sequenceName, System::String ^ sequenceTypeName, bool cyclic, int increment, long start, long min, long max);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="sequenceName" Type="System.String" />
          <Parameter Name="sequenceTypeName" Type="System.String" />
          <Parameter Name="cyclic" Type="System.Boolean" />
          <Parameter Name="increment" Type="System.Int32" />
          <Parameter Name="start" Type="System.Int64" />
          <Parameter Name="min" Type="System.Int64" />
          <Parameter Name="max" Type="System.Int64" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="sequenceName">To be added.</param>
          <param name="sequenceTypeName">To be added.</param>
          <param name="cyclic">To be added.</param>
          <param name="increment">To be added.</param>
          <param name="start">To be added.</param>
          <param name="min">To be added.</param>
          <param name="max">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.SequenceFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Boolean,System.Int32,System.Int64,System.Int64,System.Int64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="SequenceFound">
        <MemberSignature Language="C#" Value="public static void SequenceFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string sequenceName, string sequenceTypeName, Nullable&lt;bool&gt; cyclic, Nullable&lt;int&gt; increment, Nullable&lt;long&gt; start, Nullable&lt;long&gt; min, Nullable&lt;long&gt; max);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SequenceFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string sequenceName, string sequenceTypeName, valuetype System.Nullable`1&lt;bool&gt; cyclic, valuetype System.Nullable`1&lt;int32&gt; increment, valuetype System.Nullable`1&lt;int64&gt; start, valuetype System.Nullable`1&lt;int64&gt; min, valuetype System.Nullable`1&lt;int64&gt; max) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.SequenceFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SequenceFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), sequenceName As String, sequenceTypeName As String, cyclic As Nullable(Of Boolean), increment As Nullable(Of Integer), start As Nullable(Of Long), min As Nullable(Of Long), max As Nullable(Of Long))" />
        <MemberSignature Language="F#" Value="static member SequenceFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.SequenceFound (diagnostics, sequenceName, sequenceTypeName, cyclic, increment, start, min, max)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SequenceFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ sequenceName, System::String ^ sequenceTypeName, Nullable&lt;bool&gt; cyclic, Nullable&lt;int&gt; increment, Nullable&lt;long&gt; start, Nullable&lt;long&gt; min, Nullable&lt;long&gt; max);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="sequenceName" Type="System.String" />
          <Parameter Name="sequenceTypeName" Type="System.String" />
          <Parameter Name="cyclic" Type="System.Nullable&lt;System.Boolean&gt;" />
          <Parameter Name="increment" Type="System.Nullable&lt;System.Int32&gt;" />
          <Parameter Name="start" Type="System.Nullable&lt;System.Int64&gt;" />
          <Parameter Name="min" Type="System.Nullable&lt;System.Int64&gt;" />
          <Parameter Name="max" Type="System.Nullable&lt;System.Int64&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="sequenceName">To be added.</param>
          <param name="sequenceTypeName">To be added.</param>
          <param name="cyclic">To be added.</param>
          <param name="increment">To be added.</param>
          <param name="start">To be added.</param>
          <param name="min">To be added.</param>
          <param name="max">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.SequenceFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="SequenceNotNamedWarning">
        <MemberSignature Language="C#" Value="public static void SequenceNotNamedWarning (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SequenceNotNamedWarning(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.SequenceNotNamedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SequenceNotNamedWarning (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding))" />
        <MemberSignature Language="F#" Value="static member SequenceNotNamedWarning : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.SequenceNotNamedWarning diagnostics" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SequenceNotNamedWarning(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.SequenceNotNamedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="TableFound">
        <MemberSignature Language="C#" Value="public static void TableFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TableFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.TableFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub TableFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String)" />
        <MemberSignature Language="F#" Value="static member TableFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.TableFound (diagnostics, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void TableFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.TableFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="TableSkipped">
        <MemberSignature Language="C#" Value="public static void TableSkipped (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TableSkipped(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.TableSkipped(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub TableSkipped (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), tableName As String)" />
        <MemberSignature Language="F#" Value="static member TableSkipped : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.TableSkipped (diagnostics, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void TableSkipped(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.TableSkipped(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="TypeAliasFound">
        <MemberSignature Language="C#" Value="public static void TypeAliasFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string typeAliasName, string systemTypeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TypeAliasFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string typeAliasName, string systemTypeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.TypeAliasFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub TypeAliasFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), typeAliasName As String, systemTypeName As String)" />
        <MemberSignature Language="F#" Value="static member TypeAliasFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.TypeAliasFound (diagnostics, typeAliasName, systemTypeName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void TypeAliasFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ typeAliasName, System::String ^ systemTypeName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="typeAliasName" Type="System.String" />
          <Parameter Name="systemTypeName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="typeAliasName">To be added.</param>
          <param name="systemTypeName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.TypeAliasFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
      </Targets>
      <Member MemberName="UniqueConstraintFound">
        <MemberSignature Language="C#" Value="public static void UniqueConstraintFound (this Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; diagnostics, string uniqueConstraintName, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UniqueConstraintFound(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Scaffolding&gt; diagnostics, string uniqueConstraintName, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.UniqueConstraintFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UniqueConstraintFound (diagnostics As IDiagnosticsLogger(Of DbLoggerCategory.Scaffolding), uniqueConstraintName As String, tableName As String)" />
        <MemberSignature Language="F#" Value="static member UniqueConstraintFound : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding&gt; * string * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.UniqueConstraintFound (diagnostics, uniqueConstraintName, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void UniqueConstraintFound(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Scaffolding ^&gt; ^ diagnostics, System::String ^ uniqueConstraintName, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostics" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Scaffolding&gt;" RefType="this" />
          <Parameter Name="uniqueConstraintName" Type="System.String" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="diagnostics">To be added.</param>
          <param name="uniqueConstraintName">To be added.</param>
          <param name="tableName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.SqlServerLoggerExtensions.UniqueConstraintFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="DisplayName">
        <MemberSignature Language="C#" Value="public static string DisplayName (this Type type, bool fullName = true);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string DisplayName(class System.Type type, bool fullName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.DisplayName(System.Type,System.Boolean)" />
        <MemberSignature Language="F#" Value="static member DisplayName : Type * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.Internal.TypeExtensions.DisplayName (type, fullName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
          <Parameter Name="fullName" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <param name="fullName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.TypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.DisplayName(System.Type,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetFieldInfo">
        <MemberSignature Language="C#" Value="public static System.Reflection.FieldInfo GetFieldInfo (this Type type, string fieldName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.FieldInfo GetFieldInfo(class System.Type type, string fieldName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.GetFieldInfo(System.Type,System.String)" />
        <MemberSignature Language="F#" Value="static member GetFieldInfo : Type * string -&gt; System.Reflection.FieldInfo" Usage="Microsoft.EntityFrameworkCore.Internal.TypeExtensions.GetFieldInfo (type, fieldName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Reflection::FieldInfo ^ GetFieldInfo(Type ^ type, System::String ^ fieldName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.FieldInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
          <Parameter Name="fieldName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <param name="fieldName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.TypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.GetFieldInfo(System.Type,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetNamespaces">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; GetNamespaces (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetNamespaces(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.GetNamespaces(System.Type)" />
        <MemberSignature Language="F#" Value="static member GetNamespaces : Type -&gt; seq&lt;string&gt;" Usage="Microsoft.EntityFrameworkCore.Internal.TypeExtensions.GetNamespaces type" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetNamespaces(Type ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.TypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.GetNamespaces(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsDefaultValue">
        <MemberSignature Language="C#" Value="public static bool IsDefaultValue (this Type type, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefaultValue(class System.Type type, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.IsDefaultValue(System.Type,System.Object)" />
        <MemberSignature Language="F#" Value="static member IsDefaultValue : Type * obj -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.TypeExtensions.IsDefaultValue (type, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsDefaultValue(Type ^ type, System::Object ^ value);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsDefaultValue(Platform::Type ^ type, Platform::Object ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.TypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.IsDefaultValue(System.Type,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="ShortDisplayName">
        <MemberSignature Language="C#" Value="public static string ShortDisplayName (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ShortDisplayName(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.ShortDisplayName(System.Type)" />
        <MemberSignature Language="F#" Value="static member ShortDisplayName : Type -&gt; string" Usage="Microsoft.EntityFrameworkCore.Internal.TypeExtensions.ShortDisplayName type" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ ShortDisplayName(Type ^ type);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ ShortDisplayName(Platform::Type ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Internal.TypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Internal.TypeExtensions.ShortDisplayName(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />
      </Targets>
      <Member MemberName="GetReferencingForeignKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; GetReferencingForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; GetReferencingForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.KeyExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReferencingForeignKeys (key As IKey) As IEnumerable(Of IForeignKey)" />
        <MemberSignature Language="F#" Value="static member GetReferencingForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IKey -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.KeyExtensions.GetReferencingForeignKeys key" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^&gt; ^ GetReferencingForeignKeys(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key"> The key to find the foreign keys for. </param>
          <summary>
                Gets all foreign keys that target a given primary or alternate key.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.KeyExtensions" Member="M:Microsoft.EntityFrameworkCore.KeyExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionBatch" />
      </Targets>
      <Member MemberName="Run">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Run (this Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionBatch batch, Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder relationshipBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Run(class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionBatch batch, class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder relationshipBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionBatchExtensions.Run(Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionBatch,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Run (batch As IConventionBatch, relationshipBuilder As InternalRelationshipBuilder) As InternalRelationshipBuilder" />
        <MemberSignature Language="F#" Value="static member Run : Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionBatch * Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionBatchExtensions.Run (batch, relationshipBuilder)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::InternalRelationshipBuilder ^ Run(Microsoft::EntityFrameworkCore::Metadata::Conventions::Internal::IConventionBatch ^ batch, Microsoft::EntityFrameworkCore::Metadata::Internal::InternalRelationshipBuilder ^ relationshipBuilder);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="batch" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionBatch" RefType="this" />
          <Parameter Name="relationshipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" />
        </Parameters>
        <Docs>
          <param name="batch">To be added.</param>
          <param name="relationshipBuilder">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionBatchExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionBatchExtensions.Run(Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionBatch,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" />
      </Targets>
      <Member MemberName="AnnotationsToDebugString">
        <MemberSignature Language="C#" Value="public static string AnnotationsToDebugString (this Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, string indent = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string AnnotationsToDebugString(class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, string indent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.AnnotatableExtensions.AnnotationsToDebugString(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AnnotationsToDebugString (annotatable As IAnnotatable, Optional indent As String = &quot;&quot;) As String" />
        <MemberSignature Language="F#" Value="static member AnnotationsToDebugString : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable * string -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.AnnotatableExtensions.AnnotationsToDebugString (annotatable, indent)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="annotatable" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" RefType="this" />
          <Parameter Name="indent" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="annotatable">To be added.</param>
          <param name="indent">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.AnnotatableExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.AnnotatableExtensions.AnnotationsToDebugString(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource Max (this Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource left, Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource Max(valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource left, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; right) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Max(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (left As ConfigurationSource, right As Nullable(Of ConfigurationSource)) As ConfigurationSource" />
        <MemberSignature Language="F#" Value="static member Max : Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Max (left, right)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource Max(Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource left, Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource&gt; right);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" RefType="this" />
          <Parameter Name="right" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Max(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Nullable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; Max (this Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; left, Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; Max(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; left, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; right) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Max(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (left As Nullable(Of ConfigurationSource), right As Nullable(Of ConfigurationSource)) As Nullable(Of ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Max : Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Max (left, right)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource&gt; Max(Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource&gt; left, Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource&gt; right);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" RefType="this" />
          <Parameter Name="right" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Max(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
      </Targets>
      <Member MemberName="Overrides">
        <MemberSignature Language="C#" Value="public static bool Overrides (this Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource newConfigurationSource, Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; oldConfigurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Overrides(valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource newConfigurationSource, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; oldConfigurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Overrides(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Overrides (newConfigurationSource As ConfigurationSource, oldConfigurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
        <MemberSignature Language="F#" Value="static member Overrides : Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Overrides (newConfigurationSource, oldConfigurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Overrides(Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource newConfigurationSource, Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource&gt; oldConfigurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="newConfigurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" RefType="this" />
          <Parameter Name="oldConfigurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" />
        </Parameters>
        <Docs>
          <param name="newConfigurationSource">To be added.</param>
          <param name="oldConfigurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Overrides(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Nullable`1" />
      </Targets>
      <Member MemberName="Overrides">
        <MemberSignature Language="C#" Value="public static bool Overrides (this Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; newConfigurationSource, Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; oldConfigurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Overrides(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; newConfigurationSource, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; oldConfigurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Overrides(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Overrides (newConfigurationSource As Nullable(Of ConfigurationSource), oldConfigurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
        <MemberSignature Language="F#" Value="static member Overrides : Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Overrides (newConfigurationSource, oldConfigurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Overrides(Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource&gt; newConfigurationSource, Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource&gt; oldConfigurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="newConfigurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" RefType="this" />
          <Parameter Name="oldConfigurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" />
        </Parameters>
        <Docs>
          <param name="newConfigurationSource">To be added.</param>
          <param name="oldConfigurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.Overrides(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
      </Targets>
      <Member MemberName="OverridesStrictly">
        <MemberSignature Language="C#" Value="public static bool OverridesStrictly (this Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource newConfigurationSource, Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; oldConfigurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool OverridesStrictly(valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource newConfigurationSource, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; oldConfigurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.OverridesStrictly(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OverridesStrictly (newConfigurationSource As ConfigurationSource, oldConfigurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
        <MemberSignature Language="F#" Value="static member OverridesStrictly : Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.OverridesStrictly (newConfigurationSource, oldConfigurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool OverridesStrictly(Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource newConfigurationSource, Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource&gt; oldConfigurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="newConfigurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" RefType="this" />
          <Parameter Name="oldConfigurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" />
        </Parameters>
        <Docs>
          <param name="newConfigurationSource">To be added.</param>
          <param name="oldConfigurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions.OverridesStrictly(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="AsEntityType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AsEntityType (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string methodName = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AsEntityType(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string methodName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.AsEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
        <MemberSignature Language="F#" Value="static member AsEntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.AsEntityType (entityType, methodName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="methodName" Type="System.String">
            <Attributes>
              <Attribute>
                <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="methodName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.AsEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="CalculateCounts">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts CalculateCounts (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts CalculateCounts(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CalculateCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CalculateCounts (entityType As IEntityType) As PropertyCounts" />
        <MemberSignature Language="F#" Value="static member CalculateCounts : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CalculateCounts entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::PropertyCounts ^ CalculateCounts(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CalculateCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="CheckChangeTrackingStrategy">
        <MemberSignature Language="C#" Value="public static string CheckChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.ChangeTrackingStrategy value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CheckChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CheckChangeTrackingStrategy (entityType As IEntityType, value As ChangeTrackingStrategy) As String" />
        <MemberSignature Language="F#" Value="static member CheckChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.ChangeTrackingStrategy -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckChangeTrackingStrategy (entityType, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ CheckChangeTrackingStrategy(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::ChangeTrackingStrategy value);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ CheckChangeTrackingStrategy(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::ChangeTrackingStrategy value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="value" Type="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="CheckChangeTrackingStrategy">
        <MemberSignature Language="C#" Value="public static string CheckChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CheckChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, valuetype Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CheckChangeTrackingStrategy (entityType As IEntityType, value As ChangeTrackingStrategy) As String" />
        <MemberSignature Language="F#" Value="static member CheckChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckChangeTrackingStrategy (entityType, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ CheckChangeTrackingStrategy(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::ChangeTrackingStrategy value);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ CheckChangeTrackingStrategy(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::ChangeTrackingStrategy value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="value" Type="Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="CheckPropertyBelongsToType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IProperty CheckPropertyBelongsToType (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IProperty CheckPropertyBelongsToType(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckPropertyBelongsToType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CheckPropertyBelongsToType (entityType As IEntityType, property As IProperty) As IProperty" />
        <MemberSignature Language="F#" Value="static member CheckPropertyBelongsToType : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckPropertyBelongsToType (entityType, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IProperty ^ CheckPropertyBelongsToType(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IProperty ^ CheckPropertyBelongsToType(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckPropertyBelongsToType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="DisplayName">
        <MemberSignature Language="C#" Value="public static string DisplayName (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string DisplayName(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.DisplayName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DisplayName (entityType As IEntityType) As String" />
        <MemberSignature Language="F#" Value="static member DisplayName : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.DisplayName entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ DisplayName(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ DisplayName(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.DisplayName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindDeclaredOwnership">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IForeignKey FindDeclaredOwnership (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IForeignKey FindDeclaredOwnership(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredOwnership(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDeclaredOwnership (entityType As IEntityType) As IForeignKey" />
        <MemberSignature Language="F#" Value="static member FindDeclaredOwnership : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredOwnership entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ FindDeclaredOwnership(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ FindDeclaredOwnership(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IForeignKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredOwnership(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
      </Targets>
      <Member MemberName="FindDeclaredOwnership">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey FindDeclaredOwnership (this Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey FindDeclaredOwnership(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredOwnership(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
        <MemberSignature Language="F#" Value="static member FindDeclaredOwnership : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredOwnership entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::ForeignKey ^ FindDeclaredOwnership(Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredOwnership(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindDeclaredPrimaryKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IKey FindDeclaredPrimaryKey (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IKey FindDeclaredPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDeclaredPrimaryKey (entityType As IEntityType) As IKey" />
        <MemberSignature Language="F#" Value="static member FindDeclaredPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IKey" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredPrimaryKey entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IKey ^ FindDeclaredPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IKey ^ FindDeclaredPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindDefiningNavigation">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.INavigation FindDefiningNavigation (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.INavigation FindDefiningNavigation(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDefiningNavigation (entityType As IEntityType) As INavigation" />
        <MemberSignature Language="F#" Value="static member FindDefiningNavigation : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.INavigation" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDefiningNavigation entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::INavigation ^ FindDefiningNavigation(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::INavigation ^ FindDefiningNavigation(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.INavigation</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
      </Targets>
      <Member MemberName="FindDefiningNavigation">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation FindDefiningNavigation (this Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation FindDefiningNavigation(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
        <MemberSignature Language="F#" Value="static member FindDefiningNavigation : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDefiningNavigation entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::Navigation ^ FindDefiningNavigation(Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindDerivedNavigations">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; FindDerivedNavigations (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string navigationName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; FindDerivedNavigations(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string navigationName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDerivedNavigations (entityType As IEntityType, navigationName As String) As IEnumerable(Of INavigation)" />
        <MemberSignature Language="F#" Value="static member FindDerivedNavigations : Microsoft.EntityFrameworkCore.Metadata.IEntityType * string -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedNavigations (entityType, navigationName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::INavigation ^&gt; ^ FindDerivedNavigations(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, System::String ^ navigationName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="navigationName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="navigationName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindDerivedProperties">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; FindDerivedProperties (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string propertyName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; FindDerivedProperties(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string propertyName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDerivedProperties (entityType As IEntityType, propertyName As String) As IEnumerable(Of IProperty)" />
        <MemberSignature Language="F#" Value="static member FindDerivedProperties : Microsoft.EntityFrameworkCore.Metadata.IEntityType * string -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedProperties (entityType, propertyName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IProperty ^&gt; ^ FindDerivedProperties(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, System::String ^ propertyName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="propertyName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="propertyName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindInDefinitionPath">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityType FindInDefinitionPath (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string targetTypeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityType FindInDefinitionPath(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string targetTypeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindInDefinitionPath (entityType As IEntityType, targetTypeName As String) As IEntityType" />
        <MemberSignature Language="F#" Value="static member FindInDefinitionPath : Microsoft.EntityFrameworkCore.Metadata.IEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath (entityType, targetTypeName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ FindInDefinitionPath(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, System::String ^ targetTypeName);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ FindInDefinitionPath(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Platform::String ^ targetTypeName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="targetTypeName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="targetTypeName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindInDefinitionPath">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityType FindInDefinitionPath (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Type targetType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityType FindInDefinitionPath(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Type targetType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Type)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindInDefinitionPath (entityType As IEntityType, targetType As Type) As IEntityType" />
        <MemberSignature Language="F#" Value="static member FindInDefinitionPath : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath (entityType, targetType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ FindInDefinitionPath(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Type ^ targetType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ FindInDefinitionPath(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Platform::Type ^ targetType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="targetType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="targetType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
      </Targets>
      <Member MemberName="FindInDefinitionPath">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType FindInDefinitionPath (this Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType, string targetTypeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType FindInDefinitionPath(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType, string targetTypeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String)" />
        <MemberSignature Language="F#" Value="static member FindInDefinitionPath : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath (entityType, targetTypeName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ FindInDefinitionPath(Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ entityType, System::String ^ targetTypeName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" RefType="this" />
          <Parameter Name="targetTypeName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="targetTypeName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
      </Targets>
      <Member MemberName="FindInDefinitionPath">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType FindInDefinitionPath (this Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType, Type targetType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType FindInDefinitionPath(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType, class System.Type targetType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Type)" />
        <MemberSignature Language="F#" Value="static member FindInDefinitionPath : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath (entityType, targetType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ FindInDefinitionPath(Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ entityType, Type ^ targetType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" RefType="this" />
          <Parameter Name="targetType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="targetType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="FindOwnership">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IForeignKey FindOwnership (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IForeignKey FindOwnership(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindOwnership(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindOwnership (entityType As IEntityType) As IForeignKey" />
        <MemberSignature Language="F#" Value="static member FindOwnership : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindOwnership entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ FindOwnership(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ FindOwnership(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IForeignKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindOwnership(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
      </Targets>
      <Member MemberName="FindOwnership">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey FindOwnership (this Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey FindOwnership(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindOwnership(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
        <MemberSignature Language="F#" Value="static member FindOwnership : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindOwnership entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::ForeignKey ^ FindOwnership(Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindOwnership(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetAllBaseTypes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetAllBaseTypes (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetAllBaseTypes(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetAllBaseTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAllBaseTypes (entityType As IEntityType) As IEnumerable(Of IEntityType)" />
        <MemberSignature Language="F#" Value="static member GetAllBaseTypes : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetAllBaseTypes entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IEntityType ^&gt; ^ GetAllBaseTypes(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetAllBaseTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetAllBaseTypesInclusive">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetAllBaseTypesInclusive (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetAllBaseTypesInclusive(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetAllBaseTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAllBaseTypesInclusive (entityType As IEntityType) As IEnumerable(Of IEntityType)" />
        <MemberSignature Language="F#" Value="static member GetAllBaseTypesInclusive : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetAllBaseTypesInclusive entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IEntityType ^&gt; ^ GetAllBaseTypesInclusive(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetAllBaseTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetConcreteTypesInHierarchy">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetConcreteTypesInHierarchy (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetConcreteTypesInHierarchy(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetConcreteTypesInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConcreteTypesInHierarchy (entityType As IEntityType) As IEnumerable(Of IEntityType)" />
        <MemberSignature Language="F#" Value="static member GetConcreteTypesInHierarchy : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetConcreteTypesInHierarchy entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IEntityType ^&gt; ^ GetConcreteTypesInHierarchy(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetConcreteTypesInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetCounts">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts GetCounts (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts GetCounts(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetCounts (entityType As IEntityType) As PropertyCounts" />
        <MemberSignature Language="F#" Value="static member GetCounts : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetCounts entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::PropertyCounts ^ GetCounts(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetData">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;&gt; GetData (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, bool providerValues = false);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&gt; GetData(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, bool providerValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetData(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetData (entityType As IEntityType, Optional providerValues As Boolean = false) As IEnumerable(Of IDictionary(Of String, Object))" />
        <MemberSignature Language="F#" Value="static member GetData : Microsoft.EntityFrameworkCore.Metadata.IEntityType * bool -&gt; seq&lt;System.Collections.Generic.IDictionary&lt;string, obj&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetData (entityType, providerValues)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="providerValues" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="providerValues">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetData(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetDeclaredForeignKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; GetDeclaredForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; GetDeclaredForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredForeignKeys (entityType As IEntityType) As IEnumerable(Of IForeignKey)" />
        <MemberSignature Language="F#" Value="static member GetDeclaredForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredForeignKeys entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^&gt; ^ GetDeclaredForeignKeys(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetDeclaredIndexes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IIndex&gt; GetDeclaredIndexes (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IIndex&gt; GetDeclaredIndexes(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredIndexes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredIndexes (entityType As IEntityType) As IEnumerable(Of IIndex)" />
        <MemberSignature Language="F#" Value="static member GetDeclaredIndexes : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IIndex&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredIndexes entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IIndex ^&gt; ^ GetDeclaredIndexes(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IIndex&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredIndexes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetDeclaredKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt; GetDeclaredKeys (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IKey&gt; GetDeclaredKeys(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredKeys (entityType As IEntityType) As IEnumerable(Of IKey)" />
        <MemberSignature Language="F#" Value="static member GetDeclaredKeys : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredKeys entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IKey ^&gt; ^ GetDeclaredKeys(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetDeclaredNavigations">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; GetDeclaredNavigations (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; GetDeclaredNavigations(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredNavigations (entityType As IEntityType) As IEnumerable(Of INavigation)" />
        <MemberSignature Language="F#" Value="static member GetDeclaredNavigations : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredNavigations entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::INavigation ^&gt; ^ GetDeclaredNavigations(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetDeclaredProperties">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; GetDeclaredProperties (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; GetDeclaredProperties(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredProperties (entityType As IEntityType) As IEnumerable(Of IProperty)" />
        <MemberSignature Language="F#" Value="static member GetDeclaredProperties : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredProperties entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IProperty ^&gt; ^ GetDeclaredProperties(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetDeclaredReferencingForeignKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; GetDeclaredReferencingForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; GetDeclaredReferencingForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredReferencingForeignKeys (entityType As IEntityType) As IEnumerable(Of IForeignKey)" />
        <MemberSignature Language="F#" Value="static member GetDeclaredReferencingForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredReferencingForeignKeys entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^&gt; ^ GetDeclaredReferencingForeignKeys(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetDeclaredServiceProperties">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IServiceProperty&gt; GetDeclaredServiceProperties (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IServiceProperty&gt; GetDeclaredServiceProperties(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredServiceProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredServiceProperties (entityType As IEntityType) As IEnumerable(Of IServiceProperty)" />
        <MemberSignature Language="F#" Value="static member GetDeclaredServiceProperties : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IServiceProperty&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredServiceProperties entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IServiceProperty ^&gt; ^ GetDeclaredServiceProperties(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IServiceProperty&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredServiceProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetDerivedTypesInclusive">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetDerivedTypesInclusive (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetDerivedTypesInclusive(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDerivedTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDerivedTypesInclusive (entityType As IEntityType) As IEnumerable(Of IEntityType)" />
        <MemberSignature Language="F#" Value="static member GetDerivedTypesInclusive : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDerivedTypesInclusive entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IEntityType ^&gt; ^ GetDerivedTypesInclusive(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDerivedTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetDirectlyDerivedTypes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetDirectlyDerivedTypes (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetDirectlyDerivedTypes(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDirectlyDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function GetDirectlyDerivedTypes (entityType As IEntityType) As IEnumerable(Of IEntityType)" />
        <MemberSignature Language="F#" Value="static member GetDirectlyDerivedTypes : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDirectlyDerivedTypes entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IEntityType ^&gt; ^ GetDirectlyDerivedTypes(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDirectlyDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetEmptyShadowValuesFactory">
        <MemberSignature Language="C#" Value="public static Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt; GetEmptyShadowValuesFactory (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt; GetEmptyShadowValuesFactory(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetEmptyShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEmptyShadowValuesFactory (entityType As IEntityType) As Func(Of ISnapshot)" />
        <MemberSignature Language="F#" Value="static member GetEmptyShadowValuesFactory : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetEmptyShadowValuesFactory entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Func&lt;Microsoft::EntityFrameworkCore::ChangeTracking::Internal::ISnapshot ^&gt; ^ GetEmptyShadowValuesFactory(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetEmptyShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetNotificationProperties">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; GetNotificationProperties (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string propertyName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; GetNotificationProperties(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string propertyName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetNotificationProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function GetNotificationProperties (entityType As IEntityType, propertyName As String) As IEnumerable(Of IPropertyBase)" />
        <MemberSignature Language="F#" Value="static member GetNotificationProperties : Microsoft.EntityFrameworkCore.Metadata.IEntityType * string -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetNotificationProperties (entityType, propertyName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^&gt; ^ GetNotificationProperties(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, System::String ^ propertyName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="propertyName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="propertyName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetNotificationProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetOriginalValuesFactory">
        <MemberSignature Language="C#" Value="public static Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt; GetOriginalValuesFactory (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`2&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt; GetOriginalValuesFactory(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetOriginalValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOriginalValuesFactory (entityType As IEntityType) As Func(Of InternalEntityEntry, ISnapshot)" />
        <MemberSignature Language="F#" Value="static member GetOriginalValuesFactory : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetOriginalValuesFactory entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Func&lt;Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::ISnapshot ^&gt; ^ GetOriginalValuesFactory(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetOriginalValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetPropertiesAndNavigations">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; GetPropertiesAndNavigations (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; GetPropertiesAndNavigations(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetPropertiesAndNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertiesAndNavigations (entityType As IEntityType) As IEnumerable(Of IPropertyBase)" />
        <MemberSignature Language="F#" Value="static member GetPropertiesAndNavigations : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetPropertiesAndNavigations entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^&gt; ^ GetPropertiesAndNavigations(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetPropertiesAndNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetProperty">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IProperty GetProperty (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IProperty GetProperty(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetProperty (entityType As IEntityType, name As String) As IProperty" />
        <MemberSignature Language="F#" Value="static member GetProperty : Microsoft.EntityFrameworkCore.Metadata.IEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetProperty (entityType, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IProperty ^ GetProperty(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, System::String ^ name);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IProperty ^ GetProperty(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Platform::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="name">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetRelationshipSnapshotFactory">
        <MemberSignature Language="C#" Value="public static Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt; GetRelationshipSnapshotFactory (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`2&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt; GetRelationshipSnapshotFactory(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetRelationshipSnapshotFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRelationshipSnapshotFactory (entityType As IEntityType) As Func(Of InternalEntityEntry, ISnapshot)" />
        <MemberSignature Language="F#" Value="static member GetRelationshipSnapshotFactory : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetRelationshipSnapshotFactory entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Func&lt;Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::ISnapshot ^&gt; ^ GetRelationshipSnapshotFactory(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetRelationshipSnapshotFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="GetShadowValuesFactory">
        <MemberSignature Language="C#" Value="public static Func&lt;Microsoft.EntityFrameworkCore.Storage.ValueBuffer,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt; GetShadowValuesFactory (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`2&lt;valuetype Microsoft.EntityFrameworkCore.Storage.ValueBuffer, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt; GetShadowValuesFactory(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetShadowValuesFactory (entityType As IEntityType) As Func(Of ValueBuffer, ISnapshot)" />
        <MemberSignature Language="F#" Value="static member GetShadowValuesFactory : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Func&lt;Microsoft.EntityFrameworkCore.Storage.ValueBuffer, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetShadowValuesFactory entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Func&lt;Microsoft::EntityFrameworkCore::Storage::ValueBuffer, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::ISnapshot ^&gt; ^ GetShadowValuesFactory(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Storage.ValueBuffer,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="HasClrType">
        <MemberSignature Language="C#" Value="public static bool HasClrType (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasClrType(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.HasClrType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasClrType (entityType As IEntityType) As Boolean" />
        <MemberSignature Language="F#" Value="static member HasClrType : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.HasClrType entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool HasClrType(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool HasClrType(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.HasClrType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="IsAbstract">
        <MemberSignature Language="C#" Value="public static bool IsAbstract (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAbstract(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsAbstract(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsAbstract (entityType As IEntityType) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsAbstract : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsAbstract entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsAbstract(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsAbstract(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsAbstract(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="IsInDefinitionPath">
        <MemberSignature Language="C#" Value="public static bool IsInDefinitionPath (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IEntityType targetType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInDefinitionPath(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IEntityType targetType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsInDefinitionPath (entityType As IEntityType, targetType As IEntityType) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsInDefinitionPath : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInDefinitionPath (entityType, targetType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsInDefinitionPath(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ targetType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsInDefinitionPath(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ targetType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="targetType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="targetType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="IsInDefinitionPath">
        <MemberSignature Language="C#" Value="public static bool IsInDefinitionPath (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string targetTypeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInDefinitionPath(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string targetTypeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsInDefinitionPath (entityType As IEntityType, targetTypeName As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsInDefinitionPath : Microsoft.EntityFrameworkCore.Metadata.IEntityType * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInDefinitionPath (entityType, targetTypeName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsInDefinitionPath(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, System::String ^ targetTypeName);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsInDefinitionPath(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Platform::String ^ targetTypeName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="targetTypeName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="targetTypeName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="IsInDefinitionPath">
        <MemberSignature Language="C#" Value="public static bool IsInDefinitionPath (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Type targetType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInDefinitionPath(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Type targetType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Type)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsInDefinitionPath (entityType As IEntityType, targetType As Type) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsInDefinitionPath : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Type -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInDefinitionPath (entityType, targetType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsInDefinitionPath(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Type ^ targetType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsInDefinitionPath(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Platform::Type ^ targetType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="targetType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="targetType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInDefinitionPath(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
      </Targets>
      <Member MemberName="IsInOwnershipPath">
        <MemberSignature Language="C#" Value="public static bool IsInOwnershipPath (this Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInOwnershipPath(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInOwnershipPath(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
        <MemberSignature Language="F#" Value="static member IsInOwnershipPath : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInOwnershipPath (entityType, targetType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsInOwnershipPath(Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ targetType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" RefType="this" />
          <Parameter Name="targetType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="targetType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsInOwnershipPath(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="IsSameHierarchy">
        <MemberSignature Language="C#" Value="public static bool IsSameHierarchy (this Microsoft.EntityFrameworkCore.Metadata.IEntityType firstEntityType, Microsoft.EntityFrameworkCore.Metadata.IEntityType secondEntityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSameHierarchy(class Microsoft.EntityFrameworkCore.Metadata.IEntityType firstEntityType, class Microsoft.EntityFrameworkCore.Metadata.IEntityType secondEntityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsSameHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsSameHierarchy (firstEntityType As IEntityType, secondEntityType As IEntityType) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsSameHierarchy : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsSameHierarchy (firstEntityType, secondEntityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsSameHierarchy(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ firstEntityType, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ secondEntityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsSameHierarchy(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ firstEntityType, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ secondEntityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="firstEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="secondEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="firstEntityType">To be added.</param>
          <param name="secondEntityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsSameHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
      </Targets>
      <Member MemberName="LeastDerivedType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType LeastDerivedType (this Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType otherEntityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType LeastDerivedType(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType otherEntityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
        <MemberSignature Language="F#" Value="static member LeastDerivedType : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.LeastDerivedType (entityType, otherEntityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ LeastDerivedType(Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ otherEntityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" RefType="this" />
          <Parameter Name="otherEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="otherEntityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="NavigationCount">
        <MemberSignature Language="C#" Value="public static int NavigationCount (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 NavigationCount(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.NavigationCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function NavigationCount (entityType As IEntityType) As Integer" />
        <MemberSignature Language="F#" Value="static member NavigationCount : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.NavigationCount entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int NavigationCount(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int NavigationCount(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.NavigationCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="OriginalValueCount">
        <MemberSignature Language="C#" Value="public static int OriginalValueCount (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 OriginalValueCount(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.OriginalValueCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OriginalValueCount (entityType As IEntityType) As Integer" />
        <MemberSignature Language="F#" Value="static member OriginalValueCount : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.OriginalValueCount entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int OriginalValueCount(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int OriginalValueCount(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.OriginalValueCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="PropertyCount">
        <MemberSignature Language="C#" Value="public static int PropertyCount (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 PropertyCount(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.PropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PropertyCount (entityType As IEntityType) As Integer" />
        <MemberSignature Language="F#" Value="static member PropertyCount : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.PropertyCount entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int PropertyCount(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int PropertyCount(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.PropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="RelationshipPropertyCount">
        <MemberSignature Language="C#" Value="public static int RelationshipPropertyCount (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 RelationshipPropertyCount(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.RelationshipPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RelationshipPropertyCount (entityType As IEntityType) As Integer" />
        <MemberSignature Language="F#" Value="static member RelationshipPropertyCount : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.RelationshipPropertyCount entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int RelationshipPropertyCount(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int RelationshipPropertyCount(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.RelationshipPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="ShadowPropertyCount">
        <MemberSignature Language="C#" Value="public static int ShadowPropertyCount (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ShadowPropertyCount(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ShadowPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ShadowPropertyCount (entityType As IEntityType) As Integer" />
        <MemberSignature Language="F#" Value="static member ShadowPropertyCount : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ShadowPropertyCount entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ShadowPropertyCount(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ShadowPropertyCount(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ShadowPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="ShortName">
        <MemberSignature Language="C#" Value="public static string ShortName (this Microsoft.EntityFrameworkCore.Metadata.IEntityType type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ShortName(class Microsoft.EntityFrameworkCore.Metadata.IEntityType type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ShortName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ShortName (type As IEntityType) As String" />
        <MemberSignature Language="F#" Value="static member ShortName : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ShortName type" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ ShortName(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ type);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ ShortName(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ShortName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="StoreGeneratedCount">
        <MemberSignature Language="C#" Value="public static int StoreGeneratedCount (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 StoreGeneratedCount(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.StoreGeneratedCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StoreGeneratedCount (entityType As IEntityType) As Integer" />
        <MemberSignature Language="F#" Value="static member StoreGeneratedCount : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.StoreGeneratedCount entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int StoreGeneratedCount(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int StoreGeneratedCount(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.StoreGeneratedCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="ToDebugString">
        <MemberSignature Language="C#" Value="public static string ToDebugString (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, bool singleLine = true, string indent = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToDebugString(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, bool singleLine, string indent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDebugString (entityType As IEntityType, Optional singleLine As Boolean = true, Optional indent As String = &quot;&quot;) As String" />
        <MemberSignature Language="F#" Value="static member ToDebugString : Microsoft.EntityFrameworkCore.Metadata.IEntityType * bool * string -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ToDebugString (entityType, singleLine, indent)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="singleLine" Type="System.Boolean" />
          <Parameter Name="indent" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="singleLine">To be added.</param>
          <param name="indent">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="UseEagerSnapshots">
        <MemberSignature Language="C#" Value="public static bool UseEagerSnapshots (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UseEagerSnapshots(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.UseEagerSnapshots(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseEagerSnapshots (entityType As IEntityType) As Boolean" />
        <MemberSignature Language="F#" Value="static member UseEagerSnapshots : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.UseEagerSnapshots entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool UseEagerSnapshots(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool UseEagerSnapshots(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.UseEagerSnapshots(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="AreCompatible">
        <MemberSignature Language="C#" Value="public static bool AreCompatible (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.IForeignKey duplicateForeignKey, bool shouldThrow);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreCompatible(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Metadata.IForeignKey duplicateForeignKey, bool shouldThrow) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AreCompatible (foreignKey As IForeignKey, duplicateForeignKey As IForeignKey, shouldThrow As Boolean) As Boolean" />
        <MemberSignature Language="F#" Value="static member AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Metadata.IForeignKey * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.AreCompatible (foreignKey, duplicateForeignKey, shouldThrow)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool AreCompatible(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ duplicateForeignKey, bool shouldThrow);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool AreCompatible(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ duplicateForeignKey, bool shouldThrow);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
          <Parameter Name="duplicateForeignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
          <Parameter Name="shouldThrow" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <param name="duplicateForeignKey">To be added.</param>
          <param name="shouldThrow">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="AsForeignKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey AsForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, string methodName = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey AsForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, string methodName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.AsForeignKey(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.String)" />
        <MemberSignature Language="F#" Value="static member AsForeignKey : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.AsForeignKey (foreignKey, methodName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
          <Parameter Name="methodName" Type="System.String">
            <Attributes>
              <Attribute>
                <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <param name="methodName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.AsForeignKey(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="CreateDependentsMapFactory">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentsMap CreateDependentsMapFactory (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentsMap CreateDependentsMapFactory(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.CreateDependentsMapFactory(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateDependentsMapFactory (foreignKey As IForeignKey) As IDependentsMap" />
        <MemberSignature Language="F#" Value="static member CreateDependentsMapFactory : Microsoft.EntityFrameworkCore.Metadata.IForeignKey -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentsMap" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.CreateDependentsMapFactory foreignKey" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IDependentsMap ^ CreateDependentsMapFactory(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IDependentsMap ^ CreateDependentsMapFactory(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentsMap</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.CreateDependentsMapFactory(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="FindNavigationsFrom">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; FindNavigationsFrom (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; FindNavigationsFrom(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsFrom(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindNavigationsFrom (foreignKey As IForeignKey, entityType As IEntityType) As IEnumerable(Of INavigation)" />
        <MemberSignature Language="F#" Value="static member FindNavigationsFrom : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsFrom (foreignKey, entityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::INavigation ^&gt; ^ FindNavigationsFrom(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsFrom(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="FindNavigationsFromInHierarchy">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; FindNavigationsFromInHierarchy (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; FindNavigationsFromInHierarchy(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsFromInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindNavigationsFromInHierarchy (foreignKey As IForeignKey, entityType As IEntityType) As IEnumerable(Of INavigation)" />
        <MemberSignature Language="F#" Value="static member FindNavigationsFromInHierarchy : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsFromInHierarchy (foreignKey, entityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::INavigation ^&gt; ^ FindNavigationsFromInHierarchy(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsFromInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="FindNavigationsTo">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; FindNavigationsTo (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; FindNavigationsTo(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsTo(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindNavigationsTo (foreignKey As IForeignKey, entityType As IEntityType) As IEnumerable(Of INavigation)" />
        <MemberSignature Language="F#" Value="static member FindNavigationsTo : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsTo (foreignKey, entityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::INavigation ^&gt; ^ FindNavigationsTo(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsTo(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="FindNavigationsToInHierarchy">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; FindNavigationsToInHierarchy (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; FindNavigationsToInHierarchy(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsToInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindNavigationsToInHierarchy (foreignKey As IForeignKey, entityType As IEntityType) As IEnumerable(Of INavigation)" />
        <MemberSignature Language="F#" Value="static member FindNavigationsToInHierarchy : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsToInHierarchy (foreignKey, entityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::INavigation ^&gt; ^ FindNavigationsToInHierarchy(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.FindNavigationsToInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="GetDependentKeyValueFactory&lt;TKey&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory&lt;TKey&gt; GetDependentKeyValueFactory&lt;TKey&gt; (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory`1&lt;!!TKey&gt; GetDependentKeyValueFactory&lt;TKey&gt;(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.GetDependentKeyValueFactory``1(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDependentKeyValueFactory(Of TKey) (foreignKey As IForeignKey) As IDependentKeyValueFactory(Of TKey)" />
        <MemberSignature Language="F#" Value="static member GetDependentKeyValueFactory : Microsoft.EntityFrameworkCore.Metadata.IForeignKey -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory&lt;'Key&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.GetDependentKeyValueFactory foreignKey" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IDependentKeyValueFactory&lt;TKey&gt; ^ GetDependentKeyValueFactory(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IDependentKeyValueFactory&lt;TKey&gt; ^ GetDependentKeyValueFactory(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory&lt;TKey&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="foreignKey">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.GetDependentKeyValueFactory``1(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="GetNavigations">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; GetNavigations (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; GetNavigations(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function GetNavigations (foreignKey As IForeignKey) As IEnumerable(Of INavigation)" />
        <MemberSignature Language="F#" Value="static member GetNavigations : Microsoft.EntityFrameworkCore.Metadata.IForeignKey -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.GetNavigations foreignKey" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::INavigation ^&gt; ^ GetNavigations(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="IsIntraHierarchical">
        <MemberSignature Language="C#" Value="public static bool IsIntraHierarchical (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIntraHierarchical(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.IsIntraHierarchical(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsIntraHierarchical (foreignKey As IForeignKey) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsIntraHierarchical : Microsoft.EntityFrameworkCore.Metadata.IForeignKey -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.IsIntraHierarchical foreignKey" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsIntraHierarchical(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsIntraHierarchical(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.IsIntraHierarchical(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="IsSelfPrimaryKeyReferencing">
        <MemberSignature Language="C#" Value="public static bool IsSelfPrimaryKeyReferencing (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSelfPrimaryKeyReferencing(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.IsSelfPrimaryKeyReferencing(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsSelfPrimaryKeyReferencing (foreignKey As IForeignKey) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsSelfPrimaryKeyReferencing : Microsoft.EntityFrameworkCore.Metadata.IForeignKey -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.IsSelfPrimaryKeyReferencing foreignKey" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsSelfPrimaryKeyReferencing(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsSelfPrimaryKeyReferencing(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.IsSelfPrimaryKeyReferencing(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="IsSelfReferencing">
        <MemberSignature Language="C#" Value="public static bool IsSelfReferencing (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSelfReferencing(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.IsSelfReferencing(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsSelfReferencing (foreignKey As IForeignKey) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsSelfReferencing : Microsoft.EntityFrameworkCore.Metadata.IForeignKey -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.IsSelfReferencing foreignKey" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsSelfReferencing(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsSelfReferencing(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.IsSelfReferencing(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="ResolveEntityTypeInHierarchy">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityType ResolveEntityTypeInHierarchy (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityType ResolveEntityTypeInHierarchy(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ResolveEntityTypeInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ResolveEntityTypeInHierarchy (foreignKey As IForeignKey, entityType As IEntityType) As IEntityType" />
        <MemberSignature Language="F#" Value="static member ResolveEntityTypeInHierarchy : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ResolveEntityTypeInHierarchy (foreignKey, entityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ ResolveEntityTypeInHierarchy(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ ResolveEntityTypeInHierarchy(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ResolveEntityTypeInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="ResolveOtherEntityType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityType ResolveOtherEntityType (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityType ResolveOtherEntityType(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ResolveOtherEntityType(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ResolveOtherEntityType (foreignKey As IForeignKey, entityType As IEntityType) As IEntityType" />
        <MemberSignature Language="F#" Value="static member ResolveOtherEntityType : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ResolveOtherEntityType (foreignKey, entityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ ResolveOtherEntityType(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ ResolveOtherEntityType(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ResolveOtherEntityType(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="ResolveOtherEntityTypeInHierarchy">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityType ResolveOtherEntityTypeInHierarchy (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityType ResolveOtherEntityTypeInHierarchy(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ResolveOtherEntityTypeInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ResolveOtherEntityTypeInHierarchy (foreignKey As IForeignKey, entityType As IEntityType) As IEntityType" />
        <MemberSignature Language="F#" Value="static member ResolveOtherEntityTypeInHierarchy : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ResolveOtherEntityTypeInHierarchy (foreignKey, entityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ ResolveOtherEntityTypeInHierarchy(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ ResolveOtherEntityTypeInHierarchy(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ResolveOtherEntityTypeInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="ToDebugString">
        <MemberSignature Language="C#" Value="public static string ToDebugString (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, bool singleLine = true, string indent = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToDebugString(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, bool singleLine, string indent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Boolean,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDebugString (foreignKey As IForeignKey, Optional singleLine As Boolean = true, Optional indent As String = &quot;&quot;) As String" />
        <MemberSignature Language="F#" Value="static member ToDebugString : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * bool * string -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ToDebugString (foreignKey, singleLine, indent)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
          <Parameter Name="singleLine" Type="System.Boolean" />
          <Parameter Name="indent" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <param name="singleLine">To be added.</param>
          <param name="indent">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Boolean,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />
      </Targets>
      <Member MemberName="AreCompatible">
        <MemberSignature Language="C#" Value="public static bool AreCompatible (this Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Metadata.IIndex duplicateIndex, bool shouldThrow);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreCompatible(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Metadata.IIndex duplicateIndex, bool shouldThrow) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AreCompatible (index As IIndex, duplicateIndex As IIndex, shouldThrow As Boolean) As Boolean" />
        <MemberSignature Language="F#" Value="static member AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Metadata.IIndex * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.AreCompatible (index, duplicateIndex, shouldThrow)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool AreCompatible(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index, Microsoft::EntityFrameworkCore::Metadata::IIndex ^ duplicateIndex, bool shouldThrow);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool AreCompatible(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index, Microsoft::EntityFrameworkCore::Metadata::IIndex ^ duplicateIndex, bool shouldThrow);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" RefType="this" />
          <Parameter Name="duplicateIndex" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" />
          <Parameter Name="shouldThrow" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="index">To be added.</param>
          <param name="duplicateIndex">To be added.</param>
          <param name="shouldThrow">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />
      </Targets>
      <Member MemberName="AsIndex">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.Index AsIndex (this Microsoft.EntityFrameworkCore.Metadata.IIndex index, string methodName = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.Index AsIndex(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, string methodName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.AsIndex(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.String)" />
        <MemberSignature Language="F#" Value="static member AsIndex : Microsoft.EntityFrameworkCore.Metadata.IIndex * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Index" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.AsIndex (index, methodName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.Index</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" RefType="this" />
          <Parameter Name="methodName" Type="System.String">
            <Attributes>
              <Attribute>
                <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="index">To be added.</param>
          <param name="methodName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.AsIndex(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />
      </Targets>
      <Member MemberName="GetNullableValueFactory&lt;TKey&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INullableValueFactory&lt;TKey&gt; GetNullableValueFactory&lt;TKey&gt; (this Microsoft.EntityFrameworkCore.Metadata.IIndex index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INullableValueFactory`1&lt;!!TKey&gt; GetNullableValueFactory&lt;TKey&gt;(class Microsoft.EntityFrameworkCore.Metadata.IIndex index) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.GetNullableValueFactory``1(Microsoft.EntityFrameworkCore.Metadata.IIndex)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetNullableValueFactory(Of TKey) (index As IIndex) As INullableValueFactory(Of TKey)" />
        <MemberSignature Language="F#" Value="static member GetNullableValueFactory : Microsoft.EntityFrameworkCore.Metadata.IIndex -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INullableValueFactory&lt;'Key&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.GetNullableValueFactory index" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ChangeTracking::Internal::INullableValueFactory&lt;TKey&gt; ^ GetNullableValueFactory(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ChangeTracking::Internal::INullableValueFactory&lt;TKey&gt; ^ GetNullableValueFactory(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INullableValueFactory&lt;TKey&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="index">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.GetNullableValueFactory``1(Microsoft.EntityFrameworkCore.Metadata.IIndex)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />
      </Targets>
      <Member MemberName="ToDebugString">
        <MemberSignature Language="C#" Value="public static string ToDebugString (this Microsoft.EntityFrameworkCore.Metadata.IIndex index, bool singleLine = true, string indent = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToDebugString(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, bool singleLine, string indent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Boolean,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDebugString (index As IIndex, Optional singleLine As Boolean = true, Optional indent As String = &quot;&quot;) As String" />
        <MemberSignature Language="F#" Value="static member ToDebugString : Microsoft.EntityFrameworkCore.Metadata.IIndex * bool * string -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.ToDebugString (index, singleLine, indent)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" RefType="this" />
          <Parameter Name="singleLine" Type="System.Boolean" />
          <Parameter Name="indent" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="index">To be added.</param>
          <param name="singleLine">To be added.</param>
          <param name="indent">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Boolean,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />
      </Targets>
      <Member MemberName="AsKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.Key AsKey (this Microsoft.EntityFrameworkCore.Metadata.IKey key, string methodName = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.Key AsKey(class Microsoft.EntityFrameworkCore.Metadata.IKey key, string methodName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.AsKey(Microsoft.EntityFrameworkCore.Metadata.IKey,System.String)" />
        <MemberSignature Language="F#" Value="static member AsKey : Microsoft.EntityFrameworkCore.Metadata.IKey * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.AsKey (key, methodName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.Key</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" RefType="this" />
          <Parameter Name="methodName" Type="System.String">
            <Attributes>
              <Attribute>
                <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="key">To be added.</param>
          <param name="methodName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.AsKey(Microsoft.EntityFrameworkCore.Metadata.IKey,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />
      </Targets>
      <Member MemberName="GetIdentityMapFactory">
        <MemberSignature Language="C#" Value="public static Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap&gt; GetIdentityMapFactory (this Microsoft.EntityFrameworkCore.Metadata.IKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap&gt; GetIdentityMapFactory(class Microsoft.EntityFrameworkCore.Metadata.IKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.GetIdentityMapFactory(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetIdentityMapFactory (key As IKey) As Func(Of IIdentityMap)" />
        <MemberSignature Language="F#" Value="static member GetIdentityMapFactory : Microsoft.EntityFrameworkCore.Metadata.IKey -&gt; Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.GetIdentityMapFactory key" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Func&lt;Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IIdentityMap ^&gt; ^ GetIdentityMapFactory(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.GetIdentityMapFactory(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />
      </Targets>
      <Member MemberName="GetPrincipalKeyValueFactory&lt;TKey&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory&lt;TKey&gt; GetPrincipalKeyValueFactory&lt;TKey&gt; (this Microsoft.EntityFrameworkCore.Metadata.IKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1&lt;!!TKey&gt; GetPrincipalKeyValueFactory&lt;TKey&gt;(class Microsoft.EntityFrameworkCore.Metadata.IKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.GetPrincipalKeyValueFactory``1(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPrincipalKeyValueFactory(Of TKey) (key As IKey) As IPrincipalKeyValueFactory(Of TKey)" />
        <MemberSignature Language="F#" Value="static member GetPrincipalKeyValueFactory : Microsoft.EntityFrameworkCore.Metadata.IKey -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory&lt;'Key&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.GetPrincipalKeyValueFactory key" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IPrincipalKeyValueFactory&lt;TKey&gt; ^ GetPrincipalKeyValueFactory(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IPrincipalKeyValueFactory&lt;TKey&gt; ^ GetPrincipalKeyValueFactory(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory&lt;TKey&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="key">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.GetPrincipalKeyValueFactory``1(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />
      </Targets>
      <Member MemberName="GetWeakReferenceIdentityMapFactory">
        <MemberSignature Language="C#" Value="public static Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IWeakReferenceIdentityMap&gt; GetWeakReferenceIdentityMapFactory (this Microsoft.EntityFrameworkCore.Metadata.IKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`1&lt;class Microsoft.EntityFrameworkCore.Query.Internal.IWeakReferenceIdentityMap&gt; GetWeakReferenceIdentityMapFactory(class Microsoft.EntityFrameworkCore.Metadata.IKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.GetWeakReferenceIdentityMapFactory(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetWeakReferenceIdentityMapFactory (key As IKey) As Func(Of IWeakReferenceIdentityMap)" />
        <MemberSignature Language="F#" Value="static member GetWeakReferenceIdentityMapFactory : Microsoft.EntityFrameworkCore.Metadata.IKey -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IWeakReferenceIdentityMap&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.GetWeakReferenceIdentityMapFactory key" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Func&lt;Microsoft::EntityFrameworkCore::Query::Internal::IWeakReferenceIdentityMap ^&gt; ^ GetWeakReferenceIdentityMapFactory(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IWeakReferenceIdentityMap&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.GetWeakReferenceIdentityMapFactory(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />
      </Targets>
      <Member MemberName="IndexOf">
        <MemberSignature Language="C#" Value="public static int IndexOf (this Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.IndexOf(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf (key As IKey, property As IProperty) As Integer" />
        <MemberSignature Language="F#" Value="static member IndexOf : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.IndexOf (key, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="key">To be added.</param>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.IndexOf(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />
      </Targets>
      <Member MemberName="IsPrimaryKey">
        <MemberSignature Language="C#" Value="public static bool IsPrimaryKey (this Microsoft.EntityFrameworkCore.Metadata.IKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.IsPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsPrimaryKey (key As IKey) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IKey -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.IsPrimaryKey key" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.IsPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />
      </Targets>
      <Member MemberName="ToDebugString">
        <MemberSignature Language="C#" Value="public static string ToDebugString (this Microsoft.EntityFrameworkCore.Metadata.IKey key, bool singleLine = true, string indent = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToDebugString(class Microsoft.EntityFrameworkCore.Metadata.IKey key, bool singleLine, string indent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Boolean,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDebugString (key As IKey, Optional singleLine As Boolean = true, Optional indent As String = &quot;&quot;) As String" />
        <MemberSignature Language="F#" Value="static member ToDebugString : Microsoft.EntityFrameworkCore.Metadata.IKey * bool * string -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.ToDebugString (key, singleLine, indent)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" RefType="this" />
          <Parameter Name="singleLine" Type="System.Boolean" />
          <Parameter Name="indent" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="key">To be added.</param>
          <param name="singleLine">To be added.</param>
          <param name="indent">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Boolean,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="AsConcreteMetadataType&lt;TInterface,TConcrete&gt;">
        <MemberSignature Language="C#" Value="public static TConcrete AsConcreteMetadataType&lt;TInterface,TConcrete&gt; (this TInterface interface, string methodName) where TConcrete : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TConcrete AsConcreteMetadataType&lt;TInterface, class TConcrete&gt;(!!TInterface interface, string methodName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsConcreteMetadataType(Of TInterface, TConcrete) (interface As TInterface, methodName As String) As TConcrete" />
        <MemberSignature Language="F#" Value="static member AsConcreteMetadataType : 'Interface * string -&gt; 'Concrete (requires 'Concrete : null)" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType (interface, methodName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInterface, typename TConcrete&gt;&#xA; where TConcrete : class[System::Runtime::CompilerServices::Extension]&#xA; static TConcrete AsConcreteMetadataType(TInterface interface, System::String ^ methodName);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename TInterface, typename TConcrete&gt;&#xA; where TConcrete : class[System::Runtime::CompilerServices::Extension]&#xA; static TConcrete AsConcreteMetadataType(TInterface interface, Platform::String ^ methodName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TConcrete</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TInterface" />
          <TypeParameter Name="TConcrete">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="interface" Type="TInterface" RefType="this" />
          <Parameter Name="methodName" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TInterface">To be added.</typeparam>
          <typeparam name="TConcrete">To be added.</typeparam>
          <param name="interface">To be added.</param>
          <param name="methodName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="AsModel">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.Model AsModel (this Microsoft.EntityFrameworkCore.Metadata.IModel model, string methodName = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.Model AsModel(class Microsoft.EntityFrameworkCore.Metadata.IModel model, string methodName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.AsModel(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)" />
        <MemberSignature Language="F#" Value="static member AsModel : Microsoft.EntityFrameworkCore.Metadata.IModel * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Model" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.AsModel (model, methodName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.Model</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
          <Parameter Name="methodName" Type="System.String">
            <Attributes>
              <Attribute>
                <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="model">To be added.</param>
          <param name="methodName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.AsModel(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="GetProductVersion">
        <MemberSignature Language="C#" Value="public static string GetProductVersion (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetProductVersion(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.GetProductVersion(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetProductVersion (model As IModel) As String" />
        <MemberSignature Language="F#" Value="static member GetProductVersion : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.GetProductVersion model" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GetProductVersion(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ GetProductVersion(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.GetProductVersion(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="GetRootEntityTypes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetRootEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetRootEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.GetRootEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRootEntityTypes (model As IModel) As IEnumerable(Of IEntityType)" />
        <MemberSignature Language="F#" Value="static member GetRootEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.GetRootEntityTypes model" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IEntityType ^&gt; ^ GetRootEntityTypes(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.GetRootEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Model" />
      </Targets>
      <Member MemberName="MarkAsOwnedType">
        <MemberSignature Language="C#" Value="public static void MarkAsOwnedType (this Microsoft.EntityFrameworkCore.Metadata.Internal.Model model, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MarkAsOwnedType(class Microsoft.EntityFrameworkCore.Metadata.Internal.Model model, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.MarkAsOwnedType(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.String)" />
        <MemberSignature Language="F#" Value="static member MarkAsOwnedType : Microsoft.EntityFrameworkCore.Metadata.Internal.Model * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.MarkAsOwnedType (model, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MarkAsOwnedType(Microsoft::EntityFrameworkCore::Metadata::Internal::Model ^ model, System::String ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Model" RefType="this" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="model">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.MarkAsOwnedType(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Model" />
      </Targets>
      <Member MemberName="MarkAsOwnedType">
        <MemberSignature Language="C#" Value="public static void MarkAsOwnedType (this Microsoft.EntityFrameworkCore.Metadata.Internal.Model model, Type clrType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MarkAsOwnedType(class Microsoft.EntityFrameworkCore.Metadata.Internal.Model model, class System.Type clrType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.MarkAsOwnedType(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.Type)" />
        <MemberSignature Language="F#" Value="static member MarkAsOwnedType : Microsoft.EntityFrameworkCore.Metadata.Internal.Model * Type -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.MarkAsOwnedType (model, clrType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void MarkAsOwnedType(Microsoft::EntityFrameworkCore::Metadata::Internal::Model ^ model, Type ^ clrType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Model" RefType="this" />
          <Parameter Name="clrType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="model">To be added.</param>
          <param name="clrType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.MarkAsOwnedType(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Model" />
      </Targets>
      <Member MemberName="SetProductVersion">
        <MemberSignature Language="C#" Value="public static void SetProductVersion (this Microsoft.EntityFrameworkCore.Metadata.Internal.Model model, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProductVersion(class Microsoft.EntityFrameworkCore.Metadata.Internal.Model model, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.SetProductVersion(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.String)" />
        <MemberSignature Language="F#" Value="static member SetProductVersion : Microsoft.EntityFrameworkCore.Metadata.Internal.Model * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.SetProductVersion (model, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetProductVersion(Microsoft::EntityFrameworkCore::Metadata::Internal::Model ^ model, System::String ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Model" RefType="this" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="model">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.SetProductVersion(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="ShouldBeOwnedType">
        <MemberSignature Language="C#" Value="public static bool ShouldBeOwnedType (this Microsoft.EntityFrameworkCore.Metadata.IModel model, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ShouldBeOwnedType(class Microsoft.EntityFrameworkCore.Metadata.IModel model, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.ShouldBeOwnedType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ShouldBeOwnedType (model As IModel, value As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member ShouldBeOwnedType : Microsoft.EntityFrameworkCore.Metadata.IModel * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.ShouldBeOwnedType (model, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool ShouldBeOwnedType(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, System::String ^ value);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool ShouldBeOwnedType(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Platform::String ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="model">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.ShouldBeOwnedType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="ShouldBeOwnedType">
        <MemberSignature Language="C#" Value="public static bool ShouldBeOwnedType (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type clrType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ShouldBeOwnedType(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type clrType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.ShouldBeOwnedType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ShouldBeOwnedType (model As IModel, clrType As Type) As Boolean" />
        <MemberSignature Language="F#" Value="static member ShouldBeOwnedType : Microsoft.EntityFrameworkCore.Metadata.IModel * Type -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.ShouldBeOwnedType (model, clrType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool ShouldBeOwnedType(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Type ^ clrType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool ShouldBeOwnedType(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Platform::Type ^ clrType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
          <Parameter Name="clrType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="model">To be added.</param>
          <param name="clrType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.ShouldBeOwnedType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="ToDebugString">
        <MemberSignature Language="C#" Value="public static string ToDebugString (this Microsoft.EntityFrameworkCore.Metadata.IModel model, string indent = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToDebugString(class Microsoft.EntityFrameworkCore.Metadata.IModel model, string indent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDebugString (model As IModel, Optional indent As String = &quot;&quot;) As String" />
        <MemberSignature Language="F#" Value="static member ToDebugString : Microsoft.EntityFrameworkCore.Metadata.IModel * string -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.ToDebugString (model, indent)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
          <Parameter Name="indent" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="model">To be added.</param>
          <param name="indent">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Model" />
      </Targets>
      <Member MemberName="UnmarkAsOwnedType">
        <MemberSignature Language="C#" Value="public static void UnmarkAsOwnedType (this Microsoft.EntityFrameworkCore.Metadata.Internal.Model model, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnmarkAsOwnedType(class Microsoft.EntityFrameworkCore.Metadata.Internal.Model model, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.UnmarkAsOwnedType(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.String)" />
        <MemberSignature Language="F#" Value="static member UnmarkAsOwnedType : Microsoft.EntityFrameworkCore.Metadata.Internal.Model * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.UnmarkAsOwnedType (model, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void UnmarkAsOwnedType(Microsoft::EntityFrameworkCore::Metadata::Internal::Model ^ model, System::String ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Model" RefType="this" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="model">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.UnmarkAsOwnedType(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Model" />
      </Targets>
      <Member MemberName="UnmarkAsOwnedType">
        <MemberSignature Language="C#" Value="public static void UnmarkAsOwnedType (this Microsoft.EntityFrameworkCore.Metadata.Internal.Model model, Type clrType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnmarkAsOwnedType(class Microsoft.EntityFrameworkCore.Metadata.Internal.Model model, class System.Type clrType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.UnmarkAsOwnedType(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.Type)" />
        <MemberSignature Language="F#" Value="static member UnmarkAsOwnedType : Microsoft.EntityFrameworkCore.Metadata.Internal.Model * Type -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.UnmarkAsOwnedType (model, clrType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void UnmarkAsOwnedType(Microsoft::EntityFrameworkCore::Metadata::Internal::Model ^ model, Type ^ clrType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Model" RefType="this" />
          <Parameter Name="clrType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="model">To be added.</param>
          <param name="clrType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions.UnmarkAsOwnedType(Microsoft.EntityFrameworkCore.Metadata.Internal.Model,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="AddData">
        <MemberSignature Language="C#" Value="public static void AddData (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, params object[] data);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddData(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, object[] data) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.AddData(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Object[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddData (entityType As IMutableEntityType, ParamArray data As Object())" />
        <MemberSignature Language="F#" Value="static member AddData : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * obj[] -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.AddData (entityType, data)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void AddData(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, ... cli::array &lt;System::Object ^&gt; ^ data);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="data" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="data">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.AddData(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetDeclaredForeignKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetDeclaredForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetDeclaredForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.GetDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredForeignKeys (entityType As IMutableEntityType) As IEnumerable(Of IMutableForeignKey)" />
        <MemberSignature Language="F#" Value="static member GetDeclaredForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.GetDeclaredForeignKeys entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^&gt; ^ GetDeclaredForeignKeys(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.GetDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetDeclaredProperties">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; GetDeclaredProperties (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; GetDeclaredProperties(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.GetDeclaredProperties(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredProperties (entityType As IMutableEntityType) As IEnumerable(Of IMutableProperty)" />
        <MemberSignature Language="F#" Value="static member GetDeclaredProperties : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.GetDeclaredProperties entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^&gt; ^ GetDeclaredProperties(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.GetDeclaredProperties(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetDerivedTypesInclusive">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetDerivedTypesInclusive (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetDerivedTypesInclusive(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.GetDerivedTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDerivedTypesInclusive (entityType As IMutableEntityType) As IEnumerable(Of IMutableEntityType)" />
        <MemberSignature Language="F#" Value="static member GetDerivedTypesInclusive : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.GetDerivedTypesInclusive entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^&gt; ^ GetDerivedTypesInclusive(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions.GetDerivedTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty" />
      </Targets>
      <Member MemberName="AsServiceProperty">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty AsServiceProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty serviceProperty, string methodName = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty AsServiceProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty serviceProperty, string methodName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableServicePropertyExtensions.AsServiceProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty,System.String)" />
        <MemberSignature Language="F#" Value="static member AsServiceProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.MutableServicePropertyExtensions.AsServiceProperty (serviceProperty, methodName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="serviceProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty" RefType="this" />
          <Parameter Name="methodName" Type="System.String">
            <Attributes>
              <Attribute>
                <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="serviceProperty">To be added.</param>
          <param name="methodName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.MutableServicePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableServicePropertyExtensions.AsServiceProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty" />
      </Targets>
      <Member MemberName="SetParameterBinding">
        <MemberSignature Language="C#" Value="public static void SetParameterBinding (this Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty serviceProperty, Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding parameterBinding);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetParameterBinding(class Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty serviceProperty, class Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding parameterBinding) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableServicePropertyExtensions.SetParameterBinding(Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty,Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetParameterBinding (serviceProperty As IMutableServiceProperty, parameterBinding As ServiceParameterBinding)" />
        <MemberSignature Language="F#" Value="static member SetParameterBinding : Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty * Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.MutableServicePropertyExtensions.SetParameterBinding (serviceProperty, parameterBinding)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetParameterBinding(Microsoft::EntityFrameworkCore::Metadata::IMutableServiceProperty ^ serviceProperty, Microsoft::EntityFrameworkCore::Metadata::Internal::ServiceParameterBinding ^ parameterBinding);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetParameterBinding(Microsoft::EntityFrameworkCore::Metadata::IMutableServiceProperty ^ serviceProperty, Microsoft::EntityFrameworkCore::Metadata::Internal::ServiceParameterBinding ^ parameterBinding);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="serviceProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty" RefType="this" />
          <Parameter Name="parameterBinding" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding" />
        </Parameters>
        <Docs>
          <param name="serviceProperty">To be added.</param>
          <param name="parameterBinding">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.MutableServicePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.MutableServicePropertyExtensions.SetParameterBinding(Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty,Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.INavigation" />
      </Targets>
      <Member MemberName="AsNavigation">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation AsNavigation (this Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, string methodName = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation AsNavigation(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, string methodName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions.AsNavigation(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.String)" />
        <MemberSignature Language="F#" Value="static member AsNavigation : Microsoft.EntityFrameworkCore.Metadata.INavigation * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions.AsNavigation (navigation, methodName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" RefType="this" />
          <Parameter Name="methodName" Type="System.String">
            <Attributes>
              <Attribute>
                <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="navigation">To be added.</param>
          <param name="methodName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions.AsNavigation(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.INavigation" />
      </Targets>
      <Member MemberName="GetCollectionAccessor">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor GetCollectionAccessor (this Microsoft.EntityFrameworkCore.Metadata.INavigation navigation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor GetCollectionAccessor(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions.GetCollectionAccessor(Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetCollectionAccessor (navigation As INavigation) As IClrCollectionAccessor" />
        <MemberSignature Language="F#" Value="static member GetCollectionAccessor : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions.GetCollectionAccessor navigation" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::IClrCollectionAccessor ^ GetCollectionAccessor(Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::IClrCollectionAccessor ^ GetCollectionAccessor(Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" RefType="this" />
        </Parameters>
        <Docs>
          <param name="navigation">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions.GetCollectionAccessor(Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.INavigation" />
      </Targets>
      <Member MemberName="ToDebugString">
        <MemberSignature Language="C#" Value="public static string ToDebugString (this Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, bool singleLine = true, string indent = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToDebugString(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, bool singleLine, string indent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Boolean,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDebugString (navigation As INavigation, Optional singleLine As Boolean = true, Optional indent As String = &quot;&quot;) As String" />
        <MemberSignature Language="F#" Value="static member ToDebugString : Microsoft.EntityFrameworkCore.Metadata.INavigation * bool * string -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions.ToDebugString (navigation, singleLine, indent)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" RefType="this" />
          <Parameter Name="singleLine" Type="System.Boolean" />
          <Parameter Name="indent" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="navigation">To be added.</param>
          <param name="singleLine">To be added.</param>
          <param name="indent">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Boolean,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="AsPropertyBase">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase AsPropertyBase (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, string methodName = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase AsPropertyBase(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, string methodName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.AsPropertyBase(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.String)" />
        <MemberSignature Language="F#" Value="static member AsPropertyBase : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.AsPropertyBase (propertyBase, methodName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
          <Parameter Name="methodName" Type="System.String">
            <Attributes>
              <Attribute>
                <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="propertyBase">To be added.</param>
          <param name="methodName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.AsPropertyBase(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="CalculateIndexes">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes CalculateIndexes (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes CalculateIndexes(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.CalculateIndexes(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CalculateIndexes (entityType As IEntityType, propertyBase As IPropertyBase) As PropertyIndexes" />
        <MemberSignature Language="F#" Value="static member CalculateIndexes : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.CalculateIndexes (entityType, propertyBase)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::PropertyIndexes ^ CalculateIndexes(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <param name="propertyBase">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.CalculateIndexes(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="GetGetter">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertyGetter GetGetter (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertyGetter GetGetter(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetGetter(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetGetter (propertyBase As IPropertyBase) As IClrPropertyGetter" />
        <MemberSignature Language="F#" Value="static member GetGetter : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertyGetter" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetGetter propertyBase" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::IClrPropertyGetter ^ GetGetter(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::IClrPropertyGetter ^ GetGetter(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertyGetter</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyBase">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetGetter(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="GetIdentifyingMemberInfo">
        <MemberSignature Language="C#" Value="public static System.Reflection.MemberInfo GetIdentifyingMemberInfo (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MemberInfo GetIdentifyingMemberInfo(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetIdentifyingMemberInfo(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetIdentifyingMemberInfo (propertyBase As IPropertyBase) As MemberInfo" />
        <MemberSignature Language="F#" Value="static member GetIdentifyingMemberInfo : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; System.Reflection.MemberInfo" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetIdentifyingMemberInfo propertyBase" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Reflection::MemberInfo ^ GetIdentifyingMemberInfo(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.MemberInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyBase">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetIdentifyingMemberInfo(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="GetIndex">
        <MemberSignature Language="C#" Value="public static int GetIndex (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetIndex(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetIndex (property As IPropertyBase) As Integer" />
        <MemberSignature Language="F#" Value="static member GetIndex : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetIndex property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetIndex(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetIndex(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="GetMemberInfo">
        <MemberSignature Language="C#" Value="public static System.Reflection.MemberInfo GetMemberInfo (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, bool forConstruction, bool forSet);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MemberInfo GetMemberInfo(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, bool forConstruction, bool forSet) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetMemberInfo(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMemberInfo (propertyBase As IPropertyBase, forConstruction As Boolean, forSet As Boolean) As MemberInfo" />
        <MemberSignature Language="F#" Value="static member GetMemberInfo : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * bool * bool -&gt; System.Reflection.MemberInfo" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetMemberInfo (propertyBase, forConstruction, forSet)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Reflection::MemberInfo ^ GetMemberInfo(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase, bool forConstruction, bool forSet);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.MemberInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
          <Parameter Name="forConstruction" Type="System.Boolean" />
          <Parameter Name="forSet" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="propertyBase">To be added.</param>
          <param name="forConstruction">To be added.</param>
          <param name="forSet">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetMemberInfo(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="GetOriginalValueIndex">
        <MemberSignature Language="C#" Value="public static int GetOriginalValueIndex (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetOriginalValueIndex(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetOriginalValueIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOriginalValueIndex (propertyBase As IPropertyBase) As Integer" />
        <MemberSignature Language="F#" Value="static member GetOriginalValueIndex : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetOriginalValueIndex propertyBase" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetOriginalValueIndex(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetOriginalValueIndex(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyBase">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetOriginalValueIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="GetPropertyAccessors">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors GetPropertyAccessors (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors GetPropertyAccessors(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetPropertyAccessors(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccessors (propertyBase As IPropertyBase) As PropertyAccessors" />
        <MemberSignature Language="F#" Value="static member GetPropertyAccessors : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetPropertyAccessors propertyBase" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::PropertyAccessors ^ GetPropertyAccessors(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::PropertyAccessors ^ GetPropertyAccessors(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyBase">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetPropertyAccessors(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="GetPropertyIndexes">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes GetPropertyIndexes (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes GetPropertyIndexes(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetPropertyIndexes(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyIndexes (propertyBase As IPropertyBase) As PropertyIndexes" />
        <MemberSignature Language="F#" Value="static member GetPropertyIndexes : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetPropertyIndexes propertyBase" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::PropertyIndexes ^ GetPropertyIndexes(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyBase">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetPropertyIndexes(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="GetPropertyInfo">
        <MemberSignature Language="C#" Value="public static System.Reflection.PropertyInfo GetPropertyInfo (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.PropertyInfo GetPropertyInfo(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetPropertyInfo(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyInfo (propertyBase As IPropertyBase) As PropertyInfo" />
        <MemberSignature Language="F#" Value="static member GetPropertyInfo : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; System.Reflection.PropertyInfo" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetPropertyInfo propertyBase" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Reflection::PropertyInfo ^ GetPropertyInfo(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.PropertyInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyBase">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetPropertyInfo(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="GetRelationshipIndex">
        <MemberSignature Language="C#" Value="public static int GetRelationshipIndex (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetRelationshipIndex(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetRelationshipIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRelationshipIndex (propertyBase As IPropertyBase) As Integer" />
        <MemberSignature Language="F#" Value="static member GetRelationshipIndex : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetRelationshipIndex propertyBase" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetRelationshipIndex(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetRelationshipIndex(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyBase">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetRelationshipIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="GetSetter">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertySetter GetSetter (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertySetter GetSetter(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetSetter(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSetter (propertyBase As IPropertyBase) As IClrPropertySetter" />
        <MemberSignature Language="F#" Value="static member GetSetter : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertySetter" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetSetter propertyBase" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::IClrPropertySetter ^ GetSetter(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::IClrPropertySetter ^ GetSetter(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.IClrPropertySetter</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyBase">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetSetter(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="GetShadowIndex">
        <MemberSignature Language="C#" Value="public static int GetShadowIndex (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetShadowIndex(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetShadowIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetShadowIndex (property As IPropertyBase) As Integer" />
        <MemberSignature Language="F#" Value="static member GetShadowIndex : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetShadowIndex property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetShadowIndex(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetShadowIndex(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetShadowIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="GetStoreGeneratedIndex">
        <MemberSignature Language="C#" Value="public static int GetStoreGeneratedIndex (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetStoreGeneratedIndex(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetStoreGeneratedIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetStoreGeneratedIndex (propertyBase As IPropertyBase) As Integer" />
        <MemberSignature Language="F#" Value="static member GetStoreGeneratedIndex : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetStoreGeneratedIndex propertyBase" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetStoreGeneratedIndex(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetStoreGeneratedIndex(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyBase">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.GetStoreGeneratedIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="SetIndexes">
        <MemberSignature Language="C#" Value="public static void SetIndexes (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes indexes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIndexes(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes indexes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.SetIndexes(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetIndexes (propertyBase As IPropertyBase, indexes As PropertyIndexes)" />
        <MemberSignature Language="F#" Value="static member SetIndexes : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.SetIndexes (propertyBase, indexes)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetIndexes(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase, Microsoft::EntityFrameworkCore::Metadata::Internal::PropertyIndexes ^ indexes);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
          <Parameter Name="indexes" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes" />
        </Parameters>
        <Docs>
          <param name="propertyBase">To be added.</param>
          <param name="indexes">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.SetIndexes(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="TryGetMemberInfo">
        <MemberSignature Language="C#" Value="public static bool TryGetMemberInfo (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, bool forConstruction, bool forSet, out System.Reflection.MemberInfo memberInfo, out string errorMessage);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemberInfo(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, bool forConstruction, bool forSet, [out] class System.Reflection.MemberInfo&amp; memberInfo, [out] string&amp; errorMessage) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.TryGetMemberInfo(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean,System.Boolean,System.Reflection.MemberInfo@,System.String@)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryGetMemberInfo (propertyBase As IPropertyBase, forConstruction As Boolean, forSet As Boolean, ByRef memberInfo As MemberInfo, ByRef errorMessage As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member TryGetMemberInfo : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * bool * bool *  *  -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.TryGetMemberInfo (propertyBase, forConstruction, forSet, memberInfo, errorMessage)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetMemberInfo(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase, bool forConstruction, bool forSet, [Runtime::InteropServices::Out] System::Reflection::MemberInfo ^ % memberInfo, [Runtime::InteropServices::Out] System::String ^ % errorMessage);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
          <Parameter Name="forConstruction" Type="System.Boolean" />
          <Parameter Name="forSet" Type="System.Boolean" />
          <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo&amp;" RefType="out" />
          <Parameter Name="errorMessage" Type="System.String&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <param name="propertyBase">To be added.</param>
          <param name="forConstruction">To be added.</param>
          <param name="forSet">To be added.</param>
          <param name="memberInfo">To be added.</param>
          <param name="errorMessage">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.TryGetMemberInfo(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean,System.Boolean,System.Reflection.MemberInfo@,System.String@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="TrySetIndexes">
        <MemberSignature Language="C#" Value="public static void TrySetIndexes (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes indexes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TrySetIndexes(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes indexes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.TrySetIndexes(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub TrySetIndexes (propertyBase As IPropertyBase, indexes As PropertyIndexes)" />
        <MemberSignature Language="F#" Value="static member TrySetIndexes : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.TrySetIndexes (propertyBase, indexes)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void TrySetIndexes(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase, Microsoft::EntityFrameworkCore::Metadata::Internal::PropertyIndexes ^ indexes);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
          <Parameter Name="indexes" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes" />
        </Parameters>
        <Docs>
          <param name="propertyBase">To be added.</param>
          <param name="indexes">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions.TrySetIndexes(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="AsProperty">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.Property AsProperty (this Microsoft.EntityFrameworkCore.Metadata.IProperty property, string methodName = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.Property AsProperty(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, string methodName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.AsProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String)" />
        <MemberSignature Language="F#" Value="static member AsProperty : Microsoft.EntityFrameworkCore.Metadata.IProperty * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Property" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.AsProperty (property, methodName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.Property</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
          <Parameter Name="methodName" Type="System.String">
            <Attributes>
              <Attribute>
                <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <param name="methodName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.AsProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="FindMapping">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindMapping (property As IProperty) As CoreTypeMapping" />
        <MemberSignature Language="F#" Value="static member FindMapping : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindMapping property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ FindMapping(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ FindMapping(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="FindPrincipal">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IProperty FindPrincipal (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IProperty FindPrincipal(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindPrincipal(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindPrincipal (property As IProperty) As IProperty" />
        <MemberSignature Language="F#" Value="static member FindPrincipal : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindPrincipal property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IProperty ^ FindPrincipal(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IProperty ^ FindPrincipal(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindPrincipal(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="FindPrincipals">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; FindPrincipals (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; FindPrincipals(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindPrincipals(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function FindPrincipals (property As IProperty) As IEnumerable(Of IProperty)" />
        <MemberSignature Language="F#" Value="static member FindPrincipals : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindPrincipals property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IProperty ^&gt; ^ FindPrincipals(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindPrincipals(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="FindSharedTableLink">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IForeignKey FindSharedTableLink (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IForeignKey FindSharedTableLink(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindSharedTableLink(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindSharedTableLink (property As IProperty) As IForeignKey" />
        <MemberSignature Language="F#" Value="static member FindSharedTableLink : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindSharedTableLink property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ FindSharedTableLink(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ FindSharedTableLink(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IForeignKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindSharedTableLink(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="FindSharedTableRootPrimaryKeyProperty">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IProperty FindSharedTableRootPrimaryKeyProperty (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IProperty FindSharedTableRootPrimaryKeyProperty(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindSharedTableRootPrimaryKeyProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindSharedTableRootPrimaryKeyProperty (property As IProperty) As IProperty" />
        <MemberSignature Language="F#" Value="static member FindSharedTableRootPrimaryKeyProperty : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindSharedTableRootPrimaryKeyProperty property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IProperty ^ FindSharedTableRootPrimaryKeyProperty(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IProperty ^ FindSharedTableRootPrimaryKeyProperty(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindSharedTableRootPrimaryKeyProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated" />
      </Targets>
      <Member MemberName="ForAdd">
        <MemberSignature Language="C#" Value="public static bool ForAdd (this Microsoft.EntityFrameworkCore.Metadata.ValueGenerated valueGenerated);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ForAdd(valuetype Microsoft.EntityFrameworkCore.Metadata.ValueGenerated valueGenerated) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ForAdd(Microsoft.EntityFrameworkCore.Metadata.ValueGenerated)" />
        <MemberSignature Language="F#" Value="static member ForAdd : Microsoft.EntityFrameworkCore.Metadata.ValueGenerated -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ForAdd valueGenerated" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool ForAdd(Microsoft::EntityFrameworkCore::Metadata::ValueGenerated valueGenerated);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool ForAdd(Microsoft::EntityFrameworkCore::Metadata::ValueGenerated valueGenerated);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="valueGenerated" Type="Microsoft.EntityFrameworkCore.Metadata.ValueGenerated" RefType="this" />
        </Parameters>
        <Docs>
          <param name="valueGenerated">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ForAdd(Microsoft.EntityFrameworkCore.Metadata.ValueGenerated)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated" />
      </Targets>
      <Member MemberName="ForUpdate">
        <MemberSignature Language="C#" Value="public static bool ForUpdate (this Microsoft.EntityFrameworkCore.Metadata.ValueGenerated valueGenerated);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ForUpdate(valuetype Microsoft.EntityFrameworkCore.Metadata.ValueGenerated valueGenerated) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ForUpdate(Microsoft.EntityFrameworkCore.Metadata.ValueGenerated)" />
        <MemberSignature Language="F#" Value="static member ForUpdate : Microsoft.EntityFrameworkCore.Metadata.ValueGenerated -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ForUpdate valueGenerated" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool ForUpdate(Microsoft::EntityFrameworkCore::Metadata::ValueGenerated valueGenerated);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool ForUpdate(Microsoft::EntityFrameworkCore::Metadata::ValueGenerated valueGenerated);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="valueGenerated" Type="Microsoft.EntityFrameworkCore.Metadata.ValueGenerated" RefType="this" />
        </Parameters>
        <Docs>
          <param name="valueGenerated">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ForUpdate(Microsoft.EntityFrameworkCore.Metadata.ValueGenerated)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetContainingEntityTypes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetContainingEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetContainingEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetContainingEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContainingEntityTypes (property As IProperty) As IEnumerable(Of IEntityType)" />
        <MemberSignature Language="F#" Value="static member GetContainingEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetContainingEntityTypes property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IEntityType ^&gt; ^ GetContainingEntityTypes(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetContainingEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetGenerationProperty">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IProperty GetGenerationProperty (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IProperty GetGenerationProperty(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetGenerationProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetGenerationProperty (property As IProperty) As IProperty" />
        <MemberSignature Language="F#" Value="static member GetGenerationProperty : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetGenerationProperty property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IProperty ^ GetGenerationProperty(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IProperty ^ GetGenerationProperty(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetGenerationProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetOriginalValueIndex">
        <MemberSignature Language="C#" Value="public static int GetOriginalValueIndex (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetOriginalValueIndex(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetOriginalValueIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOriginalValueIndex (property As IProperty) As Integer" />
        <MemberSignature Language="F#" Value="static member GetOriginalValueIndex : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetOriginalValueIndex property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetOriginalValueIndex(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetOriginalValueIndex(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetOriginalValueIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetReferencingForeignKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; GetReferencingForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; GetReferencingForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReferencingForeignKeys (property As IProperty) As IEnumerable(Of IForeignKey)" />
        <MemberSignature Language="F#" Value="static member GetReferencingForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetReferencingForeignKeys property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^&gt; ^ GetReferencingForeignKeys(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetShadowIndex">
        <MemberSignature Language="C#" Value="public static int GetShadowIndex (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetShadowIndex(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetShadowIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetShadowIndex (property As IProperty) As Integer" />
        <MemberSignature Language="F#" Value="static member GetShadowIndex : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetShadowIndex property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetShadowIndex(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetShadowIndex(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetShadowIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="IsKeyOrForeignKey">
        <MemberSignature Language="C#" Value="public static bool IsKeyOrForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyOrForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.IsKeyOrForeignKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsKeyOrForeignKey (property As IProperty) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsKeyOrForeignKey : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.IsKeyOrForeignKey property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsKeyOrForeignKey(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsKeyOrForeignKey(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.IsKeyOrForeignKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="MayBeStoreGenerated">
        <MemberSignature Language="C#" Value="public static bool MayBeStoreGenerated (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool MayBeStoreGenerated(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.MayBeStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MayBeStoreGenerated (property As IProperty) As Boolean" />
        <MemberSignature Language="F#" Value="static member MayBeStoreGenerated : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.MayBeStoreGenerated property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool MayBeStoreGenerated(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool MayBeStoreGenerated(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.MayBeStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="RequiresOriginalValue">
        <MemberSignature Language="C#" Value="public static bool RequiresOriginalValue (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RequiresOriginalValue(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.RequiresOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RequiresOriginalValue (property As IProperty) As Boolean" />
        <MemberSignature Language="F#" Value="static member RequiresOriginalValue : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.RequiresOriginalValue property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool RequiresOriginalValue(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool RequiresOriginalValue(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.RequiresOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="RequiresValueGenerator">
        <MemberSignature Language="C#" Value="public static bool RequiresValueGenerator (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RequiresValueGenerator(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.RequiresValueGenerator(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RequiresValueGenerator (property As IProperty) As Boolean" />
        <MemberSignature Language="F#" Value="static member RequiresValueGenerator : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.RequiresValueGenerator property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool RequiresValueGenerator(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool RequiresValueGenerator(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>
                Gets a value indicating whether this property requires a <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> to generate
                values when new entities are added to the context.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.RequiresValueGenerator(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="ToDebugString">
        <MemberSignature Language="C#" Value="public static string ToDebugString (this Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool singleLine = true, string indent = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToDebugString(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool singleLine, string indent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDebugString (property As IProperty, Optional singleLine As Boolean = true, Optional indent As String = &quot;&quot;) As String" />
        <MemberSignature Language="F#" Value="static member ToDebugString : Microsoft.EntityFrameworkCore.Metadata.IProperty * bool * string -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ToDebugString (property, singleLine, indent)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
          <Parameter Name="singleLine" Type="System.Boolean" />
          <Parameter Name="indent" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <param name="singleLine">To be added.</param>
          <param name="indent">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalEntityTypeBuilderAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexBuilderAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexBuilderAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalIndexBuilderAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalIndexBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyBuilderAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyBuilderAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalKeyBuilderAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalKeyBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelBuilderAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelBuilderAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalModelBuilderAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalModelBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyBuilderAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyBuilderAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalPropertyBuilderAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalPropertyBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalForeignKeyBuilderAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalRelationshipBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="GetMaxIdentifierLength">
        <MemberSignature Language="C#" Value="public static int GetMaxIdentifierLength (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetMaxIdentifierLength(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelExtensions.GetMaxIdentifierLength(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMaxIdentifierLength (model As IModel) As Integer" />
        <MemberSignature Language="F#" Value="static member GetMaxIdentifierLength : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; int" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelExtensions.GetMaxIdentifierLength model" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetMaxIdentifierLength(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetMaxIdentifierLength(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelExtensions.GetMaxIdentifierLength(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="Scaffolding">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingEntityTypeAnnotations Scaffolding (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingEntityTypeAnnotations Scaffolding(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingMetadataExtensions.Scaffolding(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Scaffolding (entityType As IEntityType) As ScaffoldingEntityTypeAnnotations" />
        <MemberSignature Language="F#" Value="static member Scaffolding : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingEntityTypeAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingMetadataExtensions.Scaffolding entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::ScaffoldingEntityTypeAnnotations ^ Scaffolding(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingEntityTypeAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingMetadataExtensions.Scaffolding(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="Scaffolding">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelAnnotations Scaffolding (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelAnnotations Scaffolding(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingMetadataExtensions.Scaffolding(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Scaffolding (model As IModel) As ScaffoldingModelAnnotations" />
        <MemberSignature Language="F#" Value="static member Scaffolding : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingMetadataExtensions.Scaffolding model" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::ScaffoldingModelAnnotations ^ Scaffolding(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingMetadataExtensions.Scaffolding(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="Scaffolding">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingPropertyAnnotations Scaffolding (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingPropertyAnnotations Scaffolding(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingMetadataExtensions.Scaffolding(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Scaffolding (property As IProperty) As ScaffoldingPropertyAnnotations" />
        <MemberSignature Language="F#" Value="static member Scaffolding : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingPropertyAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingMetadataExtensions.Scaffolding property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::ScaffoldingPropertyAnnotations ^ Scaffolding(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingPropertyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingMetadataExtensions.Scaffolding(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IServiceProperty" />
      </Targets>
      <Member MemberName="AsServiceProperty">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty AsServiceProperty (this Microsoft.EntityFrameworkCore.Metadata.IServiceProperty serviceProperty, string methodName = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty AsServiceProperty(class Microsoft.EntityFrameworkCore.Metadata.IServiceProperty serviceProperty, string methodName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions.AsServiceProperty(Microsoft.EntityFrameworkCore.Metadata.IServiceProperty,System.String)" />
        <MemberSignature Language="F#" Value="static member AsServiceProperty : Microsoft.EntityFrameworkCore.Metadata.IServiceProperty * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions.AsServiceProperty (serviceProperty, methodName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="serviceProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IServiceProperty" RefType="this" />
          <Parameter Name="methodName" Type="System.String">
            <Attributes>
              <Attribute>
                <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="serviceProperty">To be added.</param>
          <param name="methodName">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions.AsServiceProperty(Microsoft.EntityFrameworkCore.Metadata.IServiceProperty,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IServiceProperty" />
      </Targets>
      <Member MemberName="GetParameterBinding">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding GetParameterBinding (this Microsoft.EntityFrameworkCore.Metadata.IServiceProperty serviceProperty);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding GetParameterBinding(class Microsoft.EntityFrameworkCore.Metadata.IServiceProperty serviceProperty) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions.GetParameterBinding(Microsoft.EntityFrameworkCore.Metadata.IServiceProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetParameterBinding (serviceProperty As IServiceProperty) As ServiceParameterBinding" />
        <MemberSignature Language="F#" Value="static member GetParameterBinding : Microsoft.EntityFrameworkCore.Metadata.IServiceProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions.GetParameterBinding serviceProperty" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::ServiceParameterBinding ^ GetParameterBinding(Microsoft::EntityFrameworkCore::Metadata::IServiceProperty ^ serviceProperty);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::ServiceParameterBinding ^ GetParameterBinding(Microsoft::EntityFrameworkCore::Metadata::IServiceProperty ^ serviceProperty);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="serviceProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IServiceProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="serviceProperty">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions.GetParameterBinding(Microsoft.EntityFrameworkCore.Metadata.IServiceProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IServiceProperty" />
      </Targets>
      <Member MemberName="ToDebugString">
        <MemberSignature Language="C#" Value="public static string ToDebugString (this Microsoft.EntityFrameworkCore.Metadata.IServiceProperty serviceProperty, bool singleLine = true, string indent = &quot;&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToDebugString(class Microsoft.EntityFrameworkCore.Metadata.IServiceProperty serviceProperty, bool singleLine, string indent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IServiceProperty,System.Boolean,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDebugString (serviceProperty As IServiceProperty, Optional singleLine As Boolean = true, Optional indent As String = &quot;&quot;) As String" />
        <MemberSignature Language="F#" Value="static member ToDebugString : Microsoft.EntityFrameworkCore.Metadata.IServiceProperty * bool * string -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions.ToDebugString (serviceProperty, singleLine, indent)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="serviceProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IServiceProperty" RefType="this" />
          <Parameter Name="singleLine" Type="System.Boolean" />
          <Parameter Name="indent" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="serviceProperty">To be added.</param>
          <param name="singleLine">To be added.</param>
          <param name="indent">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IServiceProperty,System.Boolean,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalEntityTypeBuilderAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexBuilderAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexBuilderAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalIndexBuilderAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalIndexBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyBuilderAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyBuilderAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalKeyBuilderAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalKeyBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelBuilderAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelBuilderAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalModelBuilderAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalModelBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyBuilderAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyBuilderAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalPropertyBuilderAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalPropertyBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalForeignKeyBuilderAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalRelationshipBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalEntityTypeBuilderAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerIndexBuilderAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerIndexBuilderAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerIndexBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::SqlServerIndexBuilderAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalIndexBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerIndexBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerKeyBuilderAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerKeyBuilderAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerKeyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::SqlServerKeyBuilderAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalKeyBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerKeyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerModelBuilderAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerModelBuilderAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerModelBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::SqlServerModelBuilderAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalModelBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerModelBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerPropertyBuilderAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerPropertyBuilderAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerPropertyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::SqlServerPropertyBuilderAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalPropertyBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerPropertyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalForeignKeyBuilderAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalRelationshipBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.ITypeBase" />
      </Targets>
      <Member MemberName="DisplayName">
        <MemberSignature Language="C#" Value="public static string DisplayName (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string DisplayName(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions.DisplayName(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DisplayName (type As ITypeBase) As String" />
        <MemberSignature Language="F#" Value="static member DisplayName : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions.DisplayName type" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ DisplayName(Microsoft::EntityFrameworkCore::Metadata::ITypeBase ^ type);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ DisplayName(Microsoft::EntityFrameworkCore::Metadata::ITypeBase ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions.DisplayName(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.ITypeBase" />
      </Targets>
      <Member MemberName="HasClrType">
        <MemberSignature Language="C#" Value="public static bool HasClrType (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasClrType(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions.HasClrType(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasClrType (type As ITypeBase) As Boolean" />
        <MemberSignature Language="F#" Value="static member HasClrType : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions.HasClrType type" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool HasClrType(Microsoft::EntityFrameworkCore::Metadata::ITypeBase ^ type);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool HasClrType(Microsoft::EntityFrameworkCore::Metadata::ITypeBase ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions.HasClrType(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.ITypeBase" />
      </Targets>
      <Member MemberName="IsAbstract">
        <MemberSignature Language="C#" Value="public static bool IsAbstract (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAbstract(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions.IsAbstract(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsAbstract (type As ITypeBase) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsAbstract : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions.IsAbstract type" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsAbstract(Microsoft::EntityFrameworkCore::Metadata::ITypeBase ^ type);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsAbstract(Microsoft::EntityFrameworkCore::Metadata::ITypeBase ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions.IsAbstract(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="IsColumnNullable">
        <MemberSignature Language="C#" Value="public static bool IsColumnNullable (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsColumnNullable(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RelationalPropertyExtensions.IsColumnNullable(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsColumnNullable (property As IProperty) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsColumnNullable : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.RelationalPropertyExtensions.IsColumnNullable property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsColumnNullable(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsColumnNullable(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.RelationalPropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.RelationalPropertyExtensions.IsColumnNullable(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="Scaffolding">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ScaffoldingModelAnnotations Scaffolding (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ScaffoldingModelAnnotations Scaffolding(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.ScaffoldingMetadataExtensions.Scaffolding(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Scaffolding (model As IModel) As ScaffoldingModelAnnotations" />
        <MemberSignature Language="F#" Value="static member Scaffolding : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ScaffoldingModelAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.ScaffoldingMetadataExtensions.Scaffolding model" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Scaffolding::Metadata::ScaffoldingModelAnnotations ^ Scaffolding(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ScaffoldingModelAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.ScaffoldingMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.ScaffoldingMetadataExtensions.Scaffolding(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="Scaffolding">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ScaffoldingPropertyAnnotations Scaffolding (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ScaffoldingPropertyAnnotations Scaffolding(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.ScaffoldingMetadataExtensions.Scaffolding(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Scaffolding (property As IProperty) As ScaffoldingPropertyAnnotations" />
        <MemberSignature Language="F#" Value="static member Scaffolding : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ScaffoldingPropertyAnnotations" Usage="Microsoft.EntityFrameworkCore.Metadata.ScaffoldingMetadataExtensions.Scaffolding property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Scaffolding::Metadata::ScaffoldingPropertyAnnotations ^ Scaffolding(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ScaffoldingPropertyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Metadata.ScaffoldingMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.Metadata.ScaffoldingMetadataExtensions.Scaffolding(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Migrations.Migration" />
      </Targets>
      <Member MemberName="GetId">
        <MemberSignature Language="C#" Value="public static string GetId (this Microsoft.EntityFrameworkCore.Migrations.Migration migration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetId(class Microsoft.EntityFrameworkCore.Migrations.Migration migration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationExtensions.GetId(Microsoft.EntityFrameworkCore.Migrations.Migration)" />
        <MemberSignature Language="F#" Value="static member GetId : Microsoft.EntityFrameworkCore.Migrations.Migration -&gt; string" Usage="Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationExtensions.GetId migration" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GetId(Microsoft::EntityFrameworkCore::Migrations::Migration ^ migration);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ GetId(Microsoft::EntityFrameworkCore::Migrations::Migration ^ migration);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="migration" Type="Microsoft.EntityFrameworkCore.Migrations.Migration" RefType="this" />
        </Parameters>
        <Docs>
          <param name="migration">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationExtensions" Member="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationExtensions.GetId(Microsoft.EntityFrameworkCore.Migrations.Migration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly" />
      </Targets>
      <Member MemberName="GetMigrationId">
        <MemberSignature Language="C#" Value="public static string GetMigrationId (this Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly assembly, string nameOrId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetMigrationId(class Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly assembly, string nameOrId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAssemblyExtensions.GetMigrationId(Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMigrationId (assembly As IMigrationsAssembly, nameOrId As String) As String" />
        <MemberSignature Language="F#" Value="static member GetMigrationId : Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly * string -&gt; string" Usage="Microsoft.EntityFrameworkCore.Migrations.MigrationsAssemblyExtensions.GetMigrationId (assembly, nameOrId)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GetMigrationId(Microsoft::EntityFrameworkCore::Migrations::IMigrationsAssembly ^ assembly, System::String ^ nameOrId);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ GetMigrationId(Microsoft::EntityFrameworkCore::Migrations::IMigrationsAssembly ^ assembly, Platform::String ^ nameOrId);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="assembly" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly" RefType="this" />
          <Parameter Name="nameOrId" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="assembly">To be added.</param>
          <param name="nameOrId">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Migrations.MigrationsAssemblyExtensions" Member="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAssemblyExtensions.GetMigrationId(Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="FindEntityType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityType FindEntityType (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityType FindEntityType(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
        <MemberSignature Language="F#" Value="static member FindEntityType : Microsoft.EntityFrameworkCore.Metadata.IModel * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType (model, type)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ FindEntityType(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Type ^ type);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ FindEntityType(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Platform::Type ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="model"> The model to find the entity type in. </param>
          <param name="type"> The type of the entity class to find the type for. </param>
          <summary>
                Gets the entity that maps the given entity class. Returns null if no entity type with the given name is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="FindEntityType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityType FindEntityType (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IEntityType definingEntityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityType FindEntityType(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type type, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IEntityType definingEntityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="F#" Value="static member FindEntityType : Microsoft.EntityFrameworkCore.Metadata.IModel * Type * string * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType (model, type, definingNavigationName, definingEntityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ FindEntityType(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Type ^ type, System::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ definingEntityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ FindEntityType(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Platform::Type ^ type, Platform::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ definingEntityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="definingNavigationName" Type="System.String" />
          <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="model"> The model to find the entity type in. </param>
          <param name="type"> The type of the entity type to find. </param>
          <param name="definingNavigationName"> The defining navigation of the entity type to find. </param>
          <param name="definingEntityType"> The defining entity type of the entity type to find. </param>
          <summary>
                Gets the entity type for the given type, defining navigation name
                and the defining entity type. Returns null if no matching entity type is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="FindRuntimeEntityType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityType FindRuntimeEntityType (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityType FindRuntimeEntityType(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.FindRuntimeEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
        <MemberSignature Language="F#" Value="static member FindRuntimeEntityType : Microsoft.EntityFrameworkCore.Metadata.IModel * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.FindRuntimeEntityType (model, type)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ FindRuntimeEntityType(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Type ^ type);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ FindRuntimeEntityType(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Platform::Type ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="model"> The model to find the entity type in. </param>
          <param name="type"> The type to find the corresponding entity type for. </param>
          <summary>
                Gets the entity that maps the given entity class, where the class may be a proxy derived from the
                actual entity type. Returns null if no entity type with the given CLR type is found
                or the entity type has a defining navigation.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.ModelExtensions.FindRuntimeEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="GetChangeTrackingStrategy">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy GetChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy GetChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetChangeTrackingStrategy (model As IModel) As ChangeTrackingStrategy" />
        <MemberSignature Language="F#" Value="static member GetChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetChangeTrackingStrategy model" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::ChangeTrackingStrategy GetChangeTrackingStrategy(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::ChangeTrackingStrategy GetChangeTrackingStrategy(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model"> The model to get the default change tracking strategy for. </param>
          <summary>
                Gets the default change tracking strategy being used for entities in the model. This strategy indicates how the
                context detects changes to properties for an instance of an entity type.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="GetEntityTypes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; GetEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IModel model, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; GetEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IModel model, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityTypes (model As IModel, name As String) As IReadOnlyCollection(Of EntityType)" />
        <MemberSignature Language="F#" Value="static member GetEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IModel * string -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes (model, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IReadOnlyCollection&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^&gt; ^ GetEntityTypes(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="model"> The model to find the entity type in. </param>
          <param name="name"> The name of the entity type to find. </param>
          <summary>
                Gets the entity types for the given name.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="GetEntityTypes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; GetEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; GetEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
        <MemberSignature Language="F#" Value="static member GetEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IModel * Type -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes (model, type)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IReadOnlyCollection&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^&gt; ^ GetEntityTypes(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Type ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="model"> The model to find the entity type in. </param>
          <param name="type"> The type of the entity type to find. </param>
          <summary>
                Gets the entity types for the given type.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="GetPropertyAccessMode">
        <MemberSignature Language="C#" Value="public static Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; GetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; GetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccessMode (model As IModel) As Nullable(Of PropertyAccessMode)" />
        <MemberSignature Language="F#" Value="static member GetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetPropertyAccessMode model" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::PropertyAccessMode&gt; GetPropertyAccessMode(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model"> The model to get the access mode for. </param>
          <summary>
            <para>
                    Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> being used for properties of entity types in this model.
                    Null indicates that the default property access mode is being used.
                </para>
            <para>
                    Note that individual entity types can override this access mode, and individual properties of
                    entity types can override the access mode set on the entity type. The value returned here will
                    be used for any property for which no override has been specified.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="HasEntityTypeWithDefiningNavigation">
        <MemberSignature Language="C#" Value="public static bool HasEntityTypeWithDefiningNavigation (this Microsoft.EntityFrameworkCore.Metadata.IModel model, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasEntityTypeWithDefiningNavigation(class Microsoft.EntityFrameworkCore.Metadata.IModel model, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.HasEntityTypeWithDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasEntityTypeWithDefiningNavigation (model As IModel, name As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member HasEntityTypeWithDefiningNavigation : Microsoft.EntityFrameworkCore.Metadata.IModel * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.HasEntityTypeWithDefiningNavigation (model, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool HasEntityTypeWithDefiningNavigation(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, System::String ^ name);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool HasEntityTypeWithDefiningNavigation(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Platform::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="model"> The model to find the entity type in. </param>
          <param name="name"> The name used to find an entity type with a defining navigation. </param>
          <summary>
                Gets a value indicating whether the corresponding entity type has a defining navigation.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.ModelExtensions.HasEntityTypeWithDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="HasEntityTypeWithDefiningNavigation">
        <MemberSignature Language="C#" Value="public static bool HasEntityTypeWithDefiningNavigation (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasEntityTypeWithDefiningNavigation(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.HasEntityTypeWithDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
        <MemberSignature Language="F#" Value="static member HasEntityTypeWithDefiningNavigation : Microsoft.EntityFrameworkCore.Metadata.IModel * Type -&gt; bool" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.HasEntityTypeWithDefiningNavigation (model, type)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool HasEntityTypeWithDefiningNavigation(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Type ^ type);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool HasEntityTypeWithDefiningNavigation(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Platform::Type ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="model"> The model to find the entity type in. </param>
          <param name="type"> The type used to find an entity type a defining navigation. </param>
          <summary>
                Gets a value indicating whether the corresponding entity type has a defining navigation.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ModelExtensions" Member="M:Microsoft.EntityFrameworkCore.ModelExtensions.HasEntityTypeWithDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable" />
      </Targets>
      <Member MemberName="AddAnnotations">
        <MemberSignature Language="C#" Value="public static void AddAnnotations (this Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable annotatable, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddAnnotations(class Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable annotatable, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableAnnotatableExtensions.AddAnnotations(Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddAnnotations (annotatable As IMutableAnnotatable, annotations As IEnumerable(Of IAnnotation))" />
        <MemberSignature Language="F#" Value="static member AddAnnotations : Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable * seq&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableAnnotatableExtensions.AddAnnotations (annotatable, annotations)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void AddAnnotations(Microsoft::EntityFrameworkCore::Metadata::IMutableAnnotatable ^ annotatable, System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^&gt; ^ annotations);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="annotatable" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable" RefType="this" />
          <Parameter Name="annotations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" />
        </Parameters>
        <Docs>
          <param name="annotatable"> The object to add the annotations to. </param>
          <param name="annotations"> The annotations to be added. </param>
          <summary>
                Adds annotations to an object.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableAnnotatableExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableAnnotatableExtensions.AddAnnotations(Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable" />
      </Targets>
      <Member MemberName="GetOrAddAnnotation">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Infrastructure.Annotation GetOrAddAnnotation (this Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable annotatable, string annotationName, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Infrastructure.Annotation GetOrAddAnnotation(class Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable annotatable, string annotationName, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableAnnotatableExtensions.GetOrAddAnnotation(Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddAnnotation (annotatable As IMutableAnnotatable, annotationName As String, value As String) As Annotation" />
        <MemberSignature Language="F#" Value="static member GetOrAddAnnotation : Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable * string * string -&gt; Microsoft.EntityFrameworkCore.Infrastructure.Annotation" Usage="Microsoft.EntityFrameworkCore.MutableAnnotatableExtensions.GetOrAddAnnotation (annotatable, annotationName, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Infrastructure::Annotation ^ GetOrAddAnnotation(Microsoft::EntityFrameworkCore::Metadata::IMutableAnnotatable ^ annotatable, System::String ^ annotationName, System::String ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.Annotation</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="annotatable" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable" RefType="this" />
          <Parameter Name="annotationName" Type="System.String" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="annotatable"> The object to find or add the annotation to. </param>
          <param name="annotationName"> The key of the annotation to be found or added. </param>
          <param name="value"> The value to be stored in the annotation if a new one is created. </param>
          <summary>
                Gets the existing annotation with a given key, or adds a new annotation if one does not exist.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableAnnotatableExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableAnnotatableExtensions.GetOrAddAnnotation(Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="AddForeignKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey AddForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.Metadata.IMutableKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey AddForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class Microsoft.EntityFrameworkCore.Metadata.IMutableKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddForeignKey (entityType As IMutableEntityType, property As IMutableProperty, principalKey As IMutableKey, principalEntityType As IMutableEntityType) As IMutableForeignKey" />
        <MemberSignature Language="F#" Value="static member AddForeignKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Microsoft.EntityFrameworkCore.Metadata.IMutableKey * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddForeignKey (entityType, property, principalKey, principalEntityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^ AddForeignKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property, Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ principalKey, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ principalEntityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^ AddForeignKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property, Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ principalKey, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ principalEntityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
          <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableKey" />
          <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to add the foreign key to. </param>
          <param name="property"> The property that the foreign key is defined on. </param>
          <param name="principalKey"> The primary or alternate key that is referenced. </param>
          <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
          <summary>
                Adds a new relationship to this entity.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="AddIndex">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableIndex AddIndex (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableIndex AddIndex(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddIndex (entityType As IMutableEntityType, property As IMutableProperty) As IMutableIndex" />
        <MemberSignature Language="F#" Value="static member AddIndex : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndex (entityType, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableIndex ^ AddIndex(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableIndex ^ AddIndex(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableIndex</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to add the index to. </param>
          <param name="property"> The property to be indexed. </param>
          <summary>
                Adds an index to this entity.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="AddKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey AddKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey AddKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddKey (entityType As IMutableEntityType, property As IMutableProperty) As IMutableKey" />
        <MemberSignature Language="F#" Value="static member AddKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddKey (entityType, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ AddKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ AddKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to add the alternate key to. </param>
          <param name="property"> The property to use as an alternate key. </param>
          <summary>
                Adds a new alternate key to this entity type.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="AddProperty">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty AddProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.PropertyInfo propertyInfo);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty AddProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Reflection.PropertyInfo propertyInfo) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)" />
        <MemberSignature Language="F#" Value="static member AddProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.PropertyInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty (entityType, propertyInfo)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ AddProperty(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, System::Reflection::PropertyInfo ^ propertyInfo);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to add the property to. </param>
          <param name="propertyInfo"> The corresponding property in the entity class. </param>
          <summary>
                Adds a property to this entity.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="FindForeignKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey FindForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Metadata.IKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IEntityType principalEntityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey FindForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Metadata.IKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IEntityType principalEntityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindForeignKey (entityType As IMutableEntityType, property As IProperty, principalKey As IKey, principalEntityType As IEntityType) As IMutableForeignKey" />
        <MemberSignature Language="F#" Value="static member FindForeignKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKey (entityType, property, principalKey, principalEntityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^ FindForeignKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, Microsoft::EntityFrameworkCore::Metadata::IKey ^ principalKey, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ principalEntityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^ FindForeignKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, Microsoft::EntityFrameworkCore::Metadata::IKey ^ principalKey, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ principalEntityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
          <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" />
          <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the foreign keys on. </param>
          <param name="property"> The property that the foreign key is defined on. </param>
          <param name="principalKey"> The primary or alternate key that is referenced. </param>
          <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
          <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key. Returns null
                if no foreign key is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="FindForeignKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; FindForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; FindForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindForeignKeys (entityType As IMutableEntityType, property As IProperty) As IEnumerable(Of IMutableForeignKey)" />
        <MemberSignature Language="F#" Value="static member FindForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys (entityType, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^&gt; ^ FindForeignKeys(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the foreign keys on. </param>
          <param name="property"> The property to find the foreign keys on. </param>
          <summary>
                Gets the foreign keys defined on the given property. Only foreign keys that are defined on exactly the specified
                property are returned. Composite foreign keys that include the specified property are not returned.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="FindForeignKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; FindForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; FindForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindForeignKeys (entityType As IMutableEntityType, properties As IReadOnlyList(Of IProperty)) As IEnumerable(Of IMutableForeignKey)" />
        <MemberSignature Language="F#" Value="static member FindForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys (entityType, properties)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^&gt; ^ FindForeignKeys(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Metadata::IProperty ^&gt; ^ properties);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the foreign keys on. </param>
          <param name="properties"> The properties to find the foreign keys on. </param>
          <summary>
                Gets the foreign keys defined on the given properties. Only foreign keys that are defined on exactly the specified
                set of properties are returned.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="FindIndex">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableIndex FindIndex (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableIndex FindIndex(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIndex (entityType As IMutableEntityType, property As IProperty) As IMutableIndex" />
        <MemberSignature Language="F#" Value="static member FindIndex : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindIndex (entityType, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableIndex ^ FindIndex(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableIndex ^ FindIndex(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableIndex</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the index on. </param>
          <param name="property"> The property to find the index on. </param>
          <summary>
                Gets the index defined on the given property. Returns null if no index is defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="FindKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey FindKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey FindKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindKey (entityType As IMutableEntityType, property As IProperty) As IMutableKey" />
        <MemberSignature Language="F#" Value="static member FindKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindKey (entityType, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ FindKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ FindKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the key on. </param>
          <param name="property"> The property that the key is defined on. </param>
          <summary>
                Gets the primary or alternate key that is defined on the given property. Returns null if no key is defined
                for the given property.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="FindNavigation">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindNavigation (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.PropertyInfo propertyInfo);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindNavigation(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Reflection.PropertyInfo propertyInfo) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)" />
        <MemberSignature Language="F#" Value="static member FindNavigation : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.PropertyInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation (entityType, propertyInfo)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableNavigation ^ FindNavigation(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, System::Reflection::PropertyInfo ^ propertyInfo);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the navigation property on. </param>
          <param name="propertyInfo"> The navigation property on the entity class. </param>
          <summary>
                Gets a navigation property on the given entity type. Returns null if no navigation property is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="FindNavigation">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindNavigation (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindNavigation(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindNavigation (entityType As IMutableEntityType, name As String) As IMutableNavigation" />
        <MemberSignature Language="F#" Value="static member FindNavigation : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation (entityType, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableNavigation ^ FindNavigation(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, System::String ^ name);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableNavigation ^ FindNavigation(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Platform::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the navigation property on. </param>
          <param name="name"> The name of the navigation property on the entity class. </param>
          <summary>
                Gets a navigation property on the given entity type. Returns null if no navigation property is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="FindProperty">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty FindProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.PropertyInfo propertyInfo);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty FindProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Reflection.PropertyInfo propertyInfo) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)" />
        <MemberSignature Language="F#" Value="static member FindProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.PropertyInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperty (entityType, propertyInfo)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ FindProperty(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, System::Reflection::PropertyInfo ^ propertyInfo);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the property on. </param>
          <param name="propertyInfo"> The property on the entity class. </param>
          <summary>
            <para>
                    Gets a property on the given entity type. Returns null if no property is found.
                </para>
            <para>
                    This API only finds scalar properties and does not find navigation properties. Use
                    <see cref="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)" /> to find a navigation property.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetDerivedTypes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetDerivedTypes (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetDerivedTypes(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDerivedTypes (entityType As IMutableEntityType) As IEnumerable(Of IMutableEntityType)" />
        <MemberSignature Language="F#" Value="static member GetDerivedTypes : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypes entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^&gt; ^ GetDerivedTypes(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The base type to find types that derive from. </param>
          <summary>
                Gets all types in the model that derive from a given entity type.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetNavigations">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation&gt; GetNavigations (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation&gt; GetNavigations(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetNavigations (entityType As IMutableEntityType) As IEnumerable(Of IMutableNavigation)" />
        <MemberSignature Language="F#" Value="static member GetNavigations : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableNavigation ^&gt; ^ GetNavigations(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to get navigation properties for. </param>
          <summary>
                Gets all navigation properties on the given entity type.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetOrAddForeignKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey GetOrAddForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.Metadata.IMutableKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey GetOrAddForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class Microsoft.EntityFrameworkCore.Metadata.IMutableKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddForeignKey (entityType As IMutableEntityType, property As IMutableProperty, principalKey As IMutableKey, principalEntityType As IMutableEntityType) As IMutableForeignKey" />
        <MemberSignature Language="F#" Value="static member GetOrAddForeignKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Microsoft.EntityFrameworkCore.Metadata.IMutableKey * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey (entityType, property, principalKey, principalEntityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^ GetOrAddForeignKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property, Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ principalKey, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ principalEntityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^ GetOrAddForeignKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property, Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ principalKey, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ principalEntityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
          <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableKey" />
          <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to get or add the foreign key to. </param>
          <param name="property"> The property that the foreign key is defined on. </param>
          <param name="principalKey"> The primary or alternate key that is referenced. </param>
          <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
          <summary>
                Gets an existing relationship, or creates a new one if one is not already defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetOrAddForeignKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey GetOrAddForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties, Microsoft.EntityFrameworkCore.Metadata.IMutableKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey GetOrAddForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties, class Microsoft.EntityFrameworkCore.Metadata.IMutableKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty},Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddForeignKey (entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty), principalKey As IMutableKey, principalEntityType As IMutableEntityType) As IMutableForeignKey" />
        <MemberSignature Language="F#" Value="static member GetOrAddForeignKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.IMutableKey * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey (entityType, properties, principalKey, principalEntityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^ GetOrAddForeignKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^&gt; ^ properties, Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ principalKey, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ principalEntityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" />
          <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableKey" />
          <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to get or add the foreign key to. </param>
          <param name="properties"> The properties that the foreign key is defined on. </param>
          <param name="principalKey"> The primary or alternate key that is referenced. </param>
          <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
          <summary>
                Gets an existing relationship, or creates a new one if one is not already defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty},Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetOrAddIndex">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableIndex GetOrAddIndex (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableIndex GetOrAddIndex(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddIndex (entityType As IMutableEntityType, property As IMutableProperty) As IMutableIndex" />
        <MemberSignature Language="F#" Value="static member GetOrAddIndex : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex (entityType, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableIndex ^ GetOrAddIndex(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableIndex ^ GetOrAddIndex(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableIndex</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to get or add the index to. </param>
          <param name="property"> The property to be indexed. </param>
          <summary>
                Gets the index defined on the given property or creates a new one if one is not already defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetOrAddIndex">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableIndex GetOrAddIndex (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableIndex GetOrAddIndex(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddIndex (entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty)) As IMutableIndex" />
        <MemberSignature Language="F#" Value="static member GetOrAddIndex : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex (entityType, properties)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableIndex ^ GetOrAddIndex(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^&gt; ^ properties);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableIndex</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to get or add the index to. </param>
          <param name="properties"> The properties to be indexed. </param>
          <summary>
                Gets the index defined on the given property or creates a new one if one is not already defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetOrAddKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrAddKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrAddKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddKey (entityType As IMutableEntityType, property As IMutableProperty) As IMutableKey" />
        <MemberSignature Language="F#" Value="static member GetOrAddKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey (entityType, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ GetOrAddKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ GetOrAddKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to get or create the alternate key on. </param>
          <param name="property"> The property that is used as the alternate key. </param>
          <summary>
                Gets the existing alternate key defined on a property, or creates a new one if one is not
                already defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetOrAddKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrAddKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrAddKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddKey (entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty)) As IMutableKey" />
        <MemberSignature Language="F#" Value="static member GetOrAddKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey (entityType, properties)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ GetOrAddKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^&gt; ^ properties);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to get or create the alternate key on. </param>
          <param name="properties"> The properties that are used as the alternate key. </param>
          <summary>
                Gets the existing alternate key defined on a set of properties, or creates a new one if one is not
                already defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetOrAddProperty">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty GetOrAddProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.PropertyInfo propertyInfo);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty GetOrAddProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Reflection.PropertyInfo propertyInfo) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)" />
        <MemberSignature Language="F#" Value="static member GetOrAddProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.PropertyInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty (entityType, propertyInfo)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ GetOrAddProperty(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, System::Reflection::PropertyInfo ^ propertyInfo);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to get or add the property to. </param>
          <param name="propertyInfo"> The corresponding property in the entity class. </param>
          <summary>
                Gets the property with the given name, or creates a new one if one is not already defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetOrAddProperty">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty GetOrAddProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, Type propertyType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty GetOrAddProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, class System.Type propertyType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.Type)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddProperty (entityType As IMutableEntityType, name As String, propertyType As Type) As IMutableProperty" />
        <MemberSignature Language="F#" Value="static member GetOrAddProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty (entityType, name, propertyType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ GetOrAddProperty(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, System::String ^ name, Type ^ propertyType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ GetOrAddProperty(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Platform::String ^ name, Platform::Type ^ propertyType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="propertyType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to get or add the property to. </param>
          <param name="name"> The name of the property. </param>
          <param name="propertyType"> The type of value the property will hold. </param>
          <summary>
                Gets the property with the given name, or creates a new one if one is not already defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetOrAddProperty">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty GetOrAddProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, Type propertyType, bool shadow);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty GetOrAddProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, class System.Type propertyType, bool shadow) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.Type,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddProperty (entityType As IMutableEntityType, name As String, propertyType As Type, shadow As Boolean) As IMutableProperty" />
        <MemberSignature Language="F#" Value="static member GetOrAddProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string * Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty (entityType, name, propertyType, shadow)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ GetOrAddProperty(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, System::String ^ name, Type ^ propertyType, bool shadow);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ GetOrAddProperty(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Platform::String ^ name, Platform::Type ^ propertyType, bool shadow);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="propertyType" Type="System.Type" />
          <Parameter Name="shadow" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to get or add the property to. </param>
          <param name="name"> The name of the property. </param>
          <param name="propertyType"> The type of value the property will hold. </param>
          <param name="shadow"> Whether the property is in shadow-state. </param>
          <summary>
                Gets the property with the given name, or creates a new one if one is not already defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.Type,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetOrSetPrimaryKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrSetPrimaryKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrSetPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrSetPrimaryKey (entityType As IMutableEntityType, property As IMutableProperty) As IMutableKey" />
        <MemberSignature Language="F#" Value="static member GetOrSetPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey (entityType, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ GetOrSetPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ GetOrSetPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to get or set the key on. </param>
          <param name="property"> The property to set as the primary key if one is not already defined. </param>
          <summary>
                Gets the existing primary key of an entity, or sets it if one is not defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetOrSetPrimaryKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrSetPrimaryKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrSetPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrSetPrimaryKey (entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty)) As IMutableKey" />
        <MemberSignature Language="F#" Value="static member GetOrSetPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey (entityType, properties)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ GetOrSetPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^&gt; ^ properties);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to get or set the key on. </param>
          <param name="properties"> The properties to set as the primary key if one is not already defined. </param>
          <summary>
                Gets the existing primary key of an entity, or sets it if one is not defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="GetReferencingForeignKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetReferencingForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetReferencingForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReferencingForeignKeys (entityType As IMutableEntityType) As IEnumerable(Of IMutableForeignKey)" />
        <MemberSignature Language="F#" Value="static member GetReferencingForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetReferencingForeignKeys entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^&gt; ^ GetReferencingForeignKeys(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to find the foreign keys for. </param>
          <summary>
                Gets all foreign keys that target a given entity type (i.e. foreign keys where the given entity type
                is the principal).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="RootType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RootType (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RootType(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RootType (entityType As IMutableEntityType) As IMutableEntityType" />
        <MemberSignature Language="F#" Value="static member RootType : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RootType entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ RootType(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ RootType(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The type to find the root of. </param>
          <summary>
                Gets the root base type for a given entity type.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="SetChangeTrackingStrategy">
        <MemberSignature Language="C#" Value="public static void SetChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
        <MemberSignature Language="F#" Value="static member SetChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.ChangeTrackingStrategy -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetChangeTrackingStrategy (entityType, changeTrackingStrategy)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetChangeTrackingStrategy(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::ChangeTrackingStrategy changeTrackingStrategy);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetChangeTrackingStrategy(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::ChangeTrackingStrategy changeTrackingStrategy);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to set the change tracking strategy for. </param>
          <param name="changeTrackingStrategy"> The strategy to use. </param>
          <summary>
                Sets the change tracking strategy to use for this entity type. This strategy indicates how the
                context detects changes to properties for an instance of the entity type.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="SetNavigationAccessMode">
        <MemberSignature Language="C#" Value="public static void SetNavigationAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetNavigationAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetNavigationAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetNavigationAccessMode (entityType As IMutableEntityType, propertyAccessMode As Nullable(Of PropertyAccessMode))" />
        <MemberSignature Language="F#" Value="static member SetNavigationAccessMode : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetNavigationAccessMode (entityType, propertyAccessMode)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetNavigationAccessMode(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Nullable&lt;Microsoft::EntityFrameworkCore::PropertyAccessMode&gt; propertyAccessMode);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type for which to set the access mode. </param>
          <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" />, or null to clear the mode set.</param>
          <summary>
            <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for navigations of this entity type.
                </para>
            <para>
                    Note that individual navigations can override this access mode. The value set here will
                    be used for any navigation for which no override has been specified.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetNavigationAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="SetPrimaryKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey SetPrimaryKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey SetPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetPrimaryKey (entityType As IMutableEntityType, property As IMutableProperty) As IMutableKey" />
        <MemberSignature Language="F#" Value="static member SetPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPrimaryKey (entityType, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ SetPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ SetPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type to set the key on. </param>
          <param name="property"> The primary key property. </param>
          <summary>
                Sets the primary key for this entity.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="SetPropertyAccessMode">
        <MemberSignature Language="C#" Value="public static void SetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; propertyAccessMode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; propertyAccessMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetPropertyAccessMode (entityType As IMutableEntityType, propertyAccessMode As Nullable(Of PropertyAccessMode))" />
        <MemberSignature Language="F#" Value="static member SetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode (entityType, propertyAccessMode)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetPropertyAccessMode(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::PropertyAccessMode&gt; propertyAccessMode);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type for which to set the access mode. </param>
          <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" />, or null to clear the mode set.</param>
          <summary>
            <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> to use for properties of this entity type.
                </para>
            <para>
                    Note that individual properties can override this access mode. The value set here will
                    be used for any property for which no override has been specified.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="SetPropertyAccessMode">
        <MemberSignature Language="C#" Value="public static void SetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetPropertyAccessMode (entityType As IMutableEntityType, propertyAccessMode As Nullable(Of PropertyAccessMode))" />
        <MemberSignature Language="F#" Value="static member SetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode (entityType, propertyAccessMode)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetPropertyAccessMode(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType, Nullable&lt;Microsoft::EntityFrameworkCore::PropertyAccessMode&gt; propertyAccessMode);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
          <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity type for which to set the access mode. </param>
          <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" />, or null to clear the mode set.</param>
          <summary>
            <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this entity type.
                </para>
            <para>
                    Note that individual properties can override this access mode. The value set here will
                    be used for any property for which no override has been specified.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableKey" />
      </Targets>
      <Member MemberName="GetReferencingForeignKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetReferencingForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetReferencingForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableKeyExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReferencingForeignKeys (key As IMutableKey) As IEnumerable(Of IMutableForeignKey)" />
        <MemberSignature Language="F#" Value="static member GetReferencingForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableKey -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutableKeyExtensions.GetReferencingForeignKeys key" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^&gt; ^ GetReferencingForeignKeys(Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ key);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key"> The key to find the foreign keys for. </param>
          <summary>
                Gets all foreign keys that target a given primary or alternate key.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableKeyExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
      </Targets>
      <Member MemberName="FindEntityType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType FindEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType FindEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
        <MemberSignature Language="F#" Value="static member FindEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType (model, type)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ FindEntityType(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Type ^ type);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ FindEntityType(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Platform::Type ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="model"> The model to find the entity type in. </param>
          <param name="type"> The type of the entity class to find the type for. </param>
          <summary>
                Gets the entity that maps the given entity class. Returns null if no entity type with the given name is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableModelExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
      </Targets>
      <Member MemberName="FindEntityType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType FindEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType FindEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type type, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="F#" Value="static member FindEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type * string * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType (model, type, definingNavigationName, definingEntityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ FindEntityType(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Type ^ type, System::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ definingEntityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ FindEntityType(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Platform::Type ^ type, Platform::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ definingEntityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="definingNavigationName" Type="System.String" />
          <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
        </Parameters>
        <Docs>
          <param name="model"> The model to find the entity type in. </param>
          <param name="type"> The type of the entity type to find. </param>
          <param name="definingNavigationName"> The defining navigation of the entity type to find. </param>
          <param name="definingEntityType"> The defining entity type of the entity type to find. </param>
          <summary>
                Gets the entity type for the given name, defining navigation name
                and the defining entity type. Returns null if no matching entity type is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableModelExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
      </Targets>
      <Member MemberName="GetOrAddEntityType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType GetOrAddEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType GetOrAddEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddEntityType (model As IMutableModel, name As String) As IMutableEntityType" />
        <MemberSignature Language="F#" Value="static member GetOrAddEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType (model, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ GetOrAddEntityType(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, System::String ^ name);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ GetOrAddEntityType(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Platform::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="model"> The model to find or add the entity type to. </param>
          <param name="name"> The name of the entity type. </param>
          <summary>
                Gets the entity type with the given name or adds a new entity type if none is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableModelExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
      </Targets>
      <Member MemberName="GetOrAddEntityType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType GetOrAddEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType GetOrAddEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
        <MemberSignature Language="F#" Value="static member GetOrAddEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType (model, type)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ GetOrAddEntityType(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Type ^ type);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ GetOrAddEntityType(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Platform::Type ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="model"> The model to find or add the entity type to. </param>
          <param name="type"> The .NET type of the entity type. </param>
          <summary>
                Gets the entity type with the given .NET type or adds a new entity type if none is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableModelExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
      </Targets>
      <Member MemberName="RemoveEntityType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveEntityType (model As IMutableModel, entityType As IMutableEntityType) As IMutableEntityType" />
        <MemberSignature Language="F#" Value="static member RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType (model, entityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ RemoveEntityType(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ RemoveEntityType(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
        </Parameters>
        <Docs>
          <param name="model"> The model to remove the entity type from. </param>
          <param name="entityType"> The entity type to be removed. </param>
          <summary>
                Removes an entity type from the model.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableModelExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
      </Targets>
      <Member MemberName="RemoveEntityType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
        <MemberSignature Language="F#" Value="static member RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType (model, type)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ RemoveEntityType(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Type ^ type);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ RemoveEntityType(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Platform::Type ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="model"> The model to remove the entity type from. </param>
          <param name="type"> The entity type to be removed. </param>
          <summary>
                Removes an entity type from the model.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableModelExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
      </Targets>
      <Member MemberName="RemoveEntityType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type type, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="F#" Value="static member RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type * string * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType (model, type, definingNavigationName, definingEntityType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ RemoveEntityType(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Type ^ type, System::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ definingEntityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ RemoveEntityType(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Platform::Type ^ type, Platform::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ definingEntityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="definingNavigationName" Type="System.String" />
          <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
        </Parameters>
        <Docs>
          <param name="model"> The model to remove the entity type from. </param>
          <param name="type"> The CLR class that is used to represent instances of this entity type. </param>
          <param name="definingNavigationName"> The defining navigation. </param>
          <param name="definingEntityType"> The defining entity type. </param>
          <summary>
                Removes an entity type with a defining navigation from the model.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableModelExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
      </Targets>
      <Member MemberName="SetChangeTrackingStrategy">
        <MemberSignature Language="C#" Value="public static void SetChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.SetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
        <MemberSignature Language="F#" Value="static member SetChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Microsoft.EntityFrameworkCore.ChangeTrackingStrategy -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.SetChangeTrackingStrategy (model, changeTrackingStrategy)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetChangeTrackingStrategy(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Microsoft::EntityFrameworkCore::ChangeTrackingStrategy changeTrackingStrategy);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetChangeTrackingStrategy(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Microsoft::EntityFrameworkCore::ChangeTrackingStrategy changeTrackingStrategy);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
          <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" />
        </Parameters>
        <Docs>
          <param name="model"> The model to set the default change tracking strategy for. </param>
          <param name="changeTrackingStrategy"> The strategy to use. </param>
          <summary>
                Sets the default change tracking strategy to use for entities in the model. This strategy indicates how the
                context detects changes to properties for an instance of an entity type.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableModelExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.SetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
      </Targets>
      <Member MemberName="SetPropertyAccessMode">
        <MemberSignature Language="C#" Value="public static void SetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; propertyAccessMode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; propertyAccessMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetPropertyAccessMode (model As IMutableModel, propertyAccessMode As Nullable(Of PropertyAccessMode))" />
        <MemberSignature Language="F#" Value="static member SetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode (model, propertyAccessMode)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetPropertyAccessMode(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::PropertyAccessMode&gt; propertyAccessMode);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
          <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;" />
        </Parameters>
        <Docs>
          <param name="model"> The model to set the access mode for. </param>
          <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" />, or null to clear the mode set.</param>
          <summary>
            <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> to use for properties of all entity types
                    in this model.
                </para>
            <para>
                    Note that individual entity types can override this access mode, and individual properties of
                    entity types can override the access mode set on the entity type. The value set here will
                    be used for any property for which no override has been specified.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableModelExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
      </Targets>
      <Member MemberName="SetPropertyAccessMode">
        <MemberSignature Language="C#" Value="public static void SetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetPropertyAccessMode (model As IMutableModel, propertyAccessMode As Nullable(Of PropertyAccessMode))" />
        <MemberSignature Language="F#" Value="static member SetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode (model, propertyAccessMode)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetPropertyAccessMode(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model, Nullable&lt;Microsoft::EntityFrameworkCore::PropertyAccessMode&gt; propertyAccessMode);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
          <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" />
        </Parameters>
        <Docs>
          <param name="model"> The model to set the access mode for. </param>
          <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" />, or null to clear the mode set.</param>
          <summary>
            <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of all entity types
                    in this model.
                </para>
            <para>
                    Note that individual entity types can override this access mode, and individual properties of
                    entity types can override the access mode set on the entity type. The value set here will
                    be used for any property for which no override has been specified.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableModelExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" />
      </Targets>
      <Member MemberName="FindInverse">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindInverse (this Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation navigation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindInverse(class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation navigation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableNavigationExtensions.FindInverse(Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindInverse (navigation As IMutableNavigation) As IMutableNavigation" />
        <MemberSignature Language="F#" Value="static member FindInverse : Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" Usage="Microsoft.EntityFrameworkCore.MutableNavigationExtensions.FindInverse navigation" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableNavigation ^ FindInverse(Microsoft::EntityFrameworkCore::Metadata::IMutableNavigation ^ navigation);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableNavigation ^ FindInverse(Microsoft::EntityFrameworkCore::Metadata::IMutableNavigation ^ navigation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" RefType="this" />
        </Parameters>
        <Docs>
          <param name="navigation"> The navigation property to find the inverse of. </param>
          <summary>
                Gets the navigation property on the other end of the relationship. Returns null if
                there is no navigation property defined on the other end of the relationship.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableNavigationExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableNavigationExtensions.FindInverse(Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" />
      </Targets>
      <Member MemberName="GetTargetType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType GetTargetType (this Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation navigation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType GetTargetType(class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation navigation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableNavigationExtensions.GetTargetType(Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetTargetType (navigation As IMutableNavigation) As IMutableEntityType" />
        <MemberSignature Language="F#" Value="static member GetTargetType : Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableNavigationExtensions.GetTargetType navigation" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ GetTargetType(Microsoft::EntityFrameworkCore::Metadata::IMutableNavigation ^ navigation);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ GetTargetType(Microsoft::EntityFrameworkCore::Metadata::IMutableNavigation ^ navigation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" RefType="this" />
        </Parameters>
        <Docs>
          <param name="navigation"> The navigation property to find the target entity type of. </param>
          <summary>
                Gets the entity type that a given navigation property will hold an instance of
                (or hold instances of if it is a collection navigation).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutableNavigationExtensions" Member="M:Microsoft.EntityFrameworkCore.MutableNavigationExtensions.GetTargetType(Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase" />
      </Targets>
      <Member MemberName="SetField">
        <MemberSignature Language="C#" Value="public static void SetField (this Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase property, string fieldName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetField(class Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase property, string fieldName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions.SetField(Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetField (property As IMutablePropertyBase, fieldName As String)" />
        <MemberSignature Language="F#" Value="static member SetField : Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions.SetField (property, fieldName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetField(Microsoft::EntityFrameworkCore::Metadata::IMutablePropertyBase ^ property, System::String ^ fieldName);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetField(Microsoft::EntityFrameworkCore::Metadata::IMutablePropertyBase ^ property, Platform::String ^ fieldName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase" RefType="this" />
          <Parameter Name="fieldName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="property"> The property for which the backing field should be set. </param>
          <param name="fieldName"> The name of the field to use. </param>
          <summary>
            <para>
                    Sets the backing field to use for this property.
                </para>
            <para>
                    Backing fields are normally found by convention as described
                    here: http://go.microsoft.com/fwlink/?LinkId=723277.
                    This method is useful for setting backing fields explicitly in cases where the
                    correct field is not found by convention.
                </para>
            <para>
                    By default, the backing field, if one is found or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses. This can be changed by calling
                    <see cref="M:Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})" />.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions.SetField(Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase" />
      </Targets>
      <Member MemberName="SetPropertyAccessMode">
        <MemberSignature Language="C#" Value="public static void SetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase property, Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; propertyAccessMode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase property, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; propertyAccessMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetPropertyAccessMode (property As IMutablePropertyBase, propertyAccessMode As Nullable(Of PropertyAccessMode))" />
        <MemberSignature Language="F#" Value="static member SetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions.SetPropertyAccessMode (property, propertyAccessMode)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetPropertyAccessMode(Microsoft::EntityFrameworkCore::Metadata::IMutablePropertyBase ^ property, Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::PropertyAccessMode&gt; propertyAccessMode);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase" RefType="this" />
          <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;" />
        </Parameters>
        <Docs>
          <param name="property"> The property for which to set the access mode. </param>
          <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" />, or null to clear the mode set.</param>
          <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> to use for this property.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase" />
      </Targets>
      <Member MemberName="SetPropertyAccessMode">
        <MemberSignature Language="C#" Value="public static void SetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase property, Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase property, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetPropertyAccessMode (property As IMutablePropertyBase, propertyAccessMode As Nullable(Of PropertyAccessMode))" />
        <MemberSignature Language="F#" Value="static member SetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase * Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions.SetPropertyAccessMode (property, propertyAccessMode)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetPropertyAccessMode(Microsoft::EntityFrameworkCore::Metadata::IMutablePropertyBase ^ property, Nullable&lt;Microsoft::EntityFrameworkCore::PropertyAccessMode&gt; propertyAccessMode);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase" RefType="this" />
          <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" />
        </Parameters>
        <Docs>
          <param name="property"> The property for which to set the access mode. </param>
          <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" />, or null to clear the mode set.</param>
          <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Targets>
      <Member MemberName="GetContainingForeignKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetContainingForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetContainingForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContainingForeignKeys (property As IMutableProperty) As IEnumerable(Of IMutableForeignKey)" />
        <MemberSignature Language="F#" Value="static member GetContainingForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingForeignKeys property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^&gt; ^ GetContainingForeignKeys(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get foreign keys for. </param>
          <summary>
                Gets all foreign keys that use this property (including composite foreign keys in which this property
                is included).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutablePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Targets>
      <Member MemberName="GetContainingKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableKey&gt; GetContainingKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableKey&gt; GetContainingKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContainingKeys (property As IMutableProperty) As IEnumerable(Of IMutableKey)" />
        <MemberSignature Language="F#" Value="static member GetContainingKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingKeys property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^&gt; ^ GetContainingKeys(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get primary and alternate keys for. </param>
          <summary>
                Gets all primary or alternate keys that use this property (including composite keys in which this property
                is included).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutablePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Targets>
      <Member MemberName="GetContainingPrimaryKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetContainingPrimaryKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetContainingPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContainingPrimaryKey (property As IMutableProperty) As IMutableKey" />
        <MemberSignature Language="F#" Value="static member GetContainingPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingPrimaryKey property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ GetContainingPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ GetContainingPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get primary key for. </param>
          <summary>
                Gets the primary key that uses this property (including a composite primary key in which this property
                is included).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutablePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Targets>
      <Member MemberName="IsUnicode">
        <MemberSignature Language="C#" Value="public static void IsUnicode (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Nullable&lt;bool&gt; unicode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsUnicode(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, valuetype System.Nullable`1&lt;bool&gt; unicode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Boolean})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub IsUnicode (property As IMutableProperty, unicode As Nullable(Of Boolean))" />
        <MemberSignature Language="F#" Value="static member IsUnicode : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Nullable&lt;bool&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode (property, unicode)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void IsUnicode(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property, Nullable&lt;bool&gt; unicode);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" />
          <Parameter Name="unicode" Type="System.Nullable&lt;System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="property"> The property to set the value for. </param>
          <param name="unicode"> True if the property accepts unicode characters, false if it does not, null to clear the setting. </param>
          <summary>
                Sets a value indicating whether or not this property can persist unicode characters.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutablePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Targets>
      <Member MemberName="SetKeyValueComparer">
        <MemberSignature Language="C#" Value="public static void SetKeyValueComparer (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetKeyValueComparer(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetKeyValueComparer(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetKeyValueComparer (property As IMutableProperty, comparer As ValueComparer)" />
        <MemberSignature Language="F#" Value="static member SetKeyValueComparer : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetKeyValueComparer (property, comparer)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetKeyValueComparer(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property, Microsoft::EntityFrameworkCore::ChangeTracking::ValueComparer ^ comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" />
          <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
        </Parameters>
        <Docs>
          <param name="property"> The property. </param>
          <param name="comparer"> The comparer, or <c>null</c> to remove any previously set comparer. </param>
          <summary>
                Sets the custom <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> for this property when performing key comparisons..
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutablePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetKeyValueComparer(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Targets>
      <Member MemberName="SetMaxLength">
        <MemberSignature Language="C#" Value="public static void SetMaxLength (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Nullable&lt;int&gt; maxLength);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetMaxLength(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, valuetype System.Nullable`1&lt;int32&gt; maxLength) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetMaxLength (property As IMutableProperty, maxLength As Nullable(Of Integer))" />
        <MemberSignature Language="F#" Value="static member SetMaxLength : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Nullable&lt;int&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength (property, maxLength)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetMaxLength(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property, Nullable&lt;int&gt; maxLength);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" />
          <Parameter Name="maxLength" Type="System.Nullable&lt;System.Int32&gt;" />
        </Parameters>
        <Docs>
          <param name="property"> The property to set the maximum length of. </param>
          <param name="maxLength"> The maximum length of data that is allowed in this property. </param>
          <summary>
                Sets the maximum length of data that is allowed in this property. For example, if the property is a <see cref="T:System.String" /> '
                then this is the maximum number of characters.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutablePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Targets>
      <Member MemberName="SetProviderClrType">
        <MemberSignature Language="C#" Value="public static void SetProviderClrType (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Type providerClrType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProviderClrType(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class System.Type providerClrType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetProviderClrType(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Type)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetProviderClrType (property As IMutableProperty, providerClrType As Type)" />
        <MemberSignature Language="F#" Value="static member SetProviderClrType : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Type -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetProviderClrType (property, providerClrType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetProviderClrType(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property, Type ^ providerClrType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetProviderClrType(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property, Platform::Type ^ providerClrType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" />
          <Parameter Name="providerClrType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="property"> The property. </param>
          <param name="providerClrType"> The type to use, or <c>null</c> to remove any previously set type. </param>
          <summary>
                Sets the type that the property value will be converted to before being sent to the database provider.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutablePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetProviderClrType(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Targets>
      <Member MemberName="SetValueComparer">
        <MemberSignature Language="C#" Value="public static void SetValueComparer (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetValueComparer(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueComparer(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetValueComparer (property As IMutableProperty, comparer As ValueComparer)" />
        <MemberSignature Language="F#" Value="static member SetValueComparer : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueComparer (property, comparer)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetValueComparer(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property, Microsoft::EntityFrameworkCore::ChangeTracking::ValueComparer ^ comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" />
          <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
        </Parameters>
        <Docs>
          <param name="property"> The property. </param>
          <param name="comparer"> The comparer, or <c>null</c> to remove any previously set comparer. </param>
          <summary>
                Sets the custom <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> for this property.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutablePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueComparer(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Targets>
      <Member MemberName="SetValueConverter">
        <MemberSignature Language="C#" Value="public static void SetValueConverter (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetValueConverter(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueConverter(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetValueConverter (property As IMutableProperty, converter As ValueConverter)" />
        <MemberSignature Language="F#" Value="static member SetValueConverter : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueConverter (property, converter)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetValueConverter(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property, Microsoft::EntityFrameworkCore::Storage::ValueConversion::ValueConverter ^ converter);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetValueConverter(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property, Microsoft::EntityFrameworkCore::Storage::ValueConversion::ValueConverter ^ converter);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" />
          <Parameter Name="converter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
        </Parameters>
        <Docs>
          <param name="property"> The property. </param>
          <param name="converter"> The converter, or <c>null</c> to remove any previously set converter. </param>
          <summary>
                Sets the custom <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> for this property.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutablePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueConverter(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Targets>
      <Member MemberName="SetValueGeneratorFactory">
        <MemberSignature Language="C#" Value="public static void SetValueGeneratorFactory (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; valueGeneratorFactory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetValueGeneratorFactory(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Metadata.IEntityType, class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; valueGeneratorFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetValueGeneratorFactory (property As IMutableProperty, valueGeneratorFactory As Func(Of IProperty, IEntityType, ValueGenerator))" />
        <MemberSignature Language="F#" Value="static member SetValueGeneratorFactory : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory (property, valueGeneratorFactory)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetValueGeneratorFactory(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property, Func&lt;Microsoft::EntityFrameworkCore::Metadata::IProperty ^, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^, Microsoft::EntityFrameworkCore::ValueGeneration::ValueGenerator ^&gt; ^ valueGeneratorFactory);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" />
          <Parameter Name="valueGeneratorFactory" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;" />
        </Parameters>
        <Docs>
          <param name="property"> The property to set the value generator for. </param>
          <param name="valueGeneratorFactory">
                A factory that will be used to create the value generator, or null to
                clear any previously set factory.
            </param>
          <summary>
            <para>
                    Sets the factory to use for generating values for this property, or null to clear any previously set factory.
                </para>
            <para>
                    Setting null does not disable value generation for this property, it just clears any generator explicitly
                    configured for this property. The database provider may still have a value generator for the property type.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.MutablePropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.INavigation" />
      </Targets>
      <Member MemberName="FindInverse">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.INavigation FindInverse (this Microsoft.EntityFrameworkCore.Metadata.INavigation navigation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.INavigation FindInverse(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.NavigationExtensions.FindInverse(Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindInverse (navigation As INavigation) As INavigation" />
        <MemberSignature Language="F#" Value="static member FindInverse : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; Microsoft.EntityFrameworkCore.Metadata.INavigation" Usage="Microsoft.EntityFrameworkCore.NavigationExtensions.FindInverse navigation" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::INavigation ^ FindInverse(Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::INavigation ^ FindInverse(Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.INavigation</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" RefType="this" />
        </Parameters>
        <Docs>
          <param name="navigation"> The navigation property to find the inverse of. </param>
          <summary>
                Gets the navigation property on the other end of the relationship. Returns null if
                there is no navigation property defined on the other end of the relationship.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.NavigationExtensions" Member="M:Microsoft.EntityFrameworkCore.NavigationExtensions.FindInverse(Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.INavigation" />
      </Targets>
      <Member MemberName="GetTargetType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityType GetTargetType (this Microsoft.EntityFrameworkCore.Metadata.INavigation navigation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityType GetTargetType(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.NavigationExtensions.GetTargetType(Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetTargetType (navigation As INavigation) As IEntityType" />
        <MemberSignature Language="F#" Value="static member GetTargetType : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.NavigationExtensions.GetTargetType navigation" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ GetTargetType(Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ GetTargetType(Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" RefType="this" />
        </Parameters>
        <Docs>
          <param name="navigation"> The navigation property to find the target entity type of. </param>
          <summary>
                Gets the entity type that a given navigation property will hold an instance of
                (or hold instances of if it is a collection navigation).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.NavigationExtensions" Member="M:Microsoft.EntityFrameworkCore.NavigationExtensions.GetTargetType(Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.INavigation" />
      </Targets>
      <Member MemberName="IsCollection">
        <MemberSignature Language="C#" Value="public static bool IsCollection (this Microsoft.EntityFrameworkCore.Metadata.INavigation navigation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.NavigationExtensions.IsCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsCollection (navigation As INavigation) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsCollection : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; bool" Usage="Microsoft.EntityFrameworkCore.NavigationExtensions.IsCollection navigation" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsCollection(Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsCollection(Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" RefType="this" />
        </Parameters>
        <Docs>
          <param name="navigation"> The navigation property to check. </param>
          <summary>
                Gets a value indicating whether the given navigation property is a collection property.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.NavigationExtensions" Member="M:Microsoft.EntityFrameworkCore.NavigationExtensions.IsCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.INavigation" />
      </Targets>
      <Member MemberName="IsDependentToPrincipal">
        <MemberSignature Language="C#" Value="public static bool IsDependentToPrincipal (this Microsoft.EntityFrameworkCore.Metadata.INavigation navigation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDependentToPrincipal(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.NavigationExtensions.IsDependentToPrincipal(Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsDependentToPrincipal (navigation As INavigation) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsDependentToPrincipal : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; bool" Usage="Microsoft.EntityFrameworkCore.NavigationExtensions.IsDependentToPrincipal navigation" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsDependentToPrincipal(Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsDependentToPrincipal(Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" RefType="this" />
        </Parameters>
        <Docs>
          <param name="navigation"> The navigation property to check. </param>
          <summary>
                Gets a value indicating whether the given navigation property is the navigation property on the dependent entity
                type that points to the principal entity.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.NavigationExtensions" Member="M:Microsoft.EntityFrameworkCore.NavigationExtensions.IsDependentToPrincipal(Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Collections.ObjectModel.ObservableCollection`1" />
      </Targets>
      <Member MemberName="ToBindingList&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.ComponentModel.BindingList&lt;T&gt; ToBindingList&lt;T&gt; (this System.Collections.ObjectModel.ObservableCollection&lt;T&gt; source) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.BindingList`1&lt;!!T&gt; ToBindingList&lt;class T&gt;(class System.Collections.ObjectModel.ObservableCollection`1&lt;!!T&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ObservableCollectionExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToBindingList(Of T As Class) (source As ObservableCollection(Of T)) As BindingList(Of T)" />
        <MemberSignature Language="F#" Value="static member ToBindingList : System.Collections.ObjectModel.ObservableCollection&lt;'T (requires 'T : null)&gt; -&gt; System.ComponentModel.BindingList&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="Microsoft.EntityFrameworkCore.ObservableCollectionExtensions.ToBindingList source" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class[System::Runtime::CompilerServices::Extension]&#xA; static System::ComponentModel::BindingList&lt;T&gt; ^ ToBindingList(System::Collections::ObjectModel::ObservableCollection&lt;T&gt; ^ source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ComponentModel.BindingList&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.ObjectModel.ObservableCollection&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The element type. </typeparam>
          <param name="source"> The collection that the binding list will stay in sync with. </param>
          <summary>
                Returns an <see cref="T:System.ComponentModel.BindingList`1" /> implementation that stays in sync with the given
                <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ObservableCollectionExtensions" Member="M:Microsoft.EntityFrameworkCore.ObservableCollectionExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="GetFieldName">
        <MemberSignature Language="C#" Value="public static string GetFieldName (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFieldName(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetFieldName(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFieldName (propertyBase As IPropertyBase) As String" />
        <MemberSignature Language="F#" Value="static member GetFieldName : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; string" Usage="Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetFieldName propertyBase" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GetFieldName(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ GetFieldName(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyBase"> The property for which the backing field will be returned. </param>
          <summary>
                Gets the name of the backing field for this property, or null if the backing field
                is not known.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetFieldName(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Targets>
      <Member MemberName="GetPropertyAccessMode">
        <MemberSignature Language="C#" Value="public static Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; GetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; GetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccessMode (propertyBase As IPropertyBase) As Nullable(Of PropertyAccessMode)" />
        <MemberSignature Language="F#" Value="static member GetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;" Usage="Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetPropertyAccessMode propertyBase" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::PropertyAccessMode&gt; GetPropertyAccessMode(Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^ propertyBase);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyBase"> The property for which to get the access mode. </param>
          <summary>
            <para>
                    Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> being used for this property.
                    Null indicates that the default property access mode is being used.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetContainingForeignKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; GetContainingForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; GetContainingForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContainingForeignKeys (property As IProperty) As IEnumerable(Of IForeignKey)" />
        <MemberSignature Language="F#" Value="static member GetContainingForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingForeignKeys property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^&gt; ^ GetContainingForeignKeys(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get foreign keys for. </param>
          <summary>
                Gets all foreign keys that use this property (including composite foreign keys in which this property
                is included).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetContainingIndexes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IIndex&gt; GetContainingIndexes (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IIndex&gt; GetContainingIndexes(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingIndexes(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContainingIndexes (property As IProperty) As IEnumerable(Of IIndex)" />
        <MemberSignature Language="F#" Value="static member GetContainingIndexes : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IIndex&gt;" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingIndexes property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IIndex ^&gt; ^ GetContainingIndexes(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IIndex&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get indexes for. </param>
          <summary>
                Gets all indexes that use this property (including composite indexes in which this property
                is included).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingIndexes(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetContainingKeys">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt; GetContainingKeys (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IKey&gt; GetContainingKeys(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContainingKeys (property As IProperty) As IEnumerable(Of IKey)" />
        <MemberSignature Language="F#" Value="static member GetContainingKeys : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt;" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingKeys property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IKey ^&gt; ^ GetContainingKeys(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get primary and alternate keys for. </param>
          <summary>
                Gets all primary or alternate keys that use this property (including composite keys in which this property
                is included).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetContainingPrimaryKey">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IKey GetContainingPrimaryKey (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IKey GetContainingPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContainingPrimaryKey (property As IProperty) As IKey" />
        <MemberSignature Language="F#" Value="static member GetContainingPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IKey" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingPrimaryKey property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IKey ^ GetContainingPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IKey ^ GetContainingPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get primary key for. </param>
          <summary>
                Gets the primary key that uses this property (including a composite primary key in which this property
                is included).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetContainingPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetKeyValueComparer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetKeyValueComparer (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetKeyValueComparer(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetKeyValueComparer(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetKeyValueComparer (property As IProperty) As ValueComparer" />
        <MemberSignature Language="F#" Value="static member GetKeyValueComparer : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.GetKeyValueComparer property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ChangeTracking::ValueComparer ^ GetKeyValueComparer(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property. </param>
          <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> for this property, or null if none is set.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetKeyValueComparer(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetMaxLength">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; GetMaxLength (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; GetMaxLength(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetMaxLength(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMaxLength (property As IProperty) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member GetMaxLength : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.GetMaxLength property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; GetMaxLength(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get the maximum length of. </param>
          <summary>
                Gets the maximum length of data that is allowed in this property. For example, if the property is a <see cref="T:System.String" /> '
                then this is the maximum number of characters.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetMaxLength(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetProviderClrType">
        <MemberSignature Language="C#" Value="public static Type GetProviderClrType (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetProviderClrType(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetProviderClrType(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetProviderClrType (property As IProperty) As Type" />
        <MemberSignature Language="F#" Value="static member GetProviderClrType : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Type" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.GetProviderClrType property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Type ^ GetProviderClrType(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::Type ^ GetProviderClrType(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Type</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property. </param>
          <summary>
                Gets the type that the property value will be converted to before being sent to the database provider.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetProviderClrType(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetValueComparer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetValueComparer (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetValueComparer(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetValueComparer(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValueComparer (property As IProperty) As ValueComparer" />
        <MemberSignature Language="F#" Value="static member GetValueComparer : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.GetValueComparer property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ChangeTracking::ValueComparer ^ GetValueComparer(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property. </param>
          <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> for this property, or null if none is set.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetValueComparer(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetValueConverter">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter GetValueConverter (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter GetValueConverter(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetValueConverter(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValueConverter (property As IProperty) As ValueConverter" />
        <MemberSignature Language="F#" Value="static member GetValueConverter : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.GetValueConverter property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::ValueConversion::ValueConverter ^ GetValueConverter(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::ValueConversion::ValueConverter ^ GetValueConverter(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property. </param>
          <summary>
                Gets the custom <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> set for this property.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetValueConverter(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="GetValueGeneratorFactory">
        <MemberSignature Language="C#" Value="public static Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; GetValueGeneratorFactory (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Metadata.IEntityType, class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; GetValueGeneratorFactory(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetValueGeneratorFactory(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValueGeneratorFactory (property As IProperty) As Func(Of IProperty, IEntityType, ValueGenerator)" />
        <MemberSignature Language="F#" Value="static member GetValueGeneratorFactory : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.GetValueGeneratorFactory property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Func&lt;Microsoft::EntityFrameworkCore::Metadata::IProperty ^, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^, Microsoft::EntityFrameworkCore::ValueGeneration::ValueGenerator ^&gt; ^ GetValueGeneratorFactory(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get the value generator factory for. </param>
          <summary>
                Gets the factory that has been set to generate values for this property, if any.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetValueGeneratorFactory(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="IsForeignKey">
        <MemberSignature Language="C#" Value="public static bool IsForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsForeignKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsForeignKey (property As IProperty) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsForeignKey : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.IsForeignKey property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsForeignKey(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsForeignKey(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to check. </param>
          <summary>
                Gets a value indicating whether this property is used as a foreign key (or part of a composite foreign key).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsForeignKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="IsIndex">
        <MemberSignature Language="C#" Value="public static bool IsIndex (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIndex(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsIndex (property As IProperty) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsIndex : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.IsIndex property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsIndex(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsIndex(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to check. </param>
          <summary>
                Gets a value indicating whether this property is used as an index (or part of a composite index).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="IsKey">
        <MemberSignature Language="C#" Value="public static bool IsKey (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKey(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsKey (property As IProperty) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsKey : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.IsKey property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsKey(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsKey(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to check. </param>
          <summary>
                Gets a value indicating whether this property is used as part of a primary or alternate key
                (or part of a composite primary or alternate key).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="IsPrimaryKey">
        <MemberSignature Language="C#" Value="public static bool IsPrimaryKey (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsPrimaryKey (property As IProperty) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.IsPrimaryKey property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsPrimaryKey(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to check. </param>
          <summary>
                Gets a value indicating whether this property is used as the primary key (or part of a composite primary key).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="IsUnicode">
        <MemberSignature Language="C#" Value="public static Nullable&lt;bool&gt; IsUnicode (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;bool&gt; IsUnicode(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsUnicode(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsUnicode (property As IProperty) As Nullable(Of Boolean)" />
        <MemberSignature Language="F#" Value="static member IsUnicode : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Nullable&lt;bool&gt;" Usage="Microsoft.EntityFrameworkCore.PropertyExtensions.IsUnicode property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;bool&gt; IsUnicode(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get the unicode setting for. </param>
          <summary>
                Gets a value indicating whether or not the property can persist unicode characters.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.PropertyExtensions" Member="M:Microsoft.EntityFrameworkCore.PropertyExtensions.IsUnicode(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContext" />
      </Targets>
      <Member MemberName="CreateProxy">
        <MemberSignature Language="C#" Value="public static object CreateProxy (this Microsoft.EntityFrameworkCore.DbContext context, Type entityType, params object[] constructorArguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateProxy(class Microsoft.EntityFrameworkCore.DbContext context, class System.Type entityType, object[] constructorArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy(Microsoft.EntityFrameworkCore.DbContext,System.Type,System.Object[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateProxy (context As DbContext, entityType As Type, ParamArray constructorArguments As Object()) As Object" />
        <MemberSignature Language="F#" Value="static member CreateProxy : Microsoft.EntityFrameworkCore.DbContext * Type * obj[] -&gt; obj" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy (context, entityType, constructorArguments)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Object ^ CreateProxy(Microsoft::EntityFrameworkCore::DbContext ^ context, Type ^ entityType, ... cli::array &lt;System::Object ^&gt; ^ constructorArguments);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" RefType="this" />
          <Parameter Name="entityType" Type="System.Type" />
          <Parameter Name="constructorArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. </param>
          <param name="entityType"> The entity type for which a proxy is needed. </param>
          <param name="constructorArguments"> Arguments to pass to the entity type constructor. </param>
          <summary>
                Creates a proxy instance for an entity type if proxy creation has been turned on.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ProxiesExtensions" Member="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy(Microsoft.EntityFrameworkCore.DbContext,System.Type,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContext" />
      </Targets>
      <Member MemberName="CreateProxy&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static TEntity CreateProxy&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.DbContext context, params object[] constructorArguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEntity CreateProxy&lt;TEntity&gt;(class Microsoft.EntityFrameworkCore.DbContext context, object[] constructorArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy``1(Microsoft.EntityFrameworkCore.DbContext,System.Object[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateProxy(Of TEntity) (context As DbContext, ParamArray constructorArguments As Object()) As TEntity" />
        <MemberSignature Language="F#" Value="static member CreateProxy : Microsoft.EntityFrameworkCore.DbContext * obj[] -&gt; 'Entity" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy (context, constructorArguments)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TEntity CreateProxy(Microsoft::EntityFrameworkCore::DbContext ^ context, ... cli::array &lt;System::Object ^&gt; ^ constructorArguments);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TEntity</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" RefType="this" />
          <Parameter Name="constructorArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type for which a proxy is needed. </typeparam>
          <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. </param>
          <param name="constructorArguments"> Arguments to pass to the entity type constructor. </param>
          <summary>
                Creates a proxy instance for an entity type if proxy creation has been turned on.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ProxiesExtensions" Member="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy``1(Microsoft.EntityFrameworkCore.DbContext,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbSet`1" />
      </Targets>
      <Member MemberName="CreateProxy&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static TEntity CreateProxy&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt; set, params object[] constructorArguments) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEntity CreateProxy&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.DbSet`1&lt;!!TEntity&gt; set, object[] constructorArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Object[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateProxy(Of TEntity As Class) (set As DbSet(Of TEntity), ParamArray constructorArguments As Object()) As TEntity" />
        <MemberSignature Language="F#" Value="static member CreateProxy : Microsoft.EntityFrameworkCore.DbSet&lt;'Entity (requires 'Entity : null)&gt; * obj[] -&gt; 'Entity (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy (set, constructorArguments)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static TEntity CreateProxy(Microsoft::EntityFrameworkCore::DbSet&lt;TEntity&gt; ^ set, ... cli::array &lt;System::Object ^&gt; ^ constructorArguments);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TEntity</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="set" Type="Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="constructorArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type for which a proxy is needed. </typeparam>
          <param name="set"> The <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />. </param>
          <param name="constructorArguments"> Arguments to pass to the entity type constructor. </param>
          <summary>
                Creates a proxy instance for an entity type if proxy creation has been turned on.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ProxiesExtensions" Member="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />
      </Targets>
      <Member MemberName="UseLazyLoadingProxies">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseLazyLoadingProxies (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, bool useLazyLoadingProxies = true);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseLazyLoadingProxies(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, bool useLazyLoadingProxies) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseLazyLoadingProxies (optionsBuilder As DbContextOptionsBuilder, Optional useLazyLoadingProxies As Boolean = true) As DbContextOptionsBuilder" />
        <MemberSignature Language="F#" Value="static member UseLazyLoadingProxies : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder * bool -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies (optionsBuilder, useLazyLoadingProxies)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" RefType="this" />
          <Parameter Name="useLazyLoadingProxies" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="optionsBuilder">
                The options builder, as passed to <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                or exposed AddDbContext.
            </param>
          <param name="useLazyLoadingProxies">
            <c>True</c> to use lazy-loading proxies; false to prevent their use. </param>
          <summary>
            <para>
                    Turns on the creation of lazy-loading proxies.
                </para>
            <para>
                    Note that this requires appropriate services to be available in the EF internal service provider. Normally this
                    will happen automatically, but if the application is controlling the service provider, then a call to
                    <see cref="M:Microsoft.Extensions.DependencyInjection.ProxiesServiceCollectionExtensions.AddEntityFrameworkProxies(Microsoft.Extensions.DependencyInjection.IServiceCollection)" /> may be needed.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ProxiesExtensions" Member="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" />
      </Targets>
      <Member MemberName="UseLazyLoadingProxies&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; UseLazyLoadingProxies&lt;TContext&gt; (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; optionsBuilder, bool useLazyLoadingProxies = true) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; UseLazyLoadingProxies&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; optionsBuilder, bool useLazyLoadingProxies) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseLazyLoadingProxies(Of TContext As DbContext) (optionsBuilder As DbContextOptionsBuilder(Of TContext), Optional useLazyLoadingProxies As Boolean = true) As DbContextOptionsBuilder(Of TContext)" />
        <MemberSignature Language="F#" Value="static member UseLazyLoadingProxies : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; * bool -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies (optionsBuilder, useLazyLoadingProxies)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;" RefType="this" />
          <Parameter Name="useLazyLoadingProxies" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type. </typeparam>
          <param name="optionsBuilder">
                The options builder, as passed to <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                or exposed AddDbContext.
            </param>
          <param name="useLazyLoadingProxies">
            <c>True</c> to use lazy-loading proxies; false to prevent their use. </param>
          <summary>
            <para>
                    Turns on the creation of lazy-loading proxies.
                </para>
            <para>
                    Note that this requires appropriate services to be available in the EF internal service provider. Normally this
                    will happen automatically, but if the application is controlling the service provider, then a call to
                    <see cref="M:Microsoft.Extensions.DependencyInjection.ProxiesServiceCollectionExtensions.AddEntityFrameworkProxies(Microsoft.Extensions.DependencyInjection.IServiceCollection)" /> may be needed.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.ProxiesExtensions" Member="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Remotion.Linq.QueryModel" />
      </Targets>
      <Member MemberName="CountQuerySourceReferences">
        <MemberSignature Language="C#" Value="public static int CountQuerySourceReferences (this Remotion.Linq.QueryModel queryModel, Remotion.Linq.Clauses.IQuerySource querySource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CountQuerySourceReferences(class Remotion.Linq.QueryModel queryModel, class Remotion.Linq.Clauses.IQuerySource querySource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.CountQuerySourceReferences(Remotion.Linq.QueryModel,Remotion.Linq.Clauses.IQuerySource)" />
        <MemberSignature Language="F#" Value="static member CountQuerySourceReferences : Remotion.Linq.QueryModel * Remotion.Linq.Clauses.IQuerySource -&gt; int" Usage="Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.CountQuerySourceReferences (queryModel, querySource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int CountQuerySourceReferences(Remotion::Linq::QueryModel ^ queryModel, Remotion::Linq::Clauses::IQuerySource ^ querySource);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int CountQuerySourceReferences(Remotion::Linq::QueryModel ^ queryModel, Remotion::Linq::Clauses::IQuerySource ^ querySource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" RefType="this" />
          <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
        </Parameters>
        <Docs>
          <param name="queryModel">To be added.</param>
          <param name="querySource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.CountQuerySourceReferences(Remotion.Linq.QueryModel,Remotion.Linq.Clauses.IQuerySource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Remotion.Linq.QueryModel" />
      </Targets>
      <Member MemberName="GetOutputExpression">
        <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression GetOutputExpression (this Remotion.Linq.QueryModel queryModel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression GetOutputExpression(class Remotion.Linq.QueryModel queryModel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.GetOutputExpression(Remotion.Linq.QueryModel)" />
        <MemberSignature Language="F#" Value="static member GetOutputExpression : Remotion.Linq.QueryModel -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.GetOutputExpression queryModel" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::Expressions::Expression ^ GetOutputExpression(Remotion::Linq::QueryModel ^ queryModel);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.Expressions.Expression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="queryModel">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.GetOutputExpression(Remotion.Linq.QueryModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Remotion.Linq.QueryModel" />
      </Targets>
      <Member MemberName="PopulateQueryModelMapping">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;Remotion.Linq.QueryModel,Remotion.Linq.QueryModel&gt; PopulateQueryModelMapping (this Remotion.Linq.QueryModel queryModel, System.Collections.Generic.Dictionary&lt;Remotion.Linq.QueryModel,Remotion.Linq.QueryModel&gt; mapping);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;class Remotion.Linq.QueryModel, class Remotion.Linq.QueryModel&gt; PopulateQueryModelMapping(class Remotion.Linq.QueryModel queryModel, class System.Collections.Generic.Dictionary`2&lt;class Remotion.Linq.QueryModel, class Remotion.Linq.QueryModel&gt; mapping) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.PopulateQueryModelMapping(Remotion.Linq.QueryModel,System.Collections.Generic.Dictionary{Remotion.Linq.QueryModel,Remotion.Linq.QueryModel})" />
        <MemberSignature Language="F#" Value="static member PopulateQueryModelMapping : Remotion.Linq.QueryModel * System.Collections.Generic.Dictionary&lt;Remotion.Linq.QueryModel, Remotion.Linq.QueryModel&gt; -&gt; System.Collections.Generic.Dictionary&lt;Remotion.Linq.QueryModel, Remotion.Linq.QueryModel&gt;" Usage="Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.PopulateQueryModelMapping (queryModel, mapping)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;Remotion::Linq::QueryModel ^, Remotion::Linq::QueryModel ^&gt; ^ PopulateQueryModelMapping(Remotion::Linq::QueryModel ^ queryModel, System::Collections::Generic::Dictionary&lt;Remotion::Linq::QueryModel ^, Remotion::Linq::QueryModel ^&gt; ^ mapping);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;Remotion.Linq.QueryModel,Remotion.Linq.QueryModel&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" RefType="this" />
          <Parameter Name="mapping" Type="System.Collections.Generic.Dictionary&lt;Remotion.Linq.QueryModel,Remotion.Linq.QueryModel&gt;" />
        </Parameters>
        <Docs>
          <param name="queryModel">To be added.</param>
          <param name="mapping">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.PopulateQueryModelMapping(Remotion.Linq.QueryModel,System.Collections.Generic.Dictionary{Remotion.Linq.QueryModel,Remotion.Linq.QueryModel})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Remotion.Linq.QueryModel" />
      </Targets>
      <Member MemberName="Print">
        <MemberSignature Language="C#" Value="public static string Print (this Remotion.Linq.QueryModel queryModel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Print(class Remotion.Linq.QueryModel queryModel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.Print(Remotion.Linq.QueryModel)" />
        <MemberSignature Language="F#" Value="static member Print : Remotion.Linq.QueryModel -&gt; string" Usage="Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.Print queryModel" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ Print(Remotion::Linq::QueryModel ^ queryModel);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ Print(Remotion::Linq::QueryModel ^ queryModel);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="queryModel">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.Print(Remotion.Linq.QueryModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Remotion.Linq.QueryModel" />
      </Targets>
      <Member MemberName="Print">
        <MemberSignature Language="C#" Value="public static string Print (this Remotion.Linq.QueryModel queryModel, bool removeFormatting = false, Nullable&lt;int&gt; characterLimit = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Print(class Remotion.Linq.QueryModel queryModel, bool removeFormatting, valuetype System.Nullable`1&lt;int32&gt; characterLimit) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.Print(Remotion.Linq.QueryModel,System.Boolean,System.Nullable{System.Int32})" />
        <MemberSignature Language="F#" Value="static member Print : Remotion.Linq.QueryModel * bool * Nullable&lt;int&gt; -&gt; string" Usage="Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.Print (queryModel, removeFormatting, characterLimit)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" RefType="this" />
          <Parameter Name="removeFormatting" Type="System.Boolean" />
          <Parameter Name="characterLimit" Type="System.Nullable&lt;System.Int32&gt;" />
        </Parameters>
        <Docs>
          <param name="queryModel">To be added.</param>
          <param name="removeFormatting">To be added.</param>
          <param name="characterLimit">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.Print(Remotion.Linq.QueryModel,System.Boolean,System.Nullable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Remotion.Linq.QueryModel" />
      </Targets>
      <Member MemberName="RecreateQueryModelFromMapping">
        <MemberSignature Language="C#" Value="public static Remotion.Linq.QueryModel RecreateQueryModelFromMapping (this Remotion.Linq.QueryModel queryModel, System.Collections.Generic.Dictionary&lt;Remotion.Linq.QueryModel,Remotion.Linq.QueryModel&gt; mapping);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Remotion.Linq.QueryModel RecreateQueryModelFromMapping(class Remotion.Linq.QueryModel queryModel, class System.Collections.Generic.Dictionary`2&lt;class Remotion.Linq.QueryModel, class Remotion.Linq.QueryModel&gt; mapping) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.RecreateQueryModelFromMapping(Remotion.Linq.QueryModel,System.Collections.Generic.Dictionary{Remotion.Linq.QueryModel,Remotion.Linq.QueryModel})" />
        <MemberSignature Language="F#" Value="static member RecreateQueryModelFromMapping : Remotion.Linq.QueryModel * System.Collections.Generic.Dictionary&lt;Remotion.Linq.QueryModel, Remotion.Linq.QueryModel&gt; -&gt; Remotion.Linq.QueryModel" Usage="Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.RecreateQueryModelFromMapping (queryModel, mapping)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Remotion::Linq::QueryModel ^ RecreateQueryModelFromMapping(Remotion::Linq::QueryModel ^ queryModel, System::Collections::Generic::Dictionary&lt;Remotion::Linq::QueryModel ^, Remotion::Linq::QueryModel ^&gt; ^ mapping);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Remotion.Linq.QueryModel</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" RefType="this" />
          <Parameter Name="mapping" Type="System.Collections.Generic.Dictionary&lt;Remotion.Linq.QueryModel,Remotion.Linq.QueryModel&gt;" />
        </Parameters>
        <Docs>
          <param name="queryModel">To be added.</param>
          <param name="mapping">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelExtensions.RecreateQueryModelFromMapping(Remotion.Linq.QueryModel,System.Collections.Generic.Dictionary{Remotion.Linq.QueryModel,Remotion.Linq.QueryModel})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Remotion.Linq.Clauses.IQuerySource" />
      </Targets>
      <Member MemberName="HasGeneratedItemName">
        <MemberSignature Language="C#" Value="public static bool HasGeneratedItemName (this Remotion.Linq.Clauses.IQuerySource querySource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasGeneratedItemName(class Remotion.Linq.Clauses.IQuerySource querySource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QuerySourceExtensions.HasGeneratedItemName(Remotion.Linq.Clauses.IQuerySource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasGeneratedItemName (querySource As IQuerySource) As Boolean" />
        <MemberSignature Language="F#" Value="static member HasGeneratedItemName : Remotion.Linq.Clauses.IQuerySource -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Query.Internal.QuerySourceExtensions.HasGeneratedItemName querySource" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool HasGeneratedItemName(Remotion::Linq::Clauses::IQuerySource ^ querySource);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool HasGeneratedItemName(Remotion::Linq::Clauses::IQuerySource ^ querySource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="querySource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Query.Internal.QuerySourceExtensions" Member="M:Microsoft.EntityFrameworkCore.Query.Internal.QuerySourceExtensions.HasGeneratedItemName(Remotion.Linq.Clauses.IQuerySource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Remotion.Linq.Clauses.AdditionalFromClause" />
      </Targets>
      <Member MemberName="TryGetFlattenedGroupJoinClause">
        <MemberSignature Language="C#" Value="public static Remotion.Linq.Clauses.GroupJoinClause TryGetFlattenedGroupJoinClause (this Remotion.Linq.Clauses.AdditionalFromClause additionalFromClause);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Remotion.Linq.Clauses.GroupJoinClause TryGetFlattenedGroupJoinClause(class Remotion.Linq.Clauses.AdditionalFromClause additionalFromClause) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QuerySourceExtensions.TryGetFlattenedGroupJoinClause(Remotion.Linq.Clauses.AdditionalFromClause)" />
        <MemberSignature Language="F#" Value="static member TryGetFlattenedGroupJoinClause : Remotion.Linq.Clauses.AdditionalFromClause -&gt; Remotion.Linq.Clauses.GroupJoinClause" Usage="Microsoft.EntityFrameworkCore.Query.Internal.QuerySourceExtensions.TryGetFlattenedGroupJoinClause additionalFromClause" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Remotion::Linq::Clauses::GroupJoinClause ^ TryGetFlattenedGroupJoinClause(Remotion::Linq::Clauses::AdditionalFromClause ^ additionalFromClause);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Remotion::Linq::Clauses::GroupJoinClause ^ TryGetFlattenedGroupJoinClause(Remotion::Linq::Clauses::AdditionalFromClause ^ additionalFromClause);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Remotion.Linq.Clauses.GroupJoinClause</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="additionalFromClause" Type="Remotion.Linq.Clauses.AdditionalFromClause" RefType="this" />
        </Parameters>
        <Docs>
          <param name="additionalFromClause">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Query.Internal.QuerySourceExtensions" Member="M:Microsoft.EntityFrameworkCore.Query.Internal.QuerySourceExtensions.TryGetFlattenedGroupJoinClause(Remotion.Linq.Clauses.AdditionalFromClause)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="BeginTransaction">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction BeginTransaction (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, System.Data.IsolationLevel isolationLevel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction BeginTransaction(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel)" />
        <MemberSignature Language="F#" Value="static member BeginTransaction : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * System.Data.IsolationLevel -&gt; Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction (databaseFacade, isolationLevel)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IDbContextTransaction ^ BeginTransaction(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade, System::Data::IsolationLevel isolationLevel);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="isolationLevel">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="BeginTransactionAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt; BeginTransactionAsync (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, System.Data.IsolationLevel isolationLevel, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt; BeginTransactionAsync(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, valuetype System.Data.IsolationLevel isolationLevel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransactionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member BeginTransactionAsync : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * System.Data.IsolationLevel * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransactionAsync (databaseFacade, isolationLevel, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="isolationLevel">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransactionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="CloseConnection">
        <MemberSignature Language="C#" Value="public static void CloseConnection (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CloseConnection(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.CloseConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
        <MemberSignature Language="F#" Value="static member CloseConnection : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.CloseConnection databaseFacade" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void CloseConnection(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.CloseConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="ExecuteSqlCommand">
        <MemberSignature Language="C#" Value="public static int ExecuteSqlCommand (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, Microsoft.EntityFrameworkCore.RawSqlString sql, System.Collections.Generic.IEnumerable&lt;object&gt; parameters);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ExecuteSqlCommand(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, valuetype Microsoft.EntityFrameworkCore.RawSqlString sql, class System.Collections.Generic.IEnumerable`1&lt;object&gt; parameters) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,Microsoft.EntityFrameworkCore.RawSqlString,System.Collections.Generic.IEnumerable{System.Object})" />
        <MemberSignature Language="F#" Value="static member ExecuteSqlCommand : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * Microsoft.EntityFrameworkCore.RawSqlString * seq&lt;obj&gt; -&gt; int" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand (databaseFacade, sql, parameters)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ExecuteSqlCommand(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade, Microsoft::EntityFrameworkCore::RawSqlString sql, System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ parameters);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="sql" Type="Microsoft.EntityFrameworkCore.RawSqlString" />
          <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="sql">To be added.</param>
          <param name="parameters">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,Microsoft.EntityFrameworkCore.RawSqlString,System.Collections.Generic.IEnumerable{System.Object})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="ExecuteSqlCommand">
        <MemberSignature Language="C#" Value="public static int ExecuteSqlCommand (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, Microsoft.EntityFrameworkCore.RawSqlString sql, params object[] parameters);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ExecuteSqlCommand(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, valuetype Microsoft.EntityFrameworkCore.RawSqlString sql, object[] parameters) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,Microsoft.EntityFrameworkCore.RawSqlString,System.Object[])" />
        <MemberSignature Language="F#" Value="static member ExecuteSqlCommand : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * Microsoft.EntityFrameworkCore.RawSqlString * obj[] -&gt; int" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand (databaseFacade, sql, parameters)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ExecuteSqlCommand(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade, Microsoft::EntityFrameworkCore::RawSqlString sql, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="sql" Type="Microsoft.EntityFrameworkCore.RawSqlString" />
          <Parameter Name="parameters" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="sql">To be added.</param>
          <param name="parameters">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,Microsoft.EntityFrameworkCore.RawSqlString,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="ExecuteSqlCommand">
        <MemberSignature Language="C#" Value="public static int ExecuteSqlCommand (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, FormattableString sql);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ExecuteSqlCommand(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, class System.FormattableString sql) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.FormattableString)" />
        <MemberSignature Language="F#" Value="static member ExecuteSqlCommand : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * FormattableString -&gt; int" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand (databaseFacade, sql)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ExecuteSqlCommand(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade, FormattableString ^ sql);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="sql" Type="System.FormattableString" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="sql">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.FormattableString)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="ExecuteSqlCommand">
        <MemberSignature Language="C#" Value="public static int ExecuteSqlCommand (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, string sql, params object[] parameters);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ExecuteSqlCommand(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, string sql, object[] parameters) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])" />
        <MemberSignature Language="F#" Value="static member ExecuteSqlCommand : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * string * obj[] -&gt; int" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand (databaseFacade, sql, parameters)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ExecuteSqlCommand(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade, System::String ^ sql, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="sql" Type="System.String" />
          <Parameter Name="parameters" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="sql">To be added.</param>
          <param name="parameters">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="ExecuteSqlCommandAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; ExecuteSqlCommandAsync (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, Microsoft.EntityFrameworkCore.RawSqlString sql, System.Collections.Generic.IEnumerable&lt;object&gt; parameters, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; ExecuteSqlCommandAsync(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, valuetype Microsoft.EntityFrameworkCore.RawSqlString sql, class System.Collections.Generic.IEnumerable`1&lt;object&gt; parameters, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,Microsoft.EntityFrameworkCore.RawSqlString,System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteSqlCommandAsync : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * Microsoft.EntityFrameworkCore.RawSqlString * seq&lt;obj&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync (databaseFacade, sql, parameters, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="sql" Type="Microsoft.EntityFrameworkCore.RawSqlString" />
          <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="sql">To be added.</param>
          <param name="parameters">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,Microsoft.EntityFrameworkCore.RawSqlString,System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="ExecuteSqlCommandAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; ExecuteSqlCommandAsync (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, Microsoft.EntityFrameworkCore.RawSqlString sql, params object[] parameters);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; ExecuteSqlCommandAsync(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, valuetype Microsoft.EntityFrameworkCore.RawSqlString sql, object[] parameters) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,Microsoft.EntityFrameworkCore.RawSqlString,System.Object[])" />
        <MemberSignature Language="F#" Value="static member ExecuteSqlCommandAsync : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * Microsoft.EntityFrameworkCore.RawSqlString * obj[] -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync (databaseFacade, sql, parameters)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ ExecuteSqlCommandAsync(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade, Microsoft::EntityFrameworkCore::RawSqlString sql, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="sql" Type="Microsoft.EntityFrameworkCore.RawSqlString" />
          <Parameter Name="parameters" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="sql">To be added.</param>
          <param name="parameters">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,Microsoft.EntityFrameworkCore.RawSqlString,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="ExecuteSqlCommandAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; ExecuteSqlCommandAsync (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, Microsoft.EntityFrameworkCore.RawSqlString sql, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; ExecuteSqlCommandAsync(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, valuetype Microsoft.EntityFrameworkCore.RawSqlString sql, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,Microsoft.EntityFrameworkCore.RawSqlString,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteSqlCommandAsync : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * Microsoft.EntityFrameworkCore.RawSqlString * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync (databaseFacade, sql, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="sql" Type="Microsoft.EntityFrameworkCore.RawSqlString" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="sql">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,Microsoft.EntityFrameworkCore.RawSqlString,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="ExecuteSqlCommandAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; ExecuteSqlCommandAsync (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, FormattableString sql, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; ExecuteSqlCommandAsync(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, class System.FormattableString sql, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.FormattableString,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteSqlCommandAsync : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * FormattableString * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync (databaseFacade, sql, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="sql" Type="System.FormattableString" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="sql">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.FormattableString,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="ExecuteSqlCommandAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; ExecuteSqlCommandAsync (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, string sql, System.Threading.CancellationToken cancellationToken = null, params object[] parameters);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; ExecuteSqlCommandAsync(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, string sql, valuetype System.Threading.CancellationToken cancellationToken, object[] parameters) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Threading.CancellationToken,System.Object[])" />
        <MemberSignature Language="F#" Value="static member ExecuteSqlCommandAsync : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * string * System.Threading.CancellationToken * obj[] -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync (databaseFacade, sql, cancellationToken, parameters)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="sql" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
          <Parameter Name="parameters" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="sql">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <param name="parameters">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Threading.CancellationToken,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="GenerateCreateScript">
        <MemberSignature Language="C#" Value="public static string GenerateCreateScript (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GenerateCreateScript(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GenerateCreateScript(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
        <MemberSignature Language="F#" Value="static member GenerateCreateScript : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GenerateCreateScript databaseFacade" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GenerateCreateScript(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <summary>
                Generates a script to create all tables for the current model.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GenerateCreateScript(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="GetAppliedMigrations">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; GetAppliedMigrations (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetAppliedMigrations(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
        <MemberSignature Language="F#" Value="static member GetAppliedMigrations : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade -&gt; seq&lt;string&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrations databaseFacade" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetAppliedMigrations(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
        </Parameters>
        <Docs>
          <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context.</param>
          <summary>
                Gets all migrations that have been applied to the target database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="GetAppliedMigrationsAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;string&gt;&gt; GetAppliedMigrationsAsync (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;string&gt;&gt; GetAppliedMigrationsAsync(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetAppliedMigrationsAsync : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;seq&lt;string&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrationsAsync (databaseFacade, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;System.String&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context.</param>
          <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
          <summary>
                Asynchronously gets all migrations that have been applied to the target database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="GetCommandTimeout">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; GetCommandTimeout (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; GetCommandTimeout(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
        <MemberSignature Language="F#" Value="static member GetCommandTimeout : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetCommandTimeout databaseFacade" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; GetCommandTimeout(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="GetDbConnection">
        <MemberSignature Language="C#" Value="public static System.Data.Common.DbConnection GetDbConnection (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.DbConnection GetDbConnection(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
        <MemberSignature Language="F#" Value="static member GetDbConnection : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade -&gt; System.Data.Common.DbConnection" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetDbConnection databaseFacade" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::Common::DbConnection ^ GetDbConnection(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.DbConnection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="GetMigrations">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; GetMigrations (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetMigrations(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
        <MemberSignature Language="F#" Value="static member GetMigrations : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade -&gt; seq&lt;string&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetMigrations databaseFacade" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetMigrations(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
        </Parameters>
        <Docs>
          <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context.</param>
          <summary>
                Gets all the migrations that are defined in the configured migrations assembly.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="GetPendingMigrations">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; GetPendingMigrations (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetPendingMigrations(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
        <MemberSignature Language="F#" Value="static member GetPendingMigrations : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade -&gt; seq&lt;string&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrations databaseFacade" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetPendingMigrations(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
        </Parameters>
        <Docs>
          <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context.</param>
          <summary>
                Gets all migrations that are defined in the assembly but haven't been applied to the target database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="GetPendingMigrationsAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;string&gt;&gt; GetPendingMigrationsAsync (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;string&gt;&gt; GetPendingMigrationsAsync(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetPendingMigrationsAsync : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;seq&lt;string&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrationsAsync (databaseFacade, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;System.String&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context.</param>
          <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
          <summary>
                Asynchronously gets all migrations that are defined in the assembly but haven't been applied to the target database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="Migrate">
        <MemberSignature Language="C#" Value="public static void Migrate (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Migrate(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.Migrate(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
        <MemberSignature Language="F#" Value="static member Migrate : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.Migrate databaseFacade" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Migrate(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
        </Parameters>
        <Docs>
          <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
          <summary>
            <para>
                    Applies any pending migrations for the context to the database. Will create the database
                    if it does not already exist.
                </para>
            <para>
                    Note that this API is mutually exclusive with DbContext.Database.EnsureCreated(). EnsureCreated does not use migrations 
                    to create the database and therefore the database that is created cannot be later updated using migrations. 
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.Migrate(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="MigrateAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task MigrateAsync (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task MigrateAsync(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.MigrateAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member MigrateAsync : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.MigrateAsync (databaseFacade, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
          <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
          <summary>
            <para>
                    Asynchronously applies any pending migrations for the context to the database. Will create the database
                    if it does not already exist.
                </para>
            <para>
                    Note that this API is mutually exclusive with DbContext.Database.EnsureCreated(). EnsureCreated does not use migrations 
                    to create the database and therefore the database that is created cannot be later updated using migrations. 
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.MigrateAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="OpenConnection">
        <MemberSignature Language="C#" Value="public static void OpenConnection (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void OpenConnection(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
        <MemberSignature Language="F#" Value="static member OpenConnection : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnection databaseFacade" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void OpenConnection(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="OpenConnectionAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task OpenConnectionAsync (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task OpenConnectionAsync(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnectionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member OpenConnectionAsync : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnectionAsync (databaseFacade, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnectionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="SetCommandTimeout">
        <MemberSignature Language="C#" Value="public static void SetCommandTimeout (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, Nullable&lt;int&gt; timeout);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCommandTimeout(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, valuetype System.Nullable`1&lt;int32&gt; timeout) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Nullable{System.Int32})" />
        <MemberSignature Language="F#" Value="static member SetCommandTimeout : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * Nullable&lt;int&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetCommandTimeout (databaseFacade, timeout)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetCommandTimeout(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade, Nullable&lt;int&gt; timeout);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="timeout" Type="System.Nullable&lt;System.Int32&gt;" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="timeout">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Nullable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="SetCommandTimeout">
        <MemberSignature Language="C#" Value="public static void SetCommandTimeout (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, TimeSpan timeout);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCommandTimeout(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, valuetype System.TimeSpan timeout) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.TimeSpan)" />
        <MemberSignature Language="F#" Value="static member SetCommandTimeout : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * TimeSpan -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetCommandTimeout (databaseFacade, timeout)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetCommandTimeout(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade, TimeSpan timeout);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="timeout" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="timeout">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="UseTransaction">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction UseTransaction (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, System.Data.Common.DbTransaction transaction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction UseTransaction(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, class System.Data.Common.DbTransaction transaction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.UseTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbTransaction)" />
        <MemberSignature Language="F#" Value="static member UseTransaction : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * System.Data.Common.DbTransaction -&gt; Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" Usage="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.UseTransaction (databaseFacade, transaction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IDbContextTransaction ^ UseTransaction(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade, System::Data::Common::DbTransaction ^ transaction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        </Parameters>
        <Docs>
          <param name="databaseFacade">To be added.</param>
          <param name="transaction">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.UseTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbTransaction)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />
      </Targets>
      <Member MemberName="HasDiscriminator">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)" />
        <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator entityTypeBuilder" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::DiscriminatorBuilder ^ HasDiscriminator(Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ entityTypeBuilder);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
          <summary>
                Configures the discriminator column used to identify which entity type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />
      </Targets>
      <Member MemberName="HasDiscriminator">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, Type discriminatorType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, class System.Type discriminatorType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Type)" />
        <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator (entityTypeBuilder, name, discriminatorType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::DiscriminatorBuilder ^ HasDiscriminator(Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ entityTypeBuilder, System::String ^ name, Type ^ discriminatorType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="discriminatorType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the discriminator column. </param>
          <param name="discriminatorType"> The type of values stored in the discriminator column. </param>
          <summary>
                Configures the discriminator column used to identify which entity type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />
      </Targets>
      <Member MemberName="HasDiscriminator&lt;TDiscriminator&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt; HasDiscriminator&lt;TDiscriminator&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1&lt;!!TDiscriminator&gt; HasDiscriminator&lt;TDiscriminator&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;'Discriminator&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator (entityTypeBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDiscriminator&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::DiscriminatorBuilder&lt;TDiscriminator&gt; ^ HasDiscriminator(Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ entityTypeBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TDiscriminator" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TDiscriminator"> The type of values stored in the discriminator column. </typeparam>
          <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the discriminator column. </param>
          <summary>
                Configures the discriminator column used to identify which entity type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1" />
      </Targets>
      <Member MemberName="HasDiscriminator&lt;TEntity,TDiscriminator&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt; HasDiscriminator&lt;TEntity,TDiscriminator&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TDiscriminator&gt;&gt; propertyExpression) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1&lt;!!TDiscriminator&gt; HasDiscriminator&lt;class TEntity, TDiscriminator&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, !!TDiscriminator&gt;&gt; propertyExpression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``2(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasDiscriminator(Of TEntity As Class, TDiscriminator As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), propertyExpression As Expression(Of Func(Of TEntity, TDiscriminator))) As DiscriminatorBuilder(Of TDiscriminator)" />
        <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'Discriminator&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;'Discriminator&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator (entityTypeBuilder, propertyExpression)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity, typename TDiscriminator&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::DiscriminatorBuilder&lt;TDiscriminator&gt; ^ HasDiscriminator(Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder&lt;TEntity&gt; ^ entityTypeBuilder, System::Linq::Expressions::Expression&lt;Func&lt;TEntity, TDiscriminator&gt; ^&gt; ^ propertyExpression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TDiscriminator" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TDiscriminator&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type being configured. </typeparam>
          <typeparam name="TDiscriminator"> The type of values stored in the discriminator column. </typeparam>
          <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
          <param name="propertyExpression"> 
                A lambda expression representing the property to be used as the discriminator (
                <c>blog =&gt; blog.Discriminator</c>).
            </param>
          <summary>
                Configures the discriminator column used to identify which entity type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``2(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />
      </Targets>
      <Member MemberName="ToTable">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ ToTable(Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ entityTypeBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the table. </param>
          <summary>
                Configures the table that the entity maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />
      </Targets>
      <Member MemberName="ToTable">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)" />
        <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name, schema)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ ToTable(Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ entityTypeBuilder, System::String ^ name, System::String ^ schema);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the table. </param>
          <param name="schema"> The schema of the table. </param>
          <summary>
                Configures the table that the entity maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1" />
      </Targets>
      <Member MemberName="ToTable&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String) As EntityTypeBuilder(Of TEntity)" />
        <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder&lt;TEntity&gt; ^ ToTable(Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder&lt;TEntity&gt; ^ entityTypeBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type being configured. </typeparam>
          <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the table. </param>
          <summary>
                Configures the table that the entity maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1" />
      </Targets>
      <Member MemberName="ToTable&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string schema) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, schema As String) As EntityTypeBuilder(Of TEntity)" />
        <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name, schema)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder&lt;TEntity&gt; ^ ToTable(Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder&lt;TEntity&gt; ^ entityTypeBuilder, System::String ^ name, System::String ^ schema);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type being configured. </typeparam>
          <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the table. </param>
          <param name="schema"> The schema of the table. </param>
          <summary>
                Configures the table that the entity maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" />
      </Targets>
      <Member MemberName="HasFilter">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder HasFilter (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, string sql);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder HasFilter(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, string sql) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasFilter(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member HasFilter : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasFilter (indexBuilder, sql)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::IndexBuilder ^ HasFilter(Microsoft::EntityFrameworkCore::Metadata::Builders::IndexBuilder ^ indexBuilder, System::String ^ sql);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" RefType="this" />
          <Parameter Name="sql" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="indexBuilder"> The builder for the index being configured. </param>
          <param name="sql"> The filter expression for the index. </param>
          <summary>
            Determines whether the specified index has filter expression.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasFilter(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" />
      </Targets>
      <Member MemberName="HasName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder HasName (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder HasName(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasName(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member HasName : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasName (indexBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::IndexBuilder ^ HasName(Microsoft::EntityFrameworkCore::Metadata::Builders::IndexBuilder ^ indexBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="indexBuilder"> The builder for the index being configured. </param>
          <param name="name"> The name of the index. </param>
          <summary>
                Configures the name of the index in the database when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasName(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" />
      </Targets>
      <Member MemberName="HasName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder HasName (this Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder keyBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder HasName(class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder keyBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalKeyBuilderExtensions.HasName(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member HasName : Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalKeyBuilderExtensions.HasName (keyBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::KeyBuilder ^ HasName(Microsoft::EntityFrameworkCore::Metadata::Builders::KeyBuilder ^ keyBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="keyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="keyBuilder"> The builder for the key being configured. </param>
          <param name="name"> The name of the key. </param>
          <summary>
                Configures the name of the key constraint in the database when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalKeyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalKeyBuilderExtensions.HasName(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IRelationalEntityTypeAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IRelationalEntityTypeAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Relational (entityType As IEntityType) As IRelationalEntityTypeAnnotations" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IRelationalEntityTypeAnnotations" Usage="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalEntityTypeAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalEntityTypeAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IRelationalEntityTypeAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity to get metadata for. </param>
          <summary>
                Gets the relational database specific metadata for an entity.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IRelationalForeignKeyAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IRelationalForeignKeyAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Relational (foreignKey As IForeignKey) As IRelationalForeignKeyAnnotations" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.IForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.IRelationalForeignKeyAnnotations" Usage="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational foreignKey" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalForeignKeyAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalForeignKeyAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IRelationalForeignKeyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="foreignKey"> The foreign key to get metadata for. </param>
          <summary>
                Gets the relational database specific metadata for a foreign key.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IRelationalIndexAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.IIndex index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IRelationalIndexAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.IIndex index) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IIndex)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Relational (index As IIndex) As IRelationalIndexAnnotations" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.IIndex -&gt; Microsoft.EntityFrameworkCore.Metadata.IRelationalIndexAnnotations" Usage="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational index" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalIndexAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalIndexAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IRelationalIndexAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" RefType="this" />
        </Parameters>
        <Docs>
          <param name="index"> The index to get metadata for. </param>
          <summary>
                Gets the relational database specific metadata for an index.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IIndex)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IRelationalKeyAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.IKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IRelationalKeyAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.IKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Relational (key As IKey) As IRelationalKeyAnnotations" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.IKey -&gt; Microsoft.EntityFrameworkCore.Metadata.IRelationalKeyAnnotations" Usage="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational key" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalKeyAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalKeyAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IRelationalKeyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key"> The key to get metadata for. </param>
          <summary>
                Gets the relational database specific metadata for a key.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IRelationalModelAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IRelationalModelAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Relational (model As IModel) As IRelationalModelAnnotations" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.Metadata.IRelationalModelAnnotations" Usage="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational model" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalModelAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalModelAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IRelationalModelAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model"> The model to get metadata for. </param>
          <summary>
                Gets the relational database specific metadata for a model.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalEntityTypeAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalEntityTypeAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Relational (entityType As IMutableEntityType) As RelationalEntityTypeAnnotations" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalEntityTypeAnnotations" Usage="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::RelationalEntityTypeAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalEntityTypeAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity to get metadata for. </param>
          <summary>
                Gets the relational database specific metadata for an entity.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalForeignKeyAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey foreignKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalForeignKeyAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey foreignKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Relational (foreignKey As IMutableForeignKey) As RelationalForeignKeyAnnotations" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalForeignKeyAnnotations" Usage="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational foreignKey" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::RelationalForeignKeyAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^ foreignKey);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalForeignKeyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="foreignKey"> The foreign key to get metadata for. </param>
          <summary>
                Gets the relational database specific metadata for a foreign key.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalIndexAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.IMutableIndex index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalIndexAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.IMutableIndex index) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Relational (index As IMutableIndex) As RelationalIndexAnnotations" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.IMutableIndex -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalIndexAnnotations" Usage="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational index" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::RelationalIndexAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IMutableIndex ^ index);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalIndexAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" RefType="this" />
        </Parameters>
        <Docs>
          <param name="index"> The index to get metadata for. </param>
          <summary>
                Gets the relational database specific metadata for an index.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableKey" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalKeyAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.IMutableKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalKeyAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.IMutableKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IMutableKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Relational (key As IMutableKey) As RelationalKeyAnnotations" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.IMutableKey -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalKeyAnnotations" Usage="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational key" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::RelationalKeyAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ key);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalKeyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key"> The key to get metadata for. </param>
          <summary>
                Gets the relational database specific metadata for a key.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IMutableKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalModelAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalModelAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IMutableModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Relational (model As IMutableModel) As RelationalModelAnnotations" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.IMutableModel -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalModelAnnotations" Usage="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational model" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::RelationalModelAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalModelAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model"> The model to get metadata for. </param>
          <summary>
                Gets the relational database specific metadata for a model.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IMutableModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalPropertyAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalPropertyAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Relational (property As IMutableProperty) As RelationalPropertyAnnotations" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalPropertyAnnotations" Usage="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::RelationalPropertyAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalPropertyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get metadata for. </param>
          <summary>
                Gets the relational database specific metadata for a property.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="Relational">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyAnnotations Relational (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyAnnotations Relational(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Relational (property As IProperty) As IRelationalPropertyAnnotations" />
        <MemberSignature Language="F#" Value="static member Relational : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyAnnotations" Usage="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalPropertyAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalPropertyAnnotations ^ Relational(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get metadata for. </param>
          <summary>
                Gets the relational database specific metadata for a property.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalMetadataExtensions.Relational(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasDbFunction">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasDbFunction (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, System.Reflection.MethodInfo methodInfo);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasDbFunction(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, class System.Reflection.MethodInfo methodInfo) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDbFunction(Microsoft.EntityFrameworkCore.ModelBuilder,System.Reflection.MethodInfo)" />
        <MemberSignature Language="F#" Value="static member HasDbFunction : Microsoft.EntityFrameworkCore.ModelBuilder * System.Reflection.MethodInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDbFunction (modelBuilder, methodInfo)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::DbFunctionBuilder ^ HasDbFunction(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::Reflection::MethodInfo ^ methodInfo);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="methodInfo"> The methodInfo this dbFunction uses. </param>
          <summary>
                Configures a database function when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDbFunction(Microsoft.EntityFrameworkCore.ModelBuilder,System.Reflection.MethodInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasDbFunction">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder HasDbFunction (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, System.Reflection.MethodInfo methodInfo, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder HasDbFunction(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, class System.Reflection.MethodInfo methodInfo, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDbFunction(Microsoft.EntityFrameworkCore.ModelBuilder,System.Reflection.MethodInfo,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder})" />
        <MemberSignature Language="F#" Value="static member HasDbFunction : Microsoft.EntityFrameworkCore.ModelBuilder * System.Reflection.MethodInfo * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDbFunction (modelBuilder, methodInfo, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ HasDbFunction(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::Reflection::MethodInfo ^ methodInfo, Action&lt;Microsoft::EntityFrameworkCore::Metadata::Builders::DbFunctionBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="methodInfo"> The methodInfo this dbFunction uses. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database function when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDbFunction(Microsoft.EntityFrameworkCore.ModelBuilder,System.Reflection.MethodInfo,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasDbFunction&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasDbFunction&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, System.Linq.Expressions.Expression&lt;Func&lt;TResult&gt;&gt; expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasDbFunction&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, class System.Linq.Expressions.Expression`1&lt;class System.Func`1&lt;!!TResult&gt;&gt; expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDbFunction``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.Linq.Expressions.Expression{System.Func{``0}})" />
        <MemberSignature Language="F#" Value="static member HasDbFunction : Microsoft.EntityFrameworkCore.ModelBuilder * System.Linq.Expressions.Expression&lt;Func&lt;'Result&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDbFunction (modelBuilder, expression)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::DbFunctionBuilder ^ HasDbFunction(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::Linq::Expressions::Expression&lt;Func&lt;TResult&gt; ^&gt; ^ expression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="modelBuilder"> The model builder. </param>
          <param name="expression"> The method this dbFunction uses. </param>
          <summary>
                Configures a database function when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDbFunction``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.Linq.Expressions.Expression{System.Func{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasDefaultSchema">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder HasDefaultSchema (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string schema);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder HasDefaultSchema(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDefaultSchema(Microsoft.EntityFrameworkCore.ModelBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member HasDefaultSchema : Microsoft.EntityFrameworkCore.ModelBuilder * string -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDefaultSchema (modelBuilder, schema)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ HasDefaultSchema(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::String ^ schema);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="schema"> The default schema. </param>
          <summary>
                Configures the default schema that database objects should be created in, if no schema
                is explicitly configured.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDefaultSchema(Microsoft.EntityFrameworkCore.ModelBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder HasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder HasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, name, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ HasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::String ^ name, Action&lt;Microsoft::EntityFrameworkCore::Metadata::RelationalSequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder HasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder HasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, name, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ HasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::String ^ name, Action&lt;Microsoft::EntityFrameworkCore::Metadata::SequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder HasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder HasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, name, schema)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder HasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder HasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, name, schema, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ HasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::String ^ name, System::String ^ schema, Action&lt;Microsoft::EntityFrameworkCore::Metadata::RelationalSequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder HasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder HasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, name, schema, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ HasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::String ^ name, System::String ^ schema, Action&lt;Microsoft::EntityFrameworkCore::Metadata::SequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder HasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, Type clrType, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder HasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, class System.Type clrType, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * Type * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, clrType, name, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ HasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, Type ^ clrType, System::String ^ name, Action&lt;Microsoft::EntityFrameworkCore::Metadata::RelationalSequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="clrType" Type="System.Type" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="clrType"> The type of values the sequence will generate. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder HasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, Type clrType, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder HasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, class System.Type clrType, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * Type * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, clrType, name, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ HasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, Type ^ clrType, System::String ^ name, Action&lt;Microsoft::EntityFrameworkCore::Metadata::SequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="clrType" Type="System.Type" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="clrType"> The type of values the sequence will generate. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder HasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, Type clrType, string name, string schema = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder HasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, class System.Type clrType, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String)" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * Type * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, clrType, name, schema)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="clrType" Type="System.Type" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="clrType"> The type of values the sequence will generate. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder HasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, Type clrType, string name, string schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder HasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, class System.Type clrType, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * Type * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, clrType, name, schema, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ HasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, Type ^ clrType, System::String ^ name, System::String ^ schema, Action&lt;Microsoft::EntityFrameworkCore::Metadata::RelationalSequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="clrType" Type="System.Type" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="clrType"> The type of values the sequence will generate. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder HasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, Type clrType, string name, string schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder HasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, class System.Type clrType, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * Type * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, clrType, name, schema, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ HasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, Type ^ clrType, System::String ^ name, System::String ^ schema, Action&lt;Microsoft::EntityFrameworkCore::Metadata::SequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="clrType" Type="System.Type" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="clrType"> The type of values the sequence will generate. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder HasSequence&lt;T&gt; (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder HasSequence&lt;T&gt;(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, name, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ HasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::String ^ name, Action&lt;Microsoft::EntityFrameworkCore::Metadata::RelationalSequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The type of values the sequence will generate. </typeparam>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder HasSequence&lt;T&gt; (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder HasSequence&lt;T&gt;(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, name, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ HasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::String ^ name, Action&lt;Microsoft::EntityFrameworkCore::Metadata::SequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The type of values the sequence will generate. </typeparam>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder HasSequence&lt;T&gt; (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder HasSequence&lt;T&gt;(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, name, schema)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The type of values the sequence will generate. </typeparam>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder HasSequence&lt;T&gt; (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder HasSequence&lt;T&gt;(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, name, schema, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ HasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::String ^ name, System::String ^ schema, Action&lt;Microsoft::EntityFrameworkCore::Metadata::RelationalSequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The type of values the sequence will generate. </typeparam>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="HasSequence&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder HasSequence&lt;T&gt; (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder HasSequence&lt;T&gt;(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence (modelBuilder, name, schema, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ HasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::String ^ name, System::String ^ schema, Action&lt;Microsoft::EntityFrameworkCore::Metadata::SequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The type of values the sequence will generate. </typeparam>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="HasColumnName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder HasColumnName (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder HasColumnName(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member HasColumnName : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnName (propertyBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ HasColumnName(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="name"> The name of the column. </param>
          <summary>
                Configures the column that the property maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="HasColumnName&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; HasColumnName&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; HasColumnName&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasColumnName(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), name As String) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member HasColumnName : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnName (propertyBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ HasColumnName(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="name"> The name of the column. </param>
          <summary>
                Configures the column that the property maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="HasColumnType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder HasColumnType (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string typeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder HasColumnType(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string typeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member HasColumnType : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnType (propertyBuilder, typeName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ HasColumnType(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder, System::String ^ typeName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="typeName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="typeName"> The name of the data type of the column. </param>
          <summary>
                Configures the data type of the column that the property maps to when targeting a relational database.
                This should be the complete type name, including precision, scale, length, etc. 
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="HasColumnType&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; HasColumnType&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string typeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; HasColumnType&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string typeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnType``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasColumnType(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), typeName As String) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member HasColumnType : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnType (propertyBuilder, typeName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ HasColumnType(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder, System::String ^ typeName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="typeName" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="typeName"> The name of the data type of the column. </param>
          <summary>
                Configures the data type of the column that the property maps to when targeting a relational database.
                This should be the complete type name, including precision, scale, length, etc. 
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnType``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="HasComputedColumnSql">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder HasComputedColumnSql (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder HasComputedColumnSql(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComputedColumnSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member HasComputedColumnSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComputedColumnSql (propertyBuilder, sql)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ HasComputedColumnSql(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder, System::String ^ sql);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="sql" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="sql"> The SQL expression that computes values for the column. </param>
          <summary>
                Configures the property to map to a computed column when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComputedColumnSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="HasComputedColumnSql&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; HasComputedColumnSql&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string sql);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; HasComputedColumnSql&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string sql) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComputedColumnSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasComputedColumnSql(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), sql As String) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member HasComputedColumnSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComputedColumnSql (propertyBuilder, sql)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ HasComputedColumnSql(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder, System::String ^ sql);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="sql" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="sql"> The SQL expression that computes values for the column. </param>
          <summary>
                Configures the property to map to a computed column when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComputedColumnSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="HasDefaultValue">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder HasDefaultValue (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder HasDefaultValue(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Object)" />
        <MemberSignature Language="F#" Value="static member HasDefaultValue : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValue (propertyBuilder, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ HasDefaultValue(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder, System::Object ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="value"> The default value of the column. </param>
          <summary>
                Configures the default value for the column that the property maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="HasDefaultValue&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; HasDefaultValue&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; HasDefaultValue&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValue``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasDefaultValue(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), value As Object) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member HasDefaultValue : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValue (propertyBuilder, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ HasDefaultValue(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder, System::Object ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="value"> The default value of the column. </param>
          <summary>
                Configures the default value for the column that the property maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValue``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="HasDefaultValueSql">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder HasDefaultValueSql (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder HasDefaultValueSql(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member HasDefaultValueSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValueSql (propertyBuilder, sql)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ HasDefaultValueSql(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder, System::String ^ sql);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="sql" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="sql"> The SQL expression for the default value of the column. </param>
          <summary>
                Configures the default value expression for the column that the property maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="HasDefaultValueSql&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; HasDefaultValueSql&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string sql);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; HasDefaultValueSql&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string sql) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValueSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasDefaultValueSql(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), sql As String) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member HasDefaultValueSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValueSql (propertyBuilder, sql)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ HasDefaultValueSql(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder, System::String ^ sql);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="sql" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="sql"> The SQL expression for the default value of the column. </param>
          <summary>
                Configures the default value expression for the column that the property maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValueSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="IsFixedLength">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder IsFixedLength (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, bool fixedLength = true);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder IsFixedLength(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, bool fixedLength) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.IsFixedLength(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Boolean)" />
        <MemberSignature Language="F#" Value="static member IsFixedLength : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.IsFixedLength (propertyBuilder, fixedLength)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="fixedLength" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="fixedLength"> A value indicating whether the property is constrained to fixed length values. </param>
          <summary>
                Configures the property as capable of storing only fixed-length data, such as strings.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.IsFixedLength(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="IsFixedLength&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; IsFixedLength&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, bool fixedLength = true);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; IsFixedLength&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, bool fixedLength) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.IsFixedLength``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsFixedLength(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), Optional fixedLength As Boolean = true) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member IsFixedLength : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.IsFixedLength (propertyBuilder, fixedLength)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="fixedLength" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="fixedLength"> A value indicating whether the property is constrained to fixed length values. </param>
          <summary>
                Configures the property as capable of storing only fixed-length data, such as strings.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.IsFixedLength``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FromSql&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TEntity&gt; FromSql&lt;TEntity&gt; (this System.Linq.IQueryable&lt;TEntity&gt; source, Microsoft.EntityFrameworkCore.RawSqlString sql, params object[] parameters) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TEntity&gt; FromSql&lt;class TEntity&gt;(class System.Linq.IQueryable`1&lt;!!TEntity&gt; source, valuetype Microsoft.EntityFrameworkCore.RawSqlString sql, object[] parameters) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSql``1(System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.RawSqlString,System.Object[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FromSql(Of TEntity As Class) (source As IQueryable(Of TEntity), sql As RawSqlString, ParamArray parameters As Object()) As IQueryable(Of TEntity)" />
        <MemberSignature Language="F#" Value="static member FromSql : System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; * Microsoft.EntityFrameworkCore.RawSqlString * obj[] -&gt; System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSql (source, sql, parameters)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TEntity&gt; ^ FromSql(System::Linq::IQueryable&lt;TEntity&gt; ^ source, Microsoft::EntityFrameworkCore::RawSqlString sql, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="sql" Type="Microsoft.EntityFrameworkCore.RawSqlString">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.EntityFrameworkCore.Query.NotParameterized</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
          <Parameter Name="parameters" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The type of the elements of <paramref name="source" />. </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to use as the base of the raw SQL query (typically a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />).
            </param>
          <param name="sql">
                The raw SQL query. NB. A string literal may be passed here because <see cref="T:Microsoft.EntityFrameworkCore.RawSqlString" />
                is implicitly convertible to string.
            </param>
          <param name="parameters"> The values to be assigned to parameters. </param>
          <summary>
            <para>
                    Creates a LINQ query based on a raw SQL query.
                </para>
            <para>
                    If the database provider supports composing on the supplied SQL, you can compose on top of the raw SQL query using
                    LINQ operators - <code>context.Blogs.FromSql("SELECT * FROM dbo.Blogs").OrderBy(b =&gt; b.Name)</code>.
                </para>
            <para>
                    As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection
                    attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional
                    arguments. Any parameter values you supply will automatically be converted to a DbParameter -
                    <code>context.Blogs.FromSql("SELECT * FROM [dbo].[SearchBlogs]({0})", userSuppliedSearchTerm)</code>.
                </para>
            <para>
                    This overload also accepts DbParameter instances as parameter values. This allows you to use named 
                    parameters in the SQL query string -
                    <code>context.Blogs.FromSql("SELECT * FROM [dbo].[SearchBlogs]({@searchTerm})", new SqlParameter("@searchTerm", userSuppliedSearchTerm))</code></para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSql``1(System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.RawSqlString,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FromSql&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TEntity&gt; FromSql&lt;TEntity&gt; (this System.Linq.IQueryable&lt;TEntity&gt; source, FormattableString sql) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TEntity&gt; FromSql&lt;class TEntity&gt;(class System.Linq.IQueryable`1&lt;!!TEntity&gt; source, class System.FormattableString sql) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSql``1(System.Linq.IQueryable{``0},System.FormattableString)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FromSql(Of TEntity As Class) (source As IQueryable(Of TEntity), sql As FormattableString) As IQueryable(Of TEntity)" />
        <MemberSignature Language="F#" Value="static member FromSql : System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; * FormattableString -&gt; System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSql (source, sql)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TEntity&gt; ^ FromSql(System::Linq::IQueryable&lt;TEntity&gt; ^ source, FormattableString ^ sql);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="sql" Type="System.FormattableString">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.EntityFrameworkCore.Query.NotParameterized</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The type of the elements of <paramref name="source" />. </typeparam>
          <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to use as the base of the interpolated string SQL query (typically a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />).
            </param>
          <param name="sql"> The interpolated string representing a SQL query. </param>
          <summary>
            <para>
                    Creates a LINQ query based on an interpolated string representing a SQL query.
                </para>
            <para>
                    If the database provider supports composing on the supplied SQL, you can compose on top of the raw SQL query using
                    LINQ operators - <code>context.Blogs.FromSql("SELECT * FROM dbo.Blogs").OrderBy(b =&gt; b.Name)</code>.
                </para>
            <para>
                    As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection
                    attack. You can include interpolated parameter place holders in the SQL query string. Any interpolated parameter values
                    you supply will automatically be converted to a DbParameter -
                    <code>context.Blogs.FromSql($"SELECT * FROM [dbo].[SearchBlogs]({userSuppliedSearchTerm})")</code>.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSql``1(System.Linq.IQueryable{``0},System.FormattableString)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FromSql&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TEntity&gt; FromSql&lt;TEntity&gt; (this System.Linq.IQueryable&lt;TEntity&gt; source, string sql, params object[] parameters) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TEntity&gt; FromSql&lt;class TEntity&gt;(class System.Linq.IQueryable`1&lt;!!TEntity&gt; source, string sql, object[] parameters) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSql``1(System.Linq.IQueryable{``0},System.String,System.Object[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FromSql(Of TEntity As Class) (source As IQueryable(Of TEntity), sql As String, ParamArray parameters As Object()) As IQueryable(Of TEntity)" />
        <MemberSignature Language="F#" Value="static member FromSql : System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; * string * obj[] -&gt; System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSql (source, sql, parameters)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TEntity&gt; ^ FromSql(System::Linq::IQueryable&lt;TEntity&gt; ^ source, System::String ^ sql, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="sql" Type="System.String">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.EntityFrameworkCore.Query.NotParameterized</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
          <Parameter Name="parameters" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The type of the elements of <paramref name="source" />. </typeparam>
          <param name="source"> 
                An <see cref="T:System.Linq.IQueryable`1" /> to use as the base of the raw SQL query (typically a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />). 
            </param>
          <param name="sql"> The raw SQL query. </param>
          <param name="parameters"> The values to be assigned to parameters. </param>
          <summary>
            <para>
                    Creates a LINQ query based on a raw SQL query.
                </para>
            <para>
                    If the database provider supports composing on the supplied SQL, you can compose on top of the raw SQL query using 
                    LINQ operators - <code>context.Blogs.FromSql("SELECT * FROM dbo.Blogs").OrderBy(b =&gt; b.Name)</code>.
                </para>
            <para>
                    As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection 
                    attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional 
                    arguments. Any parameter values you supply will automatically be converted to a DbParameter -  
                    <code>context.Blogs.FromSql("SELECT * FROM [dbo].[SearchBlogs]({0})", userSuppliedSearchTerm)</code>.
                </para>
            <para>
                    You can also construct a DbParameter and supply it to as a parameter value. This allows you to use named
                    parameters in the SQL query string - 
                    <code>context.Blogs.SqlQuery("SELECT * FROM [dbo].[SearchBlogs]({@searchTerm})", new SqlParameter("@searchTerm", userSuppliedSearchTerm))</code></para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalQueryableExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSql``1(System.Linq.IQueryable{``0},System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" />
      </Targets>
      <Member MemberName="HasDiscriminator">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder)" />
        <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator queryTypeBuilder" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::DiscriminatorBuilder ^ HasDiscriminator(Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder ^ queryTypeBuilder);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
          <summary>
                Configures the discriminator column used to identify which query type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" />
      </Targets>
      <Member MemberName="HasDiscriminator">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name, Type discriminatorType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name, class System.Type discriminatorType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder,System.String,System.Type)" />
        <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder * string * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator (queryTypeBuilder, name, discriminatorType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::DiscriminatorBuilder ^ HasDiscriminator(Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder ^ queryTypeBuilder, System::String ^ name, Type ^ discriminatorType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="discriminatorType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
          <param name="name"> The name of the discriminator column. </param>
          <param name="discriminatorType"> The type of values stored in the discriminator column. </param>
          <summary>
                Configures the discriminator column used to identify which query type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder,System.String,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" />
      </Targets>
      <Member MemberName="HasDiscriminator&lt;TDiscriminator&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt; HasDiscriminator&lt;TDiscriminator&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1&lt;!!TDiscriminator&gt; HasDiscriminator&lt;TDiscriminator&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;'Discriminator&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator (queryTypeBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDiscriminator&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::DiscriminatorBuilder&lt;TDiscriminator&gt; ^ HasDiscriminator(Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder ^ queryTypeBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TDiscriminator" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TDiscriminator"> The type of values stored in the discriminator column. </typeparam>
          <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
          <param name="name"> The name of the discriminator column. </param>
          <summary>
                Configures the discriminator column used to identify which query type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1" />
      </Targets>
      <Member MemberName="HasDiscriminator&lt;TQuery,TDiscriminator&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt; HasDiscriminator&lt;TQuery,TDiscriminator&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt; queryTypeBuilder, System.Linq.Expressions.Expression&lt;Func&lt;TQuery,TDiscriminator&gt;&gt; propertyExpression) where TQuery : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1&lt;!!TDiscriminator&gt; HasDiscriminator&lt;class TQuery, TDiscriminator&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1&lt;!!TQuery&gt; queryTypeBuilder, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TQuery, !!TDiscriminator&gt;&gt; propertyExpression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator``2(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasDiscriminator(Of TQuery As Class, TDiscriminator As Class) (queryTypeBuilder As QueryTypeBuilder(Of TQuery), propertyExpression As Expression(Of Func(Of TQuery, TDiscriminator))) As DiscriminatorBuilder(Of TDiscriminator)" />
        <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;'Query (requires 'Query : null)&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Query, 'Discriminator&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;'Discriminator&gt; (requires 'Query : null)" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator (queryTypeBuilder, propertyExpression)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TQuery, typename TDiscriminator&gt;&#xA; where TQuery : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::DiscriminatorBuilder&lt;TDiscriminator&gt; ^ HasDiscriminator(Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder&lt;TQuery&gt; ^ queryTypeBuilder, System::Linq::Expressions::Expression&lt;Func&lt;TQuery, TDiscriminator&gt; ^&gt; ^ propertyExpression);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TQuery">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TDiscriminator" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt;" RefType="this" />
          <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TQuery,TDiscriminator&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TQuery"> The query type being configured. </typeparam>
          <typeparam name="TDiscriminator"> The type of values stored in the discriminator column. </typeparam>
          <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
          <param name="propertyExpression">
                A lambda expression representing the property to be used as the discriminator (
                <c>blog =&gt; blog.Discriminator</c>).
            </param>
          <summary>
                Configures the discriminator column used to identify which query type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator``2(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" />
      </Targets>
      <Member MemberName="ToView">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder ToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView (queryTypeBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder ^ ToView(Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder ^ queryTypeBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
          <param name="name"> The name of the view or table. </param>
          <summary>
                Configures the view or table that the view maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" />
      </Targets>
      <Member MemberName="ToView">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name, string schema);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder ToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder,System.String,System.String)" />
        <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView (queryTypeBuilder, name, schema)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder ^ ToView(Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder ^ queryTypeBuilder, System::String ^ name, System::String ^ schema);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
          <param name="name"> The name of the view or table. </param>
          <param name="schema"> The schema of the view or table. </param>
          <summary>
                Configures the view or table that the view maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1" />
      </Targets>
      <Member MemberName="ToView&lt;TQuery&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt; ToView&lt;TQuery&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt; queryTypeBuilder, string name) where TQuery : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1&lt;!!TQuery&gt; ToView&lt;class TQuery&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1&lt;!!TQuery&gt; queryTypeBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView``1(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView(Of TQuery As Class) (queryTypeBuilder As QueryTypeBuilder(Of TQuery), name As String) As QueryTypeBuilder(Of TQuery)" />
        <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;'Query (requires 'Query : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;'Query (requires 'Query : null)&gt; (requires 'Query : null)" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView (queryTypeBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TQuery&gt;&#xA; where TQuery : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder&lt;TQuery&gt; ^ ToView(Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder&lt;TQuery&gt; ^ queryTypeBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TQuery">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TQuery"> The query type being configured. </typeparam>
          <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
          <param name="name"> The name of the view or table. </param>
          <summary>
                Configures the view or table that the view maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView``1(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1" />
      </Targets>
      <Member MemberName="ToView&lt;TQuery&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt; ToView&lt;TQuery&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt; queryTypeBuilder, string name, string schema) where TQuery : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1&lt;!!TQuery&gt; ToView&lt;class TQuery&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1&lt;!!TQuery&gt; queryTypeBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView``1(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder{``0},System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView(Of TQuery As Class) (queryTypeBuilder As QueryTypeBuilder(Of TQuery), name As String, schema As String) As QueryTypeBuilder(Of TQuery)" />
        <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;'Query (requires 'Query : null)&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;'Query (requires 'Query : null)&gt; (requires 'Query : null)" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView (queryTypeBuilder, name, schema)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TQuery&gt;&#xA; where TQuery : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder&lt;TQuery&gt; ^ ToView(Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder&lt;TQuery&gt; ^ queryTypeBuilder, System::String ^ name, System::String ^ schema);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TQuery">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TQuery"> The query type being configured. </typeparam>
          <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
          <param name="name"> The name of the view or table. </param>
          <param name="schema"> The schema of the view or table. </param>
          <summary>
                Configures the view or table that the view maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView``1(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder{``0},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder" />
      </Targets>
      <Member MemberName="HasConstraintName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder HasConstraintName (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder referenceCollectionBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder HasConstraintName(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder referenceCollectionBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalReferenceCollectionBuilderExtensions.HasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member HasConstraintName : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalReferenceCollectionBuilderExtensions.HasConstraintName (referenceCollectionBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceCollectionBuilder ^ HasConstraintName(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceCollectionBuilder ^ referenceCollectionBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="referenceCollectionBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="referenceCollectionBuilder"> The builder being used to configure the relationship. </param>
          <param name="name"> The name of the foreign key constraint. </param>
          <summary>
                Configures the foreign key constraint name for this relationship when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalReferenceCollectionBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalReferenceCollectionBuilderExtensions.HasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2" />
      </Targets>
      <Member MemberName="HasConstraintName&lt;TEntity,TRelatedEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TEntity,TRelatedEntity&gt; HasConstraintName&lt;TEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TEntity,TRelatedEntity&gt; referenceCollectionBuilder, string name) where TEntity : class where TRelatedEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; HasConstraintName&lt;class TEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; referenceCollectionBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalReferenceCollectionBuilderExtensions.HasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{``0,``1},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasConstraintName(Of TEntity As Class, TRelatedEntity As Class) (referenceCollectionBuilder As ReferenceCollectionBuilder(Of TEntity, TRelatedEntity), name As String) As ReferenceCollectionBuilder(Of TEntity, TRelatedEntity)" />
        <MemberSignature Language="F#" Value="static member HasConstraintName : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'Entity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalReferenceCollectionBuilderExtensions.HasConstraintName (referenceCollectionBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity, typename TRelatedEntity&gt;&#xA; where TEntity : class where TRelatedEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceCollectionBuilder&lt;TEntity, TRelatedEntity&gt; ^ HasConstraintName(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceCollectionBuilder&lt;TEntity, TRelatedEntity&gt; ^ referenceCollectionBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TRelatedEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="referenceCollectionBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TEntity,TRelatedEntity&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The principal entity type in this relationship. </typeparam>
          <typeparam name="TRelatedEntity"> The dependent entity type in this relationship. </typeparam>
          <param name="referenceCollectionBuilder"> The builder being used to configure the relationship. </param>
          <param name="name"> The name of the foreign key constraint. </param>
          <summary>
                Configures the foreign key constraint name for this relationship when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalReferenceCollectionBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalReferenceCollectionBuilderExtensions.HasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{``0,``1},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" />
      </Targets>
      <Member MemberName="HasConstraintName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder HasConstraintName (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder referenceReferenceBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder HasConstraintName(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder referenceReferenceBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.HasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasConstraintName (referenceReferenceBuilder As ReferenceOwnershipBuilder, name As String) As ReferenceOwnershipBuilder" />
        <MemberSignature Language="F#" Value="static member HasConstraintName : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.HasConstraintName (referenceReferenceBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ HasConstraintName(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ referenceReferenceBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="referenceReferenceBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="referenceReferenceBuilder"> The builder being used to configure the relationship. </param>
          <param name="name"> The name of the foreign key constraint. </param>
          <summary>
                Configures the foreign key constraint name for this relationship when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.HasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2" />
      </Targets>
      <Member MemberName="HasConstraintName&lt;TEntity,TRelatedEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt; HasConstraintName&lt;TEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt; referenceReferenceBuilder, string name) where TEntity : class where TRelatedEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; HasConstraintName&lt;class TEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; referenceReferenceBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.HasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder{``0,``1},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasConstraintName(Of TEntity As Class, TRelatedEntity As Class) (referenceReferenceBuilder As ReferenceOwnershipBuilder(Of TEntity, TRelatedEntity), name As String) As ReferenceOwnershipBuilder(Of TEntity, TRelatedEntity)" />
        <MemberSignature Language="F#" Value="static member HasConstraintName : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'Entity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.HasConstraintName (referenceReferenceBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity, typename TRelatedEntity&gt;&#xA; where TEntity : class where TRelatedEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder&lt;TEntity, TRelatedEntity&gt; ^ HasConstraintName(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder&lt;TEntity, TRelatedEntity&gt; ^ referenceReferenceBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TRelatedEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="referenceReferenceBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type on one end of the relationship. </typeparam>
          <typeparam name="TRelatedEntity"> The entity type on the other end of the relationship. </typeparam>
          <param name="referenceReferenceBuilder"> The builder being used to configure the relationship. </param>
          <param name="name"> The name of the foreign key constraint. </param>
          <summary>
                Configures the foreign key constraint name for this relationship when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.HasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder{``0,``1},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" />
      </Targets>
      <Member MemberName="ToTable">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder referenceOwnershipBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder referenceOwnershipBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.ToTable (referenceOwnershipBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ ToTable(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ referenceOwnershipBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the table. </param>
          <summary>
                Configures the table that the entity maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" />
      </Targets>
      <Member MemberName="ToTable">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder referenceOwnershipBuilder, string name, string schema);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder referenceOwnershipBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder,System.String,System.String)" />
        <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.ToTable (referenceOwnershipBuilder, name, schema)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ ToTable(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ referenceOwnershipBuilder, System::String ^ name, System::String ^ schema);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the table. </param>
          <param name="schema"> The schema of the table. </param>
          <summary>
                Configures the table that the entity maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2" />
      </Targets>
      <Member MemberName="ToTable&lt;TEntity,TRelatedEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt; ToTable&lt;TEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt; referenceOwnershipBuilder, string name) where TEntity : class where TRelatedEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; ToTable&lt;class TEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; referenceOwnershipBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder{``0,``1},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TEntity As Class, TRelatedEntity As Class) (referenceOwnershipBuilder As ReferenceOwnershipBuilder(Of TEntity, TRelatedEntity), name As String) As ReferenceOwnershipBuilder(Of TEntity, TRelatedEntity)" />
        <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'Entity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.ToTable (referenceOwnershipBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity, typename TRelatedEntity&gt;&#xA; where TEntity : class where TRelatedEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder&lt;TEntity, TRelatedEntity&gt; ^ ToTable(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder&lt;TEntity, TRelatedEntity&gt; ^ referenceOwnershipBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TRelatedEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type being configured. </typeparam>
          <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
          <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the table. </param>
          <summary>
                Configures the table that the entity maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder{``0,``1},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2" />
      </Targets>
      <Member MemberName="ToTable&lt;TEntity,TRelatedEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt; ToTable&lt;TEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt; referenceOwnershipBuilder, string name, string schema) where TEntity : class where TRelatedEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; ToTable&lt;class TEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; referenceOwnershipBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder{``0,``1},System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TEntity As Class, TRelatedEntity As Class) (referenceOwnershipBuilder As ReferenceOwnershipBuilder(Of TEntity, TRelatedEntity), name As String, schema As String) As ReferenceOwnershipBuilder(Of TEntity, TRelatedEntity)" />
        <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'Entity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.ToTable (referenceOwnershipBuilder, name, schema)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity, typename TRelatedEntity&gt;&#xA; where TEntity : class where TRelatedEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder&lt;TEntity, TRelatedEntity&gt; ^ ToTable(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder&lt;TEntity, TRelatedEntity&gt; ^ referenceOwnershipBuilder, System::String ^ name, System::String ^ schema);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TRelatedEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type being configured. </typeparam>
          <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
          <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the table. </param>
          <param name="schema"> The schema of the table. </param>
          <summary>
                Configures the table that the entity maps to when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalReferenceOwnershipBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder{``0,``1},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder" />
      </Targets>
      <Member MemberName="HasConstraintName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder HasConstraintName (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder referenceReferenceBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder HasConstraintName(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder referenceReferenceBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalReferenceReferenceBuilderExtensions.HasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member HasConstraintName : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalReferenceReferenceBuilderExtensions.HasConstraintName (referenceReferenceBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceReferenceBuilder ^ HasConstraintName(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceReferenceBuilder ^ referenceReferenceBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="referenceReferenceBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="referenceReferenceBuilder"> The builder being used to configure the relationship. </param>
          <param name="name"> The name of the foreign key constraint. </param>
          <summary>
                Configures the foreign key constraint name for this relationship when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalReferenceReferenceBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalReferenceReferenceBuilderExtensions.HasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2" />
      </Targets>
      <Member MemberName="HasConstraintName&lt;TEntity,TRelatedEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasConstraintName&lt;TEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; referenceReferenceBuilder, string name) where TEntity : class where TRelatedEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; HasConstraintName&lt;class TEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; referenceReferenceBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalReferenceReferenceBuilderExtensions.HasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder{``0,``1},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasConstraintName(Of TEntity As Class, TRelatedEntity As Class) (referenceReferenceBuilder As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity), name As String) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" />
        <MemberSignature Language="F#" Value="static member HasConstraintName : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'Entity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalReferenceReferenceBuilderExtensions.HasConstraintName (referenceReferenceBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity, typename TRelatedEntity&gt;&#xA; where TEntity : class where TRelatedEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceReferenceBuilder&lt;TEntity, TRelatedEntity&gt; ^ HasConstraintName(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceReferenceBuilder&lt;TEntity, TRelatedEntity&gt; ^ referenceReferenceBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TRelatedEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="referenceReferenceBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type on one end of the relationship. </typeparam>
          <typeparam name="TRelatedEntity"> The entity type on the other end of the relationship. </typeparam>
          <param name="referenceReferenceBuilder"> The builder being used to configure the relationship. </param>
          <param name="name"> The name of the foreign key constraint. </param>
          <summary>
                Configures the foreign key constraint name for this relationship when targeting a relational database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.RelationalReferenceReferenceBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.RelationalReferenceReferenceBuilderExtensions.HasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder{``0,``1},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.DbDataReader" />
      </Targets>
      <Member MemberName="GetValueOrDefault&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetValueOrDefault&lt;T&gt; (this System.Data.Common.DbDataReader reader, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetValueOrDefault&lt;T&gt;(class System.Data.Common.DbDataReader reader, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.DbDataReaderExtension.GetValueOrDefault``1(System.Data.Common.DbDataReader,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValueOrDefault(Of T) (reader As DbDataReader, name As String) As T" />
        <MemberSignature Language="F#" Value="static member GetValueOrDefault : System.Data.Common.DbDataReader * string -&gt; 'T" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.DbDataReaderExtension.GetValueOrDefault (reader, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T GetValueOrDefault(System::Data::Common::DbDataReader ^ reader, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="reader" Type="System.Data.Common.DbDataReader" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="reader">To be added.</param>
          <param name="name">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Internal.DbDataReaderExtension" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.DbDataReaderExtension.GetValueOrDefault``1(System.Data.Common.DbDataReader,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddScaffolding">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddScaffolding (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddScaffolding(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingServiceCollectionExtensions.AddScaffolding(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddScaffolding (serviceCollection As IServiceCollection) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddScaffolding : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingServiceCollectionExtensions.AddScaffolding serviceCollection" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddScaffolding(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ serviceCollection);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="serviceCollection">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingServiceCollectionExtensions" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingServiceCollectionExtensions.AddScaffolding(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddScaffolding">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddScaffolding (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Microsoft.EntityFrameworkCore.Design.Internal.IOperationReporter reporter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddScaffolding(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class Microsoft.EntityFrameworkCore.Design.Internal.IOperationReporter reporter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingServiceCollectionExtensions.AddScaffolding(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.EntityFrameworkCore.Design.Internal.IOperationReporter)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddScaffolding (serviceCollection As IServiceCollection, reporter As IOperationReporter) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddScaffolding : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.EntityFrameworkCore.Design.Internal.IOperationReporter -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingServiceCollectionExtensions.AddScaffolding (serviceCollection, reporter)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddScaffolding(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ serviceCollection, Microsoft::EntityFrameworkCore::Design::Internal::IOperationReporter ^ reporter);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="reporter" Type="Microsoft.EntityFrameworkCore.Design.Internal.IOperationReporter" />
        </Parameters>
        <Docs>
          <param name="serviceCollection">To be added.</param>
          <param name="reporter">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingServiceCollectionExtensions" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingServiceCollectionExtensions.AddScaffolding(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.EntityFrameworkCore.Design.Internal.IOperationReporter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Data.Common.DbDataReader" />
      </Targets>
      <Member MemberName="GetValueOrDefault&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetValueOrDefault&lt;T&gt; (this System.Data.Common.DbDataReader reader, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetValueOrDefault&lt;T&gt;(class System.Data.Common.DbDataReader reader, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqlDataReaderExtension.GetValueOrDefault``1(System.Data.Common.DbDataReader,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValueOrDefault(Of T) (reader As DbDataReader, name As String) As T" />
        <MemberSignature Language="F#" Value="static member GetValueOrDefault : System.Data.Common.DbDataReader * string -&gt; 'T" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqlDataReaderExtension.GetValueOrDefault (reader, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T GetValueOrDefault(System::Data::Common::DbDataReader ^ reader, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="reader" Type="System.Data.Common.DbDataReader" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="reader">To be added.</param>
          <param name="name">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqlDataReaderExtension" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqlDataReaderExtension.GetValueOrDefault``1(System.Data.Common.DbDataReader,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.SqlClient.SqlDataReader" />
      </Targets>
      <Member MemberName="GetValueOrDefault&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetValueOrDefault&lt;T&gt; (this System.Data.SqlClient.SqlDataReader reader, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetValueOrDefault&lt;T&gt;(class System.Data.SqlClient.SqlDataReader reader, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqlDataReaderExtension.GetValueOrDefault``1(System.Data.SqlClient.SqlDataReader,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValueOrDefault(Of T) (reader As SqlDataReader, name As String) As T" />
        <MemberSignature Language="F#" Value="static member GetValueOrDefault : System.Data.SqlClient.SqlDataReader * string -&gt; 'T" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqlDataReaderExtension.GetValueOrDefault (reader, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T GetValueOrDefault(System::Data::SqlClient::SqlDataReader ^ reader, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="reader">To be added.</param>
          <param name="name">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqlDataReaderExtension" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqlDataReaderExtension.GetValueOrDefault``1(System.Data.SqlClient.SqlDataReader,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TableSelectionSet" />
      </Targets>
      <Member MemberName="Allows">
        <MemberSignature Language="C#" Value="public static bool Allows (this Microsoft.EntityFrameworkCore.Scaffolding.Internal.TableSelectionSet tableSet, string tableName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Allows(class Microsoft.EntityFrameworkCore.Scaffolding.Internal.TableSelectionSet tableSet, string tableName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqliteTableSelectionSetExtensions.Allows(Microsoft.EntityFrameworkCore.Scaffolding.Internal.TableSelectionSet,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Allows (tableSet As TableSelectionSet, tableName As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member Allows : Microsoft.EntityFrameworkCore.Scaffolding.Internal.TableSelectionSet * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqliteTableSelectionSetExtensions.Allows (tableSet, tableName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Allows(Microsoft::EntityFrameworkCore::Scaffolding::Internal::TableSelectionSet ^ tableSet, System::String ^ tableName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="tableSet" Type="Microsoft.EntityFrameworkCore.Scaffolding.Internal.TableSelectionSet" RefType="this" />
          <Parameter Name="tableName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="tableSet"> the <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TableSelectionSet" /> to test </param>
          <param name="tableName"> name of the database table to check </param>
          <summary>
                Tests whether the table is allowed by the <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TableSelectionSet" /> and
                updates the <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TableSelectionSet" />'s <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TableSelectionSet.Selection" />(s)
                to mark that they have been matched.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqliteTableSelectionSetExtensions" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqliteTableSelectionSetExtensions.Allows(Microsoft.EntityFrameworkCore.Scaffolding.Internal.TableSelectionSet,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn" />
      </Targets>
      <Member MemberName="GetUnderlyingStoreType">
        <MemberSignature Language="C#" Value="public static string GetUnderlyingStoreType (this Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn column);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetUnderlyingStoreType(class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn column) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumnExtensions.GetUnderlyingStoreType(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetUnderlyingStoreType (column As DatabaseColumn) As String" />
        <MemberSignature Language="F#" Value="static member GetUnderlyingStoreType : Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn -&gt; string" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumnExtensions.GetUnderlyingStoreType column" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GetUnderlyingStoreType(Microsoft::EntityFrameworkCore::Scaffolding::Metadata::DatabaseColumn ^ column);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="column" Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn" RefType="this" />
        </Parameters>
        <Docs>
          <param name="column">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumnExtensions" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumnExtensions.GetUnderlyingStoreType(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn" />
      </Targets>
      <Member MemberName="SetUnderlyingStoreType">
        <MemberSignature Language="C#" Value="public static void SetUnderlyingStoreType (this Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn column, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetUnderlyingStoreType(class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn column, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumnExtensions.SetUnderlyingStoreType(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetUnderlyingStoreType (column As DatabaseColumn, value As String)" />
        <MemberSignature Language="F#" Value="static member SetUnderlyingStoreType : Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumnExtensions.SetUnderlyingStoreType (column, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetUnderlyingStoreType(Microsoft::EntityFrameworkCore::Scaffolding::Metadata::DatabaseColumn ^ column, System::String ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="column" Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn" RefType="this" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="column">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumnExtensions" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumnExtensions.SetUnderlyingStoreType(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn" />
      </Targets>
      <Member MemberName="DisplayName">
        <MemberSignature Language="C#" Value="public static string DisplayName (this Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn column);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string DisplayName(class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn column) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseColumnExtensions.DisplayName(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DisplayName (column As DatabaseColumn) As String" />
        <MemberSignature Language="F#" Value="static member DisplayName : Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn -&gt; string" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseColumnExtensions.DisplayName column" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ DisplayName(Microsoft::EntityFrameworkCore::Scaffolding::Metadata::DatabaseColumn ^ column);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="column" Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn" RefType="this" />
        </Parameters>
        <Docs>
          <param name="column">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseColumnExtensions" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseColumnExtensions.DisplayName(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn" />
      </Targets>
      <Member MemberName="IsKeyOrIndex">
        <MemberSignature Language="C#" Value="public static bool IsKeyOrIndex (this Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn column);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyOrIndex(class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn column) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseColumnExtensions.IsKeyOrIndex(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsKeyOrIndex (column As DatabaseColumn) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsKeyOrIndex : Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseColumnExtensions.IsKeyOrIndex column" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsKeyOrIndex(Microsoft::EntityFrameworkCore::Scaffolding::Metadata::DatabaseColumn ^ column);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="column" Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn" RefType="this" />
        </Parameters>
        <Docs>
          <param name="column">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseColumnExtensions" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseColumnExtensions.IsKeyOrIndex(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn" />
      </Targets>
      <Member MemberName="IsRowVersion">
        <MemberSignature Language="C#" Value="public static bool IsRowVersion (this Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn column);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsRowVersion(class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn column) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseColumnExtensions.IsRowVersion(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsRowVersion (column As DatabaseColumn) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsRowVersion : Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseColumnExtensions.IsRowVersion column" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsRowVersion(Microsoft::EntityFrameworkCore::Scaffolding::Metadata::DatabaseColumn ^ column);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="column" Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn" RefType="this" />
        </Parameters>
        <Docs>
          <param name="column">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseColumnExtensions" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseColumnExtensions.IsRowVersion(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey" />
      </Targets>
      <Member MemberName="DisplayName">
        <MemberSignature Language="C#" Value="public static string DisplayName (this Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey foreignKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string DisplayName(class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey foreignKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseForeignKeyExtensions.DisplayName(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DisplayName (foreignKey As DatabaseForeignKey) As String" />
        <MemberSignature Language="F#" Value="static member DisplayName : Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey -&gt; string" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseForeignKeyExtensions.DisplayName foreignKey" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ DisplayName(Microsoft::EntityFrameworkCore::Scaffolding::Metadata::DatabaseForeignKey ^ foreignKey);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="foreignKey">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseForeignKeyExtensions" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseForeignKeyExtensions.DisplayName(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable" />
      </Targets>
      <Member MemberName="DisplayName">
        <MemberSignature Language="C#" Value="public static string DisplayName (this Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable table);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string DisplayName(class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable table) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseTableExtensions.DisplayName(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DisplayName (table As DatabaseTable) As String" />
        <MemberSignature Language="F#" Value="static member DisplayName : Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable -&gt; string" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseTableExtensions.DisplayName table" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ DisplayName(Microsoft::EntityFrameworkCore::Scaffolding::Metadata::DatabaseTable ^ table);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="table" Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="table">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseTableExtensions" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseTableExtensions.DisplayName(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ColumnModel" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerColumnModelAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ColumnModel column);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerColumnModelAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ColumnModel column) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelExtensions.SqlServer(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ColumnModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SqlServer (column As ColumnModel) As SqlServerColumnModelAnnotations" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ColumnModel -&gt; Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerColumnModelAnnotations" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelExtensions.SqlServer column" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Scaffolding::Metadata::Internal::SqlServerColumnModelAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Scaffolding::Metadata::ColumnModel ^ column);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerColumnModelAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="column" Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ColumnModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="column">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelExtensions.SqlServer(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ColumnModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel databaseModel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel databaseModel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelExtensions.SqlServer(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel)" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel -&gt; Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelAnnotations" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelExtensions.SqlServer databaseModel" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Scaffolding::Metadata::Internal::SqlServerDatabaseModelAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Scaffolding::Metadata::DatabaseModel ^ databaseModel);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseModel" Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="databaseModel">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelExtensions.SqlServer(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.IndexModel" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerIndexModelAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Scaffolding.Metadata.IndexModel index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerIndexModelAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.IndexModel index) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelExtensions.SqlServer(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.IndexModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SqlServer (index As IndexModel) As SqlServerIndexModelAnnotations" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Scaffolding.Metadata.IndexModel -&gt; Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerIndexModelAnnotations" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelExtensions.SqlServer index" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Scaffolding::Metadata::Internal::SqlServerIndexModelAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Scaffolding::Metadata::IndexModel ^ index);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerIndexModelAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.IndexModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="index">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelExtensions" Member="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelExtensions.SqlServer(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.IndexModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalEntityTypeBuilderAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexBuilderAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexBuilderAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalIndexBuilderAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalIndexBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyBuilderAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyBuilderAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalKeyBuilderAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalKeyBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelBuilderAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelBuilderAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalModelBuilderAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalModelBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyBuilderAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyBuilderAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalPropertyBuilderAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalPropertyBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalForeignKeyBuilderAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalRelationshipBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteInternalMetadataBuilderExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="IsSqlite">
        <MemberSignature Language="C#" Value="public static bool IsSqlite (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade database);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSqlite(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade database) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteDatabaseFacadeExtensions.IsSqlite(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsSqlite (database As DatabaseFacade) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsSqlite : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqliteDatabaseFacadeExtensions.IsSqlite database" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsSqlite(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ database);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="database" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
        </Parameters>
        <Docs>
          <param name="database"> The facade from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" />. </param>
          <summary>
            <para>
                    Returns true if the database provider currently in use is the SQLite provider.
                </para>
            <para>
                    This method can only be used after the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> has been configured because
                    it is only then that the provider is known. This means that this method cannot be used
                    in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> because this is where application code sets the
                    provider to use as part of configuring the context.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteDatabaseFacadeExtensions.IsSqlite(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />
      </Targets>
      <Member MemberName="UseSqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseSqlite (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, System.Data.Common.DbConnection connection, Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt; sqliteOptionsAction = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseSqlite(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, class System.Data.Common.DbConnection connection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt; sqliteOptionsAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlite (optionsBuilder As DbContextOptionsBuilder, connection As DbConnection, Optional sqliteOptionsAction As Action(Of SqliteDbContextOptionsBuilder) = null) As DbContextOptionsBuilder" />
        <MemberSignature Language="F#" Value="static member UseSqlite : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder * System.Data.Common.DbConnection * Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite (optionsBuilder, connection, sqliteOptionsAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" RefType="this" />
          <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
          <Parameter Name="sqliteOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="optionsBuilder"> The builder being used to configure the context. </param>
          <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
          <param name="sqliteOptionsAction">An optional action to allow additional SQLite specific configuration.</param>
          <summary>
                Configures the context to connect to a SQLite database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />
      </Targets>
      <Member MemberName="UseSqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseSqlite (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, string connectionString, Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt; sqliteOptionsAction = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseSqlite(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, string connectionString, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt; sqliteOptionsAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlite (optionsBuilder As DbContextOptionsBuilder, connectionString As String, Optional sqliteOptionsAction As Action(Of SqliteDbContextOptionsBuilder) = null) As DbContextOptionsBuilder" />
        <MemberSignature Language="F#" Value="static member UseSqlite : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite (optionsBuilder, connectionString, sqliteOptionsAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" RefType="this" />
          <Parameter Name="connectionString" Type="System.String" />
          <Parameter Name="sqliteOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="optionsBuilder"> The builder being used to configure the context. </param>
          <param name="connectionString"> The connection string of the database to connect to. </param>
          <param name="sqliteOptionsAction">An optional action to allow additional SQLite specific configuration.</param>
          <summary>
                Configures the context to connect to a SQLite database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" />
      </Targets>
      <Member MemberName="UseSqlite&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; UseSqlite&lt;TContext&gt; (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; optionsBuilder, System.Data.Common.DbConnection connection, Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt; sqliteOptionsAction = null) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; UseSqlite&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; optionsBuilder, class System.Data.Common.DbConnection connection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt; sqliteOptionsAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlite(Of TContext As DbContext) (optionsBuilder As DbContextOptionsBuilder(Of TContext), connection As DbConnection, Optional sqliteOptionsAction As Action(Of SqliteDbContextOptionsBuilder) = null) As DbContextOptionsBuilder(Of TContext)" />
        <MemberSignature Language="F#" Value="static member UseSqlite : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; * System.Data.Common.DbConnection * Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite (optionsBuilder, connection, sqliteOptionsAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;" RefType="this" />
          <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
          <Parameter Name="sqliteOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context to be configured. </typeparam>
          <param name="optionsBuilder"> The builder being used to configure the context. </param>
          <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
          <param name="sqliteOptionsAction">An optional action to allow additional SQLite specific configuration.</param>
          <summary>
                Configures the context to connect to a SQLite database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" />
      </Targets>
      <Member MemberName="UseSqlite&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; UseSqlite&lt;TContext&gt; (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; optionsBuilder, string connectionString, Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt; sqliteOptionsAction = null) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; UseSqlite&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; optionsBuilder, string connectionString, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt; sqliteOptionsAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlite(Of TContext As DbContext) (optionsBuilder As DbContextOptionsBuilder(Of TContext), connectionString As String, Optional sqliteOptionsAction As Action(Of SqliteDbContextOptionsBuilder) = null) As DbContextOptionsBuilder(Of TContext)" />
        <MemberSignature Language="F#" Value="static member UseSqlite : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite (optionsBuilder, connectionString, sqliteOptionsAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;" RefType="this" />
          <Parameter Name="connectionString" Type="System.String" />
          <Parameter Name="sqliteOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context to be configured. </typeparam>
          <param name="optionsBuilder"> The builder being used to configure the context. </param>
          <param name="connectionString"> The connection string of the database to connect to. </param>
          <param name="sqliteOptionsAction">An optional action to allow additional SQLite specific configuration.</param>
          <summary>
                Configures the context to connect to a SQLite database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />
      </Targets>
      <Member MemberName="ForSqliteToTable">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ForSqliteToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder builder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ForSqliteToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder builder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteToTable (builder As EntityTypeBuilder, name As String) As EntityTypeBuilder" />
        <MemberSignature Language="F#" Value="static member ForSqliteToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable (builder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ ForSqliteToTable(Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ builder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the table. </param>
          <summary>
                Configures the table that the entity maps to when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1" />
      </Targets>
      <Member MemberName="ForSqliteToTable&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ForSqliteToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; builder, string name) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ForSqliteToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; builder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteToTable(Of TEntity As Class) (builder As EntityTypeBuilder(Of TEntity), name As String) As EntityTypeBuilder(Of TEntity)" />
        <MemberSignature Language="F#" Value="static member ForSqliteToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable (builder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder&lt;TEntity&gt; ^ ForSqliteToTable(Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder&lt;TEntity&gt; ^ builder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type being configured. </typeparam>
          <param name="builder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the table. </param>
          <summary>
                Configures the table that the entity maps to when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" />
      </Targets>
      <Member MemberName="ForSqliteHasName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder ForSqliteHasName (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder builder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder ForSqliteHasName(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder builder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteIndexBuilderExtensions.ForSqliteHasName(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasName (builder As IndexBuilder, name As String) As IndexBuilder" />
        <MemberSignature Language="F#" Value="static member ForSqliteHasName : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqliteIndexBuilderExtensions.ForSqliteHasName (builder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::IndexBuilder ^ ForSqliteHasName(Microsoft::EntityFrameworkCore::Metadata::Builders::IndexBuilder ^ builder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder"> The builder for the index being configured. </param>
          <param name="name"> The name of the index. </param>
          <summary>
                Configures the name of the index in the database when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteIndexBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteIndexBuilderExtensions.ForSqliteHasName(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" />
      </Targets>
      <Member MemberName="ForSqliteHasName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder ForSqliteHasName (this Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder builder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder ForSqliteHasName(class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder builder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteKeyBuilderExtensions.ForSqliteHasName(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasName (builder As KeyBuilder, name As String) As KeyBuilder" />
        <MemberSignature Language="F#" Value="static member ForSqliteHasName : Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" Usage="Microsoft.EntityFrameworkCore.SqliteKeyBuilderExtensions.ForSqliteHasName (builder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::KeyBuilder ^ ForSqliteHasName(Microsoft::EntityFrameworkCore::Metadata::Builders::KeyBuilder ^ builder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder"> The builder for the key being configured. </param>
          <param name="name"> The name of the key. </param>
          <summary>
                Configures the name of the key constraint in the database when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteKeyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteKeyBuilderExtensions.ForSqliteHasName(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IRelationalEntityTypeAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IRelationalEntityTypeAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sqlite (entityType As IEntityType) As IRelationalEntityTypeAnnotations" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IRelationalEntityTypeAnnotations" Usage="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalEntityTypeAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalEntityTypeAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IRelationalEntityTypeAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity to get metadata for. </param>
          <summary>
                Gets the SQLite specific metadata for an entity.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IRelationalForeignKeyAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IRelationalForeignKeyAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sqlite (foreignKey As IForeignKey) As IRelationalForeignKeyAnnotations" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.IForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.IRelationalForeignKeyAnnotations" Usage="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite foreignKey" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalForeignKeyAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalForeignKeyAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IRelationalForeignKeyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="foreignKey"> The entity to get metadata for. </param>
          <summary>
                Gets the SQLite specific metadata for a foreign key.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IRelationalIndexAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.IIndex index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IRelationalIndexAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.IIndex index) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IIndex)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sqlite (index As IIndex) As IRelationalIndexAnnotations" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.IIndex -&gt; Microsoft.EntityFrameworkCore.Metadata.IRelationalIndexAnnotations" Usage="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite index" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalIndexAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalIndexAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IRelationalIndexAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" RefType="this" />
        </Parameters>
        <Docs>
          <param name="index"> The index to get metadata for. </param>
          <summary>
                Gets the SQLite specific metadata for an index.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IIndex)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IRelationalKeyAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.IKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IRelationalKeyAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.IKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sqlite (key As IKey) As IRelationalKeyAnnotations" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.IKey -&gt; Microsoft.EntityFrameworkCore.Metadata.IRelationalKeyAnnotations" Usage="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite key" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalKeyAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalKeyAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IRelationalKeyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key"> The key to get metadata for. </param>
          <summary>
                Gets the SQLite specific metadata for a key.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IRelationalModelAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IRelationalModelAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sqlite (model As IModel) As IRelationalModelAnnotations" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.Metadata.IRelationalModelAnnotations" Usage="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite model" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalModelAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalModelAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IRelationalModelAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model"> The model to get metadata for. </param>
          <summary>
                Gets the SQLite specific metadata for a model.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalEntityTypeAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalEntityTypeAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sqlite (entityType As IMutableEntityType) As RelationalEntityTypeAnnotations" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalEntityTypeAnnotations" Usage="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::RelationalEntityTypeAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalEntityTypeAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity to get metadata for. </param>
          <summary>
                Gets the SQLite specific metadata for an entity.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalForeignKeyAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey foreignKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalForeignKeyAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey foreignKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sqlite (foreignKey As IMutableForeignKey) As RelationalForeignKeyAnnotations" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalForeignKeyAnnotations" Usage="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite foreignKey" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::RelationalForeignKeyAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^ foreignKey);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalForeignKeyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="foreignKey"> The entity to get metadata for. </param>
          <summary>
                Gets the SQLite specific metadata for a foreign key.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalIndexAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.IMutableIndex index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalIndexAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.IMutableIndex index) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sqlite (index As IMutableIndex) As RelationalIndexAnnotations" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.IMutableIndex -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalIndexAnnotations" Usage="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite index" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::RelationalIndexAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IMutableIndex ^ index);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalIndexAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" RefType="this" />
        </Parameters>
        <Docs>
          <param name="index"> The index to get metadata for. </param>
          <summary>
                Gets the SQLite specific metadata for an index.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableKey" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalKeyAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.IMutableKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalKeyAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.IMutableKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IMutableKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sqlite (key As IMutableKey) As RelationalKeyAnnotations" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.IMutableKey -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalKeyAnnotations" Usage="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite key" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::RelationalKeyAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ key);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalKeyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key"> The key to get metadata for. </param>
          <summary>
                Gets the SQLite specific metadata for a key.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IMutableKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalModelAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalModelAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IMutableModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sqlite (model As IMutableModel) As RelationalModelAnnotations" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.IMutableModel -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalModelAnnotations" Usage="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite model" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::RelationalModelAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalModelAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model"> The model to get metadata for. </param>
          <summary>
                Gets the SQLite specific metadata for a model.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IMutableModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalPropertyAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalPropertyAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sqlite (property As IMutableProperty) As RelationalPropertyAnnotations" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalPropertyAnnotations" Usage="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::RelationalPropertyAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalPropertyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get metadata for. </param>
          <summary>
                Gets the SQLite specific metadata for a property.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="Sqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyAnnotations Sqlite (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyAnnotations Sqlite(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sqlite (property As IProperty) As IRelationalPropertyAnnotations" />
        <MemberSignature Language="F#" Value="static member Sqlite : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyAnnotations" Usage="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalPropertyAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalPropertyAnnotations ^ Sqlite(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get metadata for. </param>
          <summary>
                Gets the SQLite specific metadata for a property.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteMetadataExtensions.Sqlite(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="ForSqliteHasColumnName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasColumnName (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasColumnName(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqliteHasColumnName : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName (propertyBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ ForSqliteHasColumnName(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="name"> The name of the column. </param>
          <summary>
                Configures the column that the property maps to when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="ForSqliteHasColumnName&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqliteHasColumnName&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqliteHasColumnName&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasColumnName(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), name As String) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member ForSqliteHasColumnName : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName (propertyBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ ForSqliteHasColumnName(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="name"> The name of the column. </param>
          <summary>
                Configures the column that the property maps to when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="ForSqliteHasColumnType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasColumnType (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasColumnType(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqliteHasColumnType : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType (propertyBuilder, type)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ ForSqliteHasColumnType(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder, System::String ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="type" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="type"> The name of the data type of the column. </param>
          <summary>
                Configures the data type of the column that the property maps to when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="ForSqliteHasColumnType&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqliteHasColumnType&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqliteHasColumnType&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasColumnType(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), type As String) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member ForSqliteHasColumnType : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType (propertyBuilder, type)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ ForSqliteHasColumnType(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder, System::String ^ type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="type" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="type"> The name of the data type of the column. </param>
          <summary>
                Configures the data type of the column that the property maps to when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="ForSqliteHasDefaultValue">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasDefaultValue (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasDefaultValue(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Object)" />
        <MemberSignature Language="F#" Value="static member ForSqliteHasDefaultValue : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue (propertyBuilder, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ ForSqliteHasDefaultValue(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder, System::Object ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="value"> The default value of the column. </param>
          <summary>
                Configures the default value for the column that the property maps to when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="ForSqliteHasDefaultValue&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqliteHasDefaultValue&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqliteHasDefaultValue&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasDefaultValue(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), value As Object) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member ForSqliteHasDefaultValue : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue (propertyBuilder, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ ForSqliteHasDefaultValue(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder, System::Object ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="value"> The default value of the column. </param>
          <summary>
                Configures the default value for the column that the property maps to when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="ForSqliteHasDefaultValueSql">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasDefaultValueSql (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasDefaultValueSql(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqliteHasDefaultValueSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql (propertyBuilder, sql)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ ForSqliteHasDefaultValueSql(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder, System::String ^ sql);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="sql" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="sql"> The SQL expression for the default value of the column. </param>
          <summary>
                Configures the default value expression for the column that the property maps to when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="ForSqliteHasDefaultValueSql&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqliteHasDefaultValueSql&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string sql);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqliteHasDefaultValueSql&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string sql) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasDefaultValueSql(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), sql As String) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member ForSqliteHasDefaultValueSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql (propertyBuilder, sql)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ ForSqliteHasDefaultValueSql(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder, System::String ^ sql);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="sql" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="sql"> The SQL expression for the default value of the column. </param>
          <summary>
                Configures the default value expression for the column that the property maps to when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder" />
      </Targets>
      <Member MemberName="ForSqliteHasConstraintName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder ForSqliteHasConstraintName (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder builder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder ForSqliteHasConstraintName(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder builder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteReferenceCollectionBuilderExtensions.ForSqliteHasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasConstraintName (builder As ReferenceCollectionBuilder, name As String) As ReferenceCollectionBuilder" />
        <MemberSignature Language="F#" Value="static member ForSqliteHasConstraintName : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder" Usage="Microsoft.EntityFrameworkCore.SqliteReferenceCollectionBuilderExtensions.ForSqliteHasConstraintName (builder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceCollectionBuilder ^ ForSqliteHasConstraintName(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceCollectionBuilder ^ builder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder"> The builder being used to configure the relationship. </param>
          <param name="name"> The name of the foreign key constraint. </param>
          <summary>
                Configures the foreign key constraint name for this relationship when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteReferenceCollectionBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteReferenceCollectionBuilderExtensions.ForSqliteHasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2" />
      </Targets>
      <Member MemberName="ForSqliteHasConstraintName&lt;TEntity,TReferencedEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TEntity,TReferencedEntity&gt; ForSqliteHasConstraintName&lt;TEntity,TReferencedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TEntity,TReferencedEntity&gt; builder, string name) where TEntity : class where TReferencedEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2&lt;!!TEntity, !!TReferencedEntity&gt; ForSqliteHasConstraintName&lt;class TEntity, class TReferencedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2&lt;!!TEntity, !!TReferencedEntity&gt; builder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteReferenceCollectionBuilderExtensions.ForSqliteHasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{``0,``1},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasConstraintName(Of TEntity As Class, TReferencedEntity As Class) (builder As ReferenceCollectionBuilder(Of TEntity, TReferencedEntity), name As String) As ReferenceCollectionBuilder(Of TEntity, TReferencedEntity)" />
        <MemberSignature Language="F#" Value="static member ForSqliteHasConstraintName : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;'Entity, 'ReferencedEntity (requires 'Entity : null and 'ReferencedEntity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;'Entity, 'ReferencedEntity (requires 'Entity : null and 'ReferencedEntity : null)&gt; (requires 'Entity : null and 'ReferencedEntity : null)" Usage="Microsoft.EntityFrameworkCore.SqliteReferenceCollectionBuilderExtensions.ForSqliteHasConstraintName (builder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity, typename TReferencedEntity&gt;&#xA; where TEntity : class where TReferencedEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceCollectionBuilder&lt;TEntity, TReferencedEntity&gt; ^ ForSqliteHasConstraintName(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceCollectionBuilder&lt;TEntity, TReferencedEntity&gt; ^ builder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TEntity,TReferencedEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TReferencedEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TEntity,TReferencedEntity&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The principal entity type in this relationship. </typeparam>
          <typeparam name="TReferencedEntity"> The dependent entity type in this relationship. </typeparam>
          <param name="builder"> The builder being used to configure the relationship. </param>
          <param name="name"> The name of the foreign key constraint. </param>
          <summary>
                Configures the foreign key constraint name for this relationship when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteReferenceCollectionBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteReferenceCollectionBuilderExtensions.ForSqliteHasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{``0,``1},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder" />
      </Targets>
      <Member MemberName="ForSqliteHasConstraintName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder ForSqliteHasConstraintName (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder builder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder ForSqliteHasConstraintName(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder builder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteReferenceReferenceBuilderExtensions.ForSqliteHasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasConstraintName (builder As ReferenceReferenceBuilder, name As String) As ReferenceReferenceBuilder" />
        <MemberSignature Language="F#" Value="static member ForSqliteHasConstraintName : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder" Usage="Microsoft.EntityFrameworkCore.SqliteReferenceReferenceBuilderExtensions.ForSqliteHasConstraintName (builder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceReferenceBuilder ^ ForSqliteHasConstraintName(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceReferenceBuilder ^ builder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder"> The builder being used to configure the relationship. </param>
          <param name="name"> The name of the foreign key constraint. </param>
          <summary>
                Configures the foreign key constraint name for this relationship when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteReferenceReferenceBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteReferenceReferenceBuilderExtensions.ForSqliteHasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2" />
      </Targets>
      <Member MemberName="ForSqliteHasConstraintName&lt;TEntity,TReferencedEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TReferencedEntity&gt; ForSqliteHasConstraintName&lt;TEntity,TReferencedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TReferencedEntity&gt; builder, string name) where TEntity : class where TReferencedEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!!TEntity, !!TReferencedEntity&gt; ForSqliteHasConstraintName&lt;class TEntity, class TReferencedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!!TEntity, !!TReferencedEntity&gt; builder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteReferenceReferenceBuilderExtensions.ForSqliteHasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder{``0,``1},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasConstraintName(Of TEntity As Class, TReferencedEntity As Class) (builder As ReferenceReferenceBuilder(Of TEntity, TReferencedEntity), name As String) As ReferenceReferenceBuilder(Of TEntity, TReferencedEntity)" />
        <MemberSignature Language="F#" Value="static member ForSqliteHasConstraintName : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'ReferencedEntity (requires 'Entity : null and 'ReferencedEntity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'ReferencedEntity (requires 'Entity : null and 'ReferencedEntity : null)&gt; (requires 'Entity : null and 'ReferencedEntity : null)" Usage="Microsoft.EntityFrameworkCore.SqliteReferenceReferenceBuilderExtensions.ForSqliteHasConstraintName (builder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity, typename TReferencedEntity&gt;&#xA; where TEntity : class where TReferencedEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceReferenceBuilder&lt;TEntity, TReferencedEntity&gt; ^ ForSqliteHasConstraintName(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceReferenceBuilder&lt;TEntity, TReferencedEntity&gt; ^ builder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TReferencedEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TReferencedEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TReferencedEntity&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type on one end of the relationship. </typeparam>
          <typeparam name="TReferencedEntity"> The entity type on the other end of the relationship. </typeparam>
          <param name="builder"> The builder being used to configure the relationship. </param>
          <param name="name"> The name of the foreign key constraint. </param>
          <summary>
                Configures the foreign key constraint name for this relationship when targeting SQLite.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqliteReferenceReferenceBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqliteReferenceReferenceBuilderExtensions.ForSqliteHasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder{``0,``1},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerEntityTypeBuilderAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerEntityTypeBuilderAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerEntityTypeBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::SqlServer::Metadata::Internal::SqlServerEntityTypeBuilderAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerEntityTypeBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerIndexBuilderAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerIndexBuilderAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerIndexBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::SqlServer::Metadata::Internal::SqlServerIndexBuilderAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalIndexBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerIndexBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerKeyBuilderAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerKeyBuilderAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerKeyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::SqlServer::Metadata::Internal::SqlServerKeyBuilderAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalKeyBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerKeyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerModelBuilderAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerModelBuilderAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerModelBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::SqlServer::Metadata::Internal::SqlServerModelBuilderAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalModelBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerModelBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerPropertyBuilderAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerPropertyBuilderAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerPropertyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::SqlServer::Metadata::Internal::SqlServerPropertyBuilderAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalPropertyBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerPropertyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer (builder, configurationSource)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Internal::RelationalForeignKeyBuilderAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalRelationshipBuilder ^ builder, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" RefType="this" />
          <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configurationSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerInternalMetadataBuilderExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Data.Common.DbDataReader" />
      </Targets>
      <Member MemberName="GetValueOrDefault&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetValueOrDefault&lt;T&gt; (this System.Data.Common.DbDataReader reader, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetValueOrDefault&lt;T&gt;(class System.Data.Common.DbDataReader reader, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlDataReaderExtension.GetValueOrDefault``1(System.Data.Common.DbDataReader,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValueOrDefault(Of T) (reader As DbDataReader, name As String) As T" />
        <MemberSignature Language="F#" Value="static member GetValueOrDefault : System.Data.Common.DbDataReader * string -&gt; 'T" Usage="Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlDataReaderExtension.GetValueOrDefault (reader, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T GetValueOrDefault(System::Data::Common::DbDataReader ^ reader, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="reader" Type="System.Data.Common.DbDataReader" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="reader">To be added.</param>
          <param name="name">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlDataReaderExtension" Member="M:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlDataReaderExtension.GetValueOrDefault``1(System.Data.Common.DbDataReader,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Data.Common.DbDataRecord" />
      </Targets>
      <Member MemberName="GetValueOrDefault&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetValueOrDefault&lt;T&gt; (this System.Data.Common.DbDataRecord record, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetValueOrDefault&lt;T&gt;(class System.Data.Common.DbDataRecord record, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlDataReaderExtension.GetValueOrDefault``1(System.Data.Common.DbDataRecord,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValueOrDefault(Of T) (record As DbDataRecord, name As String) As T" />
        <MemberSignature Language="F#" Value="static member GetValueOrDefault : System.Data.Common.DbDataRecord * string -&gt; 'T" Usage="Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlDataReaderExtension.GetValueOrDefault (record, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T GetValueOrDefault(System::Data::Common::DbDataRecord ^ record, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="record" Type="System.Data.Common.DbDataRecord" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="record">To be added.</param>
          <param name="name">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlDataReaderExtension" Member="M:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlDataReaderExtension.GetValueOrDefault``1(System.Data.Common.DbDataRecord,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="IsSqlServer">
        <MemberSignature Language="C#" Value="public static bool IsSqlServer (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade database);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSqlServer(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade database) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDatabaseFacadeExtensions.IsSqlServer(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsSqlServer (database As DatabaseFacade) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsSqlServer : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerDatabaseFacadeExtensions.IsSqlServer database" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsSqlServer(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ database);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="database" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
        </Parameters>
        <Docs>
          <param name="database"> The facade from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" />. </param>
          <summary>
            <para>
                    Returns true if the database provider currently in use is the SQL Server provider.
                </para>
            <para>
                    This method can only be used after the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> has been configured because
                    it is only then that the provider is known. This means that this method cannot be used
                    in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> because this is where application code sets the
                    provider to use as part of configuring the context.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDatabaseFacadeExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDatabaseFacadeExtensions.IsSqlServer(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />
      </Targets>
      <Member MemberName="UseSqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseSqlServer (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, System.Data.Common.DbConnection connection, Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt; sqlServerOptionsAction = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseSqlServer(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, class System.Data.Common.DbConnection connection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt; sqlServerOptionsAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlServer (optionsBuilder As DbContextOptionsBuilder, connection As DbConnection, Optional sqlServerOptionsAction As Action(Of SqlServerDbContextOptionsBuilder) = null) As DbContextOptionsBuilder" />
        <MemberSignature Language="F#" Value="static member UseSqlServer : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder * System.Data.Common.DbConnection * Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer (optionsBuilder, connection, sqlServerOptionsAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" RefType="this" />
          <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
          <Parameter Name="sqlServerOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="optionsBuilder"> The builder being used to configure the context. </param>
          <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
          <param name="sqlServerOptionsAction">An optional action to allow additional SQL Server specific configuration.</param>
          <summary>
                Configures the context to connect to a Microsoft SQL Server database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />
      </Targets>
      <Member MemberName="UseSqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseSqlServer (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, string connectionString, Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt; sqlServerOptionsAction = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseSqlServer(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, string connectionString, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt; sqlServerOptionsAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlServer (optionsBuilder As DbContextOptionsBuilder, connectionString As String, Optional sqlServerOptionsAction As Action(Of SqlServerDbContextOptionsBuilder) = null) As DbContextOptionsBuilder" />
        <MemberSignature Language="F#" Value="static member UseSqlServer : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer (optionsBuilder, connectionString, sqlServerOptionsAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" RefType="this" />
          <Parameter Name="connectionString" Type="System.String" />
          <Parameter Name="sqlServerOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="optionsBuilder"> The builder being used to configure the context. </param>
          <param name="connectionString"> The connection string of the database to connect to. </param>
          <param name="sqlServerOptionsAction">An optional action to allow additional SQL Server specific configuration.</param>
          <summary>
                Configures the context to connect to a Microsoft SQL Server database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" />
      </Targets>
      <Member MemberName="UseSqlServer&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; UseSqlServer&lt;TContext&gt; (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; optionsBuilder, System.Data.Common.DbConnection connection, Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt; sqlServerOptionsAction = null) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; UseSqlServer&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; optionsBuilder, class System.Data.Common.DbConnection connection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt; sqlServerOptionsAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlServer(Of TContext As DbContext) (optionsBuilder As DbContextOptionsBuilder(Of TContext), connection As DbConnection, Optional sqlServerOptionsAction As Action(Of SqlServerDbContextOptionsBuilder) = null) As DbContextOptionsBuilder(Of TContext)" />
        <MemberSignature Language="F#" Value="static member UseSqlServer : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; * System.Data.Common.DbConnection * Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer (optionsBuilder, connection, sqlServerOptionsAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;" RefType="this" />
          <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
          <Parameter Name="sqlServerOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context to be configured. </typeparam>
          <param name="optionsBuilder"> The builder being used to configure the context. </param>
          <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
          <param name="sqlServerOptionsAction">An optional action to allow additional SQL Server specific configuration.</param>
          <summary>
                Configures the context to connect to a Microsoft SQL Server database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" />
      </Targets>
      <Member MemberName="UseSqlServer&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; UseSqlServer&lt;TContext&gt; (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; optionsBuilder, string connectionString, Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt; sqlServerOptionsAction = null) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; UseSqlServer&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; optionsBuilder, string connectionString, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt; sqlServerOptionsAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlServer(Of TContext As DbContext) (optionsBuilder As DbContextOptionsBuilder(Of TContext), connectionString As String, Optional sqlServerOptionsAction As Action(Of SqlServerDbContextOptionsBuilder) = null) As DbContextOptionsBuilder(Of TContext)" />
        <MemberSignature Language="F#" Value="static member UseSqlServer : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer (optionsBuilder, connectionString, sqlServerOptionsAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;" RefType="this" />
          <Parameter Name="connectionString" Type="System.String" />
          <Parameter Name="sqlServerOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context to be configured. </typeparam>
          <param name="optionsBuilder"> The builder being used to configure the context. </param>
          <param name="connectionString"> The connection string of the database to connect to. </param>
          <param name="sqlServerOptionsAction">An optional action to allow additional SQL Server specific configuration.</param>
          <summary>
                Configures the context to connect to a Microsoft SQL Server database.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffDay">
        <MemberSignature Language="C#" Value="public static int DateDiffDay (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTime startDate, DateTime endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffDay(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTime startDate, valuetype System.DateTime endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffDay (_ As DbFunctions, startDate As DateTime, endDate As DateTime) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffDay : Microsoft.EntityFrameworkCore.DbFunctions * DateTime * DateTime -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffDay(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTime startDate, DateTime endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTime" />
          <Parameter Name="endDate" Type="System.DateTime" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of day boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(DAY,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffDay">
        <MemberSignature Language="C#" Value="public static int DateDiffDay (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffDay(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTimeOffset startDate, valuetype System.DateTimeOffset endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffDay (_ As DbFunctions, startDate As DateTimeOffset, endDate As DateTimeOffset) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffDay : Microsoft.EntityFrameworkCore.DbFunctions * DateTimeOffset * DateTimeOffset -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffDay(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTimeOffset" />
          <Parameter Name="endDate" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of day boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(DAY,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffDay">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffDay (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffDay(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffDay (_ As DbFunctions, startDate As Nullable(Of DateTime), endDate As Nullable(Of DateTime)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffDay : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffDay(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTime&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTime&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of day boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(DAY,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffDay">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffDay (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffDay(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffDay (_ As DbFunctions, startDate As Nullable(Of DateTimeOffset), endDate As Nullable(Of DateTimeOffset)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffDay : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffDay(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of day boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(DAY,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffHour">
        <MemberSignature Language="C#" Value="public static int DateDiffHour (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTime startDate, DateTime endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffHour(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTime startDate, valuetype System.DateTime endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffHour (_ As DbFunctions, startDate As DateTime, endDate As DateTime) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffHour : Microsoft.EntityFrameworkCore.DbFunctions * DateTime * DateTime -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffHour(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTime startDate, DateTime endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTime" />
          <Parameter Name="endDate" Type="System.DateTime" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of hour boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(HOUR,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffHour">
        <MemberSignature Language="C#" Value="public static int DateDiffHour (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffHour(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTimeOffset startDate, valuetype System.DateTimeOffset endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffHour (_ As DbFunctions, startDate As DateTimeOffset, endDate As DateTimeOffset) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffHour : Microsoft.EntityFrameworkCore.DbFunctions * DateTimeOffset * DateTimeOffset -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffHour(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTimeOffset" />
          <Parameter Name="endDate" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of hour boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(HOUR,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffHour">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffHour (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffHour(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffHour (_ As DbFunctions, startDate As Nullable(Of DateTime), endDate As Nullable(Of DateTime)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffHour : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffHour(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTime&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTime&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of hour boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(HOUR,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffHour">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffHour (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffHour(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffHour (_ As DbFunctions, startDate As Nullable(Of DateTimeOffset), endDate As Nullable(Of DateTimeOffset)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffHour : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffHour(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of hour boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(HOUR,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMicrosecond">
        <MemberSignature Language="C#" Value="public static int DateDiffMicrosecond (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTime startDate, DateTime endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffMicrosecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTime startDate, valuetype System.DateTime endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMicrosecond (_ As DbFunctions, startDate As DateTime, endDate As DateTime) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffMicrosecond : Microsoft.EntityFrameworkCore.DbFunctions * DateTime * DateTime -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffMicrosecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTime startDate, DateTime endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTime" />
          <Parameter Name="endDate" Type="System.DateTime" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of microsecond boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MICROSECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMicrosecond">
        <MemberSignature Language="C#" Value="public static int DateDiffMicrosecond (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffMicrosecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTimeOffset startDate, valuetype System.DateTimeOffset endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMicrosecond (_ As DbFunctions, startDate As DateTimeOffset, endDate As DateTimeOffset) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffMicrosecond : Microsoft.EntityFrameworkCore.DbFunctions * DateTimeOffset * DateTimeOffset -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffMicrosecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTimeOffset" />
          <Parameter Name="endDate" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of microsecond boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MICROSECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMicrosecond">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffMicrosecond (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffMicrosecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMicrosecond (_ As DbFunctions, startDate As Nullable(Of DateTime), endDate As Nullable(Of DateTime)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffMicrosecond : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffMicrosecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTime&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTime&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of microsecond boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MICROSECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMicrosecond">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffMicrosecond (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffMicrosecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMicrosecond (_ As DbFunctions, startDate As Nullable(Of DateTimeOffset), endDate As Nullable(Of DateTimeOffset)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffMicrosecond : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffMicrosecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of microsecond boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MICROSECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMillisecond">
        <MemberSignature Language="C#" Value="public static int DateDiffMillisecond (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTime startDate, DateTime endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffMillisecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTime startDate, valuetype System.DateTime endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMillisecond (_ As DbFunctions, startDate As DateTime, endDate As DateTime) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffMillisecond : Microsoft.EntityFrameworkCore.DbFunctions * DateTime * DateTime -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffMillisecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTime startDate, DateTime endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTime" />
          <Parameter Name="endDate" Type="System.DateTime" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of millisecond boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MILLISECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMillisecond">
        <MemberSignature Language="C#" Value="public static int DateDiffMillisecond (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffMillisecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTimeOffset startDate, valuetype System.DateTimeOffset endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMillisecond (_ As DbFunctions, startDate As DateTimeOffset, endDate As DateTimeOffset) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffMillisecond : Microsoft.EntityFrameworkCore.DbFunctions * DateTimeOffset * DateTimeOffset -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffMillisecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTimeOffset" />
          <Parameter Name="endDate" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of millisecond boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MILLISECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMillisecond">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffMillisecond (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffMillisecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMillisecond (_ As DbFunctions, startDate As Nullable(Of DateTime), endDate As Nullable(Of DateTime)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffMillisecond : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffMillisecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTime&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTime&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of millisecond boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MILLISECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMillisecond">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffMillisecond (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffMillisecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMillisecond (_ As DbFunctions, startDate As Nullable(Of DateTimeOffset), endDate As Nullable(Of DateTimeOffset)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffMillisecond : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffMillisecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of millisecond boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MILLISECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMinute">
        <MemberSignature Language="C#" Value="public static int DateDiffMinute (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTime startDate, DateTime endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffMinute(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTime startDate, valuetype System.DateTime endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMinute (_ As DbFunctions, startDate As DateTime, endDate As DateTime) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffMinute : Microsoft.EntityFrameworkCore.DbFunctions * DateTime * DateTime -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffMinute(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTime startDate, DateTime endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTime" />
          <Parameter Name="endDate" Type="System.DateTime" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of minute boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MINUTE,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMinute">
        <MemberSignature Language="C#" Value="public static int DateDiffMinute (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffMinute(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTimeOffset startDate, valuetype System.DateTimeOffset endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMinute (_ As DbFunctions, startDate As DateTimeOffset, endDate As DateTimeOffset) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffMinute : Microsoft.EntityFrameworkCore.DbFunctions * DateTimeOffset * DateTimeOffset -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffMinute(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTimeOffset" />
          <Parameter Name="endDate" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of minute boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MINUTE,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMinute">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffMinute (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffMinute(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMinute (_ As DbFunctions, startDate As Nullable(Of DateTime), endDate As Nullable(Of DateTime)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffMinute : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffMinute(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTime&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTime&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of minute boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MINUTE,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMinute">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffMinute (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffMinute(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMinute (_ As DbFunctions, startDate As Nullable(Of DateTimeOffset), endDate As Nullable(Of DateTimeOffset)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffMinute : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffMinute(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of minute boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MINUTE,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMonth">
        <MemberSignature Language="C#" Value="public static int DateDiffMonth (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTime startDate, DateTime endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffMonth(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTime startDate, valuetype System.DateTime endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMonth (_ As DbFunctions, startDate As DateTime, endDate As DateTime) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffMonth : Microsoft.EntityFrameworkCore.DbFunctions * DateTime * DateTime -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffMonth(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTime startDate, DateTime endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTime" />
          <Parameter Name="endDate" Type="System.DateTime" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of month boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MONTH,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMonth">
        <MemberSignature Language="C#" Value="public static int DateDiffMonth (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffMonth(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTimeOffset startDate, valuetype System.DateTimeOffset endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMonth (_ As DbFunctions, startDate As DateTimeOffset, endDate As DateTimeOffset) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffMonth : Microsoft.EntityFrameworkCore.DbFunctions * DateTimeOffset * DateTimeOffset -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffMonth(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTimeOffset" />
          <Parameter Name="endDate" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of month boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MONTH,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMonth">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffMonth (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffMonth(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMonth (_ As DbFunctions, startDate As Nullable(Of DateTime), endDate As Nullable(Of DateTime)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffMonth : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffMonth(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTime&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTime&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of month boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MONTH,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffMonth">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffMonth (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffMonth(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffMonth (_ As DbFunctions, startDate As Nullable(Of DateTimeOffset), endDate As Nullable(Of DateTimeOffset)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffMonth : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffMonth(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of month boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(MONTH,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffNanosecond">
        <MemberSignature Language="C#" Value="public static int DateDiffNanosecond (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTime startDate, DateTime endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffNanosecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTime startDate, valuetype System.DateTime endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffNanosecond (_ As DbFunctions, startDate As DateTime, endDate As DateTime) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffNanosecond : Microsoft.EntityFrameworkCore.DbFunctions * DateTime * DateTime -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffNanosecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTime startDate, DateTime endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTime" />
          <Parameter Name="endDate" Type="System.DateTime" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of nanosecond boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(NANOSECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffNanosecond">
        <MemberSignature Language="C#" Value="public static int DateDiffNanosecond (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffNanosecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTimeOffset startDate, valuetype System.DateTimeOffset endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffNanosecond (_ As DbFunctions, startDate As DateTimeOffset, endDate As DateTimeOffset) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffNanosecond : Microsoft.EntityFrameworkCore.DbFunctions * DateTimeOffset * DateTimeOffset -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffNanosecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTimeOffset" />
          <Parameter Name="endDate" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of nanosecond boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(NANOSECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffNanosecond">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffNanosecond (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffNanosecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffNanosecond (_ As DbFunctions, startDate As Nullable(Of DateTime), endDate As Nullable(Of DateTime)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffNanosecond : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffNanosecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTime&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTime&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of nanosecond boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(NANOSECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffNanosecond">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffNanosecond (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffNanosecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffNanosecond (_ As DbFunctions, startDate As Nullable(Of DateTimeOffset), endDate As Nullable(Of DateTimeOffset)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffNanosecond : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffNanosecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of nanosecond boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(NANOSECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffSecond">
        <MemberSignature Language="C#" Value="public static int DateDiffSecond (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTime startDate, DateTime endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffSecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTime startDate, valuetype System.DateTime endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffSecond (_ As DbFunctions, startDate As DateTime, endDate As DateTime) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffSecond : Microsoft.EntityFrameworkCore.DbFunctions * DateTime * DateTime -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffSecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTime startDate, DateTime endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTime" />
          <Parameter Name="endDate" Type="System.DateTime" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of second boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(SECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffSecond">
        <MemberSignature Language="C#" Value="public static int DateDiffSecond (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffSecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTimeOffset startDate, valuetype System.DateTimeOffset endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffSecond (_ As DbFunctions, startDate As DateTimeOffset, endDate As DateTimeOffset) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffSecond : Microsoft.EntityFrameworkCore.DbFunctions * DateTimeOffset * DateTimeOffset -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffSecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTimeOffset" />
          <Parameter Name="endDate" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of second boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(SECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffSecond">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffSecond (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffSecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffSecond (_ As DbFunctions, startDate As Nullable(Of DateTime), endDate As Nullable(Of DateTime)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffSecond : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffSecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTime&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTime&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of second boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(SECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffSecond">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffSecond (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffSecond(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffSecond (_ As DbFunctions, startDate As Nullable(Of DateTimeOffset), endDate As Nullable(Of DateTimeOffset)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffSecond : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffSecond(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of second boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(SECOND,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffYear">
        <MemberSignature Language="C#" Value="public static int DateDiffYear (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTime startDate, DateTime endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffYear(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTime startDate, valuetype System.DateTime endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffYear (_ As DbFunctions, startDate As DateTime, endDate As DateTime) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffYear : Microsoft.EntityFrameworkCore.DbFunctions * DateTime * DateTime -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffYear(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTime startDate, DateTime endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTime" />
          <Parameter Name="endDate" Type="System.DateTime" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of year boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(YEAR,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffYear">
        <MemberSignature Language="C#" Value="public static int DateDiffYear (this Microsoft.EntityFrameworkCore.DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DateDiffYear(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.DateTimeOffset startDate, valuetype System.DateTimeOffset endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffYear (_ As DbFunctions, startDate As DateTimeOffset, endDate As DateTimeOffset) As Integer" />
        <MemberSignature Language="F#" Value="static member DateDiffYear : Microsoft.EntityFrameworkCore.DbFunctions * DateTimeOffset * DateTimeOffset -&gt; int" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int DateDiffYear(Microsoft::EntityFrameworkCore::DbFunctions ^ _, DateTimeOffset startDate, DateTimeOffset endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.DateTimeOffset" />
          <Parameter Name="endDate" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of year boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(YEAR,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffYear">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffYear (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffYear(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffYear (_ As DbFunctions, startDate As Nullable(Of DateTime), endDate As Nullable(Of DateTime)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffYear : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffYear(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTime&gt; startDate, Nullable&lt;DateTime&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTime&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTime&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of year boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(YEAR,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="DateDiffYear">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; DateDiffYear (this Microsoft.EntityFrameworkCore.DbFunctions _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; DateDiffYear(class Microsoft.EntityFrameworkCore.DbFunctions _, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDate, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DateDiffYear (_ As DbFunctions, startDate As Nullable(Of DateTimeOffset), endDate As Nullable(Of DateTimeOffset)) As Nullable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member DateDiffYear : Microsoft.EntityFrameworkCore.DbFunctions * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; -&gt; Nullable&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear (_, startDate, endDate)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; DateDiffYear(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Nullable&lt;DateTimeOffset&gt; startDate, Nullable&lt;DateTimeOffset&gt; endDate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="startDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
          <Parameter Name="endDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        </Parameters>
        <Docs>
          <param name="_">The DbFunctions instance.</param>
          <param name="startDate">Starting date for the calculation.</param>
          <param name="endDate">Ending date for the calculation.</param>
          <summary>
               Counts the number of year boundaries crossed between the startDate and endDate.
               Corresponds to SQL Server's DATEDIFF(YEAR,startDate,endDate).
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="FreeText">
        <MemberSignature Language="C#" Value="public static bool FreeText (this Microsoft.EntityFrameworkCore.DbFunctions _, string propertyName, string freeText);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool FreeText(class Microsoft.EntityFrameworkCore.DbFunctions _, string propertyName, string freeText) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.FreeText(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FreeText (_ As DbFunctions, propertyName As String, freeText As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member FreeText : Microsoft.EntityFrameworkCore.DbFunctions * string * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.FreeText (_, propertyName, freeText)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool FreeText(Microsoft::EntityFrameworkCore::DbFunctions ^ _, System::String ^ propertyName, System::String ^ freeText);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool FreeText(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Platform::String ^ propertyName, Platform::String ^ freeText);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="propertyName" Type="System.String" />
          <Parameter Name="freeText" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="_">DbFunctions instance</param>
          <param name="propertyName">The property on which the search will be performed.</param>
          <param name="freeText">The text that will be searched for in the property.</param>
          <summary>
            <para>
                A DbFunction method stub that can be used in LINQ queries to target the SQL Server FREETEXT store function.
            </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.FreeText(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.DbFunctions" />
      </Targets>
      <Member MemberName="FreeText">
        <MemberSignature Language="C#" Value="public static bool FreeText (this Microsoft.EntityFrameworkCore.DbFunctions _, string propertyName, string freeText, int languageTerm);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool FreeText(class Microsoft.EntityFrameworkCore.DbFunctions _, string propertyName, string freeText, int32 languageTerm) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.FreeText(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FreeText (_ As DbFunctions, propertyName As String, freeText As String, languageTerm As Integer) As Boolean" />
        <MemberSignature Language="F#" Value="static member FreeText : Microsoft.EntityFrameworkCore.DbFunctions * string * string * int -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.FreeText (_, propertyName, freeText, languageTerm)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool FreeText(Microsoft::EntityFrameworkCore::DbFunctions ^ _, System::String ^ propertyName, System::String ^ freeText, int languageTerm);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool FreeText(Microsoft::EntityFrameworkCore::DbFunctions ^ _, Platform::String ^ propertyName, Platform::String ^ freeText, int languageTerm);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
          <Parameter Name="propertyName" Type="System.String" />
          <Parameter Name="freeText" Type="System.String" />
          <Parameter Name="languageTerm" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="_">DbFunctions instance</param>
          <param name="propertyName">The property on which the search will be performed.</param>
          <param name="freeText">The text that will be searched for in the property.</param>
          <param name="languageTerm">A Language ID from the sys.syslanguages table.</param>
          <summary>
            <para>
                A DbFunction method stub that can be used in LINQ queries to target the SQL Server FREETEXT store function.
            </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.FreeText(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerIsMemoryOptimized">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ForSqlServerIsMemoryOptimized (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, bool memoryOptimized = true);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ForSqlServerIsMemoryOptimized(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, bool memoryOptimized) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Boolean)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerIsMemoryOptimized : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized (entityTypeBuilder, memoryOptimized)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" />
          <Parameter Name="memoryOptimized" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
          <param name="memoryOptimized"> A value indicating whether the table is memory-optimized. </param>
          <summary>
                Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1" />
      </Targets>
      <Member MemberName="ForSqlServerIsMemoryOptimized&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ForSqlServerIsMemoryOptimized&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, bool memoryOptimized = true) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ForSqlServerIsMemoryOptimized&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, bool memoryOptimized) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerIsMemoryOptimized(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), Optional memoryOptimized As Boolean = true) As EntityTypeBuilder(Of TEntity)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerIsMemoryOptimized : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized (entityTypeBuilder, memoryOptimized)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="memoryOptimized" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type being configured. </typeparam>
          <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
          <param name="memoryOptimized"> A value indicating whether the table is memory-optimized. </param>
          <summary>
                Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerToTable">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ForSqlServerToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ForSqlServerToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable (entityTypeBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ ForSqlServerToTable(Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ entityTypeBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the table. </param>
          <summary>
                Configures the table that the entity maps to when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerToTable">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ForSqlServerToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ForSqlServerToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable (entityTypeBuilder, name, schema)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ ForSqlServerToTable(Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ entityTypeBuilder, System::String ^ name, System::String ^ schema);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the table. </param>
          <param name="schema"> The schema of the table. </param>
          <summary>
                Configures the table that the entity maps to when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1" />
      </Targets>
      <Member MemberName="ForSqlServerToTable&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ForSqlServerToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ForSqlServerToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerToTable(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String) As EntityTypeBuilder(Of TEntity)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable (entityTypeBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder&lt;TEntity&gt; ^ ForSqlServerToTable(Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder&lt;TEntity&gt; ^ entityTypeBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type being configured. </typeparam>
          <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the table. </param>
          <summary>
                Configures the table that the entity maps to when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1" />
      </Targets>
      <Member MemberName="ForSqlServerToTable&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ForSqlServerToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string schema) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ForSqlServerToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerToTable(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, schema As String) As EntityTypeBuilder(Of TEntity)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable (entityTypeBuilder, name, schema)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder&lt;TEntity&gt; ^ ForSqlServerToTable(Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder&lt;TEntity&gt; ^ entityTypeBuilder, System::String ^ name, System::String ^ schema);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type being configured. </typeparam>
          <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
          <param name="name"> The name of the table. </param>
          <param name="schema"> The schema of the table. </param>
          <summary>
                Configures the table that the entity maps to when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder ForSqlServerHasName (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder ForSqlServerHasName(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerHasName(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasName : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerHasName (indexBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::IndexBuilder ^ ForSqlServerHasName(Microsoft::EntityFrameworkCore::Metadata::Builders::IndexBuilder ^ indexBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="indexBuilder"> The builder for the index being configured. </param>
          <param name="name"> The name of the index. </param>
          <summary>
                Configures the name of the index in the database when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerHasName(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerIsClustered">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder ForSqlServerIsClustered (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, bool clustered = true);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder ForSqlServerIsClustered(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, bool clustered) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Boolean)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerIsClustered : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsClustered (indexBuilder, clustered)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" RefType="this" />
          <Parameter Name="clustered" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="indexBuilder"> The builder for the index being configured. </param>
          <param name="clustered"> A value indicating whether the index is clustered. </param>
          <summary>
                Configures whether the index is clustered when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder ForSqlServerHasName (this Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder keyBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder ForSqlServerHasName(class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder keyBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions.ForSqlServerHasName(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasName : Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions.ForSqlServerHasName (keyBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::KeyBuilder ^ ForSqlServerHasName(Microsoft::EntityFrameworkCore::Metadata::Builders::KeyBuilder ^ keyBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="keyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="keyBuilder"> The builder for the key being configured. </param>
          <param name="name"> The name of the key. </param>
          <summary>
                Configures the name of the key constraint in the database when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions.ForSqlServerHasName(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerIsClustered">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder ForSqlServerIsClustered (this Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder keyBuilder, bool clustered = true);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder ForSqlServerIsClustered(class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder keyBuilder, bool clustered) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions.ForSqlServerIsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder,System.Boolean)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerIsClustered : Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions.ForSqlServerIsClustered (keyBuilder, clustered)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="keyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" RefType="this" />
          <Parameter Name="clustered" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="keyBuilder"> The builder for the key being configured. </param>
          <param name="clustered"> A value indicating whether the key is clustered. </param>
          <summary>
                Configures whether the key is clustered when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions.ForSqlServerIsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IRelationalEntityTypeAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IRelationalEntityTypeAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SqlServer (entityType As IEntityType) As IRelationalEntityTypeAnnotations" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IRelationalEntityTypeAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalEntityTypeAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalEntityTypeAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IRelationalEntityTypeAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity to get metadata for. </param>
          <summary>
                Gets the SQL Server specific metadata for an entity.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IRelationalForeignKeyAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IRelationalForeignKeyAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SqlServer (foreignKey As IForeignKey) As IRelationalForeignKeyAnnotations" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.IForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.IRelationalForeignKeyAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer foreignKey" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalForeignKeyAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::IRelationalForeignKeyAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IRelationalForeignKeyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="foreignKey"> The foreign key to get metadata for. </param>
          <summary>
                Gets the SQL Server specific metadata for a foreign key.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ISqlServerIndexAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.IIndex index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.ISqlServerIndexAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.IIndex index) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IIndex)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SqlServer (index As IIndex) As ISqlServerIndexAnnotations" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.IIndex -&gt; Microsoft.EntityFrameworkCore.Metadata.ISqlServerIndexAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer index" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::ISqlServerIndexAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::ISqlServerIndexAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ISqlServerIndexAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" RefType="this" />
        </Parameters>
        <Docs>
          <param name="index"> The index to get metadata for. </param>
          <summary>
                Gets the SQL Server specific metadata for an index.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IIndex)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ISqlServerKeyAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.IKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.ISqlServerKeyAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.IKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SqlServer (key As IKey) As ISqlServerKeyAnnotations" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.IKey -&gt; Microsoft.EntityFrameworkCore.Metadata.ISqlServerKeyAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer key" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::ISqlServerKeyAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::ISqlServerKeyAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ISqlServerKeyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key"> The key to get metadata for. </param>
          <summary>
                Gets the SQL Server specific metadata for a key.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ISqlServerModelAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.ISqlServerModelAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SqlServer (model As IModel) As ISqlServerModelAnnotations" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.Metadata.ISqlServerModelAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer model" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::ISqlServerModelAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::ISqlServerModelAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ISqlServerModelAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model"> The model to get metadata for. </param>
          <summary>
                Gets the SQL Server specific metadata for a model.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalEntityTypeAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalEntityTypeAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SqlServer (entityType As IMutableEntityType) As RelationalEntityTypeAnnotations" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalEntityTypeAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer entityType" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::RelationalEntityTypeAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ entityType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalEntityTypeAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        </Parameters>
        <Docs>
          <param name="entityType"> The entity to get metadata for. </param>
          <summary>
                Gets the SQL Server specific metadata for an entity.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalForeignKeyAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey foreignKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalForeignKeyAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey foreignKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SqlServer (foreignKey As IMutableForeignKey) As RelationalForeignKeyAnnotations" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalForeignKeyAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer foreignKey" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::RelationalForeignKeyAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IMutableForeignKey ^ foreignKey);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalForeignKeyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="foreignKey"> The foreign key to get metadata for. </param>
          <summary>
                Gets the SQL Server specific metadata for a foreign key.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.SqlServerIndexAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.IMutableIndex index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.SqlServerIndexAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.IMutableIndex index) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SqlServer (index As IMutableIndex) As SqlServerIndexAnnotations" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.IMutableIndex -&gt; Microsoft.EntityFrameworkCore.Metadata.SqlServerIndexAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer index" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::SqlServerIndexAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IMutableIndex ^ index);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.SqlServerIndexAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" RefType="this" />
        </Parameters>
        <Docs>
          <param name="index"> The index to get metadata for. </param>
          <summary>
                Gets the SQL Server specific metadata for an index.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableKey" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.SqlServerKeyAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.IMutableKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.SqlServerKeyAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.IMutableKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IMutableKey)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SqlServer (key As IMutableKey) As SqlServerKeyAnnotations" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.IMutableKey -&gt; Microsoft.EntityFrameworkCore.Metadata.SqlServerKeyAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer key" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::SqlServerKeyAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IMutableKey ^ key);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.SqlServerKeyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableKey" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key"> The key to get metadata for. </param>
          <summary>
                Gets the SQL Server specific metadata for a key.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IMutableKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.SqlServerModelAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.SqlServerModelAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IMutableModel)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SqlServer (model As IMutableModel) As SqlServerModelAnnotations" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.IMutableModel -&gt; Microsoft.EntityFrameworkCore.Metadata.SqlServerModelAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer model" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::SqlServerModelAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ model);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.SqlServerModelAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model"> The model to get metadata for. </param>
          <summary>
                Gets the SQL Server specific metadata for a model.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IMutableModel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.SqlServerPropertyAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.SqlServerPropertyAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SqlServer (property As IMutableProperty) As SqlServerPropertyAnnotations" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.SqlServerPropertyAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::SqlServerPropertyAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IMutableProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.SqlServerPropertyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get metadata for. </param>
          <summary>
                Gets the SQL Server specific metadata for a property.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Targets>
      <Member MemberName="SqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ISqlServerPropertyAnnotations SqlServer (this Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.ISqlServerPropertyAnnotations SqlServer(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SqlServer (property As IProperty) As ISqlServerPropertyAnnotations" />
        <MemberSignature Language="F#" Value="static member SqlServer : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.ISqlServerPropertyAnnotations" Usage="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer property" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::ISqlServerPropertyAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::ISqlServerPropertyAnnotations ^ SqlServer(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ISqlServerPropertyAnnotations</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        </Parameters>
        <Docs>
          <param name="property"> The property to get metadata for. </param>
          <summary>
                Gets the SQL Server specific metadata for a property.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerMetadataExtensions.SqlServer(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerHasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerHasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence (modelBuilder, name, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ ForSqlServerHasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::String ^ name, Action&lt;Microsoft::EntityFrameworkCore::Metadata::RelationalSequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder ForSqlServerHasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder ForSqlServerHasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence (modelBuilder, name, schema)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <summary>
                Configures a database sequence when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerHasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerHasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence (modelBuilder, name, schema, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ ForSqlServerHasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::String ^ name, System::String ^ schema, Action&lt;Microsoft::EntityFrameworkCore::Metadata::RelationalSequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerHasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, Type clrType, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerHasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, class System.Type clrType, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * Type * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence (modelBuilder, clrType, name, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ ForSqlServerHasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, Type ^ clrType, System::String ^ name, Action&lt;Microsoft::EntityFrameworkCore::Metadata::RelationalSequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="clrType" Type="System.Type" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="clrType"> The type of values the sequence will generate. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder ForSqlServerHasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, Type clrType, string name, string schema = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder ForSqlServerHasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, class System.Type clrType, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * Type * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence (modelBuilder, clrType, name, schema)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="clrType" Type="System.Type" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="clrType"> The type of values the sequence will generate. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <summary>
                Configures a database sequence when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasSequence">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerHasSequence (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, Type clrType, string name, string schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerHasSequence(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, class System.Type clrType, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * Type * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence (modelBuilder, clrType, name, schema, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ ForSqlServerHasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, Type ^ clrType, System::String ^ name, System::String ^ schema, Action&lt;Microsoft::EntityFrameworkCore::Metadata::RelationalSequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="clrType" Type="System.Type" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="clrType"> The type of values the sequence will generate. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasSequence&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerHasSequence&lt;T&gt; (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerHasSequence&lt;T&gt;(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence (modelBuilder, name, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ ForSqlServerHasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::String ^ name, Action&lt;Microsoft::EntityFrameworkCore::Metadata::RelationalSequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The type of values the sequence will generate. </typeparam>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasSequence&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder ForSqlServerHasSequence&lt;T&gt; (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder ForSqlServerHasSequence&lt;T&gt;(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence (modelBuilder, name, schema)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The type of values the sequence will generate. </typeparam>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <summary>
                Configures a database sequence when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasSequence&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerHasSequence&lt;T&gt; (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerHasSequence&lt;T&gt;(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; builderAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasSequence : Microsoft.EntityFrameworkCore.ModelBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence (modelBuilder, name, schema, builderAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ ForSqlServerHasSequence(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder, System::String ^ name, System::String ^ schema, Action&lt;Microsoft::EntityFrameworkCore::Metadata::RelationalSequenceBuilder ^&gt; ^ builderAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
          <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The type of values the sequence will generate. </typeparam>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <param name="builderAction"> An action that performs configuration of the sequence. </param>
          <summary>
                Configures a database sequence when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerUseIdentityColumns">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerUseIdentityColumns (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerUseIdentityColumns(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseIdentityColumns(Microsoft.EntityFrameworkCore.ModelBuilder)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerUseIdentityColumns : Microsoft.EntityFrameworkCore.ModelBuilder -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseIdentityColumns modelBuilder" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::ModelBuilder ^ ForSqlServerUseIdentityColumns(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <summary>
                Configures the model to use the SQL Server IDENTITY feature to generate values for properties
                marked as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />, when targeting SQL Server. This is the default
                behavior when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseIdentityColumns(Microsoft.EntityFrameworkCore.ModelBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerUseSequenceHiLo">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerUseSequenceHiLo (this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name = null, string schema = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder ForSqlServerUseSequenceHiLo(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseSequenceHiLo(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerUseSequenceHiLo : Microsoft.EntityFrameworkCore.ModelBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseSequenceHiLo (modelBuilder, name, schema)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="modelBuilder"> The model builder. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema">The schema of the sequence. </param>
          <summary>
                Configures the model to use a sequence-based hi-lo pattern to generate values for properties
                marked as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />, when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseSequenceHiLo(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasColumnName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasColumnName (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasColumnName(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasColumnName : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnName (propertyBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ ForSqlServerHasColumnName(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="name"> The name of the column. </param>
          <summary>
                Configures the column that the property maps to when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="ForSqlServerHasColumnName&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqlServerHasColumnName&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqlServerHasColumnName&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasColumnName(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), name As String) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasColumnName : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnName (propertyBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ ForSqlServerHasColumnName(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="name"> The name of the column. </param>
          <summary>
                Configures the column that the property maps to when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasColumnType">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasColumnType (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string typeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasColumnType(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string typeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasColumnType : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnType (propertyBuilder, typeName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ ForSqlServerHasColumnType(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder, System::String ^ typeName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="typeName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="typeName"> The name of the data type of the column. </param>
          <summary>
                Configures the data type of the column that the property maps to when targeting SQL Server.
                This should be the complete type name, including precision, scale, length, etc. 
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="ForSqlServerHasColumnType&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqlServerHasColumnType&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string typeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqlServerHasColumnType&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string typeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnType``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasColumnType(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), typeName As String) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasColumnType : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnType (propertyBuilder, typeName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ ForSqlServerHasColumnType(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder, System::String ^ typeName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="typeName" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="typeName"> The name of the data type of the column. </param>
          <summary>
                Configures the data type of the column that the property maps to when targeting SQL Server.
                This should be the complete type name, including precision, scale, length, etc. 
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnType``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasComputedColumnSql">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasComputedColumnSql (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasComputedColumnSql(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasComputedColumnSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasComputedColumnSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasComputedColumnSql (propertyBuilder, sql)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ ForSqlServerHasComputedColumnSql(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder, System::String ^ sql);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="sql" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="sql"> The SQL expression that computes values for the column. </param>
          <summary>
                Configures the property to map to a computed column when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasComputedColumnSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="ForSqlServerHasComputedColumnSql&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqlServerHasComputedColumnSql&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string sql);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqlServerHasComputedColumnSql&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string sql) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasComputedColumnSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasComputedColumnSql(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), sql As String) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasComputedColumnSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasComputedColumnSql (propertyBuilder, sql)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ ForSqlServerHasComputedColumnSql(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder, System::String ^ sql);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="sql" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="sql"> The SQL expression that computes values for the column. </param>
          <summary>
                Configures the property to map to a computed column when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasComputedColumnSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasDefaultValue">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasDefaultValue (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasDefaultValue(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Object)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasDefaultValue : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValue (propertyBuilder, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ ForSqlServerHasDefaultValue(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder, System::Object ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="value"> The default value of the column. </param>
          <summary>
                Configures the default value for the column that the property maps to when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="ForSqlServerHasDefaultValue&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqlServerHasDefaultValue&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqlServerHasDefaultValue&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValue``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasDefaultValue(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), value As Object) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasDefaultValue : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValue (propertyBuilder, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ ForSqlServerHasDefaultValue(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder, System::Object ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="value"> The default value of the column. </param>
          <summary>
                Configures the default value for the column that the property maps to when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValue``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasDefaultValueSql">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasDefaultValueSql (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasDefaultValueSql(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasDefaultValueSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValueSql (propertyBuilder, sql)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ ForSqlServerHasDefaultValueSql(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder, System::String ^ sql);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="sql" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="sql"> The SQL expression for the default value of the column. </param>
          <summary>
                Configures the default value expression for the column that the property maps to when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="ForSqlServerHasDefaultValueSql&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqlServerHasDefaultValueSql&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string sql);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqlServerHasDefaultValueSql&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string sql) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValueSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasDefaultValueSql(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), sql As String) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasDefaultValueSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValueSql (propertyBuilder, sql)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ ForSqlServerHasDefaultValueSql(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder, System::String ^ sql);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="sql" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="sql"> The SQL expression for the default value of the column. </param>
          <summary>
                Configures the default value expression for the column that the property maps to when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValueSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerUseSequenceHiLo">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerUseSequenceHiLo (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name = null, string schema = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerUseSequenceHiLo(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerUseSequenceHiLo(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerUseSequenceHiLo : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerUseSequenceHiLo (propertyBuilder, name, schema)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema"> The schema of the sequence. </param>
          <summary>
                Configures the property to use a sequence-based hi-lo pattern to generate values for new entities, 
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerUseSequenceHiLo(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="ForSqlServerUseSequenceHiLo&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqlServerUseSequenceHiLo&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string name = null, string schema = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqlServerUseSequenceHiLo&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string name, string schema) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerUseSequenceHiLo``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerUseSequenceHiLo(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), Optional name As String = null, Optional schema As String = null) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerUseSequenceHiLo : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerUseSequenceHiLo (propertyBuilder, name, schema)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="schema" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <param name="name"> The name of the sequence. </param>
          <param name="schema"> The schema of the sequence. </param>
          <summary>
                Configures the property to use a sequence-based hi-lo pattern to generate values for new entities, 
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerUseSequenceHiLo``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />
      </Targets>
      <Member MemberName="UseSqlServerIdentityColumn">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseSqlServerIdentityColumn (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseSqlServerIdentityColumn(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSqlServerIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder)" />
        <MemberSignature Language="F#" Value="static member UseSqlServerIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSqlServerIdentityColumn propertyBuilder" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ UseSqlServerIdentityColumn(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ propertyBuilder);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <summary>
                Configures the property to use the SQL Server IDENTITY feature to generate values for new entities, 
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSqlServerIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1" />
      </Targets>
      <Member MemberName="UseSqlServerIdentityColumn&lt;TProperty&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; UseSqlServerIdentityColumn&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; UseSqlServerIdentityColumn&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSqlServerIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlServerIdentityColumn(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty)) As PropertyBuilder(Of TProperty)" />
        <MemberSignature Language="F#" Value="static member UseSqlServerIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSqlServerIdentityColumn propertyBuilder" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ UseSqlServerIdentityColumn(Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ propertyBuilder);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TProperty"> The type of the property being configured. </typeparam>
          <param name="propertyBuilder"> The builder for the property being configured. </param>
          <summary>
                Configures the property to use the SQL Server IDENTITY feature to generate values for new entities, 
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSqlServerIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasConstraintName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder ForSqlServerHasConstraintName (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder referenceCollectionBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder ForSqlServerHasConstraintName(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder referenceCollectionBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerReferenceCollectionBuilderExtensions.ForSqlServerHasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasConstraintName : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerReferenceCollectionBuilderExtensions.ForSqlServerHasConstraintName (referenceCollectionBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceCollectionBuilder ^ ForSqlServerHasConstraintName(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceCollectionBuilder ^ referenceCollectionBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="referenceCollectionBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="referenceCollectionBuilder"> The builder being used to configure the relationship. </param>
          <param name="name"> The name of the foreign key constraint. </param>
          <summary>
                Configures the foreign key constraint name for this relationship when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerReferenceCollectionBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerReferenceCollectionBuilderExtensions.ForSqlServerHasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2" />
      </Targets>
      <Member MemberName="ForSqlServerHasConstraintName&lt;TEntity,TRelatedEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TEntity,TRelatedEntity&gt; ForSqlServerHasConstraintName&lt;TEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TEntity,TRelatedEntity&gt; referenceCollectionBuilder, string name) where TEntity : class where TRelatedEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; ForSqlServerHasConstraintName&lt;class TEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; referenceCollectionBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerReferenceCollectionBuilderExtensions.ForSqlServerHasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{``0,``1},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasConstraintName(Of TEntity As Class, TRelatedEntity As Class) (referenceCollectionBuilder As ReferenceCollectionBuilder(Of TEntity, TRelatedEntity), name As String) As ReferenceCollectionBuilder(Of TEntity, TRelatedEntity)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasConstraintName : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'Entity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.SqlServerReferenceCollectionBuilderExtensions.ForSqlServerHasConstraintName (referenceCollectionBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity, typename TRelatedEntity&gt;&#xA; where TEntity : class where TRelatedEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceCollectionBuilder&lt;TEntity, TRelatedEntity&gt; ^ ForSqlServerHasConstraintName(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceCollectionBuilder&lt;TEntity, TRelatedEntity&gt; ^ referenceCollectionBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TRelatedEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="referenceCollectionBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TEntity,TRelatedEntity&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The principal entity type in this relationship. </typeparam>
          <typeparam name="TRelatedEntity"> The dependent entity type in this relationship. </typeparam>
          <param name="referenceCollectionBuilder"> The builder being used to configure the relationship. </param>
          <param name="name"> The name of the foreign key constraint. </param>
          <summary>
                Configures the foreign key constraint name for this relationship when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerReferenceCollectionBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerReferenceCollectionBuilderExtensions.ForSqlServerHasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{``0,``1},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerIsMemoryOptimized">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder ForSqlServerIsMemoryOptimized (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder referenceOwnershipBuilder, bool memoryOptimized = true);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder ForSqlServerIsMemoryOptimized(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder referenceOwnershipBuilder, bool memoryOptimized) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerReferenceOwnershipBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder,System.Boolean)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerIsMemoryOptimized : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerReferenceOwnershipBuilderExtensions.ForSqlServerIsMemoryOptimized (referenceOwnershipBuilder, memoryOptimized)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" RefType="this" />
          <Parameter Name="memoryOptimized" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
          <param name="memoryOptimized"> A value indicating whether the table is memory-optimized. </param>
          <summary>
                Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerReferenceOwnershipBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerReferenceOwnershipBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2" />
      </Targets>
      <Member MemberName="ForSqlServerIsMemoryOptimized&lt;TEntity,TRelatedEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt; ForSqlServerIsMemoryOptimized&lt;TEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt; referenceOwnershipBuilder, bool memoryOptimized = true) where TEntity : class where TRelatedEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; ForSqlServerIsMemoryOptimized&lt;class TEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; referenceOwnershipBuilder, bool memoryOptimized) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerReferenceOwnershipBuilderExtensions.ForSqlServerIsMemoryOptimized``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder{``0,``1},System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerIsMemoryOptimized(Of TEntity As Class, TRelatedEntity As Class) (referenceOwnershipBuilder As ReferenceOwnershipBuilder(Of TEntity, TRelatedEntity), Optional memoryOptimized As Boolean = true) As ReferenceOwnershipBuilder(Of TEntity, TRelatedEntity)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerIsMemoryOptimized : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'Entity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.SqlServerReferenceOwnershipBuilderExtensions.ForSqlServerIsMemoryOptimized (referenceOwnershipBuilder, memoryOptimized)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TRelatedEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;" RefType="this" />
          <Parameter Name="memoryOptimized" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type being configured. </typeparam>
          <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
          <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
          <param name="memoryOptimized"> A value indicating whether the table is memory-optimized. </param>
          <summary>
                Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerReferenceOwnershipBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerReferenceOwnershipBuilderExtensions.ForSqlServerIsMemoryOptimized``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder{``0,``1},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder" />
      </Targets>
      <Member MemberName="ForSqlServerHasConstraintName">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder ForSqlServerHasConstraintName (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder referenceReferenceBuilder, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder ForSqlServerHasConstraintName(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder referenceReferenceBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerReferenceReferenceBuilderExtensions.ForSqlServerHasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder,System.String)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasConstraintName : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerReferenceReferenceBuilderExtensions.ForSqlServerHasConstraintName (referenceReferenceBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceReferenceBuilder ^ ForSqlServerHasConstraintName(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceReferenceBuilder ^ referenceReferenceBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="referenceReferenceBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="referenceReferenceBuilder"> The builder being used to configure the relationship. </param>
          <param name="name"> The name of the foreign key constraint. </param>
          <summary>
                Configures the foreign key constraint name for this relationship when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerReferenceReferenceBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerReferenceReferenceBuilderExtensions.ForSqlServerHasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2" />
      </Targets>
      <Member MemberName="ForSqlServerHasConstraintName&lt;TEntity,TRelatedEntity&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; ForSqlServerHasConstraintName&lt;TEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; referenceReferenceBuilder, string name) where TEntity : class where TRelatedEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; ForSqlServerHasConstraintName&lt;class TEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; referenceReferenceBuilder, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerReferenceReferenceBuilderExtensions.ForSqlServerHasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder{``0,``1},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasConstraintName(Of TEntity As Class, TRelatedEntity As Class) (referenceReferenceBuilder As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity), name As String) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" />
        <MemberSignature Language="F#" Value="static member ForSqlServerHasConstraintName : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'Entity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.SqlServerReferenceReferenceBuilderExtensions.ForSqlServerHasConstraintName (referenceReferenceBuilder, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity, typename TRelatedEntity&gt;&#xA; where TEntity : class where TRelatedEntity : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceReferenceBuilder&lt;TEntity, TRelatedEntity&gt; ^ ForSqlServerHasConstraintName(Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceReferenceBuilder&lt;TEntity, TRelatedEntity&gt; ^ referenceReferenceBuilder, System::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TRelatedEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="referenceReferenceBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TEntity"> The entity type on one end of the relationship. </typeparam>
          <typeparam name="TRelatedEntity"> The entity type on the other end of the relationship. </typeparam>
          <param name="referenceReferenceBuilder"> The builder being used to configure the relationship. </param>
          <param name="name"> The name of the foreign key constraint. </param>
          <summary>
                Configures the foreign key constraint name for this relationship when targeting SQL Server.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.SqlServerReferenceReferenceBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.SqlServerReferenceReferenceBuilderExtensions.ForSqlServerHasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder{``0,``1},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" />
      </Targets>
      <Member MemberName="GetDbTransaction">
        <MemberSignature Language="C#" Value="public static System.Data.Common.DbTransaction GetDbTransaction (this Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction dbContextTransaction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.DbTransaction GetDbTransaction(class Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction dbContextTransaction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.DbContextTransactionExtensions.GetDbTransaction(Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDbTransaction (dbContextTransaction As IDbContextTransaction) As DbTransaction" />
        <MemberSignature Language="F#" Value="static member GetDbTransaction : Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction -&gt; System.Data.Common.DbTransaction" Usage="Microsoft.EntityFrameworkCore.Storage.DbContextTransactionExtensions.GetDbTransaction dbContextTransaction" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::Common::DbTransaction ^ GetDbTransaction(Microsoft::EntityFrameworkCore::Storage::IDbContextTransaction ^ dbContextTransaction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.DbTransaction</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dbContextTransaction" Type="Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" RefType="this" />
        </Parameters>
        <Docs>
          <param name="dbContextTransaction"> The transaction to get the <see cref="T:System.Data.Common.DbTransaction" /> from. </param>
          <summary>
                Gets the underlying <see cref="T:System.Data.Common.DbTransaction" /> for the given transaction. Throws if the database being targeted
                is not a relational database that uses <see cref="T:System.Data.Common.DbTransaction" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.DbContextTransactionExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.DbContextTransactionExtensions.GetDbTransaction(Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Data.Common.DbParameterCollection" />
      </Targets>
      <Member MemberName="FormatParameters">
        <MemberSignature Language="C#" Value="public static string FormatParameters (this System.Data.Common.DbParameterCollection parameters, bool logParameterValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatParameters(class System.Data.Common.DbParameterCollection parameters, bool logParameterValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterCollectionExtensions.FormatParameters(System.Data.Common.DbParameterCollection,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FormatParameters (parameters As DbParameterCollection, logParameterValues As Boolean) As String" />
        <MemberSignature Language="F#" Value="static member FormatParameters : System.Data.Common.DbParameterCollection * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterCollectionExtensions.FormatParameters (parameters, logParameterValues)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ FormatParameters(System::Data::Common::DbParameterCollection ^ parameters, bool logParameterValues);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="parameters" Type="System.Data.Common.DbParameterCollection" RefType="this" />
          <Parameter Name="logParameterValues" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="parameters">To be added.</param>
          <param name="logParameterValues">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterCollectionExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterCollectionExtensions.FormatParameters(System.Data.Common.DbParameterCollection,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.DbParameterLogData" />
      </Targets>
      <Member MemberName="FormatParameter">
        <MemberSignature Language="C#" Value="public static string FormatParameter (this Microsoft.EntityFrameworkCore.Storage.DbParameterLogData parameterData, bool quoteValues = true);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatParameter(class Microsoft.EntityFrameworkCore.Storage.DbParameterLogData parameterData, bool quoteValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterLogDataExtensions.FormatParameter(Microsoft.EntityFrameworkCore.Storage.DbParameterLogData,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FormatParameter (parameterData As DbParameterLogData, Optional quoteValues As Boolean = true) As String" />
        <MemberSignature Language="F#" Value="static member FormatParameter : Microsoft.EntityFrameworkCore.Storage.DbParameterLogData * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterLogDataExtensions.FormatParameter (parameterData, quoteValues)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="parameterData" Type="Microsoft.EntityFrameworkCore.Storage.DbParameterLogData" RefType="this" />
          <Parameter Name="quoteValues" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="parameterData">To be added.</param>
          <param name="quoteValues">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterLogDataExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterLogDataExtensions.FormatParameter(Microsoft.EntityFrameworkCore.Storage.DbParameterLogData,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreCache" />
      </Targets>
      <Member MemberName="GetStore">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStore GetStore (this Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreCache storeCache, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStore GetStore(class Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreCache storeCache, class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.Internal.InMemoryStoreCacheExtensions.GetStore(Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreCache,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetStore (storeCache As IInMemoryStoreCache, options As IDbContextOptions) As IInMemoryStore" />
        <MemberSignature Language="F#" Value="static member GetStore : Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreCache * Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions -&gt; Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStore" Usage="Microsoft.EntityFrameworkCore.Storage.Internal.InMemoryStoreCacheExtensions.GetStore (storeCache, options)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::Internal::IInMemoryStore ^ GetStore(Microsoft::EntityFrameworkCore::Storage::Internal::IInMemoryStoreCache ^ storeCache, Microsoft::EntityFrameworkCore::Infrastructure::IDbContextOptions ^ options);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::Internal::IInMemoryStore ^ GetStore(Microsoft::EntityFrameworkCore::Storage::Internal::IInMemoryStoreCache ^ storeCache, Microsoft::EntityFrameworkCore::Infrastructure::IDbContextOptions ^ options);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStore</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="storeCache" Type="Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreCache" RefType="this" />
          <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions" />
        </Parameters>
        <Docs>
          <param name="storeCache">To be added.</param>
          <param name="options">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.Internal.InMemoryStoreCacheExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.Internal.InMemoryStoreCacheExtensions.GetStore(Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreCache,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreSource" />
      </Targets>
      <Member MemberName="GetGlobalStore">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStore GetGlobalStore (this Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreSource storeSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStore GetGlobalStore(class Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreSource storeSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.Internal.InMemoryStoreSourceExtensions.GetGlobalStore(Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetGlobalStore (storeSource As IInMemoryStoreSource) As IInMemoryStore" />
        <MemberSignature Language="F#" Value="static member GetGlobalStore : Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreSource -&gt; Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStore" Usage="Microsoft.EntityFrameworkCore.Storage.Internal.InMemoryStoreSourceExtensions.GetGlobalStore storeSource" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::Internal::IInMemoryStore ^ GetGlobalStore(Microsoft::EntityFrameworkCore::Storage::Internal::IInMemoryStoreSource ^ storeSource);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::Internal::IInMemoryStore ^ GetGlobalStore(Microsoft::EntityFrameworkCore::Storage::Internal::IInMemoryStoreSource ^ storeSource);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStore</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="storeSource" Type="Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="storeSource">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.Internal.InMemoryStoreSourceExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.Internal.InMemoryStoreSourceExtensions.GetGlobalStore(Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreSource" />
      </Targets>
      <Member MemberName="GetStore">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStore GetStore (this Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreSource storeSource, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStore GetStore(class Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreSource storeSource, class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.Internal.InMemoryStoreSourceExtensions.GetStore(Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreSource,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetStore (storeSource As IInMemoryStoreSource, options As IDbContextOptions) As IInMemoryStore" />
        <MemberSignature Language="F#" Value="static member GetStore : Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreSource * Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions -&gt; Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStore" Usage="Microsoft.EntityFrameworkCore.Storage.Internal.InMemoryStoreSourceExtensions.GetStore (storeSource, options)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::Internal::IInMemoryStore ^ GetStore(Microsoft::EntityFrameworkCore::Storage::Internal::IInMemoryStoreSource ^ storeSource, Microsoft::EntityFrameworkCore::Infrastructure::IDbContextOptions ^ options);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::Internal::IInMemoryStore ^ GetStore(Microsoft::EntityFrameworkCore::Storage::Internal::IInMemoryStoreSource ^ storeSource, Microsoft::EntityFrameworkCore::Infrastructure::IDbContextOptions ^ options);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStore</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="storeSource" Type="Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreSource" RefType="this" />
          <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions" />
        </Parameters>
        <Docs>
          <param name="storeSource">To be added.</param>
          <param name="options">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.Internal.InMemoryStoreSourceExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.Internal.InMemoryStoreSourceExtensions.GetStore(Microsoft.EntityFrameworkCore.Storage.Internal.IInMemoryStoreSource,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger" />
      </Targets>
      <Member MemberName="LogCommandExecuted">
        <MemberSignature Language="C#" Value="public static void LogCommandExecuted (this Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger logger, System.Data.Common.DbCommand command, long startTimestamp, long currentTimestamp);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogCommandExecuted(class Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger logger, class System.Data.Common.DbCommand command, int64 startTimestamp, int64 currentTimestamp) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogCommandExecuted(Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger,System.Data.Common.DbCommand,System.Int64,System.Int64)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub LogCommandExecuted (logger As ISensitiveDataLogger, command As DbCommand, startTimestamp As Long, currentTimestamp As Long)" />
        <MemberSignature Language="F#" Value="static member LogCommandExecuted : Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger * System.Data.Common.DbCommand * int64 * int64 -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogCommandExecuted (logger, command, startTimestamp, currentTimestamp)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void LogCommandExecuted(Microsoft::EntityFrameworkCore::Infrastructure::ISensitiveDataLogger ^ logger, System::Data::Common::DbCommand ^ command, long startTimestamp, long currentTimestamp);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger" RefType="this" />
          <Parameter Name="command" Type="System.Data.Common.DbCommand" />
          <Parameter Name="startTimestamp" Type="System.Int64" />
          <Parameter Name="currentTimestamp" Type="System.Int64" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="command">To be added.</param>
          <param name="startTimestamp">To be added.</param>
          <param name="currentTimestamp">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogCommandExecuted(Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger,System.Data.Common.DbCommand,System.Int64,System.Int64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogDebug">
        <MemberSignature Language="C#" Value="public static void LogDebug (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId eventId, Func&lt;string&gt; formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogDebug(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId eventId, class System.Func`1&lt;string&gt; formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId,System.Func{System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub LogDebug (logger As ILogger, eventId As RelationalEventId, formatter As Func(Of String))" />
        <MemberSignature Language="F#" Value="static member LogDebug : Microsoft.Extensions.Logging.ILogger * Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId * Func&lt;string&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogDebug (logger, eventId, formatter)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void LogDebug(Microsoft::Extensions::Logging::ILogger ^ logger, Microsoft::EntityFrameworkCore::Infrastructure::RelationalEventId eventId, Func&lt;System::String ^&gt; ^ formatter);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId" />
          <Parameter Name="formatter" Type="System.Func&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="eventId">To be added.</param>
          <param name="formatter">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId,System.Func{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogDebug&lt;TState&gt;">
        <MemberSignature Language="C#" Value="public static void LogDebug&lt;TState&gt; (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId eventId, TState state, Func&lt;TState,string&gt; formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogDebug&lt;TState&gt;(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId eventId, !!TState state, class System.Func`2&lt;!!TState, string&gt; formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogDebug``1(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId,``0,System.Func{``0,System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub LogDebug(Of TState) (logger As ILogger, eventId As RelationalEventId, state As TState, formatter As Func(Of TState, String))" />
        <MemberSignature Language="F#" Value="static member LogDebug : Microsoft.Extensions.Logging.ILogger * Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId * 'State * Func&lt;'State, string&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogDebug (logger, eventId, state, formatter)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void LogDebug(Microsoft::Extensions::Logging::ILogger ^ logger, Microsoft::EntityFrameworkCore::Infrastructure::RelationalEventId eventId, TState state, Func&lt;TState, System::String ^&gt; ^ formatter);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="formatter" Type="System.Func&lt;TState,System.String&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TState">To be added.</typeparam>
          <param name="logger">To be added.</param>
          <param name="eventId">To be added.</param>
          <param name="state">To be added.</param>
          <param name="formatter">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogDebug``1(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId,``0,System.Func{``0,System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogInformation">
        <MemberSignature Language="C#" Value="public static void LogInformation (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId eventId, Func&lt;string&gt; formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogInformation(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId eventId, class System.Func`1&lt;string&gt; formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId,System.Func{System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub LogInformation (logger As ILogger, eventId As RelationalEventId, formatter As Func(Of String))" />
        <MemberSignature Language="F#" Value="static member LogInformation : Microsoft.Extensions.Logging.ILogger * Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId * Func&lt;string&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogInformation (logger, eventId, formatter)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void LogInformation(Microsoft::Extensions::Logging::ILogger ^ logger, Microsoft::EntityFrameworkCore::Infrastructure::RelationalEventId eventId, Func&lt;System::String ^&gt; ^ formatter);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId" />
          <Parameter Name="formatter" Type="System.Func&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="eventId">To be added.</param>
          <param name="formatter">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId,System.Func{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogWarning">
        <MemberSignature Language="C#" Value="public static void LogWarning (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId eventId, Func&lt;string&gt; formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogWarning(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId eventId, class System.Func`1&lt;string&gt; formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId,System.Func{System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub LogWarning (logger As ILogger, eventId As RelationalEventId, formatter As Func(Of String))" />
        <MemberSignature Language="F#" Value="static member LogWarning : Microsoft.Extensions.Logging.ILogger * Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId * Func&lt;string&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogWarning (logger, eventId, formatter)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void LogWarning(Microsoft::Extensions::Logging::ILogger ^ logger, Microsoft::EntityFrameworkCore::Infrastructure::RelationalEventId eventId, Func&lt;System::String ^&gt; ^ formatter);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId" />
          <Parameter Name="formatter" Type="System.Func&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="eventId">To be added.</param>
          <param name="formatter">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId,System.Func{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />
      </Targets>
      <Member MemberName="AddCompositeParameter">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AddCompositeParameter (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, string invariantName, Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalParameterBuilder&gt; buildAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AddCompositeParameter(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, string invariantName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Storage.IRelationalParameterBuilder&gt; buildAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddCompositeParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Storage.IRelationalParameterBuilder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddCompositeParameter (commandBuilder As IRelationalCommandBuilder, invariantName As String, buildAction As Action(Of IRelationalParameterBuilder)) As IRelationalCommandBuilder" />
        <MemberSignature Language="F#" Value="static member AddCompositeParameter : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalParameterBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddCompositeParameter (commandBuilder, invariantName, buildAction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AddCompositeParameter(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, System::String ^ invariantName, Action&lt;Microsoft::EntityFrameworkCore::Storage::IRelationalParameterBuilder ^&gt; ^ buildAction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="commandBuilder" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" RefType="this" />
          <Parameter Name="invariantName" Type="System.String" />
          <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalParameterBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="commandBuilder"> The command builder. </param>
          <param name="invariantName">
                The key that identifies this parameter. Note that <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter" /> just represents a
                placeholder for a parameter and not the actual value. This is because the same command can be
                reused multiple times with different parameter values.
            </param>
          <param name="buildAction">
                The action to add the multiple parameters that this placeholder represents.
            </param>
          <summary>
                Adds a parameter that is ultimately represented as multiple <see cref="T:System.Data.Common.DbParameter" />s in the
                final command.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddCompositeParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Storage.IRelationalParameterBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />
      </Targets>
      <Member MemberName="AddParameter">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AddParameter (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, string invariantName, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AddParameter(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, string invariantName, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddParameter (commandBuilder As IRelationalCommandBuilder, invariantName As String, name As String) As IRelationalCommandBuilder" />
        <MemberSignature Language="F#" Value="static member AddParameter : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddParameter (commandBuilder, invariantName, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AddParameter(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, System::String ^ invariantName, System::String ^ name);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AddParameter(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, Platform::String ^ invariantName, Platform::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="commandBuilder" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" RefType="this" />
          <Parameter Name="invariantName" Type="System.String" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="commandBuilder"> The command builder. </param>
          <param name="invariantName">
                The key that identifies this parameter. Note that <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter" /> just represents a
                placeholder for a parameter and not the actual value. This is because the same command can be
                reused multiple times with different parameter values.
            </param>
          <param name="name">
                The name to be used for the parameter when the command is executed against the database.
            </param>
          <summary>
                Adds a parameter.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />
      </Targets>
      <Member MemberName="AddParameter">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AddParameter (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, string invariantName, string name, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AddParameter(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, string invariantName, string name, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddParameter (commandBuilder As IRelationalCommandBuilder, invariantName As String, name As String, property As IProperty) As IRelationalCommandBuilder" />
        <MemberSignature Language="F#" Value="static member AddParameter : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder * string * string * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddParameter (commandBuilder, invariantName, name, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AddParameter(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, System::String ^ invariantName, System::String ^ name, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AddParameter(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, Platform::String ^ invariantName, Platform::String ^ name, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="commandBuilder" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" RefType="this" />
          <Parameter Name="invariantName" Type="System.String" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="commandBuilder"> The command builder. </param>
          <param name="invariantName">
                The key that identifies this parameter. Note that <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter" /> just represents a
                placeholder for a parameter and not the actual value. This is because the same command can be
                reused multiple times with different parameter values.
            </param>
          <param name="name">
                The name to be used for the parameter when the command is executed against the database.
            </param>
          <param name="property" />
          <summary>
                Adds a parameter.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />
      </Targets>
      <Member MemberName="AddParameter">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AddParameter (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, string invariantName, string name, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping, bool nullable);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AddParameter(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, string invariantName, string name, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping, bool nullable) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.String,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddParameter (commandBuilder As IRelationalCommandBuilder, invariantName As String, name As String, typeMapping As RelationalTypeMapping, nullable As Boolean) As IRelationalCommandBuilder" />
        <MemberSignature Language="F#" Value="static member AddParameter : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder * string * string * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping * bool -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddParameter (commandBuilder, invariantName, name, typeMapping, nullable)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AddParameter(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, System::String ^ invariantName, System::String ^ name, Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ typeMapping, bool nullable);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="commandBuilder" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" RefType="this" />
          <Parameter Name="invariantName" Type="System.String" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
          <Parameter Name="nullable" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="commandBuilder"> The command builder. </param>
          <param name="invariantName">
                The key that identifies this parameter. Note that <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter" /> just represents a
                placeholder for a parameter and not the actual value. This is because the same command can be
                reused multiple times with different parameter values.
            </param>
          <param name="name">
                The name to be used for the parameter when the command is executed against the database.
            </param>
          <param name="typeMapping">
                The type mapping for the property that values for this parameter will come from.
            </param>
          <param name="nullable">
                A value indicating whether the parameter can contain null values.
            </param>
          <summary>
                Adds a parameter.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.String,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />
      </Targets>
      <Member MemberName="AddPropertyParameter">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AddPropertyParameter (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, string invariantName, string name, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AddPropertyParameter(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, string invariantName, string name, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddPropertyParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddPropertyParameter (commandBuilder As IRelationalCommandBuilder, invariantName As String, name As String, property As IProperty) As IRelationalCommandBuilder" />
        <MemberSignature Language="F#" Value="static member AddPropertyParameter : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder * string * string * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddPropertyParameter (commandBuilder, invariantName, name, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AddPropertyParameter(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, System::String ^ invariantName, System::String ^ name, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AddPropertyParameter(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, Platform::String ^ invariantName, Platform::String ^ name, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="commandBuilder" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" RefType="this" />
          <Parameter Name="invariantName" Type="System.String" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="commandBuilder"> The command builder. </param>
          <param name="invariantName">
                The key that identifies this parameter. Note that <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter" /> just represents a
                placeholder for a parameter and not the actual value. This is because the same command can be
                reused multiple times with different parameter values.
            </param>
          <param name="name">
                The name to be used for the parameter when the command is executed against the database.
            </param>
          <param name="property">
                The property that values for this parameter will come from.
            </param>
          <summary>
                Adds a parameter.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddPropertyParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />
      </Targets>
      <Member MemberName="AddRawParameter">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AddRawParameter (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, string invariantName, System.Data.Common.DbParameter dbParameter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AddRawParameter(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, string invariantName, class System.Data.Common.DbParameter dbParameter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddRawParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.Data.Common.DbParameter)" />
        <MemberSignature Language="F#" Value="static member AddRawParameter : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder * string * System.Data.Common.DbParameter -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddRawParameter (commandBuilder, invariantName, dbParameter)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AddRawParameter(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, System::String ^ invariantName, System::Data::Common::DbParameter ^ dbParameter);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="commandBuilder" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" RefType="this" />
          <Parameter Name="invariantName" Type="System.String" />
          <Parameter Name="dbParameter" Type="System.Data.Common.DbParameter" />
        </Parameters>
        <Docs>
          <param name="commandBuilder"> The command builder. </param>
          <param name="invariantName">
                The key that identifies this parameter. Note that <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter" /> just represents a
                placeholder for a parameter and not the actual value. This is because the same command can be
                reused multiple times with different parameter values.
            </param>
          <param name="dbParameter"> The DbParameter being added. </param>
          <summary>
                Adds a parameter.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddRawParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.Data.Common.DbParameter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />
      </Targets>
      <Member MemberName="Append">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder Append (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, object o);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder Append(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, object o) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.Append(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append (commandBuilder As IRelationalCommandBuilder, o As Object) As IRelationalCommandBuilder" />
        <MemberSignature Language="F#" Value="static member Append : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder * obj -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.Append (commandBuilder, o)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ Append(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, System::Object ^ o);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ Append(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, Platform::Object ^ o);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="commandBuilder" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" RefType="this" />
          <Parameter Name="o" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="commandBuilder"> The command builder. </param>
          <param name="o"> The object to be written. </param>
          <summary>
                Appends an object to the command text.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.Append(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />
      </Targets>
      <Member MemberName="AppendLine">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AppendLine (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AppendLine(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AppendLine(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AppendLine (commandBuilder As IRelationalCommandBuilder) As IRelationalCommandBuilder" />
        <MemberSignature Language="F#" Value="static member AppendLine : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AppendLine commandBuilder" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AppendLine(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AppendLine(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="commandBuilder" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="commandBuilder"> The command builder. </param>
          <summary>
                Appends a blank line to the command text.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AppendLine(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />
      </Targets>
      <Member MemberName="AppendLine">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AppendLine (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, object o);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AppendLine(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, object o) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AppendLine(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AppendLine (commandBuilder As IRelationalCommandBuilder, o As Object) As IRelationalCommandBuilder" />
        <MemberSignature Language="F#" Value="static member AppendLine : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder * obj -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AppendLine (commandBuilder, o)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AppendLine(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, System::Object ^ o);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AppendLine(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, Platform::Object ^ o);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="commandBuilder" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" RefType="this" />
          <Parameter Name="o" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="commandBuilder"> The command builder. </param>
          <param name="o"> The object to be written. </param>
          <summary>
                Appends an object to the command text on a new line.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AppendLine(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />
      </Targets>
      <Member MemberName="AppendLines">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AppendLines (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, object o);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder AppendLines(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder, object o) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AppendLines(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AppendLines (commandBuilder As IRelationalCommandBuilder, o As Object) As IRelationalCommandBuilder" />
        <MemberSignature Language="F#" Value="static member AppendLines : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder * obj -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AppendLines (commandBuilder, o)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AppendLines(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, System::Object ^ o);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ AppendLines(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder, Platform::Object ^ o);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="commandBuilder" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" RefType="this" />
          <Parameter Name="o" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="commandBuilder"> The command builder. </param>
          <param name="o"> The object to be written. </param>
          <summary>
                Appends an object, that contains multiple lines of text, to the command text.
                Each line read from the object is appended on a new line.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AppendLines(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />
      </Targets>
      <Member MemberName="DecrementIndent">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder DecrementIndent (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder DecrementIndent(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.DecrementIndent(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DecrementIndent (commandBuilder As IRelationalCommandBuilder) As IRelationalCommandBuilder" />
        <MemberSignature Language="F#" Value="static member DecrementIndent : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.DecrementIndent commandBuilder" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ DecrementIndent(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ DecrementIndent(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="commandBuilder" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="commandBuilder"> The command builder. </param>
          <summary>
                Decrements the indent of subsequent lines.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.DecrementIndent(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />
      </Targets>
      <Member MemberName="GetLength">
        <MemberSignature Language="C#" Value="public static int GetLength (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetLength(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.GetLength(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetLength (commandBuilder As IRelationalCommandBuilder) As Integer" />
        <MemberSignature Language="F#" Value="static member GetLength : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder -&gt; int" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.GetLength commandBuilder" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetLength(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetLength(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="commandBuilder" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="commandBuilder"> The command builder. </param>
          <summary>
                Gets the length of the command text.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.GetLength(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />
      </Targets>
      <Member MemberName="IncrementIndent">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder IncrementIndent (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder IncrementIndent(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.IncrementIndent(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IncrementIndent (commandBuilder As IRelationalCommandBuilder) As IRelationalCommandBuilder" />
        <MemberSignature Language="F#" Value="static member IncrementIndent : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.IncrementIndent commandBuilder" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ IncrementIndent(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ IncrementIndent(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="commandBuilder" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="commandBuilder"> The command builder. </param>
          <summary>
                Increments the indent of subsequent lines.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.IncrementIndent(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />
      </Targets>
      <Member MemberName="Indent">
        <MemberSignature Language="C#" Value="public static IDisposable Indent (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable Indent(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder commandBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.Indent(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Indent (commandBuilder As IRelationalCommandBuilder) As IDisposable" />
        <MemberSignature Language="F#" Value="static member Indent : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder -&gt; IDisposable" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.Indent commandBuilder" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ Indent(Microsoft::EntityFrameworkCore::Storage::IRelationalCommandBuilder ^ commandBuilder);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.IDisposable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="commandBuilder" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="commandBuilder"> The command builder. </param>
          <summary>
                Increases the indent of the command text.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.Indent(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" />
      </Targets>
      <Member MemberName="ExecuteNonQuery">
        <MemberSignature Language="C#" Value="public static int ExecuteNonQuery (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommand command, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ExecuteNonQuery(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommand command, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteNonQuery(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteNonQuery (command As IRelationalCommand, connection As IRelationalConnection) As Integer" />
        <MemberSignature Language="F#" Value="static member ExecuteNonQuery : Microsoft.EntityFrameworkCore.Storage.IRelationalCommand * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection -&gt; int" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteNonQuery (command, connection)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ExecuteNonQuery(Microsoft::EntityFrameworkCore::Storage::IRelationalCommand ^ command, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="command" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
        </Parameters>
        <Docs>
          <param name="command"> The command to be executed. </param>
          <param name="connection"> The connection to execute against. </param>
          <summary>
                Executes the command with no results.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteNonQuery(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" />
      </Targets>
      <Member MemberName="ExecuteNonQueryAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; ExecuteNonQueryAsync (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommand command, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; ExecuteNonQueryAsync(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommand command, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteNonQueryAsync : Microsoft.EntityFrameworkCore.Storage.IRelationalCommand * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteNonQueryAsync (command, connection, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="command" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="command"> The command to be executed. </param>
          <param name="connection"> The connection to execute against. </param>
          <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
          <summary>
                Asynchronously executes the command with no results.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" />
      </Targets>
      <Member MemberName="ExecuteReader">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.RelationalDataReader ExecuteReader (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommand command, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.RelationalDataReader ExecuteReader(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommand command, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteReader(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteReader (command As IRelationalCommand, connection As IRelationalConnection) As RelationalDataReader" />
        <MemberSignature Language="F#" Value="static member ExecuteReader : Microsoft.EntityFrameworkCore.Storage.IRelationalCommand * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteReader (command, connection)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalDataReader ^ ExecuteReader(Microsoft::EntityFrameworkCore::Storage::IRelationalCommand ^ command, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalDataReader</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="command" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
        </Parameters>
        <Docs>
          <param name="command"> The command to be executed. </param>
          <param name="connection"> The connection to execute against. </param>
          <summary>
                Executes the command with a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" /> result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteReader(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" />
      </Targets>
      <Member MemberName="ExecuteReaderAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.RelationalDataReader&gt; ExecuteReaderAsync (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommand command, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.EntityFrameworkCore.Storage.RelationalDataReader&gt; ExecuteReaderAsync(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommand command, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteReaderAsync : Microsoft.EntityFrameworkCore.Storage.IRelationalCommand * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.RelationalDataReader&gt;" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteReaderAsync (command, connection, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.RelationalDataReader&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="command" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="command"> The command to be executed. </param>
          <param name="connection"> The connection to execute against. </param>
          <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
          <summary>
                Asynchronously executes the command with a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" /> result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" />
      </Targets>
      <Member MemberName="ExecuteScalar">
        <MemberSignature Language="C#" Value="public static object ExecuteScalar (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommand command, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ExecuteScalar(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommand command, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteScalar(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteScalar (command As IRelationalCommand, connection As IRelationalConnection) As Object" />
        <MemberSignature Language="F#" Value="static member ExecuteScalar : Microsoft.EntityFrameworkCore.Storage.IRelationalCommand * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection -&gt; obj" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteScalar (command, connection)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Object ^ ExecuteScalar(Microsoft::EntityFrameworkCore::Storage::IRelationalCommand ^ command, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="command" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
        </Parameters>
        <Docs>
          <param name="command"> The command to be executed. </param>
          <param name="connection"> The connection to execute against. </param>
          <summary>
                Executes the command with a single scalar result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteScalar(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" />
      </Targets>
      <Member MemberName="ExecuteScalarAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;object&gt; ExecuteScalarAsync (this Microsoft.EntityFrameworkCore.Storage.IRelationalCommand command, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;object&gt; ExecuteScalarAsync(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommand command, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteScalarAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteScalarAsync : Microsoft.EntityFrameworkCore.Storage.IRelationalCommand * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteScalarAsync (command, connection, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="command" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" RefType="this" />
          <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="command"> The command to be executed. </param>
          <param name="connection"> The connection to execute against. </param>
          <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
          <summary>
                Asynchronously executes the command with a single scalar result.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions.ExecuteScalarAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransaction">
        <MemberSignature Language="C#" Value="public static void ExecuteInTransaction (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Action operation, Func&lt;bool&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExecuteInTransaction(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Action operation, class System.Func`1&lt;bool&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action,System.Func{System.Boolean},System.Data.IsolationLevel)" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Action * Func&lt;bool&gt; * System.Data.IsolationLevel -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction (strategy, operation, verifySucceeded, isolationLevel)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ExecuteInTransaction(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Action ^ operation, Func&lt;bool&gt; ^ verifySucceeded, System::Data::IsolationLevel isolationLevel);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Action" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Boolean&gt;" />
          <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
        </Parameters>
        <Docs>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="operation">
                A delegate representing an executable operation.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="isolationLevel"> The isolation level to use for the transaction. </param>
          <summary>
                Executes the specified operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action,System.Func{System.Boolean},System.Data.IsolationLevel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransaction&lt;TState&gt;">
        <MemberSignature Language="C#" Value="public static void ExecuteInTransaction&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Action&lt;TState&gt; operation, Func&lt;TState,bool&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExecuteInTransaction&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Action`1&lt;!!TState&gt; operation, class System.Func`2&lt;!!TState, bool&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Action{``0},System.Func{``0,System.Boolean},System.Data.IsolationLevel)" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Action&lt;'State&gt; * Func&lt;'State, bool&gt; * System.Data.IsolationLevel -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction (strategy, state, operation, verifySucceeded, isolationLevel)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void ExecuteInTransaction(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, TState state, Action&lt;TState&gt; ^ operation, Func&lt;TState, bool&gt; ^ verifySucceeded, System::Data::IsolationLevel isolationLevel);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Action&lt;TState&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Boolean&gt;" />
          <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
        </Parameters>
        <Docs>
          <typeparam name="TState"> The type of the state. </typeparam>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="state"> The state that will be passed to the operation. </param>
          <param name="operation">
                A delegate representing an executable operation.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="isolationLevel"> The isolation level to use for the transaction. </param>
          <summary>
                Executes the specified operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Action{``0},System.Func{``0,System.Boolean},System.Data.IsolationLevel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransaction&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult ExecuteInTransaction&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TResult&gt; operation, Func&lt;bool&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult ExecuteInTransaction&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`1&lt;!!TResult&gt; operation, class System.Func`1&lt;bool&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0},System.Func{System.Boolean},System.Data.IsolationLevel)" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'Result&gt; * Func&lt;bool&gt; * System.Data.IsolationLevel -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction (strategy, operation, verifySucceeded, isolationLevel)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult ExecuteInTransaction(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;TResult&gt; ^ operation, Func&lt;bool&gt; ^ verifySucceeded, System::Data::IsolationLevel isolationLevel);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;TResult&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Boolean&gt;" />
          <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
        </Parameters>
        <Docs>
          <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="isolationLevel"> The isolation level to use for the transaction. </param>
          <summary>
                Executes the specified operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0},System.Func{System.Boolean},System.Data.IsolationLevel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransaction&lt;TState,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult ExecuteInTransaction&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,TResult&gt; operation, Func&lt;TState,bool&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult ExecuteInTransaction&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`2&lt;!!TState, !!TResult&gt; operation, class System.Func`2&lt;!!TState, bool&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1},System.Func{``0,System.Boolean},System.Data.IsolationLevel)" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, 'Result&gt; * Func&lt;'State, bool&gt; * System.Data.IsolationLevel -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction (strategy, state, operation, verifySucceeded, isolationLevel)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult ExecuteInTransaction(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, TState state, Func&lt;TState, TResult&gt; ^ operation, Func&lt;TState, bool&gt; ^ verifySucceeded, System::Data::IsolationLevel isolationLevel);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Boolean&gt;" />
          <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
        </Parameters>
        <Docs>
          <typeparam name="TState"> The type of the state. </typeparam>
          <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="state"> The state that will be passed to the operation. </param>
          <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="isolationLevel"> The isolation level to use for the transaction. </param>
          <summary>
                Executes the specified operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1},System.Func{``0,System.Boolean},System.Data.IsolationLevel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransactionAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteInTransactionAsync (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; operation, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteInTransactionAsync(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; operation, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Data.IsolationLevel * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, operation, verifySucceeded, isolationLevel, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
          <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="operation">
                A function that returns a started task.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="isolationLevel"> The isolation level to use for the transaction. </param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransactionAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteInTransactionAsync (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.Tasks.Task&gt; operation, Func&lt;System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteInTransactionAsync(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`1&lt;class System.Threading.Tasks.Task&gt; operation, class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel)" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.Tasks.Task&gt; * Func&lt;System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Data.IsolationLevel -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, operation, verifySucceeded, isolationLevel)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ ExecuteInTransactionAsync(Microsoft::EntityFrameworkCore::Storage::IExecutionStrategy ^ strategy, Func&lt;System::Threading::Tasks::Task ^&gt; ^ operation, Func&lt;System::Threading::Tasks::Task&lt;bool&gt; ^&gt; ^ verifySucceeded, System::Data::IsolationLevel isolationLevel);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
          <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
        </Parameters>
        <Docs>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="operation">
                A function that returns a started task.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="isolationLevel"> The isolation level to use for the transaction. </param>
          <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransactionAsync&lt;TState&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteInTransactionAsync&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteInTransactionAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Data.IsolationLevel * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, state, operation, verifySucceeded, isolationLevel, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
          <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TState"> The type of the state. </typeparam>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="state"> The state that will be passed to the operation. </param>
          <param name="operation">
                A function that returns a started task.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="isolationLevel"> The isolation level to use for the transaction. </param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransactionAsync&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteInTransactionAsync&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteInTransactionAsync&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Data.IsolationLevel * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, operation, verifySucceeded, isolationLevel, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="operation" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
          <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="isolationLevel"> The isolation level to use for the transaction. </param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
      </Targets>
      <Member MemberName="ExecuteInTransactionAsync&lt;TState,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteInTransactionAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteInTransactionAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Data.IsolationLevel * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, state, operation, verifySucceeded, isolationLevel, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TState" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
          <Parameter Name="state" Type="TState" />
          <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
          <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
          <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TState"> The type of the state. </typeparam>
          <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
          <param name="strategy"> The strategy that will be used for the execution. </param>
          <param name="state"> The state that will be passed to the operation. </param>
          <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
          <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
          <param name="isolationLevel"> The isolation level to use for the transaction. </param>
          <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
          <summary>
                Executes the specified asynchronous operation and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper" />
      </Targets>
      <Member MemberName="GetMapping">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMapping (this Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper typeMapper, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMapping(class Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper typeMapper, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMapping (typeMapper As IRelationalTypeMapper, property As IProperty) As RelationalTypeMapping" />
        <MemberSignature Language="F#" Value="static member GetMapping : Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMapping (typeMapper, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ GetMapping(Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMapper ^ typeMapper, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="typeMapper" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="typeMapper"> The type mapper. </param>
          <param name="property"> The property to get the mapping for. </param>
          <summary>
                Gets the relational database type for a given property, throwing if no mapping is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper" />
      </Targets>
      <Member MemberName="GetMapping">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMapping (this Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper typeMapper, string typeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMapping(class Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper typeMapper, string typeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMapping (typeMapper As IRelationalTypeMapper, typeName As String) As RelationalTypeMapping" />
        <MemberSignature Language="F#" Value="static member GetMapping : Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper * string -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMapping (typeMapper, typeName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ GetMapping(Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMapper ^ typeMapper, System::String ^ typeName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="typeMapper" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper" RefType="this" />
          <Parameter Name="typeName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="typeMapper"> The type mapper. </param>
          <param name="typeName"> The type to get the mapping for. </param>
          <summary>
                Gets the mapping that represents the given database type, throwing if no mapping is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper" />
      </Targets>
      <Member MemberName="GetMapping">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMapping (this Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper typeMapper, Type clrType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMapping(class Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper typeMapper, class System.Type clrType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,System.Type)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMapping (typeMapper As IRelationalTypeMapper, clrType As Type) As RelationalTypeMapping" />
        <MemberSignature Language="F#" Value="static member GetMapping : Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper * Type -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMapping (typeMapper, clrType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ GetMapping(Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMapper ^ typeMapper, Type ^ clrType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="typeMapper" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper" RefType="this" />
          <Parameter Name="clrType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="typeMapper"> The type mapper. </param>
          <param name="clrType"> The type to get the mapping for. </param>
          <summary>
                Gets the relational database type for a given .NET type, throwing if no mapping is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper" />
      </Targets>
      <Member MemberName="GetMappingForValue">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMappingForValue (this Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper typeMapper, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMappingForValue(class Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper typeMapper, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMappingForValue(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMappingForValue (typeMapper As IRelationalTypeMapper, value As Object) As RelationalTypeMapping" />
        <MemberSignature Language="F#" Value="static member GetMappingForValue : Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper * obj -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMappingForValue (typeMapper, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ GetMappingForValue(Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMapper ^ typeMapper, System::Object ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="typeMapper" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper" RefType="this" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="typeMapper"> The type mapper. </param>
          <param name="value"> The object to get the mapping for. </param>
          <summary>
                Gets the relational database type for a given object, throwing if no mapping is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.GetMappingForValue(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper" />
      </Targets>
      <Member MemberName="IsTypeMapped">
        <MemberSignature Language="C#" Value="public static bool IsTypeMapped (this Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper typeMapper, Type clrType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTypeMapped(class Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper typeMapper, class System.Type clrType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.IsTypeMapped(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,System.Type)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsTypeMapped (typeMapper As IRelationalTypeMapper, clrType As Type) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsTypeMapped : Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper * Type -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.IsTypeMapped (typeMapper, clrType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsTypeMapped(Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMapper ^ typeMapper, Type ^ clrType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsTypeMapped(Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMapper ^ typeMapper, Platform::Type ^ clrType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="typeMapper" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper" RefType="this" />
          <Parameter Name="clrType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="typeMapper"> The type mapper. </param>
          <param name="clrType"> The .NET type. </param>
          <summary>
                Gets a value indicating whether the given .NET type is mapped.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions.IsTypeMapped(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource" />
      </Targets>
      <Member MemberName="GetMapping">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMapping (this Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource typeMappingSource, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMapping(class Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource typeMappingSource, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMapping (typeMappingSource As IRelationalTypeMappingSource, property As IProperty) As RelationalTypeMapping" />
        <MemberSignature Language="F#" Value="static member GetMapping : Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMapping (typeMappingSource, property)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ GetMapping(Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource ^ typeMappingSource, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ GetMapping(Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource ^ typeMappingSource, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="typeMappingSource" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource" RefType="this" />
          <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        </Parameters>
        <Docs>
          <param name="typeMappingSource"> The type mapping source. </param>
          <param name="property"> The property to get the mapping for. </param>
          <summary>
                Gets the relational database type for a given property, throwing if no mapping is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource" />
      </Targets>
      <Member MemberName="GetMapping">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMapping (this Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource typeMappingSource, string typeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMapping(class Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource typeMappingSource, string typeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMapping (typeMappingSource As IRelationalTypeMappingSource, typeName As String) As RelationalTypeMapping" />
        <MemberSignature Language="F#" Value="static member GetMapping : Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource * string -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMapping (typeMappingSource, typeName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ GetMapping(Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource ^ typeMappingSource, System::String ^ typeName);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ GetMapping(Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource ^ typeMappingSource, Platform::String ^ typeName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="typeMappingSource" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource" RefType="this" />
          <Parameter Name="typeName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="typeMappingSource"> The type mapping source. </param>
          <param name="typeName"> The type to get the mapping for. </param>
          <summary>
            <para>
                    Gets the mapping that represents the given database type, throwing if no mapping is found.
                </para>
            <para>
                    Note that sometimes the same store type can have different mappings; this method returns the default.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource" />
      </Targets>
      <Member MemberName="GetMapping">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMapping (this Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource typeMappingSource, Type clrType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMapping(class Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource typeMappingSource, class System.Type clrType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,System.Type)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMapping (typeMappingSource As IRelationalTypeMappingSource, clrType As Type) As RelationalTypeMapping" />
        <MemberSignature Language="F#" Value="static member GetMapping : Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource * Type -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMapping (typeMappingSource, clrType)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ GetMapping(Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource ^ typeMappingSource, Type ^ clrType);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ GetMapping(Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource ^ typeMappingSource, Platform::Type ^ clrType);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="typeMappingSource" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource" RefType="this" />
          <Parameter Name="clrType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="typeMappingSource"> The type mapping source. </param>
          <param name="clrType"> The type to get the mapping for. </param>
          <summary>
                Gets the relational database type for a given .NET type, throwing if no mapping is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource" />
      </Targets>
      <Member MemberName="GetMappingForValue">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMappingForValue (this Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource typeMappingSource, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetMappingForValue(class Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource typeMappingSource, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMappingForValue(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMappingForValue (typeMappingSource As IRelationalTypeMappingSource, value As Object) As RelationalTypeMapping" />
        <MemberSignature Language="F#" Value="static member GetMappingForValue : Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource * obj -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMappingForValue (typeMappingSource, value)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ GetMappingForValue(Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource ^ typeMappingSource, System::Object ^ value);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ GetMappingForValue(Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource ^ typeMappingSource, Platform::Object ^ value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="typeMappingSource" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource" RefType="this" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="typeMappingSource"> The type mapping source. </param>
          <param name="value"> The object to get the mapping for. </param>
          <summary>
                Gets the relational database type for a given object, throwing if no mapping is found.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions" Member="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMappingForValue(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.ITypeBase" />
      </Targets>
      <Member MemberName="GetNavigationAccessMode">
        <MemberSignature Language="C#" Value="public static Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; GetNavigationAccessMode (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; GetNavigationAccessMode(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TypeBaseExtensions.GetNavigationAccessMode(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetNavigationAccessMode (typeBase As ITypeBase) As Nullable(Of PropertyAccessMode)" />
        <MemberSignature Language="F#" Value="static member GetNavigationAccessMode : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Usage="Microsoft.EntityFrameworkCore.TypeBaseExtensions.GetNavigationAccessMode typeBase" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;Microsoft::EntityFrameworkCore::PropertyAccessMode&gt; GetNavigationAccessMode(Microsoft::EntityFrameworkCore::Metadata::ITypeBase ^ typeBase);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="typeBase"> The type for which to get the access mode. </param>
          <summary>
            <para>
                    Gets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> being used for navigations of this type.
                    Null indicates that the default property access mode is being used.
                </para>
            <para>
                    Note that individual navigations can override this access mode. The value returned here will
                    be used for any navigation for which no override has been specified.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.TypeBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.TypeBaseExtensions.GetNavigationAccessMode(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Metadata.ITypeBase" />
      </Targets>
      <Member MemberName="GetPropertyAccessMode">
        <MemberSignature Language="C#" Value="public static Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; GetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; GetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TypeBaseExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccessMode (typeBase As ITypeBase) As Nullable(Of PropertyAccessMode)" />
        <MemberSignature Language="F#" Value="static member GetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;" Usage="Microsoft.EntityFrameworkCore.TypeBaseExtensions.GetPropertyAccessMode typeBase" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::PropertyAccessMode&gt; GetPropertyAccessMode(Microsoft::EntityFrameworkCore::Metadata::ITypeBase ^ typeBase);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="typeBase"> The type for which to get the access mode. </param>
          <summary>
            <para>
                    Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> being used for properties of this type.
                    Null indicates that the default property access mode is being used.
                </para>
            <para>
                    Note that individual properties can override this access mode. The value returned here will
                    be used for any property for which no override has been specified.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.TypeBaseExtensions" Member="M:Microsoft.EntityFrameworkCore.TypeBaseExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
      </Targets>
      <Member MemberName="BuildCurrentValuesString">
        <MemberSignature Language="C#" Value="public static string BuildCurrentValuesString (this Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string BuildCurrentValuesString(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateEntryExtensions.BuildCurrentValuesString(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BuildCurrentValuesString (entry As IUpdateEntry, properties As IEnumerable(Of IPropertyBase)) As String" />
        <MemberSignature Language="F#" Value="static member BuildCurrentValuesString : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * seq&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; -&gt; string" Usage="Microsoft.EntityFrameworkCore.Update.Internal.UpdateEntryExtensions.BuildCurrentValuesString (entry, properties)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ BuildCurrentValuesString(Microsoft::EntityFrameworkCore::Update::IUpdateEntry ^ entry, System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^&gt; ^ properties);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" RefType="this" />
          <Parameter Name="properties" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;" />
        </Parameters>
        <Docs>
          <param name="entry">To be added.</param>
          <param name="properties">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Update.Internal.UpdateEntryExtensions" Member="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateEntryExtensions.BuildCurrentValuesString(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
      </Targets>
      <Member MemberName="BuildOriginalValuesString">
        <MemberSignature Language="C#" Value="public static string BuildOriginalValuesString (this Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string BuildOriginalValuesString(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateEntryExtensions.BuildOriginalValuesString(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BuildOriginalValuesString (entry As IUpdateEntry, properties As IEnumerable(Of IPropertyBase)) As String" />
        <MemberSignature Language="F#" Value="static member BuildOriginalValuesString : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * seq&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; -&gt; string" Usage="Microsoft.EntityFrameworkCore.Update.Internal.UpdateEntryExtensions.BuildOriginalValuesString (entry, properties)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ BuildOriginalValuesString(Microsoft::EntityFrameworkCore::Update::IUpdateEntry ^ entry, System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IPropertyBase ^&gt; ^ properties);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" RefType="this" />
          <Parameter Name="properties" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;" />
        </Parameters>
        <Docs>
          <param name="entry">To be added.</param>
          <param name="properties">To be added.</param>
          <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.Update.Internal.UpdateEntryExtensions" Member="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateEntryExtensions.BuildOriginalValuesString(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" />
      </Targets>
      <Member MemberName="Ignore">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder Ignore (this Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder warningsConfigurationBuilder, params Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[] inMemoryEventIds);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder Ignore(class Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder warningsConfigurationBuilder, valuetype Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[] inMemoryEventIds) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Ignore(Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder,Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[])" />
        <MemberSignature Language="F#" Value="static member Ignore : Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder * Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[] -&gt; Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" Usage="Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Ignore (warningsConfigurationBuilder, inMemoryEventIds)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Infrastructure::WarningsConfigurationBuilder ^ Ignore(Microsoft::EntityFrameworkCore::Infrastructure::WarningsConfigurationBuilder ^ warningsConfigurationBuilder, ... cli::array &lt;Microsoft::EntityFrameworkCore::Infrastructure::InMemoryEventId&gt; ^ inMemoryEventIds);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="warningsConfigurationBuilder" Type="Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" RefType="this" />
          <Parameter Name="inMemoryEventIds" Type="Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="warningsConfigurationBuilder"> The builder being used to configure warnings. </param>
          <param name="inMemoryEventIds">
                The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId" />(s) for the warnings.
            </param>
          <summary>
                Causes nothing to happen when the specified in-memory warnings are generated.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Ignore(Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder,Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" />
      </Targets>
      <Member MemberName="Ignore">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder Ignore (this Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder warningsConfigurationBuilder, params Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[] relationalEventIds);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder Ignore(class Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder warningsConfigurationBuilder, valuetype Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[] relationalEventIds) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Ignore(Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder,Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[])" />
        <MemberSignature Language="F#" Value="static member Ignore : Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder * Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[] -&gt; Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" Usage="Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Ignore (warningsConfigurationBuilder, relationalEventIds)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Infrastructure::WarningsConfigurationBuilder ^ Ignore(Microsoft::EntityFrameworkCore::Infrastructure::WarningsConfigurationBuilder ^ warningsConfigurationBuilder, ... cli::array &lt;Microsoft::EntityFrameworkCore::Infrastructure::RelationalEventId&gt; ^ relationalEventIds);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="warningsConfigurationBuilder" Type="Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" RefType="this" />
          <Parameter Name="relationalEventIds" Type="Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="warningsConfigurationBuilder"> The builder being used to configure warnings. </param>
          <param name="relationalEventIds">
                The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId" />(s) for the warnings.
            </param>
          <summary>
                Causes nothing to happen when the specified relational database warnings are generated.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Ignore(Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder,Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" />
      </Targets>
      <Member MemberName="Log">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder Log (this Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder warningsConfigurationBuilder, params Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[] inMemoryEventIds);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder Log(class Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder warningsConfigurationBuilder, valuetype Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[] inMemoryEventIds) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Log(Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder,Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[])" />
        <MemberSignature Language="F#" Value="static member Log : Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder * Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[] -&gt; Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" Usage="Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Log (warningsConfigurationBuilder, inMemoryEventIds)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Infrastructure::WarningsConfigurationBuilder ^ Log(Microsoft::EntityFrameworkCore::Infrastructure::WarningsConfigurationBuilder ^ warningsConfigurationBuilder, ... cli::array &lt;Microsoft::EntityFrameworkCore::Infrastructure::InMemoryEventId&gt; ^ inMemoryEventIds);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="warningsConfigurationBuilder" Type="Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" RefType="this" />
          <Parameter Name="inMemoryEventIds" Type="Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="warningsConfigurationBuilder"> The builder being used to configure warnings. </param>
          <param name="inMemoryEventIds">
                The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId" />(s) for the warnings.
            </param>
          <summary>
                Causes a warning to be logged when the specified in-memory warnings are generated.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Log(Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder,Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" />
      </Targets>
      <Member MemberName="Log">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder Log (this Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder warningsConfigurationBuilder, params Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[] relationalEventIds);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder Log(class Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder warningsConfigurationBuilder, valuetype Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[] relationalEventIds) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Log(Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder,Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[])" />
        <MemberSignature Language="F#" Value="static member Log : Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder * Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[] -&gt; Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" Usage="Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Log (warningsConfigurationBuilder, relationalEventIds)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Infrastructure::WarningsConfigurationBuilder ^ Log(Microsoft::EntityFrameworkCore::Infrastructure::WarningsConfigurationBuilder ^ warningsConfigurationBuilder, ... cli::array &lt;Microsoft::EntityFrameworkCore::Infrastructure::RelationalEventId&gt; ^ relationalEventIds);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="warningsConfigurationBuilder" Type="Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" RefType="this" />
          <Parameter Name="relationalEventIds" Type="Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="warningsConfigurationBuilder"> The builder being used to configure warnings. </param>
          <param name="relationalEventIds">
                The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId" />(s) for the warnings.
            </param>
          <summary>
                Causes a warning to be logged when the specified relational database warnings are generated.
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Log(Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder,Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" />
      </Targets>
      <Member MemberName="Throw">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder Throw (this Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder warningsConfigurationBuilder, params Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[] inMemoryEventIds);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder Throw(class Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder warningsConfigurationBuilder, valuetype Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[] inMemoryEventIds) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Throw(Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder,Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[])" />
        <MemberSignature Language="F#" Value="static member Throw : Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder * Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[] -&gt; Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" Usage="Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Throw (warningsConfigurationBuilder, inMemoryEventIds)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Infrastructure::WarningsConfigurationBuilder ^ Throw(Microsoft::EntityFrameworkCore::Infrastructure::WarningsConfigurationBuilder ^ warningsConfigurationBuilder, ... cli::array &lt;Microsoft::EntityFrameworkCore::Infrastructure::InMemoryEventId&gt; ^ inMemoryEventIds);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="warningsConfigurationBuilder" Type="Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" RefType="this" />
          <Parameter Name="inMemoryEventIds" Type="Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="warningsConfigurationBuilder"> The builder being used to configure warnings. </param>
          <param name="inMemoryEventIds">
                The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId" />(s) for the warnings.
            </param>
          <summary>
                Causes an exception to be thrown when the specified in-memory warnings are generated.  
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Throw(Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder,Microsoft.EntityFrameworkCore.Infrastructure.InMemoryEventId[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" />
      </Targets>
      <Member MemberName="Throw">
        <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder Throw (this Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder warningsConfigurationBuilder, params Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[] relationalEventIds);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder Throw(class Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder warningsConfigurationBuilder, valuetype Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[] relationalEventIds) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Throw(Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder,Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[])" />
        <MemberSignature Language="F#" Value="static member Throw : Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder * Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[] -&gt; Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" Usage="Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Throw (warningsConfigurationBuilder, relationalEventIds)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::EntityFrameworkCore::Infrastructure::WarningsConfigurationBuilder ^ Throw(Microsoft::EntityFrameworkCore::Infrastructure::WarningsConfigurationBuilder ^ warningsConfigurationBuilder, ... cli::array &lt;Microsoft::EntityFrameworkCore::Infrastructure::RelationalEventId&gt; ^ relationalEventIds);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="warningsConfigurationBuilder" Type="Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder" RefType="this" />
          <Parameter Name="relationalEventIds" Type="Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="warningsConfigurationBuilder"> The builder being used to configure warnings. </param>
          <param name="relationalEventIds">
                The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId" />(s) for the warnings.
            </param>
          <summary>
                Causes an exception to be thrown when the specified relational database warnings are generated.  
            </summary>
        </Docs>
        <Link Type="Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions" Member="M:Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions.Throw(Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder,Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDbContext&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, contextLifetime As ServiceLifetime) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, contextLifetime)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContext&gt;&#xA; where TContext : Microsoft::EntityFrameworkCore::DbContext[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddDbContext(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ serviceCollection, Microsoft::Extensions::DependencyInjection::ServiceLifetime contextLifetime);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context to be registered. </typeparam>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
          <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDbContext&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, contextLifetime As ServiceLifetime, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Extensions.DependencyInjection.ServiceLifetime * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, contextLifetime, optionsLifetime)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
          <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context to be registered. </typeparam>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
          <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
          <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDbContext&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction = null, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, Optional optionsAction As Action(Of DbContextOptionsBuilder) = null, Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, optionsAction, contextLifetime)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
          <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context to be registered. </typeparam>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <param name="optionsAction">
            <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
            <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
            <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
          </param>
          <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
          <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDbContext&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction = null, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, Optional optionsAction As Action(Of DbContextOptionsBuilder) = null, Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, optionsAction, contextLifetime, optionsLifetime)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
          <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
          <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context to be registered. </typeparam>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <param name="optionsAction">
            <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
            <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
            <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
          </param>
          <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
          <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
          <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDbContext&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;IServiceProvider, Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, optionsAction, contextLifetime)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
          <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context to be registered. </typeparam>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <param name="optionsAction">
            <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
            <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
            <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
          </param>
          <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
          <summary>
            <para>
                    Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                    You use this method when using dependency injection in your application, such as with ASP.NET.
                    For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
            <para>
                    This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                    This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service provider.
                    By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own <see cref="T:System.IServiceProvider" />
                    for internal Entity Framework services.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDbContext&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;IServiceProvider, Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, optionsAction, contextLifetime, optionsLifetime)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
          <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
          <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context to be registered. </typeparam>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <param name="optionsAction">
            <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
            <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
            <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
          </param>
          <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
          <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
          <summary>
            <para>
                    Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                    You use this method when using dependency injection in your application, such as with ASP.NET.
                    For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
            <para>
                    This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                    This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service
                    provider.
                    By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own
                    <see cref="T:System.IServiceProvider" />
                    for internal Entity Framework services.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDbContext&lt;TContextService,TContextImplementation&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContextService,TContextImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContextService : class where TContextImplementation : Microsoft.EntityFrameworkCore.DbContext, TContextService;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;class TContextService, (class Microsoft.EntityFrameworkCore.DbContext, !!TContextService) TContextImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContextService As Class, TContextImplementation As Class) (serviceCollection As IServiceCollection, contextLifetime As ServiceLifetime, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Extensions.DependencyInjection.ServiceLifetime * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'ContextService : null and 'ContextImplementation :&gt; Microsoft.EntityFrameworkCore.DbContext and 'ContextImplementation :&gt; 'ContextService)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, contextLifetime, optionsLifetime)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContextService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TContextImplementation">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
              <BaseTypeName>TContextService</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
          <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
        </Parameters>
        <Docs>
          <typeparam name="TContextService"> The class or interface that will be used to resolve the context from the container. </typeparam>
          <typeparam name="TContextImplementation"> The concrete implementation type to create. </typeparam>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
          <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
          <summary>
                 Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                 You use this method when using dependency injection in your application, such as with ASP.NET.
                 For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
             </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDbContext&lt;TContextService,TContextImplementation&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContextService,TContextImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction = null, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContextImplementation : Microsoft.EntityFrameworkCore.DbContext, TContextService;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContextService, (class Microsoft.EntityFrameworkCore.DbContext, !!TContextService) TContextImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContextService, TContextImplementation) (serviceCollection As IServiceCollection, Optional optionsAction As Action(Of DbContextOptionsBuilder) = null, Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'ContextImplementation :&gt; Microsoft.EntityFrameworkCore.DbContext and 'ContextImplementation :&gt; 'ContextService)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, optionsAction, contextLifetime, optionsLifetime)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContextService" />
          <TypeParameter Name="TContextImplementation">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
              <BaseTypeName>TContextService</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
          <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
          <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
        </Parameters>
        <Docs>
          <typeparam name="TContextService"> The class or interface that will be used to resolve the context from the container. </typeparam>
          <typeparam name="TContextImplementation"> The concrete implementation type to create. </typeparam>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <param name="optionsAction">
            <para>
                     An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                     alternative to performing configuration of the context by overriding the
                     <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                 </para>
            <para>
                     If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                     been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                     in addition to configuration performed here.
                 </para>
            <para>
                     In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                     <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                 </para>
          </param>
          <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
          <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
          <summary>
                 Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                 You use this method when using dependency injection in your application, such as with ASP.NET.
                 For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
             </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDbContext&lt;TContextService,TContextImplementation&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContextService,TContextImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContextImplementation : Microsoft.EntityFrameworkCore.DbContext, TContextService;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContextService, (class Microsoft.EntityFrameworkCore.DbContext, !!TContextService) TContextImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContextService, TContextImplementation) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;IServiceProvider, Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'ContextImplementation :&gt; Microsoft.EntityFrameworkCore.DbContext and 'ContextImplementation :&gt; 'ContextService)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, optionsAction, contextLifetime, optionsLifetime)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContextService" />
          <TypeParameter Name="TContextImplementation">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
              <BaseTypeName>TContextService</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
          <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
          <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
        </Parameters>
        <Docs>
          <typeparam name="TContextService"> The class or interface that will be used to resolve the context from the container. </typeparam>
          <typeparam name="TContextImplementation"> The concrete implementation type to create. </typeparam>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <param name="optionsAction">
            <para>
                     An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                     alternative to performing configuration of the context by overriding the
                     <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                 </para>
            <para>
                     If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                     been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                     in addition to configuration performed here.
                 </para>
            <para>
                     In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                     <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                 </para>
          </param>
          <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
          <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
          <summary>
            <para>
                     Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                     You use this method when using dependency injection in your application, such as with ASP.NET.
                     For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                 </para>
            <para>
                     This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                     This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service
                     provider.
                     By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own
                     <see cref="T:System.IServiceProvider" />
                     for internal Entity Framework services.
                 </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDbContextPool&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 128) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int32 poolSize) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextPool(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of DbContextOptionsBuilder), Optional poolSize As Integer = 128) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddDbContextPool : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * int -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool (serviceCollection, optionsAction, poolSize)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
          <Parameter Name="poolSize" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context to be registered. </typeparam>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <param name="optionsAction">
            <para>
                    A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                    context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                    will not be called.
                </para>
          </param>
          <param name="poolSize">
                ESets the maximum number of instances retained by the pool.
            </param>
          <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> and enables DbContext pooling.
                Instance pooling can increase throughput in high-scale scenarios such as web servers by re-using
                DbContext instances, rather than creating new instances for each request.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDbContextPool&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 128) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int32 poolSize) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextPool(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional poolSize As Integer = 128) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddDbContextPool : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;IServiceProvider, Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * int -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool (serviceCollection, optionsAction, poolSize)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
          <Parameter Name="poolSize" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TContext"> The type of context to be registered. </typeparam>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <param name="optionsAction">
            <para>
                    A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                    context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                    will not be called.
                </para>
          </param>
          <param name="poolSize">
                Sets the maximum number of instances retained by the pool.
            </param>
          <summary>
            <para>
                    Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> and enables DbContext pooling.
                    Instance pooling can increase throughput in high-scale scenarios such as web servers by re-using
                    DbContext instances, rather than creating new instances for each request.
                    You use this method when using dependency injection in your application, such as with ASP.NET.
                    For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
            <para>
                    This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                    This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service
                    provider.
                    By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own
                    <see cref="T:System.IServiceProvider" />
                    for internal Entity Framework services.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDbContextPool&lt;TContextService,TContextImplementation&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;TContextService,TContextImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 128) where TContextService : class where TContextImplementation : Microsoft.EntityFrameworkCore.DbContext, TContextService;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;class TContextService, (class Microsoft.EntityFrameworkCore.DbContext, !!TContextService) TContextImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int32 poolSize) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextPool(Of TContextService As Class, TContextImplementation As Class) (serviceCollection As IServiceCollection, optionsAction As Action(Of DbContextOptionsBuilder), Optional poolSize As Integer = 128) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddDbContextPool : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * int -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'ContextService : null and 'ContextImplementation :&gt; Microsoft.EntityFrameworkCore.DbContext and 'ContextImplementation :&gt; 'ContextService)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool (serviceCollection, optionsAction, poolSize)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContextService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TContextImplementation">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
              <BaseTypeName>TContextService</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
          <Parameter Name="poolSize" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TContextService"> The class or interface that will be used to resolve the context from the container. </typeparam>
          <typeparam name="TContextImplementation"> The concrete implementation type to create. </typeparam>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <param name="optionsAction">
            <para>
                    A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                    context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                    will not be called.
                </para>
          </param>
          <param name="poolSize">
                ESets the maximum number of instances retained by the pool.
            </param>
          <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> and enables DbContext pooling.
                Instance pooling can increase throughput in high-scale scenarios such as web servers by re-using
                DbContext instances, rather than creating new instances for each request.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDbContextPool&lt;TContextService,TContextImplementation&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;TContextService,TContextImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 128) where TContextService : class where TContextImplementation : Microsoft.EntityFrameworkCore.DbContext, TContextService;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;class TContextService, (class Microsoft.EntityFrameworkCore.DbContext, !!TContextService) TContextImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int32 poolSize) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextPool(Of TContextService As Class, TContextImplementation As Class) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional poolSize As Integer = 128) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddDbContextPool : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;IServiceProvider, Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * int -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'ContextService : null and 'ContextImplementation :&gt; Microsoft.EntityFrameworkCore.DbContext and 'ContextImplementation :&gt; 'ContextService)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool (serviceCollection, optionsAction, poolSize)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContextService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TContextImplementation">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
              <BaseTypeName>TContextService</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
          <Parameter Name="poolSize" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TContextService"> The class or interface that will be used to resolve the context from the container. </typeparam>
          <typeparam name="TContextImplementation"> The concrete implementation type to create. </typeparam>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <param name="optionsAction">
            <para>
                    A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                    context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                    will not be called.
                </para>
          </param>
          <param name="poolSize">
                Sets the maximum number of instances retained by the pool.
            </param>
          <summary>
            <para>
                    Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> and enables DbContext pooling.
                    Instance pooling can increase throughput in high-scale scenarios such as web servers by re-using
                    DbContext instances, rather than creating new instances for each request.
                    You use this method when using dependency injection in your application, such as with ASP.NET.
                    For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
            <para>
                    This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                    This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service
                    provider.
                    By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own
                    <see cref="T:System.IServiceProvider" />
                    for internal Entity Framework services.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddEntityFrameworkInMemoryDatabase">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddEntityFrameworkInMemoryDatabase (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddEntityFrameworkInMemoryDatabase(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.InMemoryServiceCollectionExtensions.AddEntityFrameworkInMemoryDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddEntityFrameworkInMemoryDatabase (services As IServiceCollection) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddEntityFrameworkInMemoryDatabase : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.DependencyInjection.InMemoryServiceCollectionExtensions.AddEntityFrameworkInMemoryDatabase services" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddEntityFrameworkInMemoryDatabase(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <summary>
            <para>
                    Adds the services required by the in-memory database provider for Entity Framework
                    to an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. You use this method when using dependency injection
                    in your application, such as with ASP.NET. For more information on setting up dependency
                    injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
            <para>
                    You only need to use this functionality when you want Entity Framework to resolve the services it uses
                    from an external dependency injection container. If you are not using an external
                    dependency injection container, Entity Framework will take care of creating the services it requires.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.InMemoryServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.InMemoryServiceCollectionExtensions.AddEntityFrameworkInMemoryDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddEntityFrameworkProxies">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddEntityFrameworkProxies (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddEntityFrameworkProxies(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ProxiesServiceCollectionExtensions.AddEntityFrameworkProxies(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddEntityFrameworkProxies (serviceCollection As IServiceCollection) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddEntityFrameworkProxies : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.DependencyInjection.ProxiesServiceCollectionExtensions.AddEntityFrameworkProxies serviceCollection" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddEntityFrameworkProxies(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ serviceCollection);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <summary>
            <para>
                    Adds the services required for proxy support in Entity Framework. You use this method when
                    using dependency injection in your application, such as with ASP.NET. For more information
                    on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
            <para>
                    You only need to use this functionality when you want Entity Framework to resolve the services it uses
                    from an external dependency injection container. If you are not using an external
                    dependency injection container, Entity Framework will take care of creating the services it requires.
                </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ProxiesServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ProxiesServiceCollectionExtensions.AddEntityFrameworkProxies(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddEntityFrameworkSqlite">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddEntityFrameworkSqlite (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddEntityFrameworkSqlite(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.SqliteServiceCollectionExtensions.AddEntityFrameworkSqlite(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddEntityFrameworkSqlite (services As IServiceCollection) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddEntityFrameworkSqlite : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.DependencyInjection.SqliteServiceCollectionExtensions.AddEntityFrameworkSqlite services" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddEntityFrameworkSqlite(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <summary>
            <para>
                     Adds the services required by the SQLite database provider for Entity Framework
                     to an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. You use this method when using dependency injection
                     in your application, such as with ASP.NET. For more information on setting up dependency
                     injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                 </para>
            <para>
                     You only need to use this functionality when you want Entity Framework to resolve the services it uses
                     from an external dependency injection container. If you are not using an external
                     dependency injection container, Entity Framework will take care of creating the services it requires.
                 </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.SqliteServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.SqliteServiceCollectionExtensions.AddEntityFrameworkSqlite(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddEntityFrameworkSqlServer">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddEntityFrameworkSqlServer (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddEntityFrameworkSqlServer(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions.AddEntityFrameworkSqlServer(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddEntityFrameworkSqlServer (services As IServiceCollection) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddEntityFrameworkSqlServer : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions.AddEntityFrameworkSqlServer services" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddEntityFrameworkSqlServer(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
          <summary>
            <para>
                     Adds the services required by the Microsoft SQL Server database provider for Entity Framework
                     to an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. You use this method when using dependency injection
                     in your application, such as with ASP.NET. For more information on setting up dependency
                     injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                 </para>
            <para>
                     You only need to use this functionality when you want Entity Framework to resolve the services it uses
                     from an external dependency injection container. If you are not using an external
                     dependency injection container, Entity Framework will take care of creating the services it requires.
                 </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions.AddEntityFrameworkSqlServer(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="EnlistTransaction">
        <MemberSignature Language="C#" Value="public static void EnlistTransaction (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, System.Transactions.Transaction transaction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnlistTransaction(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade, class System.Transactions.Transaction transaction) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionsDatabaseFacadeExtensions.EnlistTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Transactions.Transaction)" />
        <MemberSignature Language="F#" Value="static member EnlistTransaction : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * System.Transactions.Transaction -&gt; unit" Usage="System.Transactions.TransactionsDatabaseFacadeExtensions.EnlistTransaction (databaseFacade, transaction)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void EnlistTransaction(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade, System::Transactions::Transaction ^ transaction);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
          <Parameter Name="transaction" Type="System.Transactions.Transaction" />
        </Parameters>
        <Docs>
          <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context.</param>
          <param name="transaction"> The transaction to be used. </param>
          <summary>
                Specifies an existing <see cref="T:System.Transactions.Transaction" /> to be used for database operations.
            </summary>
        </Docs>
        <Link Type="System.Transactions.TransactionsDatabaseFacadeExtensions" Member="M:System.Transactions.TransactionsDatabaseFacadeExtensions.EnlistTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Transactions.Transaction)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
      </Targets>
      <Member MemberName="GetEnlistedTransaction">
        <MemberSignature Language="C#" Value="public static System.Transactions.Transaction GetEnlistedTransaction (this Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Transactions.Transaction GetEnlistedTransaction(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade databaseFacade) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionsDatabaseFacadeExtensions.GetEnlistedTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
        <MemberSignature Language="F#" Value="static member GetEnlistedTransaction : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade -&gt; System.Transactions.Transaction" Usage="System.Transactions.TransactionsDatabaseFacadeExtensions.GetEnlistedTransaction databaseFacade" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Transactions::Transaction ^ GetEnlistedTransaction(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ databaseFacade);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Transactions.Transaction</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="databaseFacade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" RefType="this" />
        </Parameters>
        <Docs>
          <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context.</param>
          <summary>
                Returns the currently enlisted transaction.
            </summary>
        </Docs>
        <Link Type="System.Transactions.TransactionsDatabaseFacadeExtensions" Member="M:System.Transactions.TransactionsDatabaseFacadeExtensions.GetEnlistedTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
