<Type Name="Model" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.Model">
  <TypeSignature Language="C#" Value="public class Model : Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable, Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Model extends Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IModel, class Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Model" />
  <TypeSignature Language="VB.NET" Value="Public Class Model&#xA;Inherits ConventionalAnnotatable&#xA;Implements IMutableModel" />
  <TypeSignature Language="F#" Value="type Model = class&#xA;    inherit ConventionalAnnotatable&#xA;    interface IMutableModel&#xA;    interface IModel&#xA;    interface IAnnotatable&#xA;    interface IMutableAnnotatable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Model : Microsoft::EntityFrameworkCore::Metadata::Internal::ConventionalAnnotatable, Microsoft::EntityFrameworkCore::Metadata::IMutableModel" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class Model : Microsoft::EntityFrameworkCore::Metadata::Internal::ConventionalAnnotatable, Microsoft::EntityFrameworkCore::Metadata::IMutableModel" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionalAnnotatable</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IMutableModel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Model ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Model();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Model();" />
      <MemberSignature Language="C++ WINRT" Value=" Model();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Model (Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet conventions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet conventions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (conventions As ConventionSet)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.Model : Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Model" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.Model conventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Model(Microsoft::EntityFrameworkCore::Metadata::Conventions::ConventionSet ^ conventions);" />
      <MemberSignature Language="C++ WINRT" Value=" Model(Microsoft::EntityFrameworkCore::Metadata::Conventions::ConventionSet const &amp; conventions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="conventions" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" />
      </Parameters>
      <Docs>
        <param name="conventions">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AddEntityType (string name, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AddEntityType(string name, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.AddEntityType(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member AddEntityType : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.AddEntityType : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.AddEntityType (name, configurationSource)" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType AddEntityType(std::wstring const &amp; name, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AddEntityType (Type type, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AddEntityType(class System.Type type, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.AddEntityType(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member AddEntityType : Type * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.AddEntityType : Type * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.AddEntityType (type, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AddEntityType (string name, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit, bool runConventions = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AddEntityType(string name, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool runConventions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.AddEntityType(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member AddEntityType : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.AddEntityType : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.AddEntityType (name, configurationSource, runConventions)" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType AddEntityType(std::wstring const &amp; name, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit, bool runConventions = true);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        <Parameter Name="runConventions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="runConventions">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AddEntityType (Type type, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit, bool runConventions = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AddEntityType(class System.Type type, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool runConventions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.AddEntityType(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member AddEntityType : Type * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.AddEntityType : Type * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.AddEntityType (type, configurationSource, runConventions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        <Parameter Name="runConventions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="runConventions">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AddEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType definingEntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AddEntityType(string name, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType definingEntityType, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.AddEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member AddEntityType : string * string * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.AddEntityType : string * string * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.AddEntityType (name, definingNavigationName, definingEntityType, configurationSource)" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType AddEntityType(std::wstring const &amp; name, std::wstring const &amp; definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType const &amp; definingEntityType, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AddEntityType (Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType definingEntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AddEntityType(class System.Type type, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType definingEntityType, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.AddEntityType(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member AddEntityType : Type * string * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.AddEntityType : Type * string * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.AddEntityType (type, definingNavigationName, definingEntityType, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddQueryType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AddQueryType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType AddQueryType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.AddQueryType(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member AddQueryType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.AddQueryType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.AddQueryType type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ AddQueryType(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Builder">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder Builder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder Builder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Builder" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Builder As InternalModelBuilder" />
      <MemberSignature Language="F#" Value="member this.Builder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::Metadata::Internal::InternalModelBuilder ^ Builder { Microsoft::EntityFrameworkCore::Metadata::Internal::InternalModelBuilder ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTrackingStrategy ChangeTrackingStrategy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy ChangeTrackingStrategy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.ChangeTrackingStrategy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ChangeTrackingStrategy As ChangeTrackingStrategy" />
      <MemberSignature Language="F#" Value="member this.ChangeTrackingStrategy : Microsoft.EntityFrameworkCore.ChangeTrackingStrategy with get, set" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Model.ChangeTrackingStrategy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::ChangeTrackingStrategy ChangeTrackingStrategy { Microsoft::EntityFrameworkCore::ChangeTrackingStrategy get(); void set(Microsoft::EntityFrameworkCore::ChangeTrackingStrategy value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::ChangeTrackingStrategy ChangeTrackingStrategy { Microsoft::EntityFrameworkCore::ChangeTrackingStrategy get(); void set(Microsoft::EntityFrameworkCore::ChangeTrackingStrategy value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTrackingStrategy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConventionDispatcher">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher ConventionDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher ConventionDispatcher" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.ConventionDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ConventionDispatcher As ConventionDispatcher" />
      <MemberSignature Language="F#" Value="member this.ConventionDispatcher : Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Model.ConventionDispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::Metadata::Conventions::Internal::ConventionDispatcher ^ ConventionDispatcher { Microsoft::EntityFrameworkCore::Metadata::Conventions::Internal::ConventionDispatcher ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugView">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Model&gt; DebugView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Model&gt; DebugView" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.DebugView" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DebugView As DebugView(Of Model)" />
      <MemberSignature Language="F#" Value="member this.DebugView : Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Model&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Model.DebugView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::Metadata::Internal::DebugView&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::Model ^&gt; ^ DebugView { Microsoft::EntityFrameworkCore::Metadata::Internal::DebugView&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::Model ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Model&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType FindEntityType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType FindEntityType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindEntityType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindEntityType (name As String) As EntityType" />
      <MemberSignature Language="F#" Value="abstract member FindEntityType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.FindEntityType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.FindEntityType name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ FindEntityType(System::String ^ name);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType FindEntityType(std::wstring const &amp; name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType FindEntityType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType FindEntityType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindEntityType(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member FindEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.FindEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.FindEntityType type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ FindEntityType(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType FindEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType FindEntityType(string name, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindEntityType (name As String, definingNavigationName As String, definingEntityType As EntityType) As EntityType" />
      <MemberSignature Language="F#" Value="abstract member FindEntityType : string * string * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.FindEntityType : string * string * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.FindEntityType (name, definingNavigationName, definingEntityType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ FindEntityType(System::String ^ name, System::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ definingEntityType);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType FindEntityType(std::wstring const &amp; name, std::wstring const &amp; definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType const &amp; definingEntityType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityType">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType FindEntityType (string name, string definingNavigationName, string definingEntityTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType FindEntityType(string name, string definingNavigationName, string definingEntityTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindEntityType(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindEntityType (name As String, definingNavigationName As String, definingEntityTypeName As String) As EntityType" />
      <MemberSignature Language="F#" Value="abstract member FindEntityType : string * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.FindEntityType : string * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.FindEntityType (name, definingNavigationName, definingEntityTypeName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ FindEntityType(System::String ^ name, System::String ^ definingNavigationName, System::String ^ definingEntityTypeName);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType FindEntityType(std::wstring const &amp; name, std::wstring const &amp; definingNavigationName, std::wstring const &amp; definingEntityTypeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityTypeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityTypeName">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType FindEntityType (Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType FindEntityType(class System.Type type, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindEntityType(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
      <MemberSignature Language="F#" Value="abstract member FindEntityType : Type * string * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.FindEntityType : Type * string * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.FindEntityType (type, definingNavigationName, definingEntityType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ FindEntityType(Type ^ type, System::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ definingEntityType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityType">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIgnoredEntityTypeConfigurationSource">
      <MemberSignature Language="C#" Value="public virtual Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; FindIgnoredEntityTypeConfigurationSource (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; FindIgnoredEntityTypeConfigurationSource(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindIgnoredEntityTypeConfigurationSource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindIgnoredEntityTypeConfigurationSource (name As String) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member FindIgnoredEntityTypeConfigurationSource : string -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&#xA;override this.FindIgnoredEntityTypeConfigurationSource : string -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Usage="model.FindIgnoredEntityTypeConfigurationSource name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource&gt; FindIgnoredEntityTypeConfigurationSource(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIgnoredEntityTypeConfigurationSource">
      <MemberSignature Language="C#" Value="public virtual Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; FindIgnoredEntityTypeConfigurationSource (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; FindIgnoredEntityTypeConfigurationSource(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindIgnoredEntityTypeConfigurationSource(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member FindIgnoredEntityTypeConfigurationSource : Type -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&#xA;override this.FindIgnoredEntityTypeConfigurationSource : Type -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Usage="model.FindIgnoredEntityTypeConfigurationSource type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource&gt; FindIgnoredEntityTypeConfigurationSource(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIgnoredTypeConfigurationSource">
      <MemberSignature Language="C#" Value="public virtual Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; FindIgnoredTypeConfigurationSource (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; FindIgnoredTypeConfigurationSource(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindIgnoredTypeConfigurationSource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindIgnoredTypeConfigurationSource (name As String) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member FindIgnoredTypeConfigurationSource : string -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&#xA;override this.FindIgnoredTypeConfigurationSource : string -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Usage="model.FindIgnoredTypeConfigurationSource name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource&gt; FindIgnoredTypeConfigurationSource(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIgnoredTypeConfigurationSource">
      <MemberSignature Language="C#" Value="public virtual Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; FindIgnoredTypeConfigurationSource (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; FindIgnoredTypeConfigurationSource(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.FindIgnoredTypeConfigurationSource(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member FindIgnoredTypeConfigurationSource : Type -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&#xA;override this.FindIgnoredTypeConfigurationSource : Type -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Usage="model.FindIgnoredTypeConfigurationSource type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Nullable&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource&gt; FindIgnoredTypeConfigurationSource(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntityTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; GetEntityTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; GetEntityTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.GetEntityTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityTypes () As IEnumerable(Of EntityType)" />
      <MemberSignature Language="F#" Value="abstract member GetEntityTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;&#xA;override this.GetEntityTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;" Usage="model.GetEntityTypes " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^&gt; ^ GetEntityTypes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntityTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; GetEntityTypes (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; GetEntityTypes(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.GetEntityTypes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityTypes (name As String) As IReadOnlyCollection(Of EntityType)" />
      <MemberSignature Language="F#" Value="abstract member GetEntityTypes : string -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;&#xA;override this.GetEntityTypes : string -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;" Usage="model.GetEntityTypes name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IReadOnlyCollection&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^&gt; ^ GetEntityTypes(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntityTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; GetEntityTypes (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; GetEntityTypes(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.GetEntityTypes(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member GetEntityTypes : Type -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;&#xA;override this.GetEntityTypes : Type -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;" Usage="model.GetEntityTypes type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IReadOnlyCollection&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^&gt; ^ GetEntityTypes(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType GetOrAddEntityType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType GetOrAddEntityType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.GetOrAddEntityType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrAddEntityType (name As String) As EntityType" />
      <MemberSignature Language="F#" Value="abstract member GetOrAddEntityType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.GetOrAddEntityType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.GetOrAddEntityType name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ GetOrAddEntityType(System::String ^ name);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType GetOrAddEntityType(std::wstring const &amp; name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType GetOrAddEntityType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType GetOrAddEntityType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.GetOrAddEntityType(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member GetOrAddEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.GetOrAddEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.GetOrAddEntityType type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ GetOrAddEntityType(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEntityTypeWithDefiningNavigation">
      <MemberSignature Language="C#" Value="public virtual bool HasEntityTypeWithDefiningNavigation (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasEntityTypeWithDefiningNavigation(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.HasEntityTypeWithDefiningNavigation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasEntityTypeWithDefiningNavigation (name As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member HasEntityTypeWithDefiningNavigation : string -&gt; bool&#xA;override this.HasEntityTypeWithDefiningNavigation : string -&gt; bool" Usage="model.HasEntityTypeWithDefiningNavigation name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasEntityTypeWithDefiningNavigation(System::String ^ name);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual bool HasEntityTypeWithDefiningNavigation(Platform::String ^ name);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual bool HasEntityTypeWithDefiningNavigation(std::wstring const &amp; name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEntityTypeWithDefiningNavigation">
      <MemberSignature Language="C#" Value="public virtual bool HasEntityTypeWithDefiningNavigation (Type clrType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasEntityTypeWithDefiningNavigation(class System.Type clrType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.HasEntityTypeWithDefiningNavigation(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasEntityTypeWithDefiningNavigation (clrType As Type) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member HasEntityTypeWithDefiningNavigation : Type -&gt; bool&#xA;override this.HasEntityTypeWithDefiningNavigation : Type -&gt; bool" Usage="model.HasEntityTypeWithDefiningNavigation clrType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasEntityTypeWithDefiningNavigation(Type ^ clrType);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual bool HasEntityTypeWithDefiningNavigation(Platform::Type ^ clrType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="clrType">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual void Ignore (string name, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Ignore(string name, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Ignore(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member Ignore : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; unit&#xA;override this.Ignore : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; unit" Usage="model.Ignore (name, configurationSource)" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Ignore(std::wstring const &amp; name, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual void Ignore (Type type, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Ignore(class System.Type type, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Ignore(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member Ignore : Type * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; unit&#xA;override this.Ignore : Type * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; unit" Usage="model.Ignore (type, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual void Ignore (string name, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit, bool runConventions = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Ignore(string name, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool runConventions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Ignore(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Ignore : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; unit&#xA;override this.Ignore : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; unit" Usage="model.Ignore (name, configurationSource, runConventions)" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Ignore(std::wstring const &amp; name, Microsoft::EntityFrameworkCore::Metadata::Internal::ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit, bool runConventions = true);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        <Parameter Name="runConventions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="runConventions">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual void Ignore (Type type, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource.Explicit, bool runConventions = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Ignore(class System.Type type, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool runConventions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Ignore(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Ignore : Type * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; unit&#xA;override this.Ignore : Type * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; unit" Usage="model.Ignore (type, configurationSource, runConventions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" />
        <Parameter Name="runConventions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="runConventions">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IEntityType IModel.FindEntityType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Microsoft#EntityFrameworkCore#Metadata#IModel#FindEntityType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function FindEntityType (name As String) As IEntityType Implements IModel.FindEntityType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(System::String ^ name) = Microsoft::EntityFrameworkCore::Metadata::IModel::FindEntityType;" />
      <MemberSignature Language="C++ CX" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(Platform::String ^ name) = Microsoft::EntityFrameworkCore::Metadata::IModel::FindEntityType;" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Metadata::IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(std::wstring const &amp; name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IEntityType IModel.FindEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IEntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(string name, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Microsoft#EntityFrameworkCore#Metadata#IModel#FindEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Function FindEntityType (name As String, definingNavigationName As String, definingEntityType As IEntityType) As IEntityType Implements IModel.FindEntityType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(System::String ^ name, System::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ definingEntityType) = Microsoft::EntityFrameworkCore::Metadata::IModel::FindEntityType;" />
      <MemberSignature Language="C++ CX" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(Platform::String ^ name, Platform::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ definingEntityType) = Microsoft::EntityFrameworkCore::Metadata::IModel::FindEntityType;" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Metadata::IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(std::wstring const &amp; name, std::wstring const &amp; definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IEntityType const &amp; definingEntityType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IEntityType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; IModel.GetEntityTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Microsoft#EntityFrameworkCore#Metadata#IModel#GetEntityTypes" />
      <MemberSignature Language="VB.NET" Value="Function GetEntityTypes () As IEnumerable(Of IEntityType) Implements IModel.GetEntityTypes" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IEntityType ^&gt; ^ Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes() = Microsoft::EntityFrameworkCore::Metadata::IModel::GetEntityTypes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType IMutableModel.AddEntityType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Microsoft#EntityFrameworkCore#Metadata#IMutableModel#AddEntityType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function AddEntityType (name As String) As IMutableEntityType Implements IMutableModel.AddEntityType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(System::String ^ name) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::AddEntityType;" />
      <MemberSignature Language="C++ CX" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(Platform::String ^ name) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::AddEntityType;" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(std::wstring const &amp; name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType IMutableModel.AddEntityType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Microsoft#EntityFrameworkCore#Metadata#IMutableModel#AddEntityType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(Type ^ type) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::AddEntityType;" />
      <MemberSignature Language="C++ CX" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(Platform::Type ^ type) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::AddEntityType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType IMutableModel.AddEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(string name, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Microsoft#EntityFrameworkCore#Metadata#IMutableModel#AddEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="Function AddEntityType (name As String, definingNavigationName As String, definingEntityType As IMutableEntityType) As IMutableEntityType Implements IMutableModel.AddEntityType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(System::String ^ name, System::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ definingEntityType) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::AddEntityType;" />
      <MemberSignature Language="C++ CX" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(Platform::String ^ name, Platform::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ definingEntityType) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::AddEntityType;" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(std::wstring const &amp; name, std::wstring const &amp; definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType const &amp; definingEntityType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType IMutableModel.AddEntityType (Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(class System.Type type, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Microsoft#EntityFrameworkCore#Metadata#IMutableModel#AddEntityType(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(Type ^ type, System::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ definingEntityType) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::AddEntityType;" />
      <MemberSignature Language="C++ CX" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(Platform::Type ^ type, Platform::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ definingEntityType) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::AddEntityType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddQueryType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType IMutableModel.AddQueryType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddQueryType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Microsoft#EntityFrameworkCore#Metadata#IMutableModel#AddQueryType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddQueryType(Type ^ type) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::AddQueryType;" />
      <MemberSignature Language="C++ CX" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddQueryType(Platform::Type ^ type) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::AddQueryType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddQueryType(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType IMutableModel.FindEntityType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Microsoft#EntityFrameworkCore#Metadata#IMutableModel#FindEntityType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function FindEntityType (name As String) As IMutableEntityType Implements IMutableModel.FindEntityType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(System::String ^ name) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::FindEntityType;" />
      <MemberSignature Language="C++ CX" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(Platform::String ^ name) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::FindEntityType;" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(std::wstring const &amp; name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType IMutableModel.FindEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(string name, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Microsoft#EntityFrameworkCore#Metadata#IMutableModel#FindEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="Function FindEntityType (name As String, definingNavigationName As String, definingEntityType As IMutableEntityType) As IMutableEntityType Implements IMutableModel.FindEntityType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(System::String ^ name, System::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ definingEntityType) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::FindEntityType;" />
      <MemberSignature Language="C++ CX" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(Platform::String ^ name, Platform::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ definingEntityType) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::FindEntityType;" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(std::wstring const &amp; name, std::wstring const &amp; definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType const &amp; definingEntityType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutableModel.GetEntityTypes">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; IMutableModel.GetEntityTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableModel.GetEntityTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Microsoft#EntityFrameworkCore#Metadata#IMutableModel#GetEntityTypes" />
      <MemberSignature Language="VB.NET" Value="Function GetEntityTypes () As IEnumerable(Of IMutableEntityType) Implements IMutableModel.GetEntityTypes" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^&gt; ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.GetEntityTypes() = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::GetEntityTypes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.GetEntityTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType IMutableModel.RemoveEntityType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Microsoft#EntityFrameworkCore#Metadata#IMutableModel#RemoveEntityType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function RemoveEntityType (name As String) As IMutableEntityType Implements IMutableModel.RemoveEntityType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(System::String ^ name) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::RemoveEntityType;" />
      <MemberSignature Language="C++ CX" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(Platform::String ^ name) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::RemoveEntityType;" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(std::wstring const &amp; name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType IMutableModel.RemoveEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(string name, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Microsoft#EntityFrameworkCore#Metadata#IMutableModel#RemoveEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="Function RemoveEntityType (name As String, definingNavigationName As String, definingEntityType As IMutableEntityType) As IMutableEntityType Implements IMutableModel.RemoveEntityType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(System::String ^ name, System::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ definingEntityType) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::RemoveEntityType;" />
      <MemberSignature Language="C++ CX" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(Platform::String ^ name, Platform::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ definingEntityType) = Microsoft::EntityFrameworkCore::Metadata::IMutableModel::RemoveEntityType;" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(std::wstring const &amp; name, std::wstring const &amp; definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType const &amp; definingEntityType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAnnotationSet">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Infrastructure.Annotation OnAnnotationSet (string name, Microsoft.EntityFrameworkCore.Infrastructure.Annotation annotation, Microsoft.EntityFrameworkCore.Infrastructure.Annotation oldAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.Annotation OnAnnotationSet(string name, class Microsoft.EntityFrameworkCore.Infrastructure.Annotation annotation, class Microsoft.EntityFrameworkCore.Infrastructure.Annotation oldAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.OnAnnotationSet(System.String,Microsoft.EntityFrameworkCore.Infrastructure.Annotation,Microsoft.EntityFrameworkCore.Infrastructure.Annotation)" />
      <MemberSignature Language="F#" Value="override this.OnAnnotationSet : string * Microsoft.EntityFrameworkCore.Infrastructure.Annotation * Microsoft.EntityFrameworkCore.Infrastructure.Annotation -&gt; Microsoft.EntityFrameworkCore.Infrastructure.Annotation" Usage="model.OnAnnotationSet (name, annotation, oldAnnotation)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::EntityFrameworkCore::Infrastructure::Annotation ^ OnAnnotationSet(System::String ^ name, Microsoft::EntityFrameworkCore::Infrastructure::Annotation ^ annotation, Microsoft::EntityFrameworkCore::Infrastructure::Annotation ^ oldAnnotation);" />
      <MemberSignature Language="C++ WINRT" Value=" override Microsoft::EntityFrameworkCore::Infrastructure::Annotation OnAnnotationSet(std::wstring const &amp; name, Microsoft::EntityFrameworkCore::Infrastructure::Annotation const &amp; annotation, Microsoft::EntityFrameworkCore::Infrastructure::Annotation const &amp; oldAnnotation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.Annotation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.Annotation" />
        <Parameter Name="oldAnnotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.Annotation" />
      </Parameters>
      <Docs>
        <param name="name"> The key of the set annotation. </param>
        <param name="annotation"> The annotation set. </param>
        <param name="oldAnnotation"> The old annotation. </param>
        <summary>
                Runs the conventions when an annotation was set or removed.
            </summary>
        <returns> The annotation that was set. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType RemoveEntityType (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType RemoveEntityType(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
      <MemberSignature Language="F#" Value="abstract member RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.RemoveEntityType entityType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ RemoveEntityType(Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ entityType);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType RemoveEntityType(Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType const &amp; entityType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType RemoveEntityType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType RemoveEntityType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.RemoveEntityType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveEntityType (name As String) As EntityType" />
      <MemberSignature Language="F#" Value="abstract member RemoveEntityType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.RemoveEntityType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.RemoveEntityType name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ RemoveEntityType(System::String ^ name);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType RemoveEntityType(std::wstring const &amp; name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType RemoveEntityType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType RemoveEntityType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.RemoveEntityType(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member RemoveEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.RemoveEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.RemoveEntityType type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ RemoveEntityType(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType RemoveEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType RemoveEntityType(string name, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.RemoveEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveEntityType (name As String, definingNavigationName As String, definingEntityType As EntityType) As EntityType" />
      <MemberSignature Language="F#" Value="abstract member RemoveEntityType : string * string * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.RemoveEntityType : string * string * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.RemoveEntityType (name, definingNavigationName, definingEntityType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ RemoveEntityType(System::String ^ name, System::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ definingEntityType);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType RemoveEntityType(std::wstring const &amp; name, std::wstring const &amp; definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType const &amp; definingEntityType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityType">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType RemoveEntityType (Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType RemoveEntityType(class System.Type type, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.RemoveEntityType(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
      <MemberSignature Language="F#" Value="abstract member RemoveEntityType : Type * string * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.RemoveEntityType : Type * string * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="model.RemoveEntityType (type, definingNavigationName, definingEntityType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ RemoveEntityType(Type ^ type, System::String ^ definingNavigationName, Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ definingEntityType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityType">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unignore">
      <MemberSignature Language="C#" Value="public virtual void Unignore (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unignore(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Unignore(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Unignore (name As String)" />
      <MemberSignature Language="F#" Value="abstract member Unignore : string -&gt; unit&#xA;override this.Unignore : string -&gt; unit" Usage="model.Unignore name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Unignore(System::String ^ name);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Unignore(Platform::String ^ name);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Unignore(std::wstring const &amp; name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unignore">
      <MemberSignature Language="C#" Value="public virtual void Unignore (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unignore(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Unignore(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member Unignore : Type -&gt; unit&#xA;override this.Unignore : Type -&gt; unit" Usage="model.Unignore type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Unignore(Type ^ type);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Unignore(Platform::Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Validate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Validate () As InternalModelBuilder" />
      <MemberSignature Language="F#" Value="abstract member Validate : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&#xA;override this.Validate : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" Usage="model.Validate " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::InternalModelBuilder ^ Validate();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Internal::InternalModelBuilder Validate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>