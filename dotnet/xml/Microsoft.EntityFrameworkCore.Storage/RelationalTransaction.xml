<Type Name="RelationalTransaction" FullName="Microsoft.EntityFrameworkCore.Storage.RelationalTransaction">
  <TypeSignature Language="C#" Value="public class RelationalTransaction : IDisposable, Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.Data.Common.DbTransaction&gt;, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RelationalTransaction extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.Data.Common.DbTransaction&gt;, class Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class RelationalTransaction&#xA;Implements IDbContextTransaction, IDisposable, IInfrastructure(Of DbTransaction)" />
  <TypeSignature Language="F#" Value="type RelationalTransaction = class&#xA;    interface IDbContextTransaction&#xA;    interface IDisposable&#xA;    interface IInfrastructure&lt;DbTransaction&gt;" />
  <TypeSignature Language="C++ CLI" Value="public ref class RelationalTransaction : IDisposable, Microsoft::EntityFrameworkCore::Infrastructure::IInfrastructure&lt;System::Data::Common::DbTransaction ^&gt;, Microsoft::EntityFrameworkCore::Storage::IDbContextTransaction" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.Data.Common.DbTransaction&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    A transaction against the database.
                </para>
      <para>
                    Instances of this class are typically obtained from <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.BeginTransaction" /> and it is not designed
                    to be directly constructed in your application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RelationalTransaction (Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, System.Data.Common.DbTransaction transaction, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; logger, bool transactionOwned);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, class System.Data.Common.DbTransaction transaction, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Transaction&gt; logger, bool transactionOwned) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As IRelationalConnection, transaction As DbTransaction, logger As IDiagnosticsLogger(Of DbLoggerCategory.Database.Transaction), transactionOwned As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Storage.RelationalTransaction : Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * System.Data.Common.DbTransaction * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTransaction" Usage="new Microsoft.EntityFrameworkCore.Storage.RelationalTransaction (connection, transaction, logger, transactionOwned)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RelationalTransaction(Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, System::Data::Common::DbTransaction ^ transaction, Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Database::Transaction ^&gt; ^ logger, bool transactionOwned);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Transaction&gt;" />
        <Parameter Name="transactionOwned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="connection"> The connection to the database. </param>
        <param name="transaction"> The underlying <see cref="T:System.Data.Common.DbTransaction" />. </param>
        <param name="logger"> The logger to write to. </param>
        <param name="transactionOwned">
                A value indicating whether the transaction is owned by this class (i.e. if it can be disposed when this class is disposed).
            </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RelationalTransaction (Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, System.Data.Common.DbTransaction transaction, Microsoft.Extensions.Logging.ILogger logger, bool transactionOwned);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, class System.Data.Common.DbTransaction transaction, class Microsoft.Extensions.Logging.ILogger logger, bool transactionOwned) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,Microsoft.Extensions.Logging.ILogger,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As IRelationalConnection, transaction As DbTransaction, logger As ILogger, transactionOwned As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Storage.RelationalTransaction : Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * System.Data.Common.DbTransaction * Microsoft.Extensions.Logging.ILogger * bool -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTransaction" Usage="new Microsoft.EntityFrameworkCore.Storage.RelationalTransaction (connection, transaction, logger, transactionOwned)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RelationalTransaction(Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, System::Data::Common::DbTransaction ^ transaction, Microsoft::Extensions::Logging::ILogger ^ logger, bool transactionOwned);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" />
        <Parameter Name="transactionOwned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="connection"> The connection to the database. </param>
        <param name="transaction"> The underlying <see cref="T:System.Data.Common.DbTransaction" />. </param>
        <param name="logger"> The logger to write to. </param>
        <param name="transactionOwned">
                A value indicating whether the transaction is owned by this class (i.e. if it can be disposed when this class is disposed).
            </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public virtual void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Commit ()" />
      <MemberSignature Language="F#" Value="abstract member Commit : unit -&gt; unit&#xA;override this.Commit : unit -&gt; unit" Usage="relationalTransaction.Commit " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Commit();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Commit();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Commit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.Commit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Commits all changes made to the database in the current transaction.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="relationalTransaction.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.Data.Common.DbTransaction&gt;.Instance">
      <MemberSignature Language="C#" Value="System.Data.Common.DbTransaction Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.Data.Common.DbTransaction&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbTransaction Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.Data.Common.DbTransaction&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;System#Data#Common#DbTransaction&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As DbTransaction Implements IInfrastructure(Of DbTransaction).Instance" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.Data.Common.DbTransaction&gt;.Instance" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::Common::DbTransaction ^ Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.Data.Common.DbTransaction&gt;.Instance { System::Data::Common::DbTransaction ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public virtual void Rollback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rollback() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.Rollback" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Rollback ()" />
      <MemberSignature Language="F#" Value="abstract member Rollback : unit -&gt; unit&#xA;override this.Rollback : unit -&gt; unit" Usage="relationalTransaction.Rollback " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Rollback();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Rollback();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Rollback();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.Rollback</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Discards all changes made to the database in the current transaction.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransactionId">
      <MemberSignature Language="C#" Value="public virtual Guid TransactionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid TransactionId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.TransactionId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TransactionId As Guid" />
      <MemberSignature Language="F#" Value="member this.TransactionId : Guid" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.TransactionId" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Guid TransactionId { Guid get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.TransactionId</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                A correlation ID that allows this transaction to be identified and
                correlated across multiple database calls.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>