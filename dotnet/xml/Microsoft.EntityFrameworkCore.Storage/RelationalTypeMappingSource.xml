<Type Name="RelationalTypeMappingSource" FullName="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource">
  <TypeSignature Language="C#" Value="public abstract class RelationalTypeMappingSource : Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase, Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit RelationalTypeMappingSource extends Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase implements class Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource, class Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class RelationalTypeMappingSource&#xA;Inherits TypeMappingSourceBase&#xA;Implements IRelationalTypeMappingSource" />
  <TypeSignature Language="F#" Value="type RelationalTypeMappingSource = class&#xA;    inherit TypeMappingSourceBase&#xA;    interface IRelationalTypeMappingSource&#xA;    interface ITypeMappingSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class RelationalTypeMappingSource abstract : Microsoft::EntityFrameworkCore::Storage::TypeMappingSourceBase, Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource" />
  <TypeSignature Language="C++ CX" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;public ref class RelationalTypeMappingSource abstract : Microsoft::EntityFrameworkCore::Storage::TypeMappingSourceBase, Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class RelationalTypeMappingSource abstract : Microsoft::EntityFrameworkCore::Storage::TypeMappingSourceBase, Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    The base class for non-relational type mapping starting with version 2.1. Non-relational providers
                    should derive from this class and override <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo)" /></para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RelationalTypeMappingSource (Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies dependencies, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies relationalDependencies);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies dependencies, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies relationalDependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.#ctor(Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (dependencies As TypeMappingSourceDependencies, relationalDependencies As RelationalTypeMappingSourceDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource : Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource" Usage="new Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource (dependencies, relationalDependencies)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; RelationalTypeMappingSource(Microsoft::EntityFrameworkCore::Storage::TypeMappingSourceDependencies ^ dependencies, Microsoft::EntityFrameworkCore::Storage::RelationalTypeMappingSourceDependencies ^ relationalDependencies);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; RelationalTypeMappingSource(Microsoft::EntityFrameworkCore::Storage::TypeMappingSourceDependencies ^ dependencies, Microsoft::EntityFrameworkCore::Storage::RelationalTypeMappingSourceDependencies ^ relationalDependencies);" />
      <MemberSignature Language="C++ WINRT" Value=" RelationalTypeMappingSource(Microsoft::EntityFrameworkCore::Storage::TypeMappingSourceDependencies const &amp; dependencies, Microsoft::EntityFrameworkCore::Storage::RelationalTypeMappingSourceDependencies const &amp; relationalDependencies);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies" />
        <Parameter Name="relationalDependencies" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        <param name="relationalDependencies"> Parameter object containing relational-specific dependencies for this service. </param>
        <summary>
                Initializes a new instance of the this class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindMapping (property As IProperty) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="override this.FindMapping : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="relationalTypeMappingSource.FindMapping property" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ FindMapping(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ FindMapping(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
      <MemberSignature Language="C++ WINRT" Value=" override Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping FindMapping(Microsoft::EntityFrameworkCore::Metadata::IProperty const &amp; property);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <param name="property"> The property. </param>
        <summary>
          <para>
                    Finds the type mapping for a given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.
                </para>
          <para>
                    Note: providers should typically not need to override this method.
                </para>
        </summary>
        <returns> The type mapping, or <c>null</c> if none was found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping (Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo mappingInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping(valuetype Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo mappingInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function FindMapping (mappingInfo As RelationalTypeMappingInfo) As RelationalTypeMapping" />
      <MemberSignature Language="F#" Value="override this.FindMapping : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="relationalTypeMappingSource.FindMapping mappingInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ FindMapping(Microsoft::EntityFrameworkCore::Storage::RelationalTypeMappingInfo mappingInfo);" />
      <MemberSignature Language="C++ WINRT" Value=" abstract Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping FindMapping(Microsoft::EntityFrameworkCore::Storage::RelationalTypeMappingInfo mappingInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mappingInfo" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo" />
      </Parameters>
      <Docs>
        <param name="mappingInfo"> The mapping info to use to create the mapping. </param>
        <summary>
          <para>
                    Overridden by relational database providers to find a type mapping for the given info.
                </para>
          <para>
                    The mapping info is populated with as much information about the required type mapping as
                    is available. Use all the information necessary to create the best mapping. Return <c>null</c>
                    if no mapping is available.
                </para>
        </summary>
        <returns> The type mapping, or <c>null</c> if none could be found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo mappingInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(valuetype Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo mappingInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FindMapping (mappingInfo As TypeMappingInfo) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="override this.FindMapping : Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="relationalTypeMappingSource.FindMapping mappingInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ FindMapping(Microsoft::EntityFrameworkCore::Storage::TypeMappingInfo mappingInfo);" />
      <MemberSignature Language="C++ WINRT" Value=" override Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping FindMapping(Microsoft::EntityFrameworkCore::Storage::TypeMappingInfo mappingInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mappingInfo" Type="Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo" />
      </Parameters>
      <Docs>
        <param name="mappingInfo"> The mapping info to use to create the mapping. </param>
        <summary>
                Overridden to call <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo)" /></summary>
        <returns> The type mapping, or <c>null</c> if none could be found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindMapping (member As MemberInfo) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="override this.FindMapping : System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="relationalTypeMappingSource.FindMapping member" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ FindMapping(System::Reflection::MemberInfo ^ member);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(System.Reflection.MemberInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="member"> The field or property. </param>
        <summary>
          <para>
                    Finds the type mapping for a given <see cref="T:System.Reflection.MemberInfo" /> representing
                    a field or a property of a CLR type.
                </para>
          <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" /></para>
          <para>
                    Note: providers should typically not need to override this method.
                </para>
        </summary>
        <returns> The type mapping, or <c>null</c> if none was found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping (string storeTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping(string storeTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindMapping (storeTypeName As String) As RelationalTypeMapping" />
      <MemberSignature Language="F#" Value="override this.FindMapping : string -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="relationalTypeMappingSource.FindMapping storeTypeName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ FindMapping(System::String ^ storeTypeName);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ FindMapping(Platform::String ^ storeTypeName);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping FindMapping(std::wstring const &amp; storeTypeName);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storeTypeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="storeTypeName"> The database type name. </param>
        <summary>
          <para>
                    Finds the type mapping for a given database type name.
                </para>
          <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" /></para>
          <para>
                    Note: providers should typically not need to override this method.
                </para>
        </summary>
        <returns> The type mapping, or <c>null</c> if none was found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(System.Type)" />
      <MemberSignature Language="F#" Value="override this.FindMapping : Type -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="relationalTypeMappingSource.FindMapping type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ FindMapping(Type ^ type);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ FindMapping(Platform::Type ^ type);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"> The CLR type. </param>
        <summary>
          <para>
                    Finds the type mapping for a given <see cref="T:System.Type" />.
                </para>
          <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
                    or <see cref="T:System.Reflection.MemberInfo" /> available, otherwise call <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(System.Reflection.MemberInfo)" /></para>
          <para>
                    Note: providers should typically not need to override this method.
                </para>
        </summary>
        <returns> The type mapping, or <c>null</c> if none was found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping (Type type, string storeTypeName, bool keyOrIndex = false, Nullable&lt;bool&gt; unicode = null, Nullable&lt;int&gt; size = null, Nullable&lt;bool&gt; rowVersion = null, Nullable&lt;bool&gt; fixedLength = null, Nullable&lt;int&gt; precision = null, Nullable&lt;int&gt; scale = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping(class System.Type type, string storeTypeName, bool keyOrIndex, valuetype System.Nullable`1&lt;bool&gt; unicode, valuetype System.Nullable`1&lt;int32&gt; size, valuetype System.Nullable`1&lt;bool&gt; rowVersion, valuetype System.Nullable`1&lt;bool&gt; fixedLength, valuetype System.Nullable`1&lt;int32&gt; precision, valuetype System.Nullable`1&lt;int32&gt; scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(System.Type,System.String,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})" />
      <MemberSignature Language="F#" Value="override this.FindMapping : Type * string * bool * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="relationalTypeMappingSource.FindMapping (type, storeTypeName, keyOrIndex, unicode, size, rowVersion, fixedLength, precision, scale)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System.Type,System.String,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="storeTypeName" Type="System.String" />
        <Parameter Name="keyOrIndex" Type="System.Boolean" />
        <Parameter Name="unicode" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="size" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="rowVersion" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fixedLength" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="precision" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="scale" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="type"> The CLR type. </param>
        <param name="storeTypeName"> The database type name. </param>
        <param name="keyOrIndex"> If <c>true</c>, then a special mapping for a key or index may be returned. </param>
        <param name="unicode"> Specifies Unicode or ANSI mapping, or <c>null</c> for default. </param>
        <param name="size"> Specifies a size for the mapping, or <c>null</c> for default. </param>
        <param name="rowVersion"> Specifies a row-version, or <c>null</c> for default. </param>
        <param name="fixedLength"> Specifies a fixed length mapping, or <c>null</c> for default. </param>
        <param name="precision"> Specifies a precision for the mapping, or <c>null</c> for default. </param>
        <param name="scale"> Specifies a scale for the mapping, or <c>null</c> for default. </param>
        <summary>
          <para>
                    Finds the type mapping for a given <see cref="T:System.Type" /> and additional facets.
                </para>
          <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" /></para>
          <para>
                    Note: providers should typically not need to override this method.
                </para>
        </summary>
        <returns> The type mapping, or <c>null</c> if none was found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMappingWithConversion">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMappingWithConversion (Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo mappingInfo, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMappingWithConversion(valuetype Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo mappingInfo, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMappingWithConversion(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function FindMappingWithConversion (mappingInfo As RelationalTypeMappingInfo, property As IProperty) As RelationalTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMappingWithConversion : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&#xA;override this.FindMappingWithConversion : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="relationalTypeMappingSource.FindMappingWithConversion (mappingInfo, property)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ FindMappingWithConversion(Microsoft::EntityFrameworkCore::Storage::RelationalTypeMappingInfo mappingInfo, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping FindMappingWithConversion(Microsoft::EntityFrameworkCore::Storage::RelationalTypeMappingInfo mappingInfo, Microsoft::EntityFrameworkCore::Metadata::IProperty const &amp; property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mappingInfo" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <param name="mappingInfo">To be added.</param>
        <param name="property">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping IRelationalTypeMappingSource.FindMapping (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.Microsoft#EntityFrameworkCore#Storage#IRelationalTypeMappingSource#FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Function FindMapping (property As IProperty) As RelationalTypeMapping Implements IRelationalTypeMappingSource.FindMapping" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property) = Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource::FindMapping;" />
      <MemberSignature Language="C++ CX" Value=" virtual Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property) = Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource::FindMapping;" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Microsoft::EntityFrameworkCore::Metadata::IProperty const &amp; property);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping IRelationalTypeMappingSource.FindMapping (System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.Microsoft#EntityFrameworkCore#Storage#IRelationalTypeMappingSource#FindMapping(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Function FindMapping (member As MemberInfo) As RelationalTypeMapping Implements IRelationalTypeMappingSource.FindMapping" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System::Reflection::MemberInfo ^ member) = Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource::FindMapping;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System.Reflection.MemberInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="member">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping IRelationalTypeMappingSource.FindMapping (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.Microsoft#EntityFrameworkCore#Storage#IRelationalTypeMappingSource#FindMapping(System.Type)" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Type ^ type) = Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource::FindMapping;" />
      <MemberSignature Language="C++ CX" Value=" virtual Microsoft::EntityFrameworkCore::Storage::RelationalTypeMapping ^ Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Platform::Type ^ type) = Microsoft::EntityFrameworkCore::Storage::IRelationalTypeMappingSource::FindMapping;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RelationalDependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies RelationalDependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies RelationalDependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.RelationalDependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property RelationalDependencies As RelationalTypeMappingSourceDependencies" />
      <MemberSignature Language="F#" Value="member this.RelationalDependencies : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.RelationalDependencies" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Microsoft::EntityFrameworkCore::Storage::RelationalTypeMappingSourceDependencies ^ RelationalDependencies { Microsoft::EntityFrameworkCore::Storage::RelationalTypeMappingSourceDependencies ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual property Microsoft::EntityFrameworkCore::Storage::RelationalTypeMappingSourceDependencies ^ RelationalDependencies { Microsoft::EntityFrameworkCore::Storage::RelationalTypeMappingSourceDependencies ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Dependencies used to create this <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource" /></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>