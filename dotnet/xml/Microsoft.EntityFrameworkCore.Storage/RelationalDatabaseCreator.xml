<Type Name="RelationalDatabaseCreator" FullName="Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator">
  <TypeSignature Language="C#" Value="public abstract class RelationalDatabaseCreator : Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator, Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit RelationalDatabaseCreator extends System.Object implements class Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator, class Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class RelationalDatabaseCreator&#xA;Implements IDatabaseCreator, IRelationalDatabaseCreator" />
  <TypeSignature Language="F#" Value="type RelationalDatabaseCreator = class&#xA;    interface IRelationalDatabaseCreator&#xA;    interface IDatabaseCreator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RelationalDatabaseCreator abstract : Microsoft::EntityFrameworkCore::Storage::IDatabaseCreator, Microsoft::EntityFrameworkCore::Storage::IRelationalDatabaseCreator" />
  <TypeSignature Language="C++ CX" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;public ref class RelationalDatabaseCreator abstract : Microsoft::EntityFrameworkCore::Storage::IDatabaseCreator, Microsoft::EntityFrameworkCore::Storage::IRelationalDatabaseCreator" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class RelationalDatabaseCreator abstract : Microsoft::EntityFrameworkCore::Storage::IDatabaseCreator, Microsoft::EntityFrameworkCore::Storage::IRelationalDatabaseCreator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    Performs database/schema creation, and other related operations.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RelationalDatabaseCreator (Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (dependencies As RelationalDatabaseCreatorDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator : Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator" Usage="new Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator dependencies" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; RelationalDatabaseCreator(Microsoft::EntityFrameworkCore::Storage::RelationalDatabaseCreatorDependencies ^ dependencies);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; RelationalDatabaseCreator(Microsoft::EntityFrameworkCore::Storage::RelationalDatabaseCreatorDependencies ^ dependencies);" />
      <MemberSignature Language="C++ WINRT" Value=" RelationalDatabaseCreator(Microsoft::EntityFrameworkCore::Storage::RelationalDatabaseCreatorDependencies const &amp; dependencies);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RelationalDatabaseCreator (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer modelDiffer, Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator migrationsSqlGenerator, Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor migrationCommandExecutor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, class Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer modelDiffer, class Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator migrationsSqlGenerator, class Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor migrationCommandExecutor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (model As IModel, connection As IRelationalConnection, modelDiffer As IMigrationsModelDiffer, migrationsSqlGenerator As IMigrationsSqlGenerator, migrationCommandExecutor As IMigrationCommandExecutor)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer * Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator * Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator" Usage="new Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator (model, connection, modelDiffer, migrationsSqlGenerator, migrationCommandExecutor)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; RelationalDatabaseCreator(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, Microsoft::EntityFrameworkCore::Migrations::IMigrationsModelDiffer ^ modelDiffer, Microsoft::EntityFrameworkCore::Migrations::IMigrationsSqlGenerator ^ migrationsSqlGenerator, Microsoft::EntityFrameworkCore::Migrations::IMigrationCommandExecutor ^ migrationCommandExecutor);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Derived classes must be updated to call the new constructor with additional parameters.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
        <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
        <Parameter Name="modelDiffer" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer" />
        <Parameter Name="migrationsSqlGenerator" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator" />
        <Parameter Name="migrationCommandExecutor" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor" />
      </Parameters>
      <Docs>
        <param name="model"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> for the context this creator is being used with. </param>
        <param name="connection"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" /> to be used. </param>
        <param name="modelDiffer"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer" /> to be used. </param>
        <param name="migrationsSqlGenerator"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator" /> to be used. </param>
        <param name="migrationCommandExecutor"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor" /> to be used. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RelationalDatabaseCreator (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer modelDiffer, Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator migrationsSqlGenerator, Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor migrationCommandExecutor, Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory executionStrategyFactory);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection connection, class Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer modelDiffer, class Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator migrationsSqlGenerator, class Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor migrationCommandExecutor, class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory executionStrategyFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (model As IModel, connection As IRelationalConnection, modelDiffer As IMigrationsModelDiffer, migrationsSqlGenerator As IMigrationsSqlGenerator, migrationCommandExecutor As IMigrationCommandExecutor, executionStrategyFactory As IExecutionStrategyFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Storage.IRelationalConnection * Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer * Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator * Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor * Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator" Usage="new Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator (model, connection, modelDiffer, migrationsSqlGenerator, migrationCommandExecutor, executionStrategyFactory)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; RelationalDatabaseCreator(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ connection, Microsoft::EntityFrameworkCore::Migrations::IMigrationsModelDiffer ^ modelDiffer, Microsoft::EntityFrameworkCore::Migrations::IMigrationsSqlGenerator ^ migrationsSqlGenerator, Microsoft::EntityFrameworkCore::Migrations::IMigrationCommandExecutor ^ migrationCommandExecutor, Microsoft::EntityFrameworkCore::Storage::IExecutionStrategyFactory ^ executionStrategyFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
        <Parameter Name="connection" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" />
        <Parameter Name="modelDiffer" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer" />
        <Parameter Name="migrationsSqlGenerator" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator" />
        <Parameter Name="migrationCommandExecutor" Type="Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor" />
        <Parameter Name="executionStrategyFactory" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory" />
      </Parameters>
      <Docs>
        <param name="model"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> for the context this creator is being used with. </param>
        <param name="connection"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" /> to be used. </param>
        <param name="modelDiffer"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer" /> to be used. </param>
        <param name="migrationsSqlGenerator"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator" /> to be used. </param>
        <param name="migrationCommandExecutor"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor" /> to be used. </param>
        <param name="executionStrategyFactory">The <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory" /> to be used. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.IRelationalConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection Connection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Connection" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Connection As IRelationalConnection" />
      <MemberSignature Language="F#" Value="member this.Connection : Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Connection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ Connection { Microsoft::EntityFrameworkCore::Storage::IRelationalConnection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the connection for the database.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public abstract void Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Create" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Create ()" />
      <MemberSignature Language="F#" Value="abstract member Create : unit -&gt; unit" Usage="relationalDatabaseCreator.Create " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Create();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract void Create();" />
      <MemberSignature Language="C++ WINRT" Value=" abstract void Create();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Create</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Creates the physical database. Does not attempt to populate it with any schema.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CreateAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CreateAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="relationalDatabaseCreator.CreateAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Asynchronously creates the physical database. Does not attempt to populate it with any schema.
            </summary>
        <returns>
                A task that represents the asynchronous operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTables">
      <MemberSignature Language="C#" Value="public virtual void CreateTables ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateTables() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTables" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateTables ()" />
      <MemberSignature Language="F#" Value="abstract member CreateTables : unit -&gt; unit&#xA;override this.CreateTables : unit -&gt; unit" Usage="relationalDatabaseCreator.CreateTables " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateTables();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void CreateTables();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void CreateTables();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTables</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Creates all tables for the current model in the database. No attempt is made
                to incrementally update the schema. It is assumed that none of the tables exist in the database.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTablesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CreateTablesAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateTablesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateTablesAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CreateTablesAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="relationalDatabaseCreator.CreateTablesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator/&lt;CreateTablesAsync&gt;d__11))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Asynchronously creates all tables for the current model in the database. No attempt is made
                to incrementally update the schema. It is assumed that none of the tables exist in the database.
            </summary>
        <returns>
                A task that represents the asynchronous operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public abstract void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Delete" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Delete ()" />
      <MemberSignature Language="F#" Value="abstract member Delete : unit -&gt; unit" Usage="relationalDatabaseCreator.Delete " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Delete();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract void Delete();" />
      <MemberSignature Language="C++ WINRT" Value=" abstract void Delete();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Delete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Deletes the physical database.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="relationalDatabaseCreator.DeleteAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Asynchronously deletes the physical database.
            </summary>
        <returns>
                A task that represents the asynchronous operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As RelationalDatabaseCreatorDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Dependencies" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Microsoft::EntityFrameworkCore::Storage::RelationalDatabaseCreatorDependencies ^ Dependencies { Microsoft::EntityFrameworkCore::Storage::RelationalDatabaseCreatorDependencies ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual property Microsoft::EntityFrameworkCore::Storage::RelationalDatabaseCreatorDependencies ^ Dependencies { Microsoft::EntityFrameworkCore::Storage::RelationalDatabaseCreatorDependencies ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Parameter object containing service dependencies.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureCreated">
      <MemberSignature Language="C#" Value="public virtual bool EnsureCreated ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EnsureCreated() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreated" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnsureCreated () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member EnsureCreated : unit -&gt; bool&#xA;override this.EnsureCreated : unit -&gt; bool" Usage="relationalDatabaseCreator.EnsureCreated " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool EnsureCreated();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual bool EnsureCreated();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual bool EnsureCreated();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Ensures that the database for the context exists. If it exists, no action is taken. If it does not
                exist then the database and all its schema are created. If the database exists, then no effort is made
                to ensure it is compatible with the model for this context.
            </summary>
        <returns>
                True if the database is created, false if it already existed.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureCreatedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; EnsureCreatedAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; EnsureCreatedAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member EnsureCreatedAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.EnsureCreatedAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="relationalDatabaseCreator.EnsureCreatedAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator/&lt;EnsureCreatedAsync&gt;d__18))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Asynchronously ensures that the database for the context exists. If it exists, no action is taken. If it does not
                exist then the database and all its schema are created. If the database exists, then no effort is made
                to ensure it is compatible with the model for this context.
            </summary>
        <returns>
                A task that represents the asynchronous save operation. The task result contains true if the database is created,
                false if it already existed.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureDeleted">
      <MemberSignature Language="C#" Value="public virtual bool EnsureDeleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EnsureDeleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeleted" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnsureDeleted () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member EnsureDeleted : unit -&gt; bool&#xA;override this.EnsureDeleted : unit -&gt; bool" Usage="relationalDatabaseCreator.EnsureDeleted " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool EnsureDeleted();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual bool EnsureDeleted();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual bool EnsureDeleted();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>
                    Ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does
                    exist then the database is deleted.
                </para>
          <para>
                    Warning: The entire database is deleted an no effort is made to remove just the database objects that are used by
                    the model for this context.
                </para>
        </summary>
        <returns>
                True if the database is deleted, false if it did not exist.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureDeletedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; EnsureDeletedAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; EnsureDeletedAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member EnsureDeletedAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.EnsureDeletedAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="relationalDatabaseCreator.EnsureDeletedAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator/&lt;EnsureDeletedAsync&gt;d__16))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
          <para>
                    Asynchronously ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does
                    exist then the database is deleted.
                </para>
          <para>
                    Warning: The entire database is deleted an no effort is made to remove just the database objects that are used by
                    the model for this context.
                </para>
        </summary>
        <returns>
                A task that represents the asynchronous save operation. The task result contains true if the database is deleted,
                false if it did not exist.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutionStrategyFactory">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory ExecutionStrategyFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory ExecutionStrategyFactory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExecutionStrategyFactory" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ExecutionStrategyFactory As IExecutionStrategyFactory" />
      <MemberSignature Language="F#" Value="member this.ExecutionStrategyFactory : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExecutionStrategyFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property Microsoft::EntityFrameworkCore::Storage::IExecutionStrategyFactory ^ ExecutionStrategyFactory { Microsoft::EntityFrameworkCore::Storage::IExecutionStrategyFactory ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; property Microsoft::EntityFrameworkCore::Storage::IExecutionStrategyFactory ^ ExecutionStrategyFactory { Microsoft::EntityFrameworkCore::Storage::IExecutionStrategyFactory ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory" /> to be used.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public abstract bool Exists ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Exists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Exists" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Exists () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Exists : unit -&gt; bool" Usage="relationalDatabaseCreator.Exists " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Exists();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract bool Exists();" />
      <MemberSignature Language="C++ WINRT" Value=" abstract bool Exists();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Exists</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Determines whether the physical database exists. No attempt is made to determine if the database
                contains the schema for the current model.
            </summary>
        <returns>
                True if the database exists; otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; ExistsAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; ExistsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ExistsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.ExistsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="relationalDatabaseCreator.ExistsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
                Asynchronously determines whether the physical database exists. No attempt is made to determine if
                the database contains the schema for the current model.
            </summary>
        <returns>
                A task that represents the asynchronous operation. The task result contains
                true if the database exists; otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateCreateScript">
      <MemberSignature Language="C#" Value="public virtual string GenerateCreateScript ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateCreateScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.GenerateCreateScript" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateCreateScript () As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateCreateScript : unit -&gt; string&#xA;override this.GenerateCreateScript : unit -&gt; string" Usage="relationalDatabaseCreator.GenerateCreateScript " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GenerateCreateScript();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual Platform::String ^ GenerateCreateScript();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual std::wstring GenerateCreateScript();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.GenerateCreateScript</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Generates a script to create all tables for the current model.
            </summary>
        <returns>
                A SQL script.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCreateTablesCommands">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Migrations.MigrationCommand&gt; GetCreateTablesCommands ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Migrations.MigrationCommand&gt; GetCreateTablesCommands() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.GetCreateTablesCommands" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetCreateTablesCommands () As IReadOnlyList(Of MigrationCommand)" />
      <MemberSignature Language="F#" Value="abstract member GetCreateTablesCommands : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Migrations.MigrationCommand&gt;&#xA;override this.GetCreateTablesCommands : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Migrations.MigrationCommand&gt;" Usage="relationalDatabaseCreator.GetCreateTablesCommands " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Migrations::MigrationCommand ^&gt; ^ GetCreateTablesCommands();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Migrations.MigrationCommand&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the commands that will create all tables from the model.
            </summary>
        <returns> The generated commands. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTables">
      <MemberSignature Language="C#" Value="protected abstract bool HasTables ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool HasTables() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTables" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function HasTables () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member HasTables : unit -&gt; bool" Usage="relationalDatabaseCreator.HasTables " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool HasTables();" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; abstract bool HasTables();" />
      <MemberSignature Language="C++ WINRT" Value=" abstract bool HasTables();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Determines whether the database contains any tables. No attempt is made to determine if
                tables belong to the current model or not.
            </summary>
        <returns> A value indicating whether any tables are present in the database. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTablesAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;bool&gt; HasTablesAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; HasTablesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTablesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member HasTablesAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.HasTablesAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="relationalDatabaseCreator.HasTablesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Asynchronously determines whether the database contains any tables. No attempt is made to determine if
                tables belong to the current model or not.
            </summary>
        <returns>
                A task that represents the asynchronous operation. The task result contains
                a value indicating whether any tables are present in the database.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices">
      <MemberSignature Language="C#" Value="void IServiceInjectionSite.InjectServices (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Microsoft#EntityFrameworkCore#Internal#IServiceInjectionSite#InjectServices(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Sub InjectServices (serviceProvider As IServiceProvider) Implements IServiceInjectionSite.InjectServices" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices(IServiceProvider ^ serviceProvider) = Microsoft::EntityFrameworkCore::Internal::IServiceInjectionSite::InjectServices;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices(System.IServiceProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MigrationCommandExecutor">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor MigrationCommandExecutor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor MigrationCommandExecutor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.MigrationCommandExecutor" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property MigrationCommandExecutor As IMigrationCommandExecutor" />
      <MemberSignature Language="F#" Value="member this.MigrationCommandExecutor : Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.MigrationCommandExecutor" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Microsoft::EntityFrameworkCore::Migrations::IMigrationCommandExecutor ^ MigrationCommandExecutor { Microsoft::EntityFrameworkCore::Migrations::IMigrationCommandExecutor ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual property Microsoft::EntityFrameworkCore::Migrations::IMigrationCommandExecutor ^ MigrationCommandExecutor { Microsoft::EntityFrameworkCore::Migrations::IMigrationCommandExecutor ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor" /> to be used.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Model">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.IModel Model { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IModel Model" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Model" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Model As IModel" />
      <MemberSignature Language="F#" Value="member this.Model : Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Model" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Microsoft::EntityFrameworkCore::Metadata::IModel ^ Model { Microsoft::EntityFrameworkCore::Metadata::IModel ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual property Microsoft::EntityFrameworkCore::Metadata::IModel ^ Model { Microsoft::EntityFrameworkCore::Metadata::IModel ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the model for the context this creator is being used with.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>