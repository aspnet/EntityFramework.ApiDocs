<Type Name="TypeMappingSourceBase" FullName="Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase">
  <TypeSignature Language="C#" Value="public abstract class TypeMappingSourceBase : Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TypeMappingSourceBase extends System.Object implements class Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TypeMappingSourceBase&#xA;Implements ITypeMappingSource" />
  <TypeSignature Language="F#" Value="type TypeMappingSourceBase = class&#xA;    interface ITypeMappingSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeMappingSourceBase abstract : Microsoft::EntityFrameworkCore::Storage::ITypeMappingSource" />
  <TypeSignature Language="C++ CX" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;public ref class TypeMappingSourceBase abstract : Microsoft::EntityFrameworkCore::Storage::ITypeMappingSource" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class TypeMappingSourceBase abstract : Microsoft::EntityFrameworkCore::Storage::ITypeMappingSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    The base class for non-relational type mapping starting with version 2.1. Non-relational providers
                    should derive from this class and override <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo)" /></para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeMappingSourceBase (Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.#ctor(Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (dependencies As TypeMappingSourceDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase : Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies -&gt; Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase" Usage="new Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase dependencies" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeMappingSourceBase(Microsoft::EntityFrameworkCore::Storage::TypeMappingSourceDependencies ^ dependencies);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; TypeMappingSourceBase(Microsoft::EntityFrameworkCore::Storage::TypeMappingSourceDependencies ^ dependencies);" />
      <MemberSignature Language="C++ WINRT" Value=" TypeMappingSourceBase(Microsoft::EntityFrameworkCore::Storage::TypeMappingSourceDependencies const &amp; dependencies);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        <summary>
                Initializes a new instance of the this class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As TypeMappingSourceDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies" Usage="Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.Dependencies" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Microsoft::EntityFrameworkCore::Storage::TypeMappingSourceDependencies ^ Dependencies { Microsoft::EntityFrameworkCore::Storage::TypeMappingSourceDependencies ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual property Microsoft::EntityFrameworkCore::Storage::TypeMappingSourceDependencies ^ Dependencies { Microsoft::EntityFrameworkCore::Storage::TypeMappingSourceDependencies ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Dependencies used to create this <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase" /></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function FindMapping (property As IProperty) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="typeMappingSourceBase.FindMapping property" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ FindMapping(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ FindMapping(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
      <MemberSignature Language="C++ WINRT" Value=" abstract Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping FindMapping(Microsoft::EntityFrameworkCore::Metadata::IProperty const &amp; property);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <param name="property"> The property. </param>
        <summary>
          <para>
                    Finds the type mapping for a given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.
                </para>
          <para>
                    Note: providers should typically not need to override this method.
                </para>
        </summary>
        <returns> The type mapping, or <c>null</c> if none was found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo mappingInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(valuetype Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo mappingInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function FindMapping (mappingInfo As TypeMappingInfo) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="typeMappingSourceBase.FindMapping mappingInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ FindMapping(Microsoft::EntityFrameworkCore::Storage::TypeMappingInfo mappingInfo);" />
      <MemberSignature Language="C++ WINRT" Value=" abstract Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping FindMapping(Microsoft::EntityFrameworkCore::Storage::TypeMappingInfo mappingInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mappingInfo" Type="Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo" />
      </Parameters>
      <Docs>
        <param name="mappingInfo"> The mapping info to use to create the mapping. </param>
        <summary>
          <para>
                    Overridden by database providers to find a type mapping for the given info.
                </para>
          <para>
                    The mapping info is populated with as much information about the required type mapping as
                    is available. Use all the information necessary to create the best mapping. Return <c>null</c>
                    if no mapping is available.
                </para>
        </summary>
        <returns> The type mapping, or <c>null</c> if none could be found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function FindMapping (member As MemberInfo) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="typeMappingSourceBase.FindMapping member" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ FindMapping(System::Reflection::MemberInfo ^ member);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(System.Reflection.MemberInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="member"> The field or property. </param>
        <summary>
          <para>
                    Finds the type mapping for a given <see cref="T:System.Reflection.MemberInfo" /> representing
                    a field or a property of a CLR type.
                </para>
          <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" /></para>
          <para>
                    Note: providers should typically not need to override this method.
                </para>
        </summary>
        <returns> The type mapping, or <c>null</c> if none was found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : Type -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="typeMappingSourceBase.FindMapping type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ FindMapping(Type ^ type);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ FindMapping(Platform::Type ^ type);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"> The CLR type. </param>
        <summary>
          <para>
                    Finds the type mapping for a given <see cref="T:System.Type" />.
                </para>
          <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
                    or <see cref="T:System.Reflection.MemberInfo" /> available, otherwise call <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(System.Reflection.MemberInfo)" /></para>
          <para>
                    Note: providers should typically not need to override this method.
                </para>
        </summary>
        <returns> The type mapping, or <c>null</c> if none was found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateMapping">
      <MemberSignature Language="C#" Value="protected virtual void ValidateMapping (Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping mapping, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateMapping(class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping mapping, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.ValidateMapping(Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateMapping (mapping As CoreTypeMapping, property As IProperty)" />
      <MemberSignature Language="F#" Value="abstract member ValidateMapping : Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit&#xA;override this.ValidateMapping : Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit" Usage="typeMappingSourceBase.ValidateMapping (mapping, property)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateMapping(Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ mapping, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual void ValidateMapping(Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping ^ mapping, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void ValidateMapping(Microsoft::EntityFrameworkCore::Storage::CoreTypeMapping const &amp; mapping, Microsoft::EntityFrameworkCore::Metadata::IProperty const &amp; property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <param name="mapping"> The mapping, if any. </param>
        <param name="property"> The property, if any. </param>
        <summary>
                Called after a mapping has been found so that it can be validated for the given property.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>