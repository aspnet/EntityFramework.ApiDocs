<Type Name="QueryAsserterBase" FullName="Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase">
  <TypeSignature Language="C#" Value="public abstract class QueryAsserterBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit QueryAsserterBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class QueryAsserterBase" />
  <TypeSignature Language="F#" Value="type QueryAsserterBase = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class QueryAsserterBase abstract" />
  <TypeSignature Language="C++ CX" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;public ref class QueryAsserterBase abstract" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class QueryAsserterBase abstract" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected QueryAsserterBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; QueryAsserterBase();" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; QueryAsserterBase();" />
      <MemberSignature Language="C++ WINRT" Value=" QueryAsserterBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertIncludeQuery&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;object&gt;&gt; AssertIncludeQuery&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;object&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;object&gt;&gt; expectedQuery, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; expectedIncludes, Func&lt;dynamic,object&gt; elementSorter = null, System.Collections.Generic.List&lt;Func&lt;dynamic,object&gt;&gt; clientProjections = null, bool assertOrder = false, int entryCount = 0, bool isAsync = false) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;object&gt;&gt; AssertIncludeQuery&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; expectedQuery, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; expectedIncludes, class System.Func`2&lt;object, object&gt; elementSorter, class System.Collections.Generic.List`1&lt;class System.Func`2&lt;object, object&gt;&gt; clientProjections, bool assertOrder, int32 entryCount, bool isAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertIncludeQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude},System.Func{System.Object,System.Object},System.Collections.Generic.List{System.Func{System.Object,System.Object}},System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AssertIncludeQuery(Of TItem1 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of Object)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of Object)), expectedIncludes As List(Of IExpectedInclude), Optional elementSorter As Func(Of Object, Object) = null, Optional clientProjections As List(Of Func(Of Object, Object)) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0, Optional isAsync As Boolean = false) As Task(Of List(Of Object))" />
      <MemberSignature Language="F#" Value="abstract member AssertIncludeQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; * Func&lt;obj, obj&gt; * System.Collections.Generic.List&lt;Func&lt;obj, obj&gt;&gt; * bool * int * bool -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;obj&gt;&gt; (requires 'TItem1 : null)" Usage="queryAsserterBase.AssertIncludeQuery (actualQuery, expectedQuery, expectedIncludes, elementSorter, clientProjections, assertOrder, entryCount, isAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedIncludes" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="clientProjections" Type="System.Collections.Generic.List&lt;System.Func&lt;System.Object,System.Object&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
        <Parameter Name="isAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="expectedIncludes">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="clientProjections">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <param name="isAsync">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertIncludeQuery&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;object&gt;&gt; AssertIncludeQuery&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;object&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;object&gt;&gt; expectedQuery, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; expectedIncludes, Func&lt;dynamic,object&gt; elementSorter = null, System.Collections.Generic.List&lt;Func&lt;dynamic,object&gt;&gt; clientProjections = null, bool assertOrder = false, int entryCount = 0, bool isAsync = false) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;object&gt;&gt; AssertIncludeQuery&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; expectedQuery, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; expectedIncludes, class System.Func`2&lt;object, object&gt; elementSorter, class System.Collections.Generic.List`1&lt;class System.Func`2&lt;object, object&gt;&gt; clientProjections, bool assertOrder, int32 entryCount, bool isAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertIncludeQuery``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Object}},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude},System.Func{System.Object,System.Object},System.Collections.Generic.List{System.Func{System.Object,System.Object}},System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AssertIncludeQuery(Of TItem1 As Class, TItem2 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Object)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Object)), expectedIncludes As List(Of IExpectedInclude), Optional elementSorter As Func(Of Object, Object) = null, Optional clientProjections As List(Of Func(Of Object, Object)) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0, Optional isAsync As Boolean = false) As Task(Of List(Of Object))" />
      <MemberSignature Language="F#" Value="abstract member AssertIncludeQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt; * Func&lt;obj, obj&gt; * System.Collections.Generic.List&lt;Func&lt;obj, obj&gt;&gt; * bool * int * bool -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;obj&gt;&gt; (requires 'TItem1 : null and 'TItem2 : null)" Usage="queryAsserterBase.AssertIncludeQuery (actualQuery, expectedQuery, expectedIncludes, elementSorter, clientProjections, assertOrder, entryCount, isAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedIncludes" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.TestUtilities.IExpectedInclude&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="clientProjections" Type="System.Collections.Generic.List&lt;System.Func&lt;System.Object,System.Object&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
        <Parameter Name="isAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="expectedIncludes">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="clientProjections">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <param name="isAsync">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQuery&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task AssertQuery&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;object&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;object&gt;&gt; expectedQuery, Func&lt;dynamic,object&gt; elementSorter = null, Action&lt;dynamic,dynamic&gt; elementAsserter = null, bool assertOrder = false, int entryCount = 0, bool isAsync = false) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQuery&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; expectedQuery, class System.Func`2&lt;object, object&gt; elementSorter, class System.Action`2&lt;object, object&gt; elementAsserter, bool assertOrder, int32 entryCount, bool isAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AssertQuery(Of TItem1 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of Object)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of Object)), Optional elementSorter As Func(Of Object, Object) = null, Optional elementAsserter As Action(Of Object, Object) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0, Optional isAsync As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="queryAsserterBase.AssertQuery (actualQuery, expectedQuery, elementSorter, elementAsserter, assertOrder, entryCount, isAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="elementAsserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
        <Parameter Name="isAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="elementAsserter">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <param name="isAsync">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQuery&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task AssertQuery&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;object&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;object&gt;&gt; expectedQuery, Func&lt;dynamic,object&gt; elementSorter = null, Action&lt;dynamic,dynamic&gt; elementAsserter = null, bool assertOrder = false, int entryCount = 0, bool isAsync = false) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQuery&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; expectedQuery, class System.Func`2&lt;object, object&gt; elementSorter, class System.Action`2&lt;object, object&gt; elementAsserter, bool assertOrder, int32 entryCount, bool isAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertQuery``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Object}},System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AssertQuery(Of TItem1 As Class, TItem2 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Object)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Object)), Optional elementSorter As Func(Of Object, Object) = null, Optional elementAsserter As Action(Of Object, Object) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0, Optional isAsync As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="queryAsserterBase.AssertQuery (actualQuery, expectedQuery, elementSorter, elementAsserter, assertOrder, entryCount, isAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="elementAsserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
        <Parameter Name="isAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="elementAsserter">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <param name="isAsync">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQuery&lt;TItem1,TItem2,TItem3&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task AssertQuery&lt;TItem1,TItem2,TItem3&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;object&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;object&gt;&gt; expectedQuery, Func&lt;dynamic,object&gt; elementSorter = null, Action&lt;dynamic,dynamic&gt; elementAsserter = null, bool assertOrder = false, int entryCount = 0, bool isAsync = false) where TItem1 : class where TItem2 : class where TItem3 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQuery&lt;class TItem1, class TItem2, class TItem3&gt;(class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; actualQuery, class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Linq.IQueryable`1&lt;object&gt;&gt; expectedQuery, class System.Func`2&lt;object, object&gt; elementSorter, class System.Action`2&lt;object, object&gt; elementAsserter, bool assertOrder, int32 entryCount, bool isAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertQuery``3(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Linq.IQueryable{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Linq.IQueryable{System.Object}},System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AssertQuery(Of TItem1 As Class, TItem2 As Class, TItem3 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), IQueryable(Of Object)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), IQueryable(Of Object)), Optional elementSorter As Func(Of Object, Object) = null, Optional elementAsserter As Action(Of Object, Object) = null, Optional assertOrder As Boolean = false, Optional entryCount As Integer = 0, Optional isAsync As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQuery : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;obj&gt;&gt; * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * bool * int * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)" Usage="queryAsserterBase.AssertQuery (actualQuery, expectedQuery, elementSorter, elementAsserter, assertOrder, entryCount, isAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem3">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;System.Object&gt;&gt;" />
        <Parameter Name="elementSorter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="elementAsserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="entryCount" Type="System.Int32" />
        <Parameter Name="isAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TItem3">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="elementSorter">To be added.</param>
        <param name="elementAsserter">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="entryCount">To be added.</param>
        <param name="isAsync">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1,TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract void AssertQueryScalar&lt;TItem1,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;Nullable&lt;TResult&gt;&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;Nullable&lt;TResult&gt;&gt;&gt; expectedQuery, bool assertOrder = false) where TItem1 : class where TResult : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AssertQueryScalar&lt;class TItem1, struct .ctor (class System.ValueType) TResult&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;!!TResult&gt;&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;!!TResult&gt;&gt;&gt; expectedQuery, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertQueryScalar``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Nullable{``1}}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Nullable{``1}}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AssertQueryScalar(Of TItem1 As Class, TResult As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of Nullable(Of TResult))), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of Nullable(Of TResult))), Optional assertOrder As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;Nullable&lt;'Result&gt;&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;Nullable&lt;'Result&gt;&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'Result : struct)" Usage="queryAsserterBase.AssertQueryScalar (actualQuery, expectedQuery, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Nullable&lt;TResult&gt;&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;System.Nullable&lt;TResult&gt;&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1,TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt; expectedQuery, bool assertOrder = false, bool isAsync = false) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1, TResult&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt; expectedQuery, bool assertOrder, bool isAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertQueryScalar``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1}},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AssertQueryScalar(Of TItem1 As Class, TResult As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TResult)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TResult)), Optional assertOrder As Boolean = false, Optional isAsync As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * bool * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="queryAsserterBase.AssertQueryScalar (actualQuery, expectedQuery, assertOrder, isAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="isAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="isAsync">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1,TItem2,TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract void AssertQueryScalar&lt;TItem1,TItem2,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;Nullable&lt;TResult&gt;&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;Nullable&lt;TResult&gt;&gt;&gt; expectedQuery, bool assertOrder = false) where TItem1 : class where TItem2 : class where TResult : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AssertQueryScalar&lt;class TItem1, class TItem2, struct .ctor (class System.ValueType) TResult&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;!!TResult&gt;&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;!!TResult&gt;&gt;&gt; expectedQuery, bool assertOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertQueryScalar``3(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Nullable{``2}}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{System.Nullable{``2}}},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AssertQueryScalar(Of TItem1 As Class, TItem2 As Class, TResult As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Nullable(Of TResult))), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of Nullable(Of TResult))), Optional assertOrder As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;Nullable&lt;'Result&gt;&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;Nullable&lt;'Result&gt;&gt;&gt; * bool -&gt; unit (requires 'TItem1 : null and 'TItem2 : null and 'Result : struct)" Usage="queryAsserterBase.AssertQueryScalar (actualQuery, expectedQuery, assertOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Nullable&lt;TResult&gt;&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;System.Nullable&lt;TResult&gt;&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1,TItem2,TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1,TItem2,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt; expectedQuery, bool assertOrder = false, bool isAsync = false) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1, class TItem2, TResult&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt; expectedQuery, bool assertOrder, bool isAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertQueryScalar``3(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2}},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AssertQueryScalar(Of TItem1 As Class, TItem2 As Class, TResult As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TResult)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TResult)), Optional assertOrder As Boolean = false, Optional isAsync As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * bool * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="queryAsserterBase.AssertQueryScalar (actualQuery, expectedQuery, assertOrder, isAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="isAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="isAsync">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertQueryScalar&lt;TItem1,TItem2,TItem3,TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task AssertQueryScalar&lt;TItem1,TItem2,TItem3,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt; expectedQuery, bool assertOrder = false, bool isAsync = false) where TItem1 : class where TItem2 : class where TItem3 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertQueryScalar&lt;class TItem1, class TItem2, class TItem3, TResult&gt;(class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt; actualQuery, class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt; expectedQuery, bool assertOrder, bool isAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertQueryScalar``4(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Linq.IQueryable{``3}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Linq.IQueryable{``3}},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AssertQueryScalar(Of TItem1 As Class, TItem2 As Class, TItem3 As Class, TResult As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), IQueryable(Of TResult)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), IQueryable(Of TResult)), Optional assertOrder As Boolean = false, Optional isAsync As Boolean = false) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertQueryScalar : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Linq.IQueryable&lt;'Result&gt;&gt; * bool * bool -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)" Usage="queryAsserterBase.AssertQueryScalar (actualQuery, expectedQuery, assertOrder, isAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem3">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Linq.IQueryable&lt;TResult&gt;&gt;" />
        <Parameter Name="assertOrder" Type="System.Boolean" />
        <Parameter Name="isAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TItem3">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="assertOrder">To be added.</param>
        <param name="isAsync">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1&gt;">
      <MemberSignature Language="C#" Value="public abstract void AssertSingleResult&lt;TItem1&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,object&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,object&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AssertSingleResult&lt;class TItem1&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, object&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, object&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertSingleResult``1(System.Func{System.Linq.IQueryable{``0},System.Object},System.Func{System.Linq.IQueryable{``0},System.Object},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AssertSingleResult(Of TItem1 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), Object), expectedQuery As Func(Of IQueryable(Of TItem1), Object), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0)" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, obj&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, obj&gt; * Action&lt;obj, obj&gt; * int -&gt; unit (requires 'TItem1 : null)" Usage="queryAsserterBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Object&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Object&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2&gt;">
      <MemberSignature Language="C#" Value="public abstract void AssertSingleResult&lt;TItem1,TItem2&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,object&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,object&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AssertSingleResult&lt;class TItem1, class TItem2&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, object&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, object&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertSingleResult``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Object},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Object},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AssertSingleResult(Of TItem1 As Class, TItem2 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Object), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Object), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0)" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, obj&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, obj&gt; * Action&lt;obj, obj&gt; * int -&gt; unit (requires 'TItem1 : null and 'TItem2 : null)" Usage="queryAsserterBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Object&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Object&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, TResult&gt;(class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; actualQuery, class System.Func`2&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertSingleResult``2(System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{``1}},System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{``1}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AssertSingleResult(Of TItem1 As Class, TResult As Class) (actualQuery As Func(Of IQueryable(Of TItem1), Task(Of TResult)), expectedQuery As Func(Of IQueryable(Of TItem1), Task(Of TResult)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null)" Usage="queryAsserterBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2,TItem3&gt;">
      <MemberSignature Language="C#" Value="public abstract void AssertSingleResult&lt;TItem1,TItem2,TItem3&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,object&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,object&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class where TItem3 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AssertSingleResult&lt;class TItem1, class TItem2, class TItem3&gt;(class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, object&gt; actualQuery, class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, object&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertSingleResult``3(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Object},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Object},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AssertSingleResult(Of TItem1 As Class, TItem2 As Class, TItem3 As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), Object), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), Object), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0)" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, obj&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, obj&gt; * Action&lt;obj, obj&gt; * int -&gt; unit (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)" Usage="queryAsserterBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem3">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Object&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Object&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TItem3">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2,TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2, TResult&gt;(class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; actualQuery, class System.Func`3&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertSingleResult``3(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{``2}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Threading.Tasks.Task{``2}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class, TResult As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of TResult)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), Task(Of TResult)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null)" Usage="queryAsserterBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertSingleResult&lt;TItem1,TItem2,TItem3,TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task AssertSingleResult&lt;TItem1,TItem2,TItem3,TResult&gt; (Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; actualQuery, Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt; expectedQuery, Action&lt;object,object&gt; asserter = null, int entryCount = 0) where TItem1 : class where TItem2 : class where TItem3 : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssertSingleResult&lt;class TItem1, class TItem2, class TItem3, TResult&gt;(class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; actualQuery, class System.Func`4&lt;class System.Linq.IQueryable`1&lt;!!TItem1&gt;, class System.Linq.IQueryable`1&lt;!!TItem2&gt;, class System.Linq.IQueryable`1&lt;!!TItem3&gt;, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; expectedQuery, class System.Action`2&lt;object, object&gt; asserter, int32 entryCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.AssertSingleResult``4(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Threading.Tasks.Task{``3}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.IQueryable{``2},System.Threading.Tasks.Task{``3}},System.Action{System.Object,System.Object},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AssertSingleResult(Of TItem1 As Class, TItem2 As Class, TItem3 As Class, TResult As Class) (actualQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), Task(Of TResult)), expectedQuery As Func(Of IQueryable(Of TItem1), IQueryable(Of TItem2), IQueryable(Of TItem3), Task(Of TResult)), Optional asserter As Action(Of Object, Object) = null, Optional entryCount As Integer = 0) As Task" />
      <MemberSignature Language="F#" Value="abstract member AssertSingleResult : Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;System.Linq.IQueryable&lt;'TItem1&gt;, System.Linq.IQueryable&lt;'TItem2&gt;, System.Linq.IQueryable&lt;'TItem3&gt;, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;obj, obj&gt; * int -&gt; System.Threading.Tasks.Task (requires 'TItem1 : null and 'TItem2 : null and 'TItem3 : null)" Usage="queryAsserterBase.AssertSingleResult (actualQuery, expectedQuery, asserter, entryCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem2">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TItem3">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="actualQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="expectedQuery" Type="System.Func&lt;System.Linq.IQueryable&lt;TItem1&gt;,System.Linq.IQueryable&lt;TItem2&gt;,System.Linq.IQueryable&lt;TItem3&gt;,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="asserter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="entryCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem1">To be added.</typeparam>
        <typeparam name="TItem2">To be added.</typeparam>
        <typeparam name="TItem3">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="actualQuery">To be added.</param>
        <param name="expectedQuery">To be added.</param>
        <param name="asserter">To be added.</param>
        <param name="entryCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpectedData">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.TestUtilities.IExpectedData ExpectedData { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.TestUtilities.IExpectedData ExpectedData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.ExpectedData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ExpectedData As IExpectedData" />
      <MemberSignature Language="F#" Value="member this.ExpectedData : Microsoft.EntityFrameworkCore.TestUtilities.IExpectedData with get, set" Usage="Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.ExpectedData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::TestUtilities::IExpectedData ^ ExpectedData { Microsoft::EntityFrameworkCore::TestUtilities::IExpectedData ^ get(); void set(Microsoft::EntityFrameworkCore::TestUtilities::IExpectedData ^ value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::TestUtilities::IExpectedData ^ ExpectedData { Microsoft::EntityFrameworkCore::TestUtilities::IExpectedData ^ get(); void set(Microsoft::EntityFrameworkCore::TestUtilities::IExpectedData ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.TestUtilities.IExpectedData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExtractor">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.TestUtilities.ISetExtractor SetExtractor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.TestUtilities.ISetExtractor SetExtractor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.SetExtractor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SetExtractor As ISetExtractor" />
      <MemberSignature Language="F#" Value="member this.SetExtractor : Microsoft.EntityFrameworkCore.TestUtilities.ISetExtractor with get, set" Usage="Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserterBase.SetExtractor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::TestUtilities::ISetExtractor ^ SetExtractor { Microsoft::EntityFrameworkCore::TestUtilities::ISetExtractor ^ get(); void set(Microsoft::EntityFrameworkCore::TestUtilities::ISetExtractor ^ value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::TestUtilities::ISetExtractor ^ SetExtractor { Microsoft::EntityFrameworkCore::TestUtilities::ISetExtractor ^ get(); void set(Microsoft::EntityFrameworkCore::TestUtilities::ISetExtractor ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.TestUtilities.ISetExtractor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>