<Type Name="FallbackEventDefinition" FullName="Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition">
  <TypeSignature Language="C#" Value="public class FallbackEventDefinition : Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FallbackEventDefinition extends Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition" />
  <TypeSignature Language="VB.NET" Value="Public Class FallbackEventDefinition&#xA;Inherits EventDefinitionBase" />
  <TypeSignature Language="F#" Value="type FallbackEventDefinition = class&#xA;    inherit EventDefinitionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class FallbackEventDefinition : Microsoft::EntityFrameworkCore::Diagnostics::EventDefinitionBase" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class FallbackEventDefinition : Microsoft::EntityFrameworkCore::Diagnostics::EventDefinitionBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Defines metadata for an event with more than six parameters such that it has to have
                special handling.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FallbackEventDefinition (Microsoft.Extensions.Logging.EventId eventId, Microsoft.Extensions.Logging.LogLevel level, string messageFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.Extensions.Logging.EventId eventId, valuetype Microsoft.Extensions.Logging.LogLevel level, string messageFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.String)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition : Microsoft.Extensions.Logging.EventId * Microsoft.Extensions.Logging.LogLevel * string -&gt; Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition" Usage="new Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition (eventId, level, messageFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FallbackEventDefinition(Microsoft::Extensions::Logging::EventId eventId, Microsoft::Extensions::Logging::LogLevel level, System::String ^ messageFormat);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; FallbackEventDefinition(Microsoft::Extensions::Logging::EventId eventId, Microsoft::Extensions::Logging::LogLevel level, Platform::String ^ messageFormat);" />
      <MemberSignature Language="C++ WINRT" Value=" FallbackEventDefinition(Microsoft::Extensions::Logging::EventId eventId, Microsoft::Extensions::Logging::LogLevel level, std::wstring const &amp; messageFormat);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
        <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
        <Parameter Name="messageFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
        <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
        <param name="messageFormat"> The parameterized message definition. </param>
        <summary>
                Creates an event definition instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FallbackEventDefinition (Microsoft.Extensions.Logging.EventId eventId, Microsoft.Extensions.Logging.LogLevel level, string eventIdCode, string messageFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.Extensions.Logging.EventId eventId, valuetype Microsoft.Extensions.Logging.LogLevel level, string eventIdCode, string messageFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.String,System.String)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition : Microsoft.Extensions.Logging.EventId * Microsoft.Extensions.Logging.LogLevel * string * string -&gt; Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition" Usage="new Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition (eventId, level, eventIdCode, messageFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FallbackEventDefinition(Microsoft::Extensions::Logging::EventId eventId, Microsoft::Extensions::Logging::LogLevel level, System::String ^ eventIdCode, System::String ^ messageFormat);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; FallbackEventDefinition(Microsoft::Extensions::Logging::EventId eventId, Microsoft::Extensions::Logging::LogLevel level, Platform::String ^ eventIdCode, Platform::String ^ messageFormat);" />
      <MemberSignature Language="C++ WINRT" Value=" FallbackEventDefinition(Microsoft::Extensions::Logging::EventId eventId, Microsoft::Extensions::Logging::LogLevel level, std::wstring const &amp; eventIdCode, std::wstring const &amp; messageFormat);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
        <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
        <Parameter Name="eventIdCode" Type="System.String" />
        <Parameter Name="messageFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
        <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
        <param name="eventIdCode"> A string representing the code that should be passed to ConfigureWanings. </param>
        <param name="messageFormat"> The parameterized message definition. </param>
        <summary>
                Creates an event definition instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateMessage">
      <MemberSignature Language="C#" Value="public virtual string GenerateMessage (Action&lt;Microsoft.Extensions.Logging.ILogger&gt; logAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateMessage(class System.Action`1&lt;class Microsoft.Extensions.Logging.ILogger&gt; logAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition.GenerateMessage(System.Action{Microsoft.Extensions.Logging.ILogger})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateMessage (logAction As Action(Of ILogger)) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateMessage : Action&lt;Microsoft.Extensions.Logging.ILogger&gt; -&gt; string&#xA;override this.GenerateMessage : Action&lt;Microsoft.Extensions.Logging.ILogger&gt; -&gt; string" Usage="fallbackEventDefinition.GenerateMessage logAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GenerateMessage(Action&lt;Microsoft::Extensions::Logging::ILogger ^&gt; ^ logAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logAction" Type="System.Action&lt;Microsoft.Extensions.Logging.ILogger&gt;" />
      </Parameters>
      <Docs>
        <param name="logAction"> A delegate that will log the message to an <see cref="T:Microsoft.Extensions.Logging.ILogger" />. </param>
        <summary>
                Generates the message that would be logged without logging it.
                Typically used for throwing an exception in warning-as-error cases.
            </summary>
        <returns> The message string. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log&lt;TLoggerCategory&gt;">
      <MemberSignature Language="C#" Value="public virtual void Log&lt;TLoggerCategory&gt; (Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;TLoggerCategory&gt; logger, Action&lt;Microsoft.Extensions.Logging.ILogger&gt; logAction) where TLoggerCategory : Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;TLoggerCategory&gt;new();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Log&lt;.ctor (class Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory`1&lt;!!TLoggerCategory&gt;) TLoggerCategory&gt;(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;!!TLoggerCategory&gt; logger, class System.Action`1&lt;class Microsoft.Extensions.Logging.ILogger&gt; logAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},System.Action{Microsoft.Extensions.Logging.ILogger})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Log(Of TLoggerCategory As {LoggerCategory(Of TLoggerCategory)New}) (logger As IDiagnosticsLogger(Of TLoggerCategory), logAction As Action(Of ILogger))" />
      <MemberSignature Language="F#" Value="abstract member Log : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt; * Action&lt;Microsoft.Extensions.Logging.ILogger&gt; -&gt; unit (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&#xA;override this.Log : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt; * Action&lt;Microsoft.Extensions.Logging.ILogger&gt; -&gt; unit (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))" Usage="fallbackEventDefinition.Log (logger, logAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLoggerCategory&gt;&#xA; where TLoggerCategory : Microsoft::EntityFrameworkCore::Diagnostics::LoggerCategory&lt;TLoggerCategory&gt;gcnew() virtual void Log(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;TLoggerCategory&gt; ^ logger, Action&lt;Microsoft::Extensions::Logging::ILogger ^&gt; ^ logAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the other overload")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLoggerCategory">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <BaseTypeName>Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;TLoggerCategory&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;TLoggerCategory&gt;" />
        <Parameter Name="logAction" Type="System.Action&lt;Microsoft.Extensions.Logging.ILogger&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
        <param name="logger"> The logger to which the event should be logged. </param>
        <param name="logAction"> A delegate that will log the message to an <see cref="T:Microsoft.Extensions.Logging.ILogger" />. </param>
        <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log&lt;TLoggerCategory&gt;">
      <MemberSignature Language="C#" Value="public virtual void Log&lt;TLoggerCategory&gt; (Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;TLoggerCategory&gt; logger, Microsoft.EntityFrameworkCore.WarningBehavior warningBehavior, Action&lt;Microsoft.Extensions.Logging.ILogger&gt; logAction) where TLoggerCategory : Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;TLoggerCategory&gt;new();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Log&lt;.ctor (class Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory`1&lt;!!TLoggerCategory&gt;) TLoggerCategory&gt;(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;!!TLoggerCategory&gt; logger, valuetype Microsoft.EntityFrameworkCore.WarningBehavior warningBehavior, class System.Action`1&lt;class Microsoft.Extensions.Logging.ILogger&gt; logAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},Microsoft.EntityFrameworkCore.WarningBehavior,System.Action{Microsoft.Extensions.Logging.ILogger})" />
      <MemberSignature Language="F#" Value="abstract member Log : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt; * Microsoft.EntityFrameworkCore.WarningBehavior * Action&lt;Microsoft.Extensions.Logging.ILogger&gt; -&gt; unit (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&#xA;override this.Log : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt; * Microsoft.EntityFrameworkCore.WarningBehavior * Action&lt;Microsoft.Extensions.Logging.ILogger&gt; -&gt; unit (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))" Usage="fallbackEventDefinition.Log (logger, warningBehavior, logAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLoggerCategory&gt;&#xA; where TLoggerCategory : Microsoft::EntityFrameworkCore::Diagnostics::LoggerCategory&lt;TLoggerCategory&gt;gcnew() virtual void Log(Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;TLoggerCategory&gt; ^ logger, Microsoft::EntityFrameworkCore::WarningBehavior warningBehavior, Action&lt;Microsoft::Extensions::Logging::ILogger ^&gt; ^ logAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLoggerCategory">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <BaseTypeName>Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;TLoggerCategory&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;TLoggerCategory&gt;" />
        <Parameter Name="warningBehavior" Type="Microsoft.EntityFrameworkCore.WarningBehavior" />
        <Parameter Name="logAction" Type="System.Action&lt;Microsoft.Extensions.Logging.ILogger&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
        <param name="logger"> The logger to which the event should be logged. </param>
        <param name="warningBehavior"> Whether the event should be logged, thrown as an exception or ignored. </param>
        <param name="logAction"> A delegate that will log the message to an <see cref="T:Microsoft.Extensions.Logging.ILogger" />. </param>
        <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MessageFormat">
      <MemberSignature Language="C#" Value="public virtual string MessageFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition.MessageFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MessageFormat As String" />
      <MemberSignature Language="F#" Value="member this.MessageFormat : string" Usage="Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition.MessageFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ MessageFormat { System::String ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property Platform::String ^ MessageFormat { Platform::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The parameterized message definition.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>