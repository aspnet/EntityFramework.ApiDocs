<Type Name="IDiagnosticsLogger&lt;TLoggerCategory&gt;" FullName="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;TLoggerCategory&gt;">
  <TypeSignature Language="C#" Value="public interface IDiagnosticsLogger&lt;TLoggerCategory&gt; where TLoggerCategory : LoggerCategory&lt;TLoggerCategory&gt;new()" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDiagnosticsLogger`1&lt;.ctor (class Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory`1&lt;!TLoggerCategory&gt;) TLoggerCategory&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDiagnosticsLogger(Of TLoggerCategory)" />
  <TypeSignature Language="F#" Value="type IDiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt; = interface" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TLoggerCategory&gt;&#xA; where TLoggerCategory : LoggerCategory&lt;TLoggerCategory&gt;gcnew()public interface class IDiagnosticsLogger" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TLoggerCategory">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <BaseTypeName>Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;TLoggerCategory&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="TLoggerCategory">To be added.</typeparam>
    <summary>
      <para>
                    Combines <see cref="T:Microsoft.Extensions.Logging.ILogger" /> and <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.DiagnosticSource" />
                    for use by all EF Core logging so that events can be sent to both <see cref="T:Microsoft.Extensions.Logging.ILogger" />
                    for ASP.NET and <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.DiagnosticSource" /> for everything else.
                </para>
      <para>
                    Also intercepts messages such that warnings
                    can be either logged or thrown, and such that a decision as to whether to log
                    sensitive data or not can be made.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DiagnosticSource">
      <MemberSignature Language="C#" Value="public System.Diagnostics.DiagnosticSource DiagnosticSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.DiagnosticSource DiagnosticSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.DiagnosticSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DiagnosticSource As DiagnosticSource" />
      <MemberSignature Language="F#" Value="member this.DiagnosticSource : System.Diagnostics.DiagnosticSource" Usage="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt;.DiagnosticSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::DiagnosticSource ^ DiagnosticSource { System::Diagnostics::DiagnosticSource ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DiagnosticSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.DiagnosticSource" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.WarningBehavior GetLogBehavior (Microsoft.Extensions.Logging.EventId eventId, Microsoft.Extensions.Logging.LogLevel logLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.WarningBehavior GetLogBehavior(valuetype Microsoft.Extensions.Logging.EventId eventId, valuetype Microsoft.Extensions.Logging.LogLevel logLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.GetLogBehavior(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="F#" Value="abstract member GetLogBehavior : Microsoft.Extensions.Logging.EventId * Microsoft.Extensions.Logging.LogLevel -&gt; Microsoft.EntityFrameworkCore.WarningBehavior" Usage="iDiagnosticsLogger.GetLogBehavior (eventId, logLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::EntityFrameworkCore::WarningBehavior GetLogBehavior(Microsoft::Extensions::Logging::EventId eventId, Microsoft::Extensions::Logging::LogLevel logLevel);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::EntityFrameworkCore::WarningBehavior GetLogBehavior(Microsoft::Extensions::Logging::EventId eventId, Microsoft::Extensions::Logging::LogLevel logLevel);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::WarningBehavior GetLogBehavior(Microsoft::Extensions::Logging::EventId eventId, Microsoft::Extensions::Logging::LogLevel logLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.WarningBehavior</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <param name="eventId"> The event ID that will be logged, if enabled. </param>
        <param name="logLevel"> The logging level to which the event will be logged.</param>
        <summary>
                Checks if the given <paramref name="logLevel" /> is enabled or the given event, and,
                if so, whether the event should be logged or thrown.
            </summary>
        <returns> One of Log, Throw, or Ignore. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Logger">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Logging.ILogger Logger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Logging.ILogger Logger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.Logger" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Logger As ILogger" />
      <MemberSignature Language="F#" Value="member this.Logger : Microsoft.Extensions.Logging.ILogger" Usage="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt;.Logger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Logging::ILogger ^ Logger { Microsoft::Extensions::Logging::ILogger ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::Extensions::Logging::ILogger ^ Logger { Microsoft::Extensions::Logging::ILogger ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILogger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The underlying <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions Options" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As ILoggingOptions" />
      <MemberSignature Language="F#" Value="member this.Options : Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions" Usage="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt;.Options" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::EntityFrameworkCore::Diagnostics::ILoggingOptions ^ Options { Microsoft::EntityFrameworkCore::Diagnostics::ILoggingOptions ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::EntityFrameworkCore::Diagnostics::ILoggingOptions ^ Options { Microsoft::EntityFrameworkCore::Diagnostics::ILoggingOptions ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Entity Framework logging options.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldLogSensitiveData">
      <MemberSignature Language="C#" Value="public bool ShouldLogSensitiveData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldLogSensitiveData() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.ShouldLogSensitiveData" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldLogSensitiveData () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ShouldLogSensitiveData : unit -&gt; bool" Usage="iDiagnosticsLogger.ShouldLogSensitiveData " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldLogSensitiveData();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool ShouldLogSensitiveData();" />
      <MemberSignature Language="C++ WINRT" Value="bool ShouldLogSensitiveData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets a value indicating whether sensitive information should be written
                to the underlying logger. This also has the side effect of writing a warning
                to the log the first time sensitive data is logged.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>