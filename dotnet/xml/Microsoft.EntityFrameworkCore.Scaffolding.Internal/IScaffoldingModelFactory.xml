<Type Name="IScaffoldingModelFactory" FullName="Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingModelFactory">
  <TypeSignature Language="C#" Value="public interface IScaffoldingModelFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IScaffoldingModelFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingModelFactory" />
  <TypeSignature Language="VB.NET" Value="Public Interface IScaffoldingModelFactory" />
  <TypeSignature Language="F#" Value="type IScaffoldingModelFactory = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IScaffoldingModelFactory" />
  <TypeSignature Language="C++ CX" Value="public interface class IScaffoldingModelFactory" />
  <TypeSignature Language="C++ WINRT" Value="__interface IScaffoldingModelFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IModel Create (Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel databaseModel, bool useDatabaseNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel Create(class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel databaseModel, bool useDatabaseNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingModelFactory.Create(Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Create : Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="iScaffoldingModelFactory.Create (databaseModel, useDatabaseNames)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::EntityFrameworkCore::Metadata::IModel ^ Create(Microsoft::EntityFrameworkCore::Scaffolding::Metadata::DatabaseModel ^ databaseModel, bool useDatabaseNames);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Metadata::IModel Create(Microsoft::EntityFrameworkCore::Scaffolding::Metadata::DatabaseModel const &amp; databaseModel, bool useDatabaseNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseModel" Type="Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel" />
        <Parameter Name="useDatabaseNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="databaseModel">To be added.</param>
        <param name="useDatabaseNames">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IModel Create (string connectionString, System.Collections.Generic.IEnumerable&lt;string&gt; tables, System.Collections.Generic.IEnumerable&lt;string&gt; schemas, bool useDatabaseNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel Create(string connectionString, class System.Collections.Generic.IEnumerable`1&lt;string&gt; tables, class System.Collections.Generic.IEnumerable`1&lt;string&gt; schemas, bool useDatabaseNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingModelFactory.Create(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Create (connectionString As String, tables As IEnumerable(Of String), schemas As IEnumerable(Of String), useDatabaseNames As Boolean) As IModel" />
      <MemberSignature Language="F#" Value="abstract member Create : string * seq&lt;string&gt; * seq&lt;string&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="iScaffoldingModelFactory.Create (connectionString, tables, schemas, useDatabaseNames)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::EntityFrameworkCore::Metadata::IModel ^ Create(System::String ^ connectionString, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ tables, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ schemas, bool useDatabaseNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="tables" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="schemas" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="useDatabaseNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="connectionString">To be added.</param>
        <param name="tables">To be added.</param>
        <param name="schemas">To be added.</param>
        <param name="useDatabaseNames">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>