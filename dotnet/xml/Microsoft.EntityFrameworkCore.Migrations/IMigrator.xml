<Type Name="IMigrator" FullName="Microsoft.EntityFrameworkCore.Migrations.IMigrator">
  <TypeSignature Language="C#" Value="public interface IMigrator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMigrator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Migrations.IMigrator" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMigrator" />
  <TypeSignature Language="F#" Value="type IMigrator = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMigrator" />
  <TypeSignature Language="C++ CX" Value="public interface class IMigrator" />
  <TypeSignature Language="C++ WINRT" Value="__interface IMigrator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                The main service used to generated an EF Core Migrations script or
                migrate a database directly.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GenerateScript">
      <MemberSignature Language="C#" Value="public string GenerateScript (string fromMigration = null, string toMigration = null, bool idempotent = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateScript(string fromMigration, string toMigration, bool idempotent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IMigrator.GenerateScript(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateScript (Optional fromMigration As String = null, Optional toMigration As String = null, Optional idempotent As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateScript : string * string * bool -&gt; string" Usage="iMigrator.GenerateScript (fromMigration, toMigration, idempotent)" />
      <MemberSignature Language="C++ WINRT" Value="std::wstring GenerateScript(std::wstring const &amp; fromMigration = null, std::wstring const &amp; toMigration = null, bool idempotent = false);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromMigration" Type="System.String" />
        <Parameter Name="toMigration" Type="System.String" />
        <Parameter Name="idempotent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fromMigration">
                The migration to start from, or <c>null</c> to start from the empty database.
            </param>
        <param name="toMigration">
                The target migration to migrate the database to, or <c>null</c> to migrate to the latest.
            </param>
        <param name="idempotent">
                If <c>true</c>, then idempotent scripts will be generated, otherwise
                scripts will be generated that assume none of the migrations in the range specified have
                already been applied to the database.
            </param>
        <summary>
                Generates a SQL script to migrate a database either in its entirety, or starting and
                ending at specified migrations.
            </summary>
        <returns> The generated script. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Migrate">
      <MemberSignature Language="C#" Value="public void Migrate (string targetMigration = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Migrate(string targetMigration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IMigrator.Migrate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Migrate (Optional targetMigration As String = null)" />
      <MemberSignature Language="F#" Value="abstract member Migrate : string -&gt; unit" Usage="iMigrator.Migrate targetMigration" />
      <MemberSignature Language="C++ WINRT" Value="void Migrate(std::wstring const &amp; targetMigration = null);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetMigration" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetMigration">
                The target migration to migrate the database to, or <c>null</c> to migrate to the latest.
            </param>
        <summary>
                Migrates the database to either a specified target migration or up to the latest
                migration that exists in the <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MigrateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task MigrateAsync (string targetMigration = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task MigrateAsync(string targetMigration, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IMigrator.MigrateAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member MigrateAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iMigrator.MigrateAsync (targetMigration, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetMigration" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="targetMigration">
                The target migration to migrate the database to, or <c>null</c> to migrate to the latest.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Migrates the database to either a specified target migration or up to the latest
                migration that exists in the <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly" />.
            </summary>
        <returns> A task that represents the asynchronous operation </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>