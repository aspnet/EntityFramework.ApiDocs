<Type Name="IEntityEntryGraphIterator" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator">
  <TypeSignature Language="C#" Value="public interface IEntityEntryGraphIterator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEntityEntryGraphIterator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEntityEntryGraphIterator" />
  <TypeSignature Language="F#" Value="type IEntityEntryGraphIterator = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEntityEntryGraphIterator" />
  <TypeSignature Language="C++ CX" Value="public interface class IEntityEntryGraphIterator" />
  <TypeSignature Language="C++ WINRT" Value="__interface IEntityEntryGraphIterator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                A service to travserse a graph of entities and perform some action on at each node.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TraverseGraph&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public void TraverseGraph&lt;TState&gt; (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, TState state, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,TState,bool&gt; handleNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TraverseGraph&lt;TState&gt;(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, !!TState state, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, !!TState, bool&gt; handleNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator.TraverseGraph``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraverseGraph(Of TState) (node As EntityEntryGraphNode, state As TState, handleNode As Func(Of EntityEntryGraphNode, TState, Boolean))" />
      <MemberSignature Language="F#" Value="abstract member TraverseGraph : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode * 'State * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, 'State, bool&gt; -&gt; unit" Usage="iEntityEntryGraphIterator.TraverseGraph (node, state, handleNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; void TraverseGraph(Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntryGraphNode ^ node, TState state, Func&lt;Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntryGraphNode ^, TState, bool&gt; ^ handleNode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="handleNode" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,TState,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TState"> The type of the state object. </typeparam>
        <param name="node"> The node that is being visited. </param>
        <param name="state"> An arbitary state object. </param>
        <param name="handleNode"> A delegate to call to handle the node. </param>
        <summary>
                Traverses a graph of entities allowing an action to be taken at each node.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraverseGraphAsync&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task TraverseGraphAsync&lt;TState&gt; (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, TState state, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; handleNode, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task TraverseGraphAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, !!TState state, class System.Func`4&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, !!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; handleNode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator.TraverseGraphAsync``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member TraverseGraphAsync : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode * 'State * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, 'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iEntityEntryGraphIterator.TraverseGraphAsync (node, state, handleNode, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="handleNode" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TState"> The type of the state object. </typeparam>
        <param name="node"> The node that is being visited. </param>
        <param name="state"> An arbitary state object. </param>
        <param name="handleNode"> A delegate to call to handle the node. </param>
        <param name="cancellationToken">  A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
        <summary>
                Traverses a graph of entities allowing an action to be taken at each node.
            </summary>
        <returns> A task that represents the asynchronous operation. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>