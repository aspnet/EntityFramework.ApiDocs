<Type Name="ValueComparer" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer">
  <TypeSignature Language="C#" Value="public abstract class ValueComparer : System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ValueComparer extends System.Object implements class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueComparer&#xA;Implements IEqualityComparer" />
  <TypeSignature Language="F#" Value="type ValueComparer = class&#xA;    interface IEqualityComparer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueComparer abstract : System::Collections::IEqualityComparer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    Specifies custom value snapshotting and comparison for
                    CLR types that cannot be compared with <see cref="M:System.Object.Equals(System.Object,System.Object)" />
                    and/or need a deep copy when taking a snapshot. For example, arrays of primitive types
                    will require both if mutation is to be detected.
                </para>
      <para>
                    Snapshotting is the process of creating a copy of the value into a snapshot so it can
                    later be compared to determine if it has changed. For some types, such as collections,
                    this needs to be a deep copy of the collection rather than just a shallow copy of the
                    reference.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueComparer (System.Linq.Expressions.LambdaExpression equalsExpression, System.Linq.Expressions.LambdaExpression hashCodeExpression, System.Linq.Expressions.LambdaExpression snapshotExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.LambdaExpression equalsExpression, class System.Linq.Expressions.LambdaExpression hashCodeExpression, class System.Linq.Expressions.LambdaExpression snapshotExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.#ctor(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (equalsExpression As LambdaExpression, hashCodeExpression As LambdaExpression, snapshotExpression As LambdaExpression)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer : System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer (equalsExpression, hashCodeExpression, snapshotExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueComparer(System::Linq::Expressions::LambdaExpression ^ equalsExpression, System::Linq::Expressions::LambdaExpression ^ hashCodeExpression, System::Linq::Expressions::LambdaExpression ^ snapshotExpression);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="equalsExpression" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="hashCodeExpression" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="snapshotExpression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="equalsExpression"> The comparison expression. </param>
        <param name="hashCodeExpression"> The associated hash code generator. </param>
        <param name="snapshotExpression"> The snapshot expression. </param>
        <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> with the given comparison and
                snapshotting expressions.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (object left, object right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object left, object right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (left As Object, right As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj * obj -&gt; bool" Usage="valueComparer.Equals (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(System::Object ^ left, System::Object ^ right);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract bool Equals(Platform::Object ^ left, Platform::Object ^ right);" />
      <MemberSignature Language="C++ WINRT" Value=" abstract bool Equals(winrt::Windows::Foundation::IInspectable const &amp; left, winrt::Windows::Foundation::IInspectable const &amp; right);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Object" />
        <Parameter Name="right" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="left"> The first instance. </param>
        <param name="right"> The second instance. </param>
        <summary>
                Compares the two instances to determine if they are equal.
            </summary>
        <returns>
          <c>True</c> if they are equal; <c>false</c> otherwise. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.LambdaExpression EqualsExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LambdaExpression EqualsExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.EqualsExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EqualsExpression As LambdaExpression" />
      <MemberSignature Language="F#" Value="member this.EqualsExpression : System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.EqualsExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Linq::Expressions::LambdaExpression ^ EqualsExpression { System::Linq::Expressions::LambdaExpression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The comparison expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractEqualsBody">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ExtractEqualsBody (System.Linq.Expressions.Expression leftExpression, System.Linq.Expressions.Expression rightExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractEqualsBody(class System.Linq.Expressions.Expression leftExpression, class System.Linq.Expressions.Expression rightExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.ExtractEqualsBody(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExtractEqualsBody (leftExpression As Expression, rightExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member ExtractEqualsBody : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.ExtractEqualsBody : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="valueComparer.ExtractEqualsBody (leftExpression, rightExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Linq::Expressions::Expression ^ ExtractEqualsBody(System::Linq::Expressions::Expression ^ leftExpression, System::Linq::Expressions::Expression ^ rightExpression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftExpression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="rightExpression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="leftExpression"> The new left expression. </param>
        <param name="rightExpression"> The new right expression. </param>
        <summary>
                Takes <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.EqualsExpression" /> and replaces the two parameters with the given expressions,
                returning the transformed body.
            </summary>
        <returns> The body of the lambda with left and right parameters replaced.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractHashCodeBody">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ExtractHashCodeBody (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractHashCodeBody(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.ExtractHashCodeBody(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="F#" Value="abstract member ExtractHashCodeBody : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.ExtractHashCodeBody : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="valueComparer.ExtractHashCodeBody expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Linq::Expressions::Expression ^ ExtractHashCodeBody(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"> The new expression. </param>
        <summary>
                Takes the <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.HashCodeExpression" /> and replaces the parameter with the given expression,
                returning the transformed body.
            </summary>
        <returns> The body of the lambda with the parameter replaced.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractSnapshotBody">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ExtractSnapshotBody (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractSnapshotBody(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.ExtractSnapshotBody(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="F#" Value="abstract member ExtractSnapshotBody : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.ExtractSnapshotBody : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="valueComparer.ExtractSnapshotBody expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Linq::Expressions::Expression ^ ExtractSnapshotBody(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"> The new expression. </param>
        <summary>
                Takes the <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.SnapshotExpression" /> and replaces the parameter with the given expression,
                returning the transformed body.
            </summary>
        <returns> The body of the lambda with the parameter replaced.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode (instance As Object) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : obj -&gt; int" Usage="valueComparer.GetHashCode instance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode(System::Object ^ instance);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract int GetHashCode(Platform::Object ^ instance);" />
      <MemberSignature Language="C++ WINRT" Value=" abstract int GetHashCode(winrt::Windows::Foundation::IInspectable const &amp; instance);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"> The instance. </param>
        <summary>
                Returns the hash code for the given instance.
            </summary>
        <returns> The hash code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashCodeExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.LambdaExpression HashCodeExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LambdaExpression HashCodeExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.HashCodeExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HashCodeExpression As LambdaExpression" />
      <MemberSignature Language="F#" Value="member this.HashCodeExpression : System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.HashCodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Linq::Expressions::LambdaExpression ^ HashCodeExpression { System::Linq::Expressions::LambdaExpression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The hash code expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Snapshot">
      <MemberSignature Language="C#" Value="public abstract object Snapshot (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Snapshot(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.Snapshot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Snapshot (instance As Object) As Object" />
      <MemberSignature Language="F#" Value="abstract member Snapshot : obj -&gt; obj" Usage="valueComparer.Snapshot instance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Snapshot(System::Object ^ instance);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract Platform::Object ^ Snapshot(Platform::Object ^ instance);" />
      <MemberSignature Language="C++ WINRT" Value=" abstract winrt::Windows::Foundation::IInspectable Snapshot(winrt::Windows::Foundation::IInspectable const &amp; instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"> The instance. </param>
        <summary>
          <para>
                    Creates a snapshot of the given instance.
                </para>
          <para>
                    Snapshotting is the process of creating a copy of the value into a snapshot so it can
                    later be compared to determine if it has changed. For some types, such as collections,
                    this needs to be a deep copy of the collection rather than just a shallow copy of the
                    reference.
                </para>
        </summary>
        <returns> The snapshot. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapshotExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.LambdaExpression SnapshotExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LambdaExpression SnapshotExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.SnapshotExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SnapshotExpression As LambdaExpression" />
      <MemberSignature Language="F#" Value="member this.SnapshotExpression : System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.SnapshotExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Linq::Expressions::LambdaExpression ^ SnapshotExpression { System::Linq::Expressions::LambdaExpression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    The snapshot expression.
                </para>
          <para>
                    Snapshotting is the process of creating a copy of the value into a snapshot so it can
                    later be compared to determine if it has changed. For some types, such as collections,
                    this needs to be a deep copy of the collection rather than just a shallow copy of the
                    reference.
                </para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As Type" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ Type { Type ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract property Platform::Type ^ Type { Platform::Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>