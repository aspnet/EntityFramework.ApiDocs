<Type Name="NavigationFixer" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer">
  <TypeSignature Language="C#" Value="public class NavigationFixer : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INavigationFixer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NavigationFixer extends System.Object implements class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityStateListener, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IKeyListener, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INavigationFixer, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INavigationListener, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IQueryTrackingListener" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer" />
  <TypeSignature Language="VB.NET" Value="Public Class NavigationFixer&#xA;Implements INavigationFixer" />
  <TypeSignature Language="F#" Value="type NavigationFixer = class&#xA;    interface INavigationFixer&#xA;    interface IEntityStateListener&#xA;    interface INavigationListener&#xA;    interface IKeyListener&#xA;    interface IQueryTrackingListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class NavigationFixer : Microsoft::EntityFrameworkCore::ChangeTracking::Internal::INavigationFixer" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class NavigationFixer : Microsoft::EntityFrameworkCore::ChangeTracking::Internal::INavigationFixer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INavigationFixer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NavigationFixer (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector changeDetector, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher attacher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector changeDetector, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher attacher) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (changeDetector As IChangeDetector, attacher As IEntityGraphAttacher)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer (changeDetector, attacher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NavigationFixer(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IChangeDetector ^ changeDetector, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IEntityGraphAttacher ^ attacher);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; NavigationFixer(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IChangeDetector ^ changeDetector, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IEntityGraphAttacher ^ attacher);" />
      <MemberSignature Language="C++ WINRT" Value=" NavigationFixer(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IChangeDetector const &amp; changeDetector, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IEntityGraphAttacher const &amp; attacher);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="changeDetector" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector" />
        <Parameter Name="attacher" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher" />
      </Parameters>
      <Docs>
        <param name="changeDetector">To be added.</param>
        <param name="attacher">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NavigationFixer (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector changeDetector, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher attacher, Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions loggingOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector changeDetector, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher attacher, class Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions loggingOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher,Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (changeDetector As IChangeDetector, attacher As IEntityGraphAttacher, loggingOptions As ILoggingOptions)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher * Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer (changeDetector, attacher, loggingOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NavigationFixer(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IChangeDetector ^ changeDetector, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IEntityGraphAttacher ^ attacher, Microsoft::EntityFrameworkCore::Diagnostics::ILoggingOptions ^ loggingOptions);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; NavigationFixer(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IChangeDetector ^ changeDetector, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IEntityGraphAttacher ^ attacher, Microsoft::EntityFrameworkCore::Diagnostics::ILoggingOptions ^ loggingOptions);" />
      <MemberSignature Language="C++ WINRT" Value=" NavigationFixer(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IChangeDetector const &amp; changeDetector, Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IEntityGraphAttacher const &amp; attacher, Microsoft::EntityFrameworkCore::Diagnostics::ILoggingOptions const &amp; loggingOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="changeDetector" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector" />
        <Parameter Name="attacher" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher" />
        <Parameter Name="loggingOptions" Type="Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions" />
      </Parameters>
      <Docs>
        <param name="changeDetector">To be added.</param>
        <param name="attacher">To be added.</param>
        <param name="loggingOptions">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyPropertyChanged">
      <MemberSignature Language="C#" Value="public virtual void KeyPropertyChanged (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.Metadata.IProperty property, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt; containingPrincipalKeys, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; containingForeignKeys, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void KeyPropertyChanged(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IKey&gt; containingPrincipalKeys, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; containingForeignKeys, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.KeyPropertyChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IKey},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IForeignKey},System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub KeyPropertyChanged (entry As InternalEntityEntry, property As IProperty, containingPrincipalKeys As IReadOnlyList(Of IKey), containingForeignKeys As IReadOnlyList(Of IForeignKey), oldValue As Object, newValue As Object)" />
      <MemberSignature Language="F#" Value="abstract member KeyPropertyChanged : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IProperty * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; * obj * obj -&gt; unit&#xA;override this.KeyPropertyChanged : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IProperty * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; * obj * obj -&gt; unit" Usage="navigationFixer.KeyPropertyChanged (entry, property, containingPrincipalKeys, containingForeignKeys, oldValue, newValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void KeyPropertyChanged(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Metadata::IKey ^&gt; ^ containingPrincipalKeys, System::Collections::Generic::IReadOnlyList&lt;Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^&gt; ^ containingForeignKeys, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IKeyListener.KeyPropertyChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IKey},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IForeignKey},System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        <Parameter Name="containingPrincipalKeys" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt;" />
        <Parameter Name="containingForeignKeys" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="property">To be added.</param>
        <param name="containingPrincipalKeys">To be added.</param>
        <param name="containingForeignKeys">To be added.</param>
        <param name="oldValue">To be added.</param>
        <param name="newValue">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NavigationCollectionChanged">
      <MemberSignature Language="C#" Value="public virtual void NavigationCollectionChanged (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, System.Collections.Generic.IEnumerable&lt;object&gt; added, System.Collections.Generic.IEnumerable&lt;object&gt; removed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NavigationCollectionChanged(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class System.Collections.Generic.IEnumerable`1&lt;object&gt; added, class System.Collections.Generic.IEnumerable`1&lt;object&gt; removed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.NavigationCollectionChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub NavigationCollectionChanged (entry As InternalEntityEntry, navigation As INavigation, added As IEnumerable(Of Object), removed As IEnumerable(Of Object))" />
      <MemberSignature Language="F#" Value="abstract member NavigationCollectionChanged : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.INavigation * seq&lt;obj&gt; * seq&lt;obj&gt; -&gt; unit&#xA;override this.NavigationCollectionChanged : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.INavigation * seq&lt;obj&gt; * seq&lt;obj&gt; -&gt; unit" Usage="navigationFixer.NavigationCollectionChanged (entry, navigation, added, removed)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void NavigationCollectionChanged(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation, System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ added, System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ removed);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INavigationListener.NavigationCollectionChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
        <Parameter Name="added" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" />
        <Parameter Name="removed" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="added">To be added.</param>
        <param name="removed">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NavigationReferenceChanged">
      <MemberSignature Language="C#" Value="public virtual void NavigationReferenceChanged (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NavigationReferenceChanged(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.NavigationReferenceChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub NavigationReferenceChanged (entry As InternalEntityEntry, navigation As INavigation, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="F#" Value="abstract member NavigationReferenceChanged : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.INavigation * obj * obj -&gt; unit&#xA;override this.NavigationReferenceChanged : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.INavigation * obj * obj -&gt; unit" Usage="navigationFixer.NavigationReferenceChanged (entry, navigation, oldValue, newValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void NavigationReferenceChanged(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void NavigationReferenceChanged(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, Microsoft::EntityFrameworkCore::Metadata::INavigation ^ navigation, Platform::Object ^ oldValue, Platform::Object ^ newValue);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void NavigationReferenceChanged(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry const &amp; entry, Microsoft::EntityFrameworkCore::Metadata::INavigation const &amp; navigation, winrt::Windows::Foundation::IInspectable const &amp; oldValue, winrt::Windows::Foundation::IInspectable const &amp; newValue);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INavigationListener.NavigationReferenceChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="oldValue">To be added.</param>
        <param name="newValue">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public virtual void StateChanged (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.EntityState oldState, bool fromQuery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StateChanged(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, valuetype Microsoft.EntityFrameworkCore.EntityState oldState, bool fromQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.StateChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub StateChanged (entry As InternalEntityEntry, oldState As EntityState, fromQuery As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member StateChanged : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.EntityState * bool -&gt; unit&#xA;override this.StateChanged : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.EntityState * bool -&gt; unit" Usage="navigationFixer.StateChanged (entry, oldState, fromQuery)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StateChanged(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, Microsoft::EntityFrameworkCore::EntityState oldState, bool fromQuery);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void StateChanged(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, Microsoft::EntityFrameworkCore::EntityState oldState, bool fromQuery);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void StateChanged(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry const &amp; entry, Microsoft::EntityFrameworkCore::EntityState oldState, bool fromQuery);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityStateListener.StateChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
        <Parameter Name="oldState" Type="Microsoft.EntityFrameworkCore.EntityState" />
        <Parameter Name="fromQuery" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="oldState">To be added.</param>
        <param name="fromQuery">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public virtual void StateChanged (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.EntityState oldState, bool skipInitialFixup, bool fromQuery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StateChanged(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, valuetype Microsoft.EntityFrameworkCore.EntityState oldState, bool skipInitialFixup, bool fromQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.StateChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub StateChanged (entry As InternalEntityEntry, oldState As EntityState, skipInitialFixup As Boolean, fromQuery As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member StateChanged : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.EntityState * bool * bool -&gt; unit&#xA;override this.StateChanged : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.EntityState * bool * bool -&gt; unit" Usage="navigationFixer.StateChanged (entry, oldState, skipInitialFixup, fromQuery)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StateChanged(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, Microsoft::EntityFrameworkCore::EntityState oldState, bool skipInitialFixup, bool fromQuery);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void StateChanged(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, Microsoft::EntityFrameworkCore::EntityState oldState, bool skipInitialFixup, bool fromQuery);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void StateChanged(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry const &amp; entry, Microsoft::EntityFrameworkCore::EntityState oldState, bool skipInitialFixup, bool fromQuery);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityStateListener.StateChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
        <Parameter Name="oldState" Type="Microsoft.EntityFrameworkCore.EntityState" />
        <Parameter Name="skipInitialFixup" Type="System.Boolean" />
        <Parameter Name="fromQuery" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="oldState">To be added.</param>
        <param name="skipInitialFixup">To be added.</param>
        <param name="fromQuery">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanging">
      <MemberSignature Language="C#" Value="public virtual void StateChanging (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.EntityState newState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StateChanging(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, valuetype Microsoft.EntityFrameworkCore.EntityState newState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.StateChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub StateChanging (entry As InternalEntityEntry, newState As EntityState)" />
      <MemberSignature Language="F#" Value="abstract member StateChanging : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.EntityState -&gt; unit&#xA;override this.StateChanging : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.EntityState -&gt; unit" Usage="navigationFixer.StateChanging (entry, newState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StateChanging(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, Microsoft::EntityFrameworkCore::EntityState newState);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void StateChanging(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, Microsoft::EntityFrameworkCore::EntityState newState);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void StateChanging(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry const &amp; entry, Microsoft::EntityFrameworkCore::EntityState newState);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityStateListener.StateChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.EntityState)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
        <Parameter Name="newState" Type="Microsoft.EntityFrameworkCore.EntityState" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="newState">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackedFromQuery">
      <MemberSignature Language="C#" Value="public virtual void TrackedFromQuery (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, System.Collections.Generic.ISet&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; handledForeignKeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrackedFromQuery(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class System.Collections.Generic.ISet`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; handledForeignKeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.TrackedFromQuery(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Collections.Generic.ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TrackedFromQuery (entry As InternalEntityEntry, handledForeignKeys As ISet(Of IForeignKey))" />
      <MemberSignature Language="F#" Value="abstract member TrackedFromQuery : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * System.Collections.Generic.ISet&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; -&gt; unit&#xA;override this.TrackedFromQuery : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * System.Collections.Generic.ISet&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; -&gt; unit" Usage="navigationFixer.TrackedFromQuery (entry, handledForeignKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void TrackedFromQuery(Microsoft::EntityFrameworkCore::ChangeTracking::Internal::InternalEntityEntry ^ entry, System::Collections::Generic::ISet&lt;Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^&gt; ^ handledForeignKeys);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IQueryTrackingListener.TrackedFromQuery(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Collections.Generic.ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
        <Parameter Name="handledForeignKeys" Type="System.Collections.Generic.ISet&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="handledForeignKeys">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>