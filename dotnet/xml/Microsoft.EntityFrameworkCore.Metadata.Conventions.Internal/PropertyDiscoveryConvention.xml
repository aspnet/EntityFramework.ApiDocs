<Type Name="PropertyDiscoveryConvention" FullName="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention">
  <TypeSignature Language="C#" Value="public class PropertyDiscoveryConvention : Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IBaseTypeChangedConvention, Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IEntityTypeAddedConvention" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyDiscoveryConvention extends System.Object implements class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IBaseTypeChangedConvention, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IEntityTypeAddedConvention" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyDiscoveryConvention&#xA;Implements IBaseTypeChangedConvention, IEntityTypeAddedConvention" />
  <TypeSignature Language="F#" Value="type PropertyDiscoveryConvention = class&#xA;    interface IEntityTypeAddedConvention&#xA;    interface IBaseTypeChangedConvention" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyDiscoveryConvention : Microsoft::EntityFrameworkCore::Metadata::Conventions::Internal::IBaseTypeChangedConvention, Microsoft::EntityFrameworkCore::Metadata::Conventions::Internal::IEntityTypeAddedConvention" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class PropertyDiscoveryConvention : Microsoft::EntityFrameworkCore::Metadata::Conventions::Internal::IBaseTypeChangedConvention, Microsoft::EntityFrameworkCore::Metadata::Conventions::Internal::IEntityTypeAddedConvention" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IBaseTypeChangedConvention</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IEntityTypeAddedConvention</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyDiscoveryConvention ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyDiscoveryConvention();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; PropertyDiscoveryConvention();" />
      <MemberSignature Language="C++ WINRT" Value=" PropertyDiscoveryConvention();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyDiscoveryConvention (Microsoft.EntityFrameworkCore.Storage.ITypeMapper typeMapper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.ITypeMapper typeMapper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention.#ctor(Microsoft.EntityFrameworkCore.Storage.ITypeMapper)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeMapper As ITypeMapper)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention : Microsoft.EntityFrameworkCore.Storage.ITypeMapper -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention" Usage="new Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention typeMapper" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyDiscoveryConvention(Microsoft::EntityFrameworkCore::Storage::ITypeMapper ^ typeMapper);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; PropertyDiscoveryConvention(Microsoft::EntityFrameworkCore::Storage::ITypeMapper ^ typeMapper);" />
      <MemberSignature Language="C++ WINRT" Value=" PropertyDiscoveryConvention(Microsoft::EntityFrameworkCore::Storage::ITypeMapper const &amp; typeMapper);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeMapper" Type="Microsoft.EntityFrameworkCore.Storage.ITypeMapper" />
      </Parameters>
      <Docs>
        <param name="typeMapper">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyDiscoveryConvention (Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource typeMappingSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource typeMappingSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention.#ctor(Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeMappingSource As ITypeMappingSource)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention : Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention" Usage="new Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention typeMappingSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyDiscoveryConvention(Microsoft::EntityFrameworkCore::Storage::ITypeMappingSource ^ typeMappingSource);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; PropertyDiscoveryConvention(Microsoft::EntityFrameworkCore::Storage::ITypeMappingSource ^ typeMappingSource);" />
      <MemberSignature Language="C++ WINRT" Value=" PropertyDiscoveryConvention(Microsoft::EntityFrameworkCore::Storage::ITypeMappingSource const &amp; typeMappingSource);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeMappingSource" Type="Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" />
      </Parameters>
      <Docs>
        <param name="typeMappingSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Apply">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder Apply (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder entityTypeBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder Apply(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder entityTypeBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Apply (entityTypeBuilder As InternalEntityTypeBuilder) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member Apply : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.Apply : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="propertyDiscoveryConvention.Apply entityTypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder ^ Apply(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder ^ entityTypeBuilder);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder Apply(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder const &amp; entityTypeBuilder);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IEntityTypeAddedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Apply">
      <MemberSignature Language="C#" Value="public virtual bool Apply (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder entityTypeBuilder, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType oldBaseType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Apply(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder entityTypeBuilder, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType oldBaseType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Apply (entityTypeBuilder As InternalEntityTypeBuilder, oldBaseType As EntityType) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Apply : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; bool&#xA;override this.Apply : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; bool" Usage="propertyDiscoveryConvention.Apply (entityTypeBuilder, oldBaseType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Apply(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder ^ entityTypeBuilder, Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ oldBaseType);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual bool Apply(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder const &amp; entityTypeBuilder, Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType const &amp; oldBaseType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IBaseTypeChangedConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" />
        <Parameter Name="oldBaseType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">To be added.</param>
        <param name="oldBaseType">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCandidatePrimitiveProperty">
      <MemberSignature Language="C#" Value="protected virtual bool IsCandidatePrimitiveProperty (System.Reflection.PropertyInfo propertyInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsCandidatePrimitiveProperty(class System.Reflection.PropertyInfo propertyInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyDiscoveryConvention.IsCandidatePrimitiveProperty(System.Reflection.PropertyInfo)" />
      <MemberSignature Language="F#" Value="abstract member IsCandidatePrimitiveProperty : System.Reflection.PropertyInfo -&gt; bool&#xA;override this.IsCandidatePrimitiveProperty : System.Reflection.PropertyInfo -&gt; bool" Usage="propertyDiscoveryConvention.IsCandidatePrimitiveProperty propertyInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsCandidatePrimitiveProperty(System::Reflection::PropertyInfo ^ propertyInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="propertyInfo">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>