<Type Name="OptimisticConcurrencyTestBase&lt;TFixture&gt;" FullName="Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase&lt;TFixture&gt;">
  <TypeSignature Language="C#" Value="public abstract class OptimisticConcurrencyTestBase&lt;TFixture&gt; : Xunit.IClassFixture&lt;TFixture&gt; where TFixture : F1FixtureBasenew()" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit OptimisticConcurrencyTestBase`1&lt;.ctor (class Microsoft.EntityFrameworkCore.F1FixtureBase) TFixture&gt; extends System.Object implements class Xunit.IClassFixture`1&lt;!TFixture&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class OptimisticConcurrencyTestBase(Of TFixture)&#xA;Implements IClassFixture(Of TFixture)" />
  <TypeSignature Language="F#" Value="type OptimisticConcurrencyTestBase&lt;'Fixture (requires 'Fixture :&gt; F1FixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt; = class&#xA;    interface IClassFixture&lt;'Fixture (requires 'Fixture :&gt; F1FixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TFixture&gt;&#xA; where TFixture : F1FixtureBasegcnew()public ref class OptimisticConcurrencyTestBase abstract : Xunit::IClassFixture&lt;TFixture&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TFixture">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <BaseTypeName>Microsoft.EntityFrameworkCore.F1FixtureBase</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Xunit.IClassFixture&lt;TFixture&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TFixture">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OptimisticConcurrencyTestBase (TFixture fixture);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(!TFixture fixture) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (fixture As TFixture)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.F1FixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt; : 'Fixture -&gt; Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.F1FixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;" Usage="new Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.F1FixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt; fixture" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OptimisticConcurrencyTestBase(TFixture fixture);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; OptimisticConcurrencyTestBase(TFixture fixture);" />
      <MemberSignature Language="C++ WINRT" Value=" OptimisticConcurrencyTestBase(TFixture fixture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fixture" Type="TFixture" />
      </Parameters>
      <Docs>
        <param name="fixture">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Adding_the_same_entity_twice_results_in_DbUpdateException">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Adding_the_same_entity_twice_results_in_DbUpdateException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Adding_the_same_entity_twice_results_in_DbUpdateException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Adding_the_same_entity_twice_results_in_DbUpdateException" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Adding_the_same_entity_twice_results_in_DbUpdateException () As Task" />
      <MemberSignature Language="F#" Value="abstract member Adding_the_same_entity_twice_results_in_DbUpdateException : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Adding_the_same_entity_twice_results_in_DbUpdateException : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Adding_the_same_entity_twice_results_in_DbUpdateException " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Adding_the_same_entity_twice_results_in_DbUpdateException();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attempting_to_add_same_relationship_twice_for_many_to_many_results_in_independent_association_exception">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Attempting_to_add_same_relationship_twice_for_many_to_many_results_in_independent_association_exception ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Attempting_to_add_same_relationship_twice_for_many_to_many_results_in_independent_association_exception() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Attempting_to_add_same_relationship_twice_for_many_to_many_results_in_independent_association_exception" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Attempting_to_add_same_relationship_twice_for_many_to_many_results_in_independent_association_exception () As Task" />
      <MemberSignature Language="F#" Value="abstract member Attempting_to_add_same_relationship_twice_for_many_to_many_results_in_independent_association_exception : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Attempting_to_add_same_relationship_twice_for_many_to_many_results_in_independent_association_exception : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Attempting_to_add_same_relationship_twice_for_many_to_many_results_in_independent_association_exception " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Attempting_to_add_same_relationship_twice_for_many_to_many_results_in_independent_association_exception();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact(Skip="Many-to-many relationships are not supported without CLR class for join table.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attempting_to_delete_same_relationship_twice_for_many_to_many_results_in_independent_association_exception">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Attempting_to_delete_same_relationship_twice_for_many_to_many_results_in_independent_association_exception ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Attempting_to_delete_same_relationship_twice_for_many_to_many_results_in_independent_association_exception() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Attempting_to_delete_same_relationship_twice_for_many_to_many_results_in_independent_association_exception" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Attempting_to_delete_same_relationship_twice_for_many_to_many_results_in_independent_association_exception () As Task" />
      <MemberSignature Language="F#" Value="abstract member Attempting_to_delete_same_relationship_twice_for_many_to_many_results_in_independent_association_exception : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Attempting_to_delete_same_relationship_twice_for_many_to_many_results_in_independent_association_exception : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Attempting_to_delete_same_relationship_twice_for_many_to_many_results_in_independent_association_exception " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Attempting_to_delete_same_relationship_twice_for_many_to_many_results_in_independent_association_exception();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact(Skip="Many-to-many relationships are not supported without CLR class for join table.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calling_Reload_on_a_Deleted_entity_makes_the_entity_unchanged">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Calling_Reload_on_a_Deleted_entity_makes_the_entity_unchanged (bool async);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Calling_Reload_on_a_Deleted_entity_makes_the_entity_unchanged(bool async) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Calling_Reload_on_a_Deleted_entity_makes_the_entity_unchanged(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Calling_Reload_on_a_Deleted_entity_makes_the_entity_unchanged (async As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member Calling_Reload_on_a_Deleted_entity_makes_the_entity_unchanged : bool -&gt; System.Threading.Tasks.Task&#xA;override this.Calling_Reload_on_a_Deleted_entity_makes_the_entity_unchanged : bool -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Calling_Reload_on_a_Deleted_entity_makes_the_entity_unchanged async" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Calling_Reload_on_a_Deleted_entity_makes_the_entity_unchanged(bool async);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1/&lt;Calling_Reload_on_a_Deleted_entity_makes_the_entity_unchanged&gt;d__32))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="async" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="async">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calling_Reload_on_a_Deleted_entity_that_is_not_in_database_detaches_it">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Calling_Reload_on_a_Deleted_entity_that_is_not_in_database_detaches_it (bool async);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Calling_Reload_on_a_Deleted_entity_that_is_not_in_database_detaches_it(bool async) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Calling_Reload_on_a_Deleted_entity_that_is_not_in_database_detaches_it(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Calling_Reload_on_a_Deleted_entity_that_is_not_in_database_detaches_it (async As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member Calling_Reload_on_a_Deleted_entity_that_is_not_in_database_detaches_it : bool -&gt; System.Threading.Tasks.Task&#xA;override this.Calling_Reload_on_a_Deleted_entity_that_is_not_in_database_detaches_it : bool -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Calling_Reload_on_a_Deleted_entity_that_is_not_in_database_detaches_it async" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Calling_Reload_on_a_Deleted_entity_that_is_not_in_database_detaches_it(bool async);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1/&lt;Calling_Reload_on_a_Deleted_entity_that_is_not_in_database_detaches_it&gt;d__27))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="async" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="async">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calling_Reload_on_a_Detached_entity_makes_the_entity_unchanged">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Calling_Reload_on_a_Detached_entity_makes_the_entity_unchanged (bool async);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Calling_Reload_on_a_Detached_entity_makes_the_entity_unchanged(bool async) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Calling_Reload_on_a_Detached_entity_makes_the_entity_unchanged(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Calling_Reload_on_a_Detached_entity_makes_the_entity_unchanged (async As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member Calling_Reload_on_a_Detached_entity_makes_the_entity_unchanged : bool -&gt; System.Threading.Tasks.Task&#xA;override this.Calling_Reload_on_a_Detached_entity_makes_the_entity_unchanged : bool -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Calling_Reload_on_a_Detached_entity_makes_the_entity_unchanged async" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Calling_Reload_on_a_Detached_entity_makes_the_entity_unchanged(bool async);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1/&lt;Calling_Reload_on_a_Detached_entity_makes_the_entity_unchanged&gt;d__34))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="async" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="async">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calling_Reload_on_a_Detached_entity_that_is_not_in_database_detaches_it">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Calling_Reload_on_a_Detached_entity_that_is_not_in_database_detaches_it (bool async);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Calling_Reload_on_a_Detached_entity_that_is_not_in_database_detaches_it(bool async) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Calling_Reload_on_a_Detached_entity_that_is_not_in_database_detaches_it(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Calling_Reload_on_a_Detached_entity_that_is_not_in_database_detaches_it (async As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member Calling_Reload_on_a_Detached_entity_that_is_not_in_database_detaches_it : bool -&gt; System.Threading.Tasks.Task&#xA;override this.Calling_Reload_on_a_Detached_entity_that_is_not_in_database_detaches_it : bool -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Calling_Reload_on_a_Detached_entity_that_is_not_in_database_detaches_it async" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Calling_Reload_on_a_Detached_entity_that_is_not_in_database_detaches_it(bool async);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1/&lt;Calling_Reload_on_a_Detached_entity_that_is_not_in_database_detaches_it&gt;d__28))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="async" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="async">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calling_Reload_on_a_Modified_entity_makes_the_entity_unchanged">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Calling_Reload_on_a_Modified_entity_makes_the_entity_unchanged (bool async);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Calling_Reload_on_a_Modified_entity_makes_the_entity_unchanged(bool async) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Calling_Reload_on_a_Modified_entity_makes_the_entity_unchanged(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Calling_Reload_on_a_Modified_entity_makes_the_entity_unchanged (async As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member Calling_Reload_on_a_Modified_entity_makes_the_entity_unchanged : bool -&gt; System.Threading.Tasks.Task&#xA;override this.Calling_Reload_on_a_Modified_entity_makes_the_entity_unchanged : bool -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Calling_Reload_on_a_Modified_entity_makes_the_entity_unchanged async" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Calling_Reload_on_a_Modified_entity_makes_the_entity_unchanged(bool async);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1/&lt;Calling_Reload_on_a_Modified_entity_makes_the_entity_unchanged&gt;d__31))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="async" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="async">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calling_Reload_on_a_Modified_entity_that_is_not_in_database_detaches_it">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Calling_Reload_on_a_Modified_entity_that_is_not_in_database_detaches_it (bool async);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Calling_Reload_on_a_Modified_entity_that_is_not_in_database_detaches_it(bool async) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Calling_Reload_on_a_Modified_entity_that_is_not_in_database_detaches_it(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Calling_Reload_on_a_Modified_entity_that_is_not_in_database_detaches_it (async As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member Calling_Reload_on_a_Modified_entity_that_is_not_in_database_detaches_it : bool -&gt; System.Threading.Tasks.Task&#xA;override this.Calling_Reload_on_a_Modified_entity_that_is_not_in_database_detaches_it : bool -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Calling_Reload_on_a_Modified_entity_that_is_not_in_database_detaches_it async" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Calling_Reload_on_a_Modified_entity_that_is_not_in_database_detaches_it(bool async);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1/&lt;Calling_Reload_on_a_Modified_entity_that_is_not_in_database_detaches_it&gt;d__26))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="async" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="async">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calling_Reload_on_an__Added_entity_that_is_not_in_database_is_no_op">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Calling_Reload_on_an__Added_entity_that_is_not_in_database_is_no_op (bool async);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Calling_Reload_on_an__Added_entity_that_is_not_in_database_is_no_op(bool async) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Calling_Reload_on_an__Added_entity_that_is_not_in_database_is_no_op(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Calling_Reload_on_an__Added_entity_that_is_not_in_database_is_no_op (async As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member Calling_Reload_on_an__Added_entity_that_is_not_in_database_is_no_op : bool -&gt; System.Threading.Tasks.Task&#xA;override this.Calling_Reload_on_an__Added_entity_that_is_not_in_database_is_no_op : bool -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Calling_Reload_on_an__Added_entity_that_is_not_in_database_is_no_op async" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Calling_Reload_on_an__Added_entity_that_is_not_in_database_is_no_op(bool async);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1/&lt;Calling_Reload_on_an__Added_entity_that_is_not_in_database_is_no_op&gt;d__24))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="async" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="async">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calling_Reload_on_an_Added_entity_that_was_saved_elsewhere_makes_the_entity_unchanged">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Calling_Reload_on_an_Added_entity_that_was_saved_elsewhere_makes_the_entity_unchanged (bool async);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Calling_Reload_on_an_Added_entity_that_was_saved_elsewhere_makes_the_entity_unchanged(bool async) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Calling_Reload_on_an_Added_entity_that_was_saved_elsewhere_makes_the_entity_unchanged(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Calling_Reload_on_an_Added_entity_that_was_saved_elsewhere_makes_the_entity_unchanged (async As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member Calling_Reload_on_an_Added_entity_that_was_saved_elsewhere_makes_the_entity_unchanged : bool -&gt; System.Threading.Tasks.Task&#xA;override this.Calling_Reload_on_an_Added_entity_that_was_saved_elsewhere_makes_the_entity_unchanged : bool -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Calling_Reload_on_an_Added_entity_that_was_saved_elsewhere_makes_the_entity_unchanged async" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Calling_Reload_on_an_Added_entity_that_was_saved_elsewhere_makes_the_entity_unchanged(bool async);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1/&lt;Calling_Reload_on_an_Added_entity_that_was_saved_elsewhere_makes_the_entity_unchanged&gt;d__33))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="async" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="async">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calling_Reload_on_an_Unchanged_entity_makes_the_entity_unchanged">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Calling_Reload_on_an_Unchanged_entity_makes_the_entity_unchanged (bool async);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Calling_Reload_on_an_Unchanged_entity_makes_the_entity_unchanged(bool async) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Calling_Reload_on_an_Unchanged_entity_makes_the_entity_unchanged(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Calling_Reload_on_an_Unchanged_entity_makes_the_entity_unchanged (async As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member Calling_Reload_on_an_Unchanged_entity_makes_the_entity_unchanged : bool -&gt; System.Threading.Tasks.Task&#xA;override this.Calling_Reload_on_an_Unchanged_entity_makes_the_entity_unchanged : bool -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Calling_Reload_on_an_Unchanged_entity_makes_the_entity_unchanged async" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Calling_Reload_on_an_Unchanged_entity_makes_the_entity_unchanged(bool async);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1/&lt;Calling_Reload_on_an_Unchanged_entity_makes_the_entity_unchanged&gt;d__30))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="async" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="async">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calling_Reload_on_an_Unchanged_entity_that_is_not_in_database_detaches_it">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Calling_Reload_on_an_Unchanged_entity_that_is_not_in_database_detaches_it (bool async);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Calling_Reload_on_an_Unchanged_entity_that_is_not_in_database_detaches_it(bool async) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Calling_Reload_on_an_Unchanged_entity_that_is_not_in_database_detaches_it(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Calling_Reload_on_an_Unchanged_entity_that_is_not_in_database_detaches_it (async As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member Calling_Reload_on_an_Unchanged_entity_that_is_not_in_database_detaches_it : bool -&gt; System.Threading.Tasks.Task&#xA;override this.Calling_Reload_on_an_Unchanged_entity_that_is_not_in_database_detaches_it : bool -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Calling_Reload_on_an_Unchanged_entity_that_is_not_in_database_detaches_it async" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Calling_Reload_on_an_Unchanged_entity_that_is_not_in_database_detaches_it(bool async);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1/&lt;Calling_Reload_on_an_Unchanged_entity_that_is_not_in_database_detaches_it&gt;d__25))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="async" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="async">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Change_in_independent_association_after_change_in_different_concurrency_token_results_in_independent_association_exception">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Change_in_independent_association_after_change_in_different_concurrency_token_results_in_independent_association_exception ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Change_in_independent_association_after_change_in_different_concurrency_token_results_in_independent_association_exception() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Change_in_independent_association_after_change_in_different_concurrency_token_results_in_independent_association_exception" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Change_in_independent_association_after_change_in_different_concurrency_token_results_in_independent_association_exception () As Task" />
      <MemberSignature Language="F#" Value="abstract member Change_in_independent_association_after_change_in_different_concurrency_token_results_in_independent_association_exception : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Change_in_independent_association_after_change_in_different_concurrency_token_results_in_independent_association_exception : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Change_in_independent_association_after_change_in_different_concurrency_token_results_in_independent_association_exception " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Change_in_independent_association_after_change_in_different_concurrency_token_results_in_independent_association_exception();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Change_in_independent_association_results_in_independent_association_exception">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Change_in_independent_association_results_in_independent_association_exception ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Change_in_independent_association_results_in_independent_association_exception() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Change_in_independent_association_results_in_independent_association_exception" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Change_in_independent_association_results_in_independent_association_exception () As Task" />
      <MemberSignature Language="F#" Value="abstract member Change_in_independent_association_results_in_independent_association_exception : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Change_in_independent_association_results_in_independent_association_exception : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Change_in_independent_association_results_in_independent_association_exception " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Change_in_independent_association_results_in_independent_association_exception();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientPodiums">
      <MemberSignature Language="C#" Value="protected const int ClientPodiums;" />
      <MemberSignature Language="ILAsm" Value=".field family static literal int32 ClientPodiums" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.ClientPodiums" />
      <MemberSignature Language="VB.NET" Value="Protected Const ClientPodiums As Integer " />
      <MemberSignature Language="F#" Value="val mutable ClientPodiums : int" Usage="Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.F1FixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ClientPodiums" />
      <MemberSignature Language="C++ CLI" Value="protected: int ClientPodiums;" />
      <MemberSignature Language="C++ CX" Value="protected: int ClientPodiums;" />
      <MemberSignature Language="C++ WINRT" Value="int ClientPodiums;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concurrency_issue_where_a_complex_type_nested_member_is_the_concurrency_token_can_be_handled">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Concurrency_issue_where_a_complex_type_nested_member_is_the_concurrency_token_can_be_handled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Concurrency_issue_where_a_complex_type_nested_member_is_the_concurrency_token_can_be_handled() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Concurrency_issue_where_a_complex_type_nested_member_is_the_concurrency_token_can_be_handled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Concurrency_issue_where_a_complex_type_nested_member_is_the_concurrency_token_can_be_handled () As Task" />
      <MemberSignature Language="F#" Value="abstract member Concurrency_issue_where_a_complex_type_nested_member_is_the_concurrency_token_can_be_handled : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Concurrency_issue_where_a_complex_type_nested_member_is_the_concurrency_token_can_be_handled : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Concurrency_issue_where_a_complex_type_nested_member_is_the_concurrency_token_can_be_handled " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Concurrency_issue_where_a_complex_type_nested_member_is_the_concurrency_token_can_be_handled();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concurrency_issue_where_the_FK_is_the_concurrency_token_can_be_handled">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Concurrency_issue_where_the_FK_is_the_concurrency_token_can_be_handled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Concurrency_issue_where_the_FK_is_the_concurrency_token_can_be_handled() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Concurrency_issue_where_the_FK_is_the_concurrency_token_can_be_handled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Concurrency_issue_where_the_FK_is_the_concurrency_token_can_be_handled () As Task" />
      <MemberSignature Language="F#" Value="abstract member Concurrency_issue_where_the_FK_is_the_concurrency_token_can_be_handled : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Concurrency_issue_where_the_FK_is_the_concurrency_token_can_be_handled : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Concurrency_issue_where_the_FK_is_the_concurrency_token_can_be_handled " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Concurrency_issue_where_the_FK_is_the_concurrency_token_can_be_handled();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcurrencyTestAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task ConcurrencyTestAsync (Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt; storeChange, Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt; clientChange, Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context,Microsoft.EntityFrameworkCore.DbUpdateException&gt; resolver, Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt; validator);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task ConcurrencyTestAsync(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt; storeChange, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt; clientChange, class System.Action`2&lt;class Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context, class Microsoft.EntityFrameworkCore.DbUpdateException&gt; resolver, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt; validator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.ConcurrencyTestAsync(System.Action{Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context},System.Action{Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context},System.Action{Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context,Microsoft.EntityFrameworkCore.DbUpdateException},System.Action{Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ConcurrencyTestAsync (storeChange As Action(Of F1Context), clientChange As Action(Of F1Context), resolver As Action(Of F1Context, DbUpdateException), validator As Action(Of F1Context)) As Task" />
      <MemberSignature Language="F#" Value="abstract member ConcurrencyTestAsync : Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt; * Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt; * Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context, Microsoft.EntityFrameworkCore.DbUpdateException&gt; * Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt; -&gt; System.Threading.Tasks.Task&#xA;override this.ConcurrencyTestAsync : Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt; * Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt; * Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context, Microsoft.EntityFrameworkCore.DbUpdateException&gt; * Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt; -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.ConcurrencyTestAsync (storeChange, clientChange, resolver, validator)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Threading::Tasks::Task ^ ConcurrencyTestAsync(Action&lt;Microsoft::EntityFrameworkCore::TestModels::ConcurrencyModel::F1Context ^&gt; ^ storeChange, Action&lt;Microsoft::EntityFrameworkCore::TestModels::ConcurrencyModel::F1Context ^&gt; ^ clientChange, Action&lt;Microsoft::EntityFrameworkCore::TestModels::ConcurrencyModel::F1Context ^, Microsoft::EntityFrameworkCore::DbUpdateException ^&gt; ^ resolver, Action&lt;Microsoft::EntityFrameworkCore::TestModels::ConcurrencyModel::F1Context ^&gt; ^ validator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1/&lt;ConcurrencyTestAsync&gt;d__42))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storeChange" Type="System.Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt;" />
        <Parameter Name="clientChange" Type="System.Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt;" />
        <Parameter Name="resolver" Type="System.Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context,Microsoft.EntityFrameworkCore.DbUpdateException&gt;" />
        <Parameter Name="validator" Type="System.Action&lt;Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context&gt;" />
      </Parameters>
      <Docs>
        <param name="storeChange">To be added.</param>
        <param name="clientChange">To be added.</param>
        <param name="resolver">To be added.</param>
        <param name="validator">To be added.</param>
        <summary>
                Runs the two actions with two different contexts and calling
                SaveChanges such that storeChange will succeed and the store will reflect this change, and
                then clientChange will result in a concurrency exception.
                After the exception is caught the resolver action is called, after which SaveChanges is called
                again. Finally, a new context is created and the validator is called so that the state of
                the database at the end of the process can be validated.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateF1Context">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context CreateF1Context ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context CreateF1Context() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.CreateF1Context" />
      <MemberSignature Language="VB.NET" Value="Protected Function CreateF1Context () As F1Context" />
      <MemberSignature Language="F#" Value="member this.CreateF1Context : unit -&gt; Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context" Usage="optimisticConcurrencyTestBase.CreateF1Context " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Microsoft::EntityFrameworkCore::TestModels::ConcurrencyModel::F1Context ^ CreateF1Context();" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::TestModels::ConcurrencyModel::F1Context CreateF1Context();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.TestModels.ConcurrencyModel.F1Context</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting_the_same_entity_twice_results_in_DbUpdateConcurrencyException">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Deleting_the_same_entity_twice_results_in_DbUpdateConcurrencyException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Deleting_the_same_entity_twice_results_in_DbUpdateConcurrencyException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Deleting_the_same_entity_twice_results_in_DbUpdateConcurrencyException" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deleting_the_same_entity_twice_results_in_DbUpdateConcurrencyException () As Task" />
      <MemberSignature Language="F#" Value="abstract member Deleting_the_same_entity_twice_results_in_DbUpdateConcurrencyException : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Deleting_the_same_entity_twice_results_in_DbUpdateConcurrencyException : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Deleting_the_same_entity_twice_results_in_DbUpdateConcurrencyException " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Deleting_the_same_entity_twice_results_in_DbUpdateConcurrencyException();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException () As Task" />
      <MemberSignature Language="F#" Value="abstract member Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values () As Task" />
      <MemberSignature Language="F#" Value="abstract member Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Deleting_then_updating_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixture">
      <MemberSignature Language="C#" Value="protected TFixture Fixture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TFixture Fixture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Fixture" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Fixture As TFixture" />
      <MemberSignature Language="F#" Value="member this.Fixture : 'Fixture" Usage="Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.F1FixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.Fixture" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property TFixture Fixture { TFixture get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; property TFixture Fixture { TFixture get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TFixture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Nullable_client_side_concurrency_token_can_be_used">
      <MemberSignature Language="C#" Value="public virtual void Nullable_client_side_concurrency_token_can_be_used ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Nullable_client_side_concurrency_token_can_be_used() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Nullable_client_side_concurrency_token_can_be_used" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Nullable_client_side_concurrency_token_can_be_used ()" />
      <MemberSignature Language="F#" Value="abstract member Nullable_client_side_concurrency_token_can_be_used : unit -&gt; unit&#xA;override this.Nullable_client_side_concurrency_token_can_be_used : unit -&gt; unit" Usage="optimisticConcurrencyTestBase.Nullable_client_side_concurrency_token_can_be_used " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Nullable_client_side_concurrency_token_can_be_used();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Nullable_client_side_concurrency_token_can_be_used();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Nullable_client_side_concurrency_token_can_be_used();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveConcurrencyTokens">
      <MemberSignature Language="C#" Value="protected virtual void ResolveConcurrencyTokens (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ResolveConcurrencyTokens(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.ResolveConcurrencyTokens(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ResolveConcurrencyTokens (entry As EntityEntry)" />
      <MemberSignature Language="F#" Value="abstract member ResolveConcurrencyTokens : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry -&gt; unit&#xA;override this.ResolveConcurrencyTokens : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry -&gt; unit" Usage="optimisticConcurrencyTestBase.ResolveConcurrencyTokens entry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ResolveConcurrencyTokens(Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry ^ entry);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void ResolveConcurrencyTokens(Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry const &amp; entry);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Simple_concurrency_exception_can_be_resolved_with_client_values">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Simple_concurrency_exception_can_be_resolved_with_client_values ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Simple_concurrency_exception_can_be_resolved_with_client_values() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Simple_concurrency_exception_can_be_resolved_with_client_values" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Simple_concurrency_exception_can_be_resolved_with_client_values () As Task" />
      <MemberSignature Language="F#" Value="abstract member Simple_concurrency_exception_can_be_resolved_with_client_values : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Simple_concurrency_exception_can_be_resolved_with_client_values : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Simple_concurrency_exception_can_be_resolved_with_client_values " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Simple_concurrency_exception_can_be_resolved_with_client_values();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Simple_concurrency_exception_can_be_resolved_with_new_values">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Simple_concurrency_exception_can_be_resolved_with_new_values ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Simple_concurrency_exception_can_be_resolved_with_new_values() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Simple_concurrency_exception_can_be_resolved_with_new_values" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Simple_concurrency_exception_can_be_resolved_with_new_values () As Task" />
      <MemberSignature Language="F#" Value="abstract member Simple_concurrency_exception_can_be_resolved_with_new_values : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Simple_concurrency_exception_can_be_resolved_with_new_values : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Simple_concurrency_exception_can_be_resolved_with_new_values " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Simple_concurrency_exception_can_be_resolved_with_new_values();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Simple_concurrency_exception_can_be_resolved_with_store_values">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Simple_concurrency_exception_can_be_resolved_with_store_values ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Simple_concurrency_exception_can_be_resolved_with_store_values() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Simple_concurrency_exception_can_be_resolved_with_store_values" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Simple_concurrency_exception_can_be_resolved_with_store_values () As Task" />
      <MemberSignature Language="F#" Value="abstract member Simple_concurrency_exception_can_be_resolved_with_store_values : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Simple_concurrency_exception_can_be_resolved_with_store_values : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Simple_concurrency_exception_can_be_resolved_with_store_values " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Simple_concurrency_exception_can_be_resolved_with_store_values();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Simple_concurrency_exception_can_be_resolved_with_store_values_using_equivalent_of_accept_changes">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Simple_concurrency_exception_can_be_resolved_with_store_values_using_equivalent_of_accept_changes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Simple_concurrency_exception_can_be_resolved_with_store_values_using_equivalent_of_accept_changes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Simple_concurrency_exception_can_be_resolved_with_store_values_using_equivalent_of_accept_changes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Simple_concurrency_exception_can_be_resolved_with_store_values_using_equivalent_of_accept_changes () As Task" />
      <MemberSignature Language="F#" Value="abstract member Simple_concurrency_exception_can_be_resolved_with_store_values_using_equivalent_of_accept_changes : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Simple_concurrency_exception_can_be_resolved_with_store_values_using_equivalent_of_accept_changes : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Simple_concurrency_exception_can_be_resolved_with_store_values_using_equivalent_of_accept_changes " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Simple_concurrency_exception_can_be_resolved_with_store_values_using_equivalent_of_accept_changes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Simple_concurrency_exception_can_be_resolved_with_store_values_using_Reload">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Simple_concurrency_exception_can_be_resolved_with_store_values_using_Reload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Simple_concurrency_exception_can_be_resolved_with_store_values_using_Reload() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Simple_concurrency_exception_can_be_resolved_with_store_values_using_Reload" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Simple_concurrency_exception_can_be_resolved_with_store_values_using_Reload () As Task" />
      <MemberSignature Language="F#" Value="abstract member Simple_concurrency_exception_can_be_resolved_with_store_values_using_Reload : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Simple_concurrency_exception_can_be_resolved_with_store_values_using_Reload : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Simple_concurrency_exception_can_be_resolved_with_store_values_using_Reload " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Simple_concurrency_exception_can_be_resolved_with_store_values_using_Reload();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StorePodiums">
      <MemberSignature Language="C#" Value="protected const int StorePodiums;" />
      <MemberSignature Language="ILAsm" Value=".field family static literal int32 StorePodiums" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.StorePodiums" />
      <MemberSignature Language="VB.NET" Value="Protected Const StorePodiums As Integer " />
      <MemberSignature Language="F#" Value="val mutable StorePodiums : int" Usage="Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.F1FixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.StorePodiums" />
      <MemberSignature Language="C++ CLI" Value="protected: int StorePodiums;" />
      <MemberSignature Language="C++ CX" Value="protected: int StorePodiums;" />
      <MemberSignature Language="C++ WINRT" Value="int StorePodiums;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Two_concurrency_issues_in_one_to_many_related_entities_can_be_handled_by_dealing_with_dependent_first">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Two_concurrency_issues_in_one_to_many_related_entities_can_be_handled_by_dealing_with_dependent_first ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Two_concurrency_issues_in_one_to_many_related_entities_can_be_handled_by_dealing_with_dependent_first() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Two_concurrency_issues_in_one_to_many_related_entities_can_be_handled_by_dealing_with_dependent_first" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Two_concurrency_issues_in_one_to_many_related_entities_can_be_handled_by_dealing_with_dependent_first () As Task" />
      <MemberSignature Language="F#" Value="abstract member Two_concurrency_issues_in_one_to_many_related_entities_can_be_handled_by_dealing_with_dependent_first : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Two_concurrency_issues_in_one_to_many_related_entities_can_be_handled_by_dealing_with_dependent_first : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Two_concurrency_issues_in_one_to_many_related_entities_can_be_handled_by_dealing_with_dependent_first " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Two_concurrency_issues_in_one_to_many_related_entities_can_be_handled_by_dealing_with_dependent_first();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Two_concurrency_issues_in_one_to_one_related_entities_can_be_handled_by_dealing_with_dependent_first">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Two_concurrency_issues_in_one_to_one_related_entities_can_be_handled_by_dealing_with_dependent_first ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Two_concurrency_issues_in_one_to_one_related_entities_can_be_handled_by_dealing_with_dependent_first() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Two_concurrency_issues_in_one_to_one_related_entities_can_be_handled_by_dealing_with_dependent_first" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Two_concurrency_issues_in_one_to_one_related_entities_can_be_handled_by_dealing_with_dependent_first () As Task" />
      <MemberSignature Language="F#" Value="abstract member Two_concurrency_issues_in_one_to_one_related_entities_can_be_handled_by_dealing_with_dependent_first : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Two_concurrency_issues_in_one_to_one_related_entities_can_be_handled_by_dealing_with_dependent_first : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Two_concurrency_issues_in_one_to_one_related_entities_can_be_handled_by_dealing_with_dependent_first " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Two_concurrency_issues_in_one_to_one_related_entities_can_be_handled_by_dealing_with_dependent_first();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException () As Task" />
      <MemberSignature Language="F#" Value="abstract member Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values () As Task" />
      <MemberSignature Language="F#" Value="abstract member Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values : unit -&gt; System.Threading.Tasks.Task&#xA;override this.Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values : unit -&gt; System.Threading.Tasks.Task" Usage="optimisticConcurrencyTestBase.Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Updating_then_deleting_the_same_entity_results_in_DbUpdateConcurrencyException_which_can_be_resolved_with_store_values();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseTransaction">
      <MemberSignature Language="C#" Value="protected virtual void UseTransaction (Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade facade, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UseTransaction(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade facade, class Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.OptimisticConcurrencyTestBase`1.UseTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub UseTransaction (facade As DatabaseFacade, transaction As IDbContextTransaction)" />
      <MemberSignature Language="F#" Value="abstract member UseTransaction : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction -&gt; unit&#xA;override this.UseTransaction : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction -&gt; unit" Usage="optimisticConcurrencyTestBase.UseTransaction (facade, transaction)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void UseTransaction(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ facade, Microsoft::EntityFrameworkCore::Storage::IDbContextTransaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="facade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
        <Parameter Name="transaction" Type="Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" />
      </Parameters>
      <Docs>
        <param name="facade">To be added.</param>
        <param name="transaction">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>