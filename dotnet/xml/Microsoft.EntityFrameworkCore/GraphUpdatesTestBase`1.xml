<Type Name="GraphUpdatesTestBase&lt;TFixture&gt;" FullName="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;">
  <TypeSignature Language="C#" Value="public abstract class GraphUpdatesTestBase&lt;TFixture&gt; : Xunit.IClassFixture&lt;TFixture&gt; where TFixture : GraphUpdatesTestBase&lt;TFixture&gt;.GraphUpdatesFixtureBasenew()" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit GraphUpdatesTestBase`1&lt;.ctor (class Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/GraphUpdatesFixtureBase&lt;!TFixture&gt;) TFixture&gt; extends System.Object implements class Xunit.IClassFixture`1&lt;!TFixture&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class GraphUpdatesTestBase(Of TFixture)&#xA;Implements IClassFixture(Of TFixture)" />
  <TypeSignature Language="F#" Value="type GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt; = class&#xA;    interface IClassFixture&lt;'Fixture (requires 'Fixture :&gt; GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TFixture&gt;&#xA; where TFixture : GraphUpdatesTestBase&lt;TFixture&gt;::GraphUpdatesFixtureBasegcnew()public ref class GraphUpdatesTestBase abstract : Xunit::IClassFixture&lt;TFixture&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TFixture">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <BaseTypeName>Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+GraphUpdatesFixtureBase</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Xunit.IClassFixture&lt;TFixture&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TFixture">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GraphUpdatesTestBase (TFixture fixture);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(!TFixture fixture) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (fixture As TFixture)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt; : 'Fixture -&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;" Usage="new Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt; fixture" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; GraphUpdatesTestBase(TFixture fixture);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; GraphUpdatesTestBase(TFixture fixture);" />
      <MemberSignature Language="C++ WINRT" Value=" GraphUpdatesTestBase(TFixture fixture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fixture" Type="TFixture" />
      </Parameters>
      <Docs>
        <param name="fixture">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateContext">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.DbContext CreateContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.EntityFrameworkCore.DbContext CreateContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.CreateContext" />
      <MemberSignature Language="VB.NET" Value="Protected Function CreateContext () As DbContext" />
      <MemberSignature Language="F#" Value="member this.CreateContext : unit -&gt; Microsoft.EntityFrameworkCore.DbContext" Usage="graphUpdatesTestBase.CreateContext " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Microsoft::EntityFrameworkCore::DbContext ^ CreateContext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteWithStrategyInTransaction">
      <MemberSignature Language="C#" Value="protected virtual void ExecuteWithStrategyInTransaction (Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; testOperation, Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; nestedTestOperation1 = null, Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; nestedTestOperation2 = null, Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; nestedTestOperation3 = null);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ExecuteWithStrategyInTransaction(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContext&gt; testOperation, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContext&gt; nestedTestOperation1, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContext&gt; nestedTestOperation2, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContext&gt; nestedTestOperation3) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ExecuteWithStrategyInTransaction(System.Action{Microsoft.EntityFrameworkCore.DbContext},System.Action{Microsoft.EntityFrameworkCore.DbContext},System.Action{Microsoft.EntityFrameworkCore.DbContext},System.Action{Microsoft.EntityFrameworkCore.DbContext})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ExecuteWithStrategyInTransaction (testOperation As Action(Of DbContext), Optional nestedTestOperation1 As Action(Of DbContext) = null, Optional nestedTestOperation2 As Action(Of DbContext) = null, Optional nestedTestOperation3 As Action(Of DbContext) = null)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteWithStrategyInTransaction : Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; * Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; * Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; * Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; -&gt; unit&#xA;override this.ExecuteWithStrategyInTransaction : Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; * Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; * Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; * Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; -&gt; unit" Usage="graphUpdatesTestBase.ExecuteWithStrategyInTransaction (testOperation, nestedTestOperation1, nestedTestOperation2, nestedTestOperation3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testOperation" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt;" />
        <Parameter Name="nestedTestOperation1" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt;" />
        <Parameter Name="nestedTestOperation2" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt;" />
        <Parameter Name="nestedTestOperation3" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt;" />
      </Parameters>
      <Docs>
        <param name="testOperation">To be added.</param>
        <param name="nestedTestOperation1">To be added.</param>
        <param name="nestedTestOperation2">To be added.</param>
        <param name="nestedTestOperation3">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixture">
      <MemberSignature Language="C#" Value="protected TFixture Fixture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TFixture Fixture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Fixture" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Fixture As TFixture" />
      <MemberSignature Language="F#" Value="member this.Fixture : 'Fixture" Usage="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.Fixture" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property TFixture Fixture { TFixture get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; property TFixture Fixture { TFixture get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TFixture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTheRoot">
      <MemberSignature Language="C#" Value="protected System.Linq.Expressions.Expression&lt;Func&lt;Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.Root,bool&gt;&gt; IsTheRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/Root&lt;!TFixture&gt;, bool&gt;&gt; IsTheRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.IsTheRoot" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsTheRoot As Expression(Of Func(Of GraphUpdatesTestBase(Of TFixture).Root, Boolean))" />
      <MemberSignature Language="F#" Value="member this.IsTheRoot : System.Linq.Expressions.Expression&lt;Func&lt;Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.Root, bool&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.IsTheRoot" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Linq::Expressions::Expression&lt;Func&lt;Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::Root ^, bool&gt; ^&gt; ^ IsTheRoot { System::Linq::Expressions::Expression&lt;Func&lt;Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::Root ^, bool&gt; ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+Root,System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadOptionalAkGraph">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.Root LoadOptionalAkGraph (Microsoft.EntityFrameworkCore.DbContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/Root&lt;!TFixture&gt; LoadOptionalAkGraph(class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.LoadOptionalAkGraph(Microsoft.EntityFrameworkCore.DbContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function LoadOptionalAkGraph (context As DbContext) As GraphUpdatesTestBase(Of TFixture).Root" />
      <MemberSignature Language="F#" Value="member this.LoadOptionalAkGraph : Microsoft.EntityFrameworkCore.DbContext -&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.Root" Usage="graphUpdatesTestBase.LoadOptionalAkGraph context" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::Root ^ LoadOptionalAkGraph(Microsoft::EntityFrameworkCore::DbContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+Root</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadOptionalGraph">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.Root LoadOptionalGraph (Microsoft.EntityFrameworkCore.DbContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/Root&lt;!TFixture&gt; LoadOptionalGraph(class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.LoadOptionalGraph(Microsoft.EntityFrameworkCore.DbContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function LoadOptionalGraph (context As DbContext) As GraphUpdatesTestBase(Of TFixture).Root" />
      <MemberSignature Language="F#" Value="member this.LoadOptionalGraph : Microsoft.EntityFrameworkCore.DbContext -&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.Root" Usage="graphUpdatesTestBase.LoadOptionalGraph context" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::Root ^ LoadOptionalGraph(Microsoft::EntityFrameworkCore::DbContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+Root</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadOptionalOneToManyGraph">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.Root LoadOptionalOneToManyGraph (Microsoft.EntityFrameworkCore.DbContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/Root&lt;!TFixture&gt; LoadOptionalOneToManyGraph(class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.LoadOptionalOneToManyGraph(Microsoft.EntityFrameworkCore.DbContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function LoadOptionalOneToManyGraph (context As DbContext) As GraphUpdatesTestBase(Of TFixture).Root" />
      <MemberSignature Language="F#" Value="member this.LoadOptionalOneToManyGraph : Microsoft.EntityFrameworkCore.DbContext -&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.Root" Usage="graphUpdatesTestBase.LoadOptionalOneToManyGraph context" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::Root ^ LoadOptionalOneToManyGraph(Microsoft::EntityFrameworkCore::DbContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+Root</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadRequiredAkGraph">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.Root LoadRequiredAkGraph (Microsoft.EntityFrameworkCore.DbContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/Root&lt;!TFixture&gt; LoadRequiredAkGraph(class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.LoadRequiredAkGraph(Microsoft.EntityFrameworkCore.DbContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function LoadRequiredAkGraph (context As DbContext) As GraphUpdatesTestBase(Of TFixture).Root" />
      <MemberSignature Language="F#" Value="member this.LoadRequiredAkGraph : Microsoft.EntityFrameworkCore.DbContext -&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.Root" Usage="graphUpdatesTestBase.LoadRequiredAkGraph context" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::Root ^ LoadRequiredAkGraph(Microsoft::EntityFrameworkCore::DbContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+Root</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadRequiredCompositeGraph">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.Root LoadRequiredCompositeGraph (Microsoft.EntityFrameworkCore.DbContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/Root&lt;!TFixture&gt; LoadRequiredCompositeGraph(class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.LoadRequiredCompositeGraph(Microsoft.EntityFrameworkCore.DbContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function LoadRequiredCompositeGraph (context As DbContext) As GraphUpdatesTestBase(Of TFixture).Root" />
      <MemberSignature Language="F#" Value="member this.LoadRequiredCompositeGraph : Microsoft.EntityFrameworkCore.DbContext -&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.Root" Usage="graphUpdatesTestBase.LoadRequiredCompositeGraph context" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::Root ^ LoadRequiredCompositeGraph(Microsoft::EntityFrameworkCore::DbContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+Root</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadRequiredGraph">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.Root LoadRequiredGraph (Microsoft.EntityFrameworkCore.DbContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/Root&lt;!TFixture&gt; LoadRequiredGraph(class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.LoadRequiredGraph(Microsoft.EntityFrameworkCore.DbContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function LoadRequiredGraph (context As DbContext) As GraphUpdatesTestBase(Of TFixture).Root" />
      <MemberSignature Language="F#" Value="member this.LoadRequiredGraph : Microsoft.EntityFrameworkCore.DbContext -&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.Root" Usage="graphUpdatesTestBase.LoadRequiredGraph context" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::Root ^ LoadRequiredGraph(Microsoft::EntityFrameworkCore::DbContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+Root</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadRequiredNonPkAkGraph">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.Root LoadRequiredNonPkAkGraph (Microsoft.EntityFrameworkCore.DbContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/Root&lt;!TFixture&gt; LoadRequiredNonPkAkGraph(class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.LoadRequiredNonPkAkGraph(Microsoft.EntityFrameworkCore.DbContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function LoadRequiredNonPkAkGraph (context As DbContext) As GraphUpdatesTestBase(Of TFixture).Root" />
      <MemberSignature Language="F#" Value="member this.LoadRequiredNonPkAkGraph : Microsoft.EntityFrameworkCore.DbContext -&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.Root" Usage="graphUpdatesTestBase.LoadRequiredNonPkAkGraph context" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::Root ^ LoadRequiredNonPkAkGraph(Microsoft::EntityFrameworkCore::DbContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+Root</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadRequiredNonPkGraph">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.Root LoadRequiredNonPkGraph (Microsoft.EntityFrameworkCore.DbContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/Root&lt;!TFixture&gt; LoadRequiredNonPkGraph(class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.LoadRequiredNonPkGraph(Microsoft.EntityFrameworkCore.DbContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function LoadRequiredNonPkGraph (context As DbContext) As GraphUpdatesTestBase(Of TFixture).Root" />
      <MemberSignature Language="F#" Value="member this.LoadRequiredNonPkGraph : Microsoft.EntityFrameworkCore.DbContext -&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.Root" Usage="graphUpdatesTestBase.LoadRequiredNonPkGraph context" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::Root ^ LoadRequiredNonPkGraph(Microsoft::EntityFrameworkCore::DbContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+Root</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="No_fixup_to_Deleted_entities">
      <MemberSignature Language="C#" Value="public virtual void No_fixup_to_Deleted_entities ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void No_fixup_to_Deleted_entities() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.No_fixup_to_Deleted_entities" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub No_fixup_to_Deleted_entities ()" />
      <MemberSignature Language="F#" Value="abstract member No_fixup_to_Deleted_entities : unit -&gt; unit&#xA;override this.No_fixup_to_Deleted_entities : unit -&gt; unit" Usage="graphUpdatesTestBase.No_fixup_to_Deleted_entities " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void No_fixup_to_Deleted_entities();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void No_fixup_to_Deleted_entities();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void No_fixup_to_Deleted_entities();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional_many_to_one_dependents_are_orphaned">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Optional_many_to_one_dependents_are_orphaned ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Optional_many_to_one_dependents_are_orphaned() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Optional_many_to_one_dependents_are_orphaned" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optional_many_to_one_dependents_are_orphaned () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Optional_many_to_one_dependents_are_orphaned : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Optional_many_to_one_dependents_are_orphaned : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Optional_many_to_one_dependents_are_orphaned " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Optional_many_to_one_dependents_are_orphaned();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional_many_to_one_dependents_are_orphaned_in_store">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Optional_many_to_one_dependents_are_orphaned_in_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Optional_many_to_one_dependents_are_orphaned_in_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Optional_many_to_one_dependents_are_orphaned_in_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optional_many_to_one_dependents_are_orphaned_in_store () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Optional_many_to_one_dependents_are_orphaned_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Optional_many_to_one_dependents_are_orphaned_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Optional_many_to_one_dependents_are_orphaned_in_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Optional_many_to_one_dependents_are_orphaned_in_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional_many_to_one_dependents_are_orphaned_starting_detached">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Optional_many_to_one_dependents_are_orphaned_starting_detached ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Optional_many_to_one_dependents_are_orphaned_starting_detached() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Optional_many_to_one_dependents_are_orphaned_starting_detached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optional_many_to_one_dependents_are_orphaned_starting_detached () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Optional_many_to_one_dependents_are_orphaned_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Optional_many_to_one_dependents_are_orphaned_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Optional_many_to_one_dependents_are_orphaned_starting_detached " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Optional_many_to_one_dependents_are_orphaned_starting_detached();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional_many_to_one_dependents_with_alternate_key_are_orphaned">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Optional_many_to_one_dependents_with_alternate_key_are_orphaned ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Optional_many_to_one_dependents_with_alternate_key_are_orphaned() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Optional_many_to_one_dependents_with_alternate_key_are_orphaned" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optional_many_to_one_dependents_with_alternate_key_are_orphaned () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Optional_many_to_one_dependents_with_alternate_key_are_orphaned : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Optional_many_to_one_dependents_with_alternate_key_are_orphaned : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Optional_many_to_one_dependents_with_alternate_key_are_orphaned " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Optional_many_to_one_dependents_with_alternate_key_are_orphaned();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional_many_to_one_dependents_with_alternate_key_are_orphaned_in_store">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Optional_many_to_one_dependents_with_alternate_key_are_orphaned_in_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Optional_many_to_one_dependents_with_alternate_key_are_orphaned_in_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Optional_many_to_one_dependents_with_alternate_key_are_orphaned_in_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optional_many_to_one_dependents_with_alternate_key_are_orphaned_in_store () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Optional_many_to_one_dependents_with_alternate_key_are_orphaned_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Optional_many_to_one_dependents_with_alternate_key_are_orphaned_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Optional_many_to_one_dependents_with_alternate_key_are_orphaned_in_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Optional_many_to_one_dependents_with_alternate_key_are_orphaned_in_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional_many_to_one_dependents_with_alternate_key_are_orphaned_starting_detached">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Optional_many_to_one_dependents_with_alternate_key_are_orphaned_starting_detached ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Optional_many_to_one_dependents_with_alternate_key_are_orphaned_starting_detached() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Optional_many_to_one_dependents_with_alternate_key_are_orphaned_starting_detached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optional_many_to_one_dependents_with_alternate_key_are_orphaned_starting_detached () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Optional_many_to_one_dependents_with_alternate_key_are_orphaned_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Optional_many_to_one_dependents_with_alternate_key_are_orphaned_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Optional_many_to_one_dependents_with_alternate_key_are_orphaned_starting_detached " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Optional_many_to_one_dependents_with_alternate_key_are_orphaned_starting_detached();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional_one_to_one_are_orphaned">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Optional_one_to_one_are_orphaned ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Optional_one_to_one_are_orphaned() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Optional_one_to_one_are_orphaned" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optional_one_to_one_are_orphaned () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Optional_one_to_one_are_orphaned : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Optional_one_to_one_are_orphaned : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Optional_one_to_one_are_orphaned " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Optional_one_to_one_are_orphaned();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional_one_to_one_are_orphaned_in_store">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Optional_one_to_one_are_orphaned_in_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Optional_one_to_one_are_orphaned_in_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Optional_one_to_one_are_orphaned_in_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optional_one_to_one_are_orphaned_in_store () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Optional_one_to_one_are_orphaned_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Optional_one_to_one_are_orphaned_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Optional_one_to_one_are_orphaned_in_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Optional_one_to_one_are_orphaned_in_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional_one_to_one_are_orphaned_starting_detached">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Optional_one_to_one_are_orphaned_starting_detached ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Optional_one_to_one_are_orphaned_starting_detached() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Optional_one_to_one_are_orphaned_starting_detached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optional_one_to_one_are_orphaned_starting_detached () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Optional_one_to_one_are_orphaned_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Optional_one_to_one_are_orphaned_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Optional_one_to_one_are_orphaned_starting_detached " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Optional_one_to_one_are_orphaned_starting_detached();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional_One_to_one_relationships_are_one_to_one">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Optional_One_to_one_relationships_are_one_to_one ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Optional_One_to_one_relationships_are_one_to_one() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Optional_One_to_one_relationships_are_one_to_one" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optional_One_to_one_relationships_are_one_to_one () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Optional_One_to_one_relationships_are_one_to_one : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Optional_One_to_one_relationships_are_one_to_one : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Optional_One_to_one_relationships_are_one_to_one " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Optional_One_to_one_relationships_are_one_to_one();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional_One_to_one_with_AK_relationships_are_one_to_one">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Optional_One_to_one_with_AK_relationships_are_one_to_one ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Optional_One_to_one_with_AK_relationships_are_one_to_one() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Optional_One_to_one_with_AK_relationships_are_one_to_one" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optional_One_to_one_with_AK_relationships_are_one_to_one () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Optional_One_to_one_with_AK_relationships_are_one_to_one : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Optional_One_to_one_with_AK_relationships_are_one_to_one : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Optional_One_to_one_with_AK_relationships_are_one_to_one " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Optional_One_to_one_with_AK_relationships_are_one_to_one();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional_one_to_one_with_alternate_key_are_orphaned">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Optional_one_to_one_with_alternate_key_are_orphaned ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Optional_one_to_one_with_alternate_key_are_orphaned() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Optional_one_to_one_with_alternate_key_are_orphaned" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optional_one_to_one_with_alternate_key_are_orphaned () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Optional_one_to_one_with_alternate_key_are_orphaned : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Optional_one_to_one_with_alternate_key_are_orphaned : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Optional_one_to_one_with_alternate_key_are_orphaned " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Optional_one_to_one_with_alternate_key_are_orphaned();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional_one_to_one_with_alternate_key_are_orphaned_in_store">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Optional_one_to_one_with_alternate_key_are_orphaned_in_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Optional_one_to_one_with_alternate_key_are_orphaned_in_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Optional_one_to_one_with_alternate_key_are_orphaned_in_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optional_one_to_one_with_alternate_key_are_orphaned_in_store () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Optional_one_to_one_with_alternate_key_are_orphaned_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Optional_one_to_one_with_alternate_key_are_orphaned_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Optional_one_to_one_with_alternate_key_are_orphaned_in_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Optional_one_to_one_with_alternate_key_are_orphaned_in_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional_one_to_one_with_alternate_key_are_orphaned_starting_detached">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Optional_one_to_one_with_alternate_key_are_orphaned_starting_detached ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Optional_one_to_one_with_alternate_key_are_orphaned_starting_detached() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Optional_one_to_one_with_alternate_key_are_orphaned_starting_detached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optional_one_to_one_with_alternate_key_are_orphaned_starting_detached () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Optional_one_to_one_with_alternate_key_are_orphaned_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Optional_one_to_one_with_alternate_key_are_orphaned_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Optional_one_to_one_with_alternate_key_are_orphaned_starting_detached " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Optional_one_to_one_with_alternate_key_are_orphaned_starting_detached();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reparent_one_to_many_overlapping">
      <MemberSignature Language="C#" Value="public virtual void Reparent_one_to_many_overlapping (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingParent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reparent_one_to_many_overlapping(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Reparent_one_to_many_overlapping(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Reparent_one_to_many_overlapping : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Reparent_one_to_many_overlapping : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Reparent_one_to_many_overlapping (changeMechanism, useExistingParent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reparent_one_to_many_overlapping(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingParent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingParent">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reparent_optional_one_to_one">
      <MemberSignature Language="C#" Value="public virtual void Reparent_optional_one_to_one (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reparent_optional_one_to_one(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Reparent_optional_one_to_one(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Reparent_optional_one_to_one : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Reparent_optional_one_to_one : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Reparent_optional_one_to_one (changeMechanism, useExistingRoot)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reparent_optional_one_to_one(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingRoot);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingRoot" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingRoot">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reparent_optional_one_to_one_with_alternate_key">
      <MemberSignature Language="C#" Value="public virtual void Reparent_optional_one_to_one_with_alternate_key (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reparent_optional_one_to_one_with_alternate_key(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Reparent_optional_one_to_one_with_alternate_key(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Reparent_optional_one_to_one_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Reparent_optional_one_to_one_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Reparent_optional_one_to_one_with_alternate_key (changeMechanism, useExistingRoot)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reparent_optional_one_to_one_with_alternate_key(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingRoot);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingRoot" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingRoot">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reparent_required_non_PK_one_to_one">
      <MemberSignature Language="C#" Value="public virtual void Reparent_required_non_PK_one_to_one (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reparent_required_non_PK_one_to_one(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Reparent_required_non_PK_one_to_one(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Reparent_required_non_PK_one_to_one : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Reparent_required_non_PK_one_to_one : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Reparent_required_non_PK_one_to_one (changeMechanism, useExistingRoot)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reparent_required_non_PK_one_to_one(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingRoot);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingRoot" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingRoot">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reparent_required_non_PK_one_to_one_with_alternate_key">
      <MemberSignature Language="C#" Value="public virtual void Reparent_required_non_PK_one_to_one_with_alternate_key (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reparent_required_non_PK_one_to_one_with_alternate_key(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Reparent_required_non_PK_one_to_one_with_alternate_key(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Reparent_required_non_PK_one_to_one_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Reparent_required_non_PK_one_to_one_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Reparent_required_non_PK_one_to_one_with_alternate_key (changeMechanism, useExistingRoot)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reparent_required_non_PK_one_to_one_with_alternate_key(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingRoot);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingRoot" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingRoot">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reparent_required_one_to_one">
      <MemberSignature Language="C#" Value="public virtual void Reparent_required_one_to_one (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reparent_required_one_to_one(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Reparent_required_one_to_one(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Reparent_required_one_to_one : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Reparent_required_one_to_one : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Reparent_required_one_to_one (changeMechanism, useExistingRoot)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reparent_required_one_to_one(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingRoot);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingRoot" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingRoot">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reparent_required_one_to_one_with_alternate_key">
      <MemberSignature Language="C#" Value="public virtual void Reparent_required_one_to_one_with_alternate_key (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reparent_required_one_to_one_with_alternate_key(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Reparent_required_one_to_one_with_alternate_key(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Reparent_required_one_to_one_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Reparent_required_one_to_one_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Reparent_required_one_to_one_with_alternate_key (changeMechanism, useExistingRoot)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reparent_required_one_to_one_with_alternate_key(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingRoot);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingRoot" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingRoot">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reparent_to_different_one_to_many">
      <MemberSignature Language="C#" Value="public virtual void Reparent_to_different_one_to_many (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingParent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reparent_to_different_one_to_many(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Reparent_to_different_one_to_many(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Reparent_to_different_one_to_many : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Reparent_to_different_one_to_many : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Reparent_to_different_one_to_many (changeMechanism, useExistingParent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reparent_to_different_one_to_many(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingParent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingParent">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_many_to_one_dependents_are_cascade_deleted">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_are_cascade_deleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_are_cascade_deleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_many_to_one_dependents_are_cascade_deleted" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_many_to_one_dependents_are_cascade_deleted () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_many_to_one_dependents_are_cascade_deleted : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_many_to_one_dependents_are_cascade_deleted : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_many_to_one_dependents_are_cascade_deleted " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_many_to_one_dependents_are_cascade_deleted();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_many_to_one_dependents_are_cascade_deleted_in_store">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_are_cascade_deleted_in_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_are_cascade_deleted_in_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_many_to_one_dependents_are_cascade_deleted_in_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_many_to_one_dependents_are_cascade_deleted_in_store () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_many_to_one_dependents_are_cascade_deleted_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_many_to_one_dependents_are_cascade_deleted_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_many_to_one_dependents_are_cascade_deleted_in_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_many_to_one_dependents_are_cascade_deleted_in_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_many_to_one_dependents_are_cascade_deleted_starting_detached">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_are_cascade_deleted_starting_detached ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_are_cascade_deleted_starting_detached() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_many_to_one_dependents_are_cascade_deleted_starting_detached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_many_to_one_dependents_are_cascade_deleted_starting_detached () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_many_to_one_dependents_are_cascade_deleted_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_many_to_one_dependents_are_cascade_deleted_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_many_to_one_dependents_are_cascade_deleted_starting_detached " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_many_to_one_dependents_are_cascade_deleted_starting_detached();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_many_to_one_dependents_are_cascade_detached_when_Added">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_are_cascade_detached_when_Added ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_are_cascade_detached_when_Added() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_many_to_one_dependents_are_cascade_detached_when_Added" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_many_to_one_dependents_are_cascade_detached_when_Added () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_many_to_one_dependents_are_cascade_detached_when_Added : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_many_to_one_dependents_are_cascade_detached_when_Added : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_many_to_one_dependents_are_cascade_detached_when_Added " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_many_to_one_dependents_are_cascade_detached_when_Added();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_in_store">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_in_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_in_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_in_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_in_store () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_in_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_in_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_starting_detached">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_starting_detached ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_starting_detached() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_starting_detached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_starting_detached () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_starting_detached " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_starting_detached();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_many_to_one_dependents_with_alternate_key_are_cascade_detached_when_Added">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_with_alternate_key_are_cascade_detached_when_Added ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_many_to_one_dependents_with_alternate_key_are_cascade_detached_when_Added() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_many_to_one_dependents_with_alternate_key_are_cascade_detached_when_Added" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_many_to_one_dependents_with_alternate_key_are_cascade_detached_when_Added () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_many_to_one_dependents_with_alternate_key_are_cascade_detached_when_Added : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_many_to_one_dependents_with_alternate_key_are_cascade_detached_when_Added : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_many_to_one_dependents_with_alternate_key_are_cascade_detached_when_Added " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_many_to_one_dependents_with_alternate_key_are_cascade_detached_when_Added();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_non_PK_one_to_one_are_cascade_deleted">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_are_cascade_deleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_are_cascade_deleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_non_PK_one_to_one_are_cascade_deleted" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_non_PK_one_to_one_are_cascade_deleted () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_non_PK_one_to_one_are_cascade_deleted : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_non_PK_one_to_one_are_cascade_deleted : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_non_PK_one_to_one_are_cascade_deleted " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_non_PK_one_to_one_are_cascade_deleted();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_non_PK_one_to_one_are_cascade_deleted_in_store">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_are_cascade_deleted_in_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_are_cascade_deleted_in_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_non_PK_one_to_one_are_cascade_deleted_in_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_non_PK_one_to_one_are_cascade_deleted_in_store () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_non_PK_one_to_one_are_cascade_deleted_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_non_PK_one_to_one_are_cascade_deleted_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_non_PK_one_to_one_are_cascade_deleted_in_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_non_PK_one_to_one_are_cascade_deleted_in_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_non_PK_one_to_one_are_cascade_deleted_starting_detached">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_are_cascade_deleted_starting_detached ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_are_cascade_deleted_starting_detached() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_non_PK_one_to_one_are_cascade_deleted_starting_detached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_non_PK_one_to_one_are_cascade_deleted_starting_detached () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_non_PK_one_to_one_are_cascade_deleted_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_non_PK_one_to_one_are_cascade_deleted_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_non_PK_one_to_one_are_cascade_deleted_starting_detached " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_non_PK_one_to_one_are_cascade_deleted_starting_detached();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_non_PK_one_to_one_are_cascade_detached_when_Added">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_are_cascade_detached_when_Added ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_are_cascade_detached_when_Added() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_non_PK_one_to_one_are_cascade_detached_when_Added" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_non_PK_one_to_one_are_cascade_detached_when_Added () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_non_PK_one_to_one_are_cascade_detached_when_Added : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_non_PK_one_to_one_are_cascade_detached_when_Added : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_non_PK_one_to_one_are_cascade_detached_when_Added " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_non_PK_one_to_one_are_cascade_detached_when_Added();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_in_store">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_in_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_in_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_in_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_in_store () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_in_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_in_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_non_PK_one_to_one_with_alternate_key_are_cascade_detached_when_Added">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_with_alternate_key_are_cascade_detached_when_Added ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_non_PK_one_to_one_with_alternate_key_are_cascade_detached_when_Added() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_non_PK_one_to_one_with_alternate_key_are_cascade_detached_when_Added" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_non_PK_one_to_one_with_alternate_key_are_cascade_detached_when_Added () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_non_PK_one_to_one_with_alternate_key_are_cascade_detached_when_Added : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_non_PK_one_to_one_with_alternate_key_are_cascade_detached_when_Added : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_non_PK_one_to_one_with_alternate_key_are_cascade_detached_when_Added " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_non_PK_one_to_one_with_alternate_key_are_cascade_detached_when_Added();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_one_to_one_are_cascade_deleted">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_are_cascade_deleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_are_cascade_deleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_one_to_one_are_cascade_deleted" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_one_to_one_are_cascade_deleted () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_one_to_one_are_cascade_deleted : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_one_to_one_are_cascade_deleted : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_one_to_one_are_cascade_deleted " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_one_to_one_are_cascade_deleted();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_one_to_one_are_cascade_deleted_in_store">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_are_cascade_deleted_in_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_are_cascade_deleted_in_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_one_to_one_are_cascade_deleted_in_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_one_to_one_are_cascade_deleted_in_store () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_one_to_one_are_cascade_deleted_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_one_to_one_are_cascade_deleted_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_one_to_one_are_cascade_deleted_in_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_one_to_one_are_cascade_deleted_in_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_one_to_one_are_cascade_deleted_starting_detached">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_are_cascade_deleted_starting_detached ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_are_cascade_deleted_starting_detached() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_one_to_one_are_cascade_deleted_starting_detached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_one_to_one_are_cascade_deleted_starting_detached () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_one_to_one_are_cascade_deleted_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_one_to_one_are_cascade_deleted_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_one_to_one_are_cascade_deleted_starting_detached " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_one_to_one_are_cascade_deleted_starting_detached();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_one_to_one_are_cascade_detached_when_Added">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_are_cascade_detached_when_Added ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_are_cascade_detached_when_Added() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_one_to_one_are_cascade_detached_when_Added" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_one_to_one_are_cascade_detached_when_Added () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_one_to_one_are_cascade_detached_when_Added : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_one_to_one_are_cascade_detached_when_Added : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_one_to_one_are_cascade_detached_when_Added " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_one_to_one_are_cascade_detached_when_Added();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_One_to_one_relationships_are_one_to_one">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_One_to_one_relationships_are_one_to_one ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_One_to_one_relationships_are_one_to_one() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_One_to_one_relationships_are_one_to_one" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_One_to_one_relationships_are_one_to_one () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_One_to_one_relationships_are_one_to_one : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_One_to_one_relationships_are_one_to_one : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_One_to_one_relationships_are_one_to_one " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_One_to_one_relationships_are_one_to_one();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_One_to_one_with_AK_relationships_are_one_to_one">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_One_to_one_with_AK_relationships_are_one_to_one ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_One_to_one_with_AK_relationships_are_one_to_one() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_One_to_one_with_AK_relationships_are_one_to_one" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_One_to_one_with_AK_relationships_are_one_to_one () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_One_to_one_with_AK_relationships_are_one_to_one : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_One_to_one_with_AK_relationships_are_one_to_one : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_One_to_one_with_AK_relationships_are_one_to_one " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_One_to_one_with_AK_relationships_are_one_to_one();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_one_to_one_with_alternate_key_are_cascade_deleted">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_with_alternate_key_are_cascade_deleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_with_alternate_key_are_cascade_deleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_one_to_one_with_alternate_key_are_cascade_deleted" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_one_to_one_with_alternate_key_are_cascade_deleted () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_one_to_one_with_alternate_key_are_cascade_deleted : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_one_to_one_with_alternate_key_are_cascade_deleted : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_one_to_one_with_alternate_key_are_cascade_deleted " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_one_to_one_with_alternate_key_are_cascade_deleted();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_one_to_one_with_alternate_key_are_cascade_deleted_in_store">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_with_alternate_key_are_cascade_deleted_in_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_with_alternate_key_are_cascade_deleted_in_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_one_to_one_with_alternate_key_are_cascade_deleted_in_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_one_to_one_with_alternate_key_are_cascade_deleted_in_store () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_one_to_one_with_alternate_key_are_cascade_deleted_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_one_to_one_with_alternate_key_are_cascade_deleted_in_store : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_one_to_one_with_alternate_key_are_cascade_deleted_in_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_one_to_one_with_alternate_key_are_cascade_deleted_in_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_one_to_one_with_alternate_key_are_cascade_deleted_starting_detached();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required_one_to_one_with_alternate_key_are_cascade_detached_when_Added">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_with_alternate_key_are_cascade_detached_when_Added ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Required_one_to_one_with_alternate_key_are_cascade_detached_when_Added() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Required_one_to_one_with_alternate_key_are_cascade_detached_when_Added" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Required_one_to_one_with_alternate_key_are_cascade_detached_when_Added () As DbUpdateException" />
      <MemberSignature Language="F#" Value="abstract member Required_one_to_one_with_alternate_key_are_cascade_detached_when_Added : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Required_one_to_one_with_alternate_key_are_cascade_detached_when_Added : unit -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Required_one_to_one_with_alternate_key_are_cascade_detached_when_Added " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Required_one_to_one_with_alternate_key_are_cascade_detached_when_Added();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_changed_optional_one_to_one">
      <MemberSignature Language="C#" Value="public virtual void Save_changed_optional_one_to_one (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save_changed_optional_one_to_one(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_changed_optional_one_to_one(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Save_changed_optional_one_to_one : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Save_changed_optional_one_to_one : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Save_changed_optional_one_to_one (changeMechanism, useExistingEntities)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save_changed_optional_one_to_one(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingEntities">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_changed_optional_one_to_one_with_alternate_key">
      <MemberSignature Language="C#" Value="public virtual void Save_changed_optional_one_to_one_with_alternate_key (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save_changed_optional_one_to_one_with_alternate_key(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_changed_optional_one_to_one_with_alternate_key(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Save_changed_optional_one_to_one_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Save_changed_optional_one_to_one_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Save_changed_optional_one_to_one_with_alternate_key (changeMechanism, useExistingEntities)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save_changed_optional_one_to_one_with_alternate_key(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingEntities">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_changed_optional_one_to_one_with_alternate_key_in_store">
      <MemberSignature Language="C#" Value="public virtual void Save_changed_optional_one_to_one_with_alternate_key_in_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save_changed_optional_one_to_one_with_alternate_key_in_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_changed_optional_one_to_one_with_alternate_key_in_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Save_changed_optional_one_to_one_with_alternate_key_in_store ()" />
      <MemberSignature Language="F#" Value="abstract member Save_changed_optional_one_to_one_with_alternate_key_in_store : unit -&gt; unit&#xA;override this.Save_changed_optional_one_to_one_with_alternate_key_in_store : unit -&gt; unit" Usage="graphUpdatesTestBase.Save_changed_optional_one_to_one_with_alternate_key_in_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save_changed_optional_one_to_one_with_alternate_key_in_store();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Save_changed_optional_one_to_one_with_alternate_key_in_store();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Save_changed_optional_one_to_one_with_alternate_key_in_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_optional_many_to_one_dependents">
      <MemberSignature Language="C#" Value="public virtual void Save_optional_many_to_one_dependents (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save_optional_many_to_one_dependents(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_optional_many_to_one_dependents(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Save_optional_many_to_one_dependents : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Save_optional_many_to_one_dependents : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Save_optional_many_to_one_dependents (changeMechanism, useExistingEntities)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save_optional_many_to_one_dependents(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingEntities">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_optional_many_to_one_dependents_with_alternate_key">
      <MemberSignature Language="C#" Value="public virtual void Save_optional_many_to_one_dependents_with_alternate_key (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save_optional_many_to_one_dependents_with_alternate_key(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_optional_many_to_one_dependents_with_alternate_key(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Save_optional_many_to_one_dependents_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Save_optional_many_to_one_dependents_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Save_optional_many_to_one_dependents_with_alternate_key (changeMechanism, useExistingEntities)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save_optional_many_to_one_dependents_with_alternate_key(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingEntities">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_removed_optional_many_to_one_dependents">
      <MemberSignature Language="C#" Value="public virtual void Save_removed_optional_many_to_one_dependents (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save_removed_optional_many_to_one_dependents(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_removed_optional_many_to_one_dependents(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0})" />
      <MemberSignature Language="F#" Value="abstract member Save_removed_optional_many_to_one_dependents : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit&#xA;override this.Save_removed_optional_many_to_one_dependents : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit" Usage="graphUpdatesTestBase.Save_removed_optional_many_to_one_dependents changeMechanism" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save_removed_optional_many_to_one_dependents(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_removed_optional_many_to_one_dependents_with_alternate_key">
      <MemberSignature Language="C#" Value="public virtual void Save_removed_optional_many_to_one_dependents_with_alternate_key (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save_removed_optional_many_to_one_dependents_with_alternate_key(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_removed_optional_many_to_one_dependents_with_alternate_key(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0})" />
      <MemberSignature Language="F#" Value="abstract member Save_removed_optional_many_to_one_dependents_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit&#xA;override this.Save_removed_optional_many_to_one_dependents_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit" Usage="graphUpdatesTestBase.Save_removed_optional_many_to_one_dependents_with_alternate_key changeMechanism" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save_removed_optional_many_to_one_dependents_with_alternate_key(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_removed_required_many_to_one_dependents">
      <MemberSignature Language="C#" Value="public virtual void Save_removed_required_many_to_one_dependents (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save_removed_required_many_to_one_dependents(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_removed_required_many_to_one_dependents(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0})" />
      <MemberSignature Language="F#" Value="abstract member Save_removed_required_many_to_one_dependents : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit&#xA;override this.Save_removed_required_many_to_one_dependents : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit" Usage="graphUpdatesTestBase.Save_removed_required_many_to_one_dependents changeMechanism" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save_removed_required_many_to_one_dependents(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_removed_required_many_to_one_dependents_with_alternate_key">
      <MemberSignature Language="C#" Value="public virtual void Save_removed_required_many_to_one_dependents_with_alternate_key (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save_removed_required_many_to_one_dependents_with_alternate_key(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_removed_required_many_to_one_dependents_with_alternate_key(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0})" />
      <MemberSignature Language="F#" Value="abstract member Save_removed_required_many_to_one_dependents_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit&#xA;override this.Save_removed_required_many_to_one_dependents_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit" Usage="graphUpdatesTestBase.Save_removed_required_many_to_one_dependents_with_alternate_key changeMechanism" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save_removed_required_many_to_one_dependents_with_alternate_key(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_required_many_to_one_dependents">
      <MemberSignature Language="C#" Value="public virtual void Save_required_many_to_one_dependents (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save_required_many_to_one_dependents(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_required_many_to_one_dependents(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Save_required_many_to_one_dependents : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Save_required_many_to_one_dependents : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Save_required_many_to_one_dependents (changeMechanism, useExistingEntities)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save_required_many_to_one_dependents(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingEntities">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_required_many_to_one_dependents_with_alternate_key">
      <MemberSignature Language="C#" Value="public virtual void Save_required_many_to_one_dependents_with_alternate_key (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save_required_many_to_one_dependents_with_alternate_key(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_required_many_to_one_dependents_with_alternate_key(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Save_required_many_to_one_dependents_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Save_required_many_to_one_dependents_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Save_required_many_to_one_dependents_with_alternate_key (changeMechanism, useExistingEntities)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save_required_many_to_one_dependents_with_alternate_key(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingEntities">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_required_non_PK_one_to_one_changed_by_reference">
      <MemberSignature Language="C#" Value="public virtual void Save_required_non_PK_one_to_one_changed_by_reference (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save_required_non_PK_one_to_one_changed_by_reference(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_required_non_PK_one_to_one_changed_by_reference(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Save_required_non_PK_one_to_one_changed_by_reference : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Save_required_non_PK_one_to_one_changed_by_reference : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Save_required_non_PK_one_to_one_changed_by_reference (changeMechanism, useExistingEntities)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save_required_non_PK_one_to_one_changed_by_reference(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingEntities">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_required_non_PK_one_to_one_changed_by_reference_with_alternate_key">
      <MemberSignature Language="C#" Value="public virtual void Save_required_non_PK_one_to_one_changed_by_reference_with_alternate_key (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save_required_non_PK_one_to_one_changed_by_reference_with_alternate_key(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_required_non_PK_one_to_one_changed_by_reference_with_alternate_key(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Save_required_non_PK_one_to_one_changed_by_reference_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Save_required_non_PK_one_to_one_changed_by_reference_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Save_required_non_PK_one_to_one_changed_by_reference_with_alternate_key (changeMechanism, useExistingEntities)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save_required_non_PK_one_to_one_changed_by_reference_with_alternate_key(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingEntities">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_required_one_to_one_changed_by_reference">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Save_required_one_to_one_changed_by_reference (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Save_required_one_to_one_changed_by_reference(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_required_one_to_one_changed_by_reference(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0})" />
      <MemberSignature Language="F#" Value="abstract member Save_required_one_to_one_changed_by_reference : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Save_required_one_to_one_changed_by_reference : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Save_required_one_to_one_changed_by_reference changeMechanism" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Save_required_one_to_one_changed_by_reference(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save_required_one_to_one_changed_by_reference_with_alternate_key">
      <MemberSignature Language="C#" Value="public virtual void Save_required_one_to_one_changed_by_reference_with_alternate_key (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save_required_one_to_one_changed_by_reference_with_alternate_key(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism, bool useExistingEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Save_required_one_to_one_changed_by_reference_with_alternate_key(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0},System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Save_required_one_to_one_changed_by_reference_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit&#xA;override this.Save_required_one_to_one_changed_by_reference_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism * bool -&gt; unit" Usage="graphUpdatesTestBase.Save_required_one_to_one_changed_by_reference_with_alternate_key (changeMechanism, useExistingEntities)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save_required_one_to_one_changed_by_reference_with_alternate_key(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism, bool useExistingEntities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
        <Parameter Name="useExistingEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <param name="useExistingEntities">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sever_optional_one_to_one">
      <MemberSignature Language="C#" Value="public virtual void Sever_optional_one_to_one (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sever_optional_one_to_one(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Sever_optional_one_to_one(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0})" />
      <MemberSignature Language="F#" Value="abstract member Sever_optional_one_to_one : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit&#xA;override this.Sever_optional_one_to_one : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit" Usage="graphUpdatesTestBase.Sever_optional_one_to_one changeMechanism" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Sever_optional_one_to_one(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sever_optional_one_to_one_with_alternate_key">
      <MemberSignature Language="C#" Value="public virtual void Sever_optional_one_to_one_with_alternate_key (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sever_optional_one_to_one_with_alternate_key(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Sever_optional_one_to_one_with_alternate_key(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0})" />
      <MemberSignature Language="F#" Value="abstract member Sever_optional_one_to_one_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit&#xA;override this.Sever_optional_one_to_one_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit" Usage="graphUpdatesTestBase.Sever_optional_one_to_one_with_alternate_key changeMechanism" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Sever_optional_one_to_one_with_alternate_key(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sever_required_non_PK_one_to_one">
      <MemberSignature Language="C#" Value="public virtual void Sever_required_non_PK_one_to_one (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sever_required_non_PK_one_to_one(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Sever_required_non_PK_one_to_one(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0})" />
      <MemberSignature Language="F#" Value="abstract member Sever_required_non_PK_one_to_one : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit&#xA;override this.Sever_required_non_PK_one_to_one : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit" Usage="graphUpdatesTestBase.Sever_required_non_PK_one_to_one changeMechanism" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Sever_required_non_PK_one_to_one(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sever_required_non_PK_one_to_one_with_alternate_key">
      <MemberSignature Language="C#" Value="public virtual void Sever_required_non_PK_one_to_one_with_alternate_key (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sever_required_non_PK_one_to_one_with_alternate_key(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Sever_required_non_PK_one_to_one_with_alternate_key(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0})" />
      <MemberSignature Language="F#" Value="abstract member Sever_required_non_PK_one_to_one_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit&#xA;override this.Sever_required_non_PK_one_to_one_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit" Usage="graphUpdatesTestBase.Sever_required_non_PK_one_to_one_with_alternate_key changeMechanism" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Sever_required_non_PK_one_to_one_with_alternate_key(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sever_required_one_to_one">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbUpdateException Sever_required_one_to_one (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbUpdateException Sever_required_one_to_one(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Sever_required_one_to_one(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0})" />
      <MemberSignature Language="F#" Value="abstract member Sever_required_one_to_one : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; Microsoft.EntityFrameworkCore.DbUpdateException&#xA;override this.Sever_required_one_to_one : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; Microsoft.EntityFrameworkCore.DbUpdateException" Usage="graphUpdatesTestBase.Sever_required_one_to_one changeMechanism" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::DbUpdateException ^ Sever_required_one_to_one(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbUpdateException</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sever_required_one_to_one_with_alternate_key">
      <MemberSignature Language="C#" Value="public virtual void Sever_required_one_to_one_with_alternate_key (Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;.ChangeMechanism changeMechanism);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sever_required_one_to_one_with_alternate_key(valuetype Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1/ChangeMechanism&lt;!TFixture&gt; changeMechanism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Sever_required_one_to_one_with_alternate_key(Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.ChangeMechanism{`0})" />
      <MemberSignature Language="F#" Value="abstract member Sever_required_one_to_one_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit&#xA;override this.Sever_required_one_to_one_with_alternate_key : Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;'Fixture&gt;.GraphUpdatesFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.ChangeMechanism -&gt; unit" Usage="graphUpdatesTestBase.Sever_required_one_to_one_with_alternate_key changeMechanism" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Sever_required_one_to_one_with_alternate_key(Microsoft::EntityFrameworkCore::GraphUpdatesTestBase&lt;TFixture&gt;::ChangeMechanism changeMechanism);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalTheory</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeMechanism" Type="Microsoft.EntityFrameworkCore.GraphUpdatesTestBase&lt;TFixture&gt;+ChangeMechanism" />
      </Parameters>
      <Docs>
        <param name="changeMechanism">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sometimes_not_calling_DetectChanges_when_required_does_not_throw_for_null_ref">
      <MemberSignature Language="C#" Value="public virtual void Sometimes_not_calling_DetectChanges_when_required_does_not_throw_for_null_ref ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sometimes_not_calling_DetectChanges_when_required_does_not_throw_for_null_ref() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.Sometimes_not_calling_DetectChanges_when_required_does_not_throw_for_null_ref" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Sometimes_not_calling_DetectChanges_when_required_does_not_throw_for_null_ref ()" />
      <MemberSignature Language="F#" Value="abstract member Sometimes_not_calling_DetectChanges_when_required_does_not_throw_for_null_ref : unit -&gt; unit&#xA;override this.Sometimes_not_calling_DetectChanges_when_required_does_not_throw_for_null_ref : unit -&gt; unit" Usage="graphUpdatesTestBase.Sometimes_not_calling_DetectChanges_when_required_does_not_throw_for_null_ref " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Sometimes_not_calling_DetectChanges_when_required_does_not_throw_for_null_ref();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Sometimes_not_calling_DetectChanges_when_required_does_not_throw_for_null_ref();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Sometimes_not_calling_DetectChanges_when_required_does_not_throw_for_null_ref();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.EntityFrameworkCore.TestUtilities.Xunit.ConditionalFact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseTransaction">
      <MemberSignature Language="C#" Value="protected virtual void UseTransaction (Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade facade, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UseTransaction(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade facade, class Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.GraphUpdatesTestBase`1.UseTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub UseTransaction (facade As DatabaseFacade, transaction As IDbContextTransaction)" />
      <MemberSignature Language="F#" Value="abstract member UseTransaction : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction -&gt; unit&#xA;override this.UseTransaction : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction -&gt; unit" Usage="graphUpdatesTestBase.UseTransaction (facade, transaction)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void UseTransaction(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ facade, Microsoft::EntityFrameworkCore::Storage::IDbContextTransaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="facade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
        <Parameter Name="transaction" Type="Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" />
      </Parameters>
      <Docs>
        <param name="facade">To be added.</param>
        <param name="transaction">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>