<Type Name="WithConstructorsTestBase&lt;TFixture&gt;+LazyPcBlog" FullName="Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;TFixture&gt;+LazyPcBlog">
  <TypeSignature Language="C#" Value="protected class WithConstructorsTestBase&lt;TFixture&gt;.LazyPcBlog where TFixture : WithConstructorsTestBase&lt;TFixture&gt;.WithConstructorsFixtureBasenew()" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit WithConstructorsTestBase`1/LazyPcBlog&lt;.ctor (class Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1/WithConstructorsFixtureBase&lt;!TFixture&gt;) TFixture&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1.LazyPcBlog" />
  <TypeSignature Language="VB.NET" Value="Protected Class WithConstructorsTestBase(Of TFixture).LazyPcBlog" />
  <TypeSignature Language="C++ CLI" Value="protected:  where TFixture : WithConstructorsTestBase&lt;TFixture&gt;::WithConstructorsFixtureBasegcnew()ref class WithConstructorsTestBase&lt;TFixture&gt;::LazyPcBlog" />
  <TypeSignature Language="C++ CX" Value="protected: ref class WithConstructorsTestBase&lt;TFixture&gt;::LazyPcBlog" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TFixture">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <BaseTypeName>Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;TFixture&gt;+WithConstructorsFixtureBase</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LazyPcBlog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1.LazyPcBlog.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LazyPcBlog();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; LazyPcBlog();" />
      <MemberSignature Language="C++ WINRT" Value=" LazyPcBlog();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPost">
      <MemberSignature Language="C#" Value="public void AddPost (Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;TFixture&gt;.LazyPcPost post);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPost(class Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1/LazyPcPost&lt;!TFixture&gt; post) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1.LazyPcBlog.AddPost(Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1.LazyPcPost{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPost (post As WithConstructorsTestBase(Of TFixture).LazyPcPost)" />
      <MemberSignature Language="F#" Value="member this.AddPost : Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture&gt;.WithConstructorsFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.LazyPcPost -&gt; unit" Usage="lazyPcBlog.AddPost post" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPost(Microsoft::EntityFrameworkCore::WithConstructorsTestBase&lt;TFixture&gt;::LazyPcPost ^ post);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; void AddPost(Microsoft::EntityFrameworkCore::WithConstructorsTestBase&lt;TFixture&gt;::LazyPcPost ^ post);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="post" Type="Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;TFixture&gt;+LazyPcPost" />
      </Parameters>
      <Docs>
        <param name="post">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1.LazyPcBlog.Id" />
      <MemberSignature Language="VB.NET" Value="Public Property Id As Integer" />
      <MemberSignature Language="F#" Value="member this.Id : int with get, set" Usage="Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture&gt;.WithConstructorsFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.LazyPcBlog.Id" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); void set(int value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property int Id { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LazyPcPosts">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;TFixture&gt;.LazyPcPost&gt; LazyPcPosts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1/LazyPcPost&lt;!TFixture&gt;&gt; LazyPcPosts" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1.LazyPcBlog.LazyPcPosts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LazyPcPosts As IEnumerable(Of WithConstructorsTestBase(Of TFixture).LazyPcPost)" />
      <MemberSignature Language="F#" Value="member this.LazyPcPosts : seq&lt;Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture&gt;.LazyPcPost&gt;" Usage="Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture&gt;.WithConstructorsFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.LazyPcBlog.LazyPcPosts" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::WithConstructorsTestBase&lt;TFixture&gt;::LazyPcPost ^&gt; ^ LazyPcPosts { System::Collections::Generic::IEnumerable&lt;Microsoft::EntityFrameworkCore::WithConstructorsTestBase&lt;TFixture&gt;::LazyPcPost ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;TFixture&gt;+LazyPcPost&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoaderSetterCalled">
      <MemberSignature Language="C#" Value="public bool LoaderSetterCalled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LoaderSetterCalled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1.LazyPcBlog.LoaderSetterCalled" />
      <MemberSignature Language="VB.NET" Value="Public Property LoaderSetterCalled As Boolean" />
      <MemberSignature Language="F#" Value="member this.LoaderSetterCalled : bool with get, set" Usage="Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture&gt;.WithConstructorsFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.LazyPcBlog.LoaderSetterCalled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LoaderSetterCalled { bool get(); void set(bool value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool LoaderSetterCalled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DataAnnotations.Schema.NotMapped</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>