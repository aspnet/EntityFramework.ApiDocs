<Type Name="ModelBuilder" FullName="Microsoft.EntityFrameworkCore.ModelBuilder">
  <TypeSignature Language="C#" Value="public class ModelBuilder : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ModelBuilder extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class ModelBuilder&#xA;Implements IInfrastructure(Of InternalModelBuilder)" />
  <TypeSignature Language="F#" Value="type ModelBuilder = class&#xA;    interface IInfrastructure&lt;InternalModelBuilder&gt;" />
  <TypeSignature Language="C++ CLI" Value="public ref class ModelBuilder : Microsoft::EntityFrameworkCore::Infrastructure::IInfrastructure&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::InternalModelBuilder ^&gt;" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class ModelBuilder : Microsoft::EntityFrameworkCore::Infrastructure::IInfrastructure&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::InternalModelBuilder&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    Provides a simple API surface for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" /> that defines the shape of your
                    entities, the relationships between them, and how they map to the database.
                </para>
      <para>
                    You can use <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> to construct a model for a context by overriding
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" /> on your derived context. Alternatively you can create the
                    model externally and set it on a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> instance that is passed to the context constructor.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ModelBuilder (Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet conventions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet conventions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (conventions As ConventionSet)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ModelBuilder : Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="new Microsoft.EntityFrameworkCore.ModelBuilder conventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ModelBuilder(Microsoft::EntityFrameworkCore::Metadata::Conventions::ConventionSet ^ conventions);" />
      <MemberSignature Language="C++ WINRT" Value=" ModelBuilder(Microsoft::EntityFrameworkCore::Metadata::Conventions::ConventionSet const &amp; conventions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="conventions" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" />
      </Parameters>
      <Docs>
        <param name="conventions"> The conventions to be applied to the model. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> class that will
                apply a set of conventions.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyConfiguration&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder ApplyConfiguration&lt;TEntity&gt; (Microsoft.EntityFrameworkCore.IEntityTypeConfiguration&lt;TEntity&gt; configuration) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder ApplyConfiguration&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.IEntityTypeConfiguration`1&lt;!!TEntity&gt; configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.ApplyConfiguration``1(Microsoft.EntityFrameworkCore.IEntityTypeConfiguration{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ApplyConfiguration(Of TEntity As Class) (configuration As IEntityTypeConfiguration(Of TEntity)) As ModelBuilder" />
      <MemberSignature Language="F#" Value="abstract member ApplyConfiguration : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration&lt;'Entity (requires 'Entity : null)&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder (requires 'Entity : null)&#xA;override this.ApplyConfiguration : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration&lt;'Entity (requires 'Entity : null)&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder (requires 'Entity : null)" Usage="modelBuilder.ApplyConfiguration configuration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class virtual Microsoft::EntityFrameworkCore::ModelBuilder ^ ApplyConfiguration(Microsoft::EntityFrameworkCore::IEntityTypeConfiguration&lt;TEntity&gt; ^ configuration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="configuration" Type="Microsoft.EntityFrameworkCore.IEntityTypeConfiguration&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The entity type to be configured. </typeparam>
        <param name="configuration"> The configuration to be applied. </param>
        <summary>
                Applies configuration that is defined in an <see cref="T:Microsoft.EntityFrameworkCore.IEntityTypeConfiguration`1" /> instance.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyConfiguration&lt;TQuery&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder ApplyConfiguration&lt;TQuery&gt; (Microsoft.EntityFrameworkCore.IQueryTypeConfiguration&lt;TQuery&gt; configuration) where TQuery : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder ApplyConfiguration&lt;class TQuery&gt;(class Microsoft.EntityFrameworkCore.IQueryTypeConfiguration`1&lt;!!TQuery&gt; configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.ApplyConfiguration``1(Microsoft.EntityFrameworkCore.IQueryTypeConfiguration{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ApplyConfiguration(Of TQuery As Class) (configuration As IQueryTypeConfiguration(Of TQuery)) As ModelBuilder" />
      <MemberSignature Language="F#" Value="abstract member ApplyConfiguration : Microsoft.EntityFrameworkCore.IQueryTypeConfiguration&lt;'Query (requires 'Query : null)&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder (requires 'Query : null)&#xA;override this.ApplyConfiguration : Microsoft.EntityFrameworkCore.IQueryTypeConfiguration&lt;'Query (requires 'Query : null)&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder (requires 'Query : null)" Usage="modelBuilder.ApplyConfiguration configuration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TQuery&gt;&#xA; where TQuery : class virtual Microsoft::EntityFrameworkCore::ModelBuilder ^ ApplyConfiguration(Microsoft::EntityFrameworkCore::IQueryTypeConfiguration&lt;TQuery&gt; ^ configuration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TQuery">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="configuration" Type="Microsoft.EntityFrameworkCore.IQueryTypeConfiguration&lt;TQuery&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TQuery"> The query type to be configured. </typeparam>
        <param name="configuration"> The configuration to be applied. </param>
        <summary>
                Applies configuration that is defined in an <see cref="T:Microsoft.EntityFrameworkCore.IQueryTypeConfiguration`1" /> instance.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder Entity (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder Entity(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Entity (name As String) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member Entity : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&#xA;override this.Entity : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="modelBuilder.Entity name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ Entity(System::String ^ name);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder Entity(std::wstring const &amp; name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the entity type to be configured. </param>
        <summary>
                Returns an object that can be used to configure a given entity type in the model.
                If an entity type with the provided name is not already part of the model,
                a new entity type that does not have a corresponding CLR type will be added to the model.
            </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder Entity (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder Entity(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member Entity : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&#xA;override this.Entity : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="modelBuilder.Entity type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^ Entity(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"> The entity type to be configured. </param>
        <summary>
                Returns an object that can be used to configure a given entity type in the model.
                If the entity type is not already part of the model, it will be added to the model.
            </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder Entity (string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder Entity(string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Entity (name As String, buildAction As Action(Of EntityTypeBuilder)) As ModelBuilder" />
      <MemberSignature Language="F#" Value="abstract member Entity : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder&#xA;override this.Entity : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="modelBuilder.Entity (name, buildAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::ModelBuilder ^ Entity(System::String ^ name, Action&lt;Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^&gt; ^ buildAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the entity type to be configured. </param>
        <param name="buildAction"> An action that performs configuration of the entity type. </param>
        <summary>
          <para>
                    Performs configuration of a given entity type in the model.
                    If an entity type with the provided name is not already part of the model,
                    a new entity type that does not have a corresponding CLR type will be added to the model.
                </para>
          <para>
                    This overload allows configuration of the entity type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.String)" />. This allows additional
                    configuration at the model level to be chained after configuration for the entity type.
                </para>
        </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder Entity (Type type, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder Entity(class System.Type type, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.Type,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder})" />
      <MemberSignature Language="F#" Value="abstract member Entity : Type * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder&#xA;override this.Entity : Type * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="modelBuilder.Entity (type, buildAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::ModelBuilder ^ Entity(Type ^ type, Action&lt;Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder ^&gt; ^ buildAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="type"> The entity type to be configured. </param>
        <param name="buildAction"> An action that performs configuration of the entity type. </param>
        <summary>
          <para>
                    Performs configuration of a given entity type in the model. If the entity type is not already part
                    of the model, it will be added to the model.
                </para>
          <para>
                    This overload allows configuration of the entity type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1" />. This allows additional
                    configuration at the model level to be chained after configuration for the entity type.
                </para>
        </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; Entity&lt;TEntity&gt; () where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; Entity&lt;class TEntity&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Entity(Of TEntity As Class) () As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member Entity : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)&#xA;override this.Entity : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="modelBuilder.Entity " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class virtual Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder&lt;TEntity&gt; ^ Entity();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEntity"> The entity type to be configured. </typeparam>
        <summary>
                Returns an object that can be used to configure a given entity type in the model.
                If the entity type is not already part of the model, it will be added to the model.
            </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder Entity&lt;TEntity&gt; (Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder Entity&lt;class TEntity&gt;(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1(System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Entity(Of TEntity As Class) (buildAction As Action(Of EntityTypeBuilder(Of TEntity))) As ModelBuilder" />
      <MemberSignature Language="F#" Value="abstract member Entity : Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder (requires 'Entity : null)&#xA;override this.Entity : Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder (requires 'Entity : null)" Usage="modelBuilder.Entity buildAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class virtual Microsoft::EntityFrameworkCore::ModelBuilder ^ Entity(Action&lt;Microsoft::EntityFrameworkCore::Metadata::Builders::EntityTypeBuilder&lt;TEntity&gt; ^&gt; ^ buildAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The entity type to be configured. </typeparam>
        <param name="buildAction"> An action that performs configuration of the entity type. </param>
        <summary>
          <para>
                    Performs configuration of a given entity type in the model. If the entity type is not already part
                    of the model, it will be added to the model.
                </para>
          <para>
                    This overload allows configuration of the entity type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1" />. This allows additional
                    configuration at the model level to be chained after configuration for the entity type.
                </para>
        </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="modelBuilder.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override bool Equals(Platform::Object ^ obj);" />
      <MemberSignature Language="C++ WINRT" Value=" override bool Equals(winrt::Windows::Foundation::IInspectable const &amp; obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"> The object to compare with the current object. </param>
        <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
        <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="modelBuilder.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="C++ WINRT" Value=" override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Serves as the default hash function.
            </summary>
        <returns> A hash code for the current object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder HasAnnotation (string annotation, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder HasAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.HasAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAnnotation (annotation As String, value As Object) As ModelBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.ModelBuilder&#xA;override this.HasAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="modelBuilder.HasAnnotation (annotation, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::ModelBuilder ^ HasAnnotation(System::String ^ annotation, System::Object ^ value);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::ModelBuilder HasAnnotation(std::wstring const &amp; annotation, winrt::Windows::Foundation::IInspectable const &amp; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation"> The key of the annotation to be added or updated. </param>
        <param name="value"> The value to be stored in the annotation. </param>
        <summary>
                Adds or updates an annotation on the model. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns> The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder HasChangeTrackingStrategy(valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
      <MemberSignature Language="F#" Value="abstract member HasChangeTrackingStrategy : Microsoft.EntityFrameworkCore.ChangeTrackingStrategy -&gt; Microsoft.EntityFrameworkCore.ModelBuilder&#xA;override this.HasChangeTrackingStrategy : Microsoft.EntityFrameworkCore.ChangeTrackingStrategy -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="modelBuilder.HasChangeTrackingStrategy changeTrackingStrategy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::ModelBuilder ^ HasChangeTrackingStrategy(Microsoft::EntityFrameworkCore::ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::ModelBuilder HasChangeTrackingStrategy(Microsoft::EntityFrameworkCore::ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy"> The change tracking strategy to be used. </param>
        <summary>
                Configures the default <see cref="T:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" /> to be used for this model.
                This strategy indicates how the context detects changes to properties for an instance of an entity type.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder HasChangeTrackingStrategy(valuetype Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)" />
      <MemberSignature Language="F#" Value="abstract member HasChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy -&gt; Microsoft.EntityFrameworkCore.ModelBuilder&#xA;override this.HasChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="modelBuilder.HasChangeTrackingStrategy changeTrackingStrategy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::ModelBuilder ^ HasChangeTrackingStrategy(Microsoft::EntityFrameworkCore::Metadata::ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::ModelBuilder HasChangeTrackingStrategy(Microsoft::EntityFrameworkCore::Metadata::ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy"> The change tracking strategy to be used. </param>
        <summary>
                Configures the default <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy" /> to be used for this model.
                This strategy indicates how the context detects changes to properties for an instance of an entity type.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder Ignore (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder Ignore(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Ignore(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member Ignore : Type -&gt; Microsoft.EntityFrameworkCore.ModelBuilder&#xA;override this.Ignore : Type -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="modelBuilder.Ignore type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::ModelBuilder ^ Ignore(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"> The entity type to be removed from the model. </param>
        <summary>
                Excludes the given entity type from the model. This method is typically used to remove types from
                the model that were added by convention.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder Ignore&lt;TEntity&gt; () where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder Ignore&lt;class TEntity&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Ignore``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Ignore(Of TEntity As Class) () As ModelBuilder" />
      <MemberSignature Language="F#" Value="abstract member Ignore : unit -&gt; Microsoft.EntityFrameworkCore.ModelBuilder (requires 'Entity : null)&#xA;override this.Ignore : unit -&gt; Microsoft.EntityFrameworkCore.ModelBuilder (requires 'Entity : null)" Usage="modelBuilder.Ignore " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class virtual Microsoft::EntityFrameworkCore::ModelBuilder ^ Ignore();" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename TEntity&gt;&#xA; where TEntity : class virtual Microsoft::EntityFrameworkCore::ModelBuilder Ignore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEntity"> The  entity type to be removed from the model. </typeparam>
        <summary>
                Excludes the given entity type from the model. This method is typically used to remove types from
                the model that were added by convention.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ModelBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#EntityFrameworkCore#Metadata#Internal#InternalModelBuilder&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As InternalModelBuilder Implements IInfrastructure(Of InternalModelBuilder).Instance" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.ModelBuilder.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;.Instance" />
      <MemberSignature Language="C++ CLI" Value="property Microsoft::EntityFrameworkCore::Metadata::Internal::InternalModelBuilder ^ Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;.Instance { Microsoft::EntityFrameworkCore::Metadata::Internal::InternalModelBuilder ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    The internal <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> being used to configure this model.
                </para>
          <para>
                    This property is intended for use by extension methods to configure the model. It is not intended to be used in
                    application code.
                </para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Model">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IMutableModel Model { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IMutableModel Model" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ModelBuilder.Model" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Model As IMutableModel" />
      <MemberSignature Language="F#" Value="member this.Model : Microsoft.EntityFrameworkCore.Metadata.IMutableModel" Usage="Microsoft.EntityFrameworkCore.ModelBuilder.Model" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ Model { Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ Model { Microsoft::EntityFrameworkCore::Metadata::IMutableModel ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The model being configured.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Owned">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder Owned (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder Owned(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Owned(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member Owned : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder&#xA;override this.Owned : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder" Usage="modelBuilder.Owned type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::OwnedEntityTypeBuilder ^ Owned(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"> The entity type to be configured. </param>
        <summary>
                Marks an entity type as owned. All references to this type will be configured as
                separate owned type instances.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Owned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder&lt;T&gt; Owned&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder`1&lt;!!T&gt; Owned&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Owned``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Owned(Of T As Class) () As OwnedEntityTypeBuilder(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Owned : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder&lt;'T (requires 'T : null)&gt; (requires 'T : null)&#xA;override this.Owned : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="modelBuilder.Owned " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class virtual Microsoft::EntityFrameworkCore::Metadata::Builders::OwnedEntityTypeBuilder&lt;T&gt; ^ Owned();" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename T&gt;&#xA; where T : class virtual Microsoft::EntityFrameworkCore::Metadata::Builders::OwnedEntityTypeBuilder&lt;T&gt; Owned();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"> The entity type to be configured. </typeparam>
        <summary>
                Marks an entity type as owned. All references to this type will be configured as
                separate owned type instances.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder Query (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder Query(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Query(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member Query : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&#xA;override this.Query : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" Usage="modelBuilder.Query type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder ^ Query(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"> The query type to be configured. </param>
        <summary>
                Returns an object that can be used to configure a given query type in the model.
                If the query type is not already part of the model, it will be added to the model.
            </summary>
        <returns> An object that can be used to configure the query type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder Query (Type type, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder Query(class System.Type type, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Query(System.Type,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder})" />
      <MemberSignature Language="F#" Value="abstract member Query : Type * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder&#xA;override this.Query : Type * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="modelBuilder.Query (type, buildAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::ModelBuilder ^ Query(Type ^ type, Action&lt;Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder ^&gt; ^ buildAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="type"> The query type to be configured. </param>
        <param name="buildAction"> An action that performs configuration of the query type. </param>
        <summary>
          <para>
                    Performs configuration of a given query type in the model. If the query type is not already part
                    of the model, it will be added to the model.
                </para>
          <para>
                    This overload allows configuration of the query type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Query``1" />. This allows additional
                    configuration at the model level to be chained after configuration for the query type.
                </para>
        </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Query&lt;TQuery&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt; Query&lt;TQuery&gt; () where TQuery : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1&lt;!!TQuery&gt; Query&lt;class TQuery&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Query``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Query(Of TQuery As Class) () As QueryTypeBuilder(Of TQuery)" />
      <MemberSignature Language="F#" Value="abstract member Query : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;'Query (requires 'Query : null)&gt; (requires 'Query : null)&#xA;override this.Query : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;'Query (requires 'Query : null)&gt; (requires 'Query : null)" Usage="modelBuilder.Query " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TQuery&gt;&#xA; where TQuery : class virtual Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder&lt;TQuery&gt; ^ Query();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TQuery">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TQuery"> The query type to be configured. </typeparam>
        <summary>
                Returns an object that can be used to configure a given query type in the model.
                If the query type is not already part of the model, it will be added to the model.
            </summary>
        <returns> An object that can be used to configure the query type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Query&lt;TQuery&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder Query&lt;TQuery&gt; (Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt;&gt; buildAction) where TQuery : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder Query&lt;class TQuery&gt;(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1&lt;!!TQuery&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Query``1(System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Query(Of TQuery As Class) (buildAction As Action(Of QueryTypeBuilder(Of TQuery))) As ModelBuilder" />
      <MemberSignature Language="F#" Value="abstract member Query : Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;'Query&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder (requires 'Query : null)&#xA;override this.Query : Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;'Query&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.ModelBuilder (requires 'Query : null)" Usage="modelBuilder.Query buildAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TQuery&gt;&#xA; where TQuery : class virtual Microsoft::EntityFrameworkCore::ModelBuilder ^ Query(Action&lt;Microsoft::EntityFrameworkCore::Metadata::Builders::QueryTypeBuilder&lt;TQuery&gt; ^&gt; ^ buildAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TQuery">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TQuery"> The query type to be configured. </typeparam>
        <param name="buildAction"> An action that performs configuration of the query type. </param>
        <summary>
          <para>
                    Performs configuration of a given query type in the model. If the query type is not already part
                    of the model, it will be added to the model.
                </para>
          <para>
                    This overload allows configuration of the query type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Query``1" />. This allows additional
                    configuration at the model level to be chained after configuration for the query type.
                </para>
        </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="modelBuilder.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override Platform::String ^ ToString();" />
      <MemberSignature Language="C++ WINRT" Value=" override std::wstring ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a string that represents the current object.
            </summary>
        <returns> A string that represents the current object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder UsePropertyAccessMode (Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)" />
      <MemberSignature Language="F#" Value="abstract member UsePropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.ModelBuilder&#xA;override this.UsePropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="modelBuilder.UsePropertyAccessMode propertyAccessMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::ModelBuilder ^ UsePropertyAccessMode(Microsoft::EntityFrameworkCore::Metadata::PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::ModelBuilder UsePropertyAccessMode(Microsoft::EntityFrameworkCore::Metadata::PropertyAccessMode propertyAccessMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> to use for properties of this model. </param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> to use for all properties of this entity type.
                </para>
          <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method witll change that behavior
                    for all properties in the model as described in the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> enum.
                </para>
        </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />
      <MemberSignature Language="F#" Value="abstract member UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.ModelBuilder&#xA;override this.UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="modelBuilder.UsePropertyAccessMode propertyAccessMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::ModelBuilder ^ UsePropertyAccessMode(Microsoft::EntityFrameworkCore::PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::ModelBuilder UsePropertyAccessMode(Microsoft::EntityFrameworkCore::PropertyAccessMode propertyAccessMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this model. </param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for all properties of this entity type.
                </para>
          <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method will change that behavior
                    for all properties in the model as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
        </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>