<Type Name="WithConstructorsTestBase&lt;TFixture&gt;+LazyFieldPost" FullName="Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;TFixture&gt;+LazyFieldPost">
  <TypeSignature Language="C#" Value="protected class WithConstructorsTestBase&lt;TFixture&gt;.LazyFieldPost where TFixture : WithConstructorsTestBase&lt;TFixture&gt;.WithConstructorsFixtureBasenew()" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit WithConstructorsTestBase`1/LazyFieldPost&lt;.ctor (class Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1/WithConstructorsFixtureBase&lt;!TFixture&gt;) TFixture&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1.LazyFieldPost" />
  <TypeSignature Language="VB.NET" Value="Protected Class WithConstructorsTestBase(Of TFixture).LazyFieldPost" />
  <TypeSignature Language="C++ CLI" Value="protected:  where TFixture : WithConstructorsTestBase&lt;TFixture&gt;::WithConstructorsFixtureBasegcnew()ref class WithConstructorsTestBase&lt;TFixture&gt;::LazyFieldPost" />
  <TypeSignature Language="C++ CX" Value="protected: ref class WithConstructorsTestBase&lt;TFixture&gt;::LazyFieldPost" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TFixture">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <BaseTypeName>Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;TFixture&gt;+WithConstructorsFixtureBase</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LazyFieldPost ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1.LazyFieldPost.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LazyFieldPost();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; LazyFieldPost();" />
      <MemberSignature Language="C++ WINRT" Value=" LazyFieldPost();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLoader">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Infrastructure.ILazyLoader GetLoader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Infrastructure.ILazyLoader GetLoader() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1.LazyFieldPost.GetLoader" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLoader () As ILazyLoader" />
      <MemberSignature Language="F#" Value="member this.GetLoader : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ILazyLoader" Usage="lazyFieldPost.GetLoader " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::EntityFrameworkCore::Infrastructure::ILazyLoader ^ GetLoader();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::EntityFrameworkCore::Infrastructure::ILazyLoader ^ GetLoader();" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Infrastructure::ILazyLoader GetLoader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ILazyLoader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1.LazyFieldPost.Id" />
      <MemberSignature Language="VB.NET" Value="Public Property Id As Integer" />
      <MemberSignature Language="F#" Value="member this.Id : int with get, set" Usage="Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture&gt;.WithConstructorsFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.LazyFieldPost.Id" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); void set(int value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property int Id { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LazyFieldBlog">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;TFixture&gt;.LazyFieldBlog LazyFieldBlog { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1/LazyFieldBlog&lt;!TFixture&gt; LazyFieldBlog" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1.LazyFieldPost.LazyFieldBlog" />
      <MemberSignature Language="VB.NET" Value="Public Property LazyFieldBlog As WithConstructorsTestBase(Of TFixture).LazyFieldBlog" />
      <MemberSignature Language="F#" Value="member this.LazyFieldBlog : Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture&gt;.WithConstructorsFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.LazyFieldBlog with get, set" Usage="Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture&gt;.WithConstructorsFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.LazyFieldPost.LazyFieldBlog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::EntityFrameworkCore::WithConstructorsTestBase&lt;TFixture&gt;::LazyFieldBlog ^ LazyFieldBlog { Microsoft::EntityFrameworkCore::WithConstructorsTestBase&lt;TFixture&gt;::LazyFieldBlog ^ get(); void set(Microsoft::EntityFrameworkCore::WithConstructorsTestBase&lt;TFixture&gt;::LazyFieldBlog ^ value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::EntityFrameworkCore::WithConstructorsTestBase&lt;TFixture&gt;::LazyFieldBlog ^ LazyFieldBlog { Microsoft::EntityFrameworkCore::WithConstructorsTestBase&lt;TFixture&gt;::LazyFieldBlog ^ get(); void set(Microsoft::EntityFrameworkCore::WithConstructorsTestBase&lt;TFixture&gt;::LazyFieldBlog ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;TFixture&gt;+LazyFieldBlog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LazyFieldBlogId">
      <MemberSignature Language="C#" Value="public int LazyFieldBlogId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LazyFieldBlogId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.WithConstructorsTestBase`1.LazyFieldPost.LazyFieldBlogId" />
      <MemberSignature Language="VB.NET" Value="Public Property LazyFieldBlogId As Integer" />
      <MemberSignature Language="F#" Value="member this.LazyFieldBlogId : int with get, set" Usage="Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.WithConstructorsTestBase&lt;'Fixture&gt;.WithConstructorsFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.LazyFieldPost.LazyFieldBlogId" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LazyFieldBlogId { int get(); void set(int value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property int LazyFieldBlogId { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>