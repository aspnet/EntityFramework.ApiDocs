<Type Name="DbQuery&lt;TQuery&gt;" FullName="Microsoft.EntityFrameworkCore.DbQuery&lt;TQuery&gt;">
  <TypeSignature Language="C#" Value="public abstract class DbQuery&lt;TQuery&gt; : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt;, Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TQuery&gt;, System.Collections.Generic.IEnumerable&lt;TQuery&gt;, System.Linq.IQueryable, System.Linq.IQueryable&lt;TQuery&gt; where TQuery : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbQuery`1&lt;class TQuery&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.IServiceProvider&gt;, class Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor`1&lt;!TQuery&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TQuery&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TQuery&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.DbQuery`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbQuery(Of TQuery)&#xA;Implements IAsyncEnumerableAccessor(Of TQuery), IEnumerable(Of TQuery), IInfrastructure(Of IServiceProvider), IQueryable, IQueryable(Of TQuery)" />
  <TypeSignature Language="F#" Value="type DbQuery&lt;'Query (requires 'Query : null)&gt; = class&#xA;    interface IQueryable&lt;'Query (requires 'Query : null)&gt;&#xA;    interface seq&lt;'Query (requires 'Query : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&#xA;    interface IAsyncEnumerableAccessor&lt;'Query (requires 'Query : null)&gt;&#xA;    interface IInfrastructure&lt;IServiceProvider&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TQuery">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TQuery&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TQuery&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TQuery&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TQuery"> The type of view being operated on by this view. </typeparam>
    <summary>
      <para>
                    A <see cref="T:Microsoft.EntityFrameworkCore.DbQuery`1" /> can be used to query instances of <typeparamref name="TQuery" />.
                    LINQ queries against a <see cref="T:Microsoft.EntityFrameworkCore.DbQuery`1" /> will be translated into queries against the database.
                </para>
      <para>
                    The results of a LINQ query against a <see cref="T:Microsoft.EntityFrameworkCore.DbQuery`1" /> will contain the results
                    returned from the database and may not reflect changes made in the context that have not
                    been persisted to the database. For example, the results will not contain newly added views
                    and may still contain views that are marked for deletion.
                </para>
      <para>
                    Depending on the database being used, some parts of a LINQ query against a <see cref="T:Microsoft.EntityFrameworkCore.DbQuery`1" />
                    may be evaluated in memory rather than being translated into a database query.
                </para>
      <para>
        <see cref="T:Microsoft.EntityFrameworkCore.DbQuery`1" /> objects are usually obtained from a <see cref="T:Microsoft.EntityFrameworkCore.DbQuery`1" />
                    property on a derived <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> or from the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Query``1" />
                    method.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbQuery`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance">
      <MemberSignature Language="C#" Value="IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbQuery`1.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;System#IServiceProvider&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As IServiceProvider Implements IInfrastructure(Of IServiceProvider).Instance" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbQuery&lt;'Query (requires 'Query : null)&gt;.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    Gets the scoped <see cref="T:System.IServiceProvider" /> being used to resolve services.
                </para>
          <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TQuery&gt;.AsyncEnumerable">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IAsyncEnumerable&lt;TQuery&gt; Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TQuery&gt;.AsyncEnumerable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IAsyncEnumerable`1&lt;!TQuery&gt; Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TQuery&gt;.AsyncEnumerable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbQuery`1.Microsoft#EntityFrameworkCore#Query#Internal#IAsyncEnumerableAccessor&lt;TQuery&gt;#AsyncEnumerable" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property AsyncEnumerable As IAsyncEnumerable(Of TQuery) Implements IAsyncEnumerableAccessor(Of TQuery).AsyncEnumerable" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbQuery&lt;'Query (requires 'Query : null)&gt;.Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TQuery&gt;.AsyncEnumerable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor`1.AsyncEnumerable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TQuery&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Returns an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> which when enumerated will asynchronously execute the query against
                the database.
            </summary>
        <value> The query results. </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TQuery&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TQuery&gt; IEnumerable&lt;TQuery&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TQuery&gt; System.Collections.Generic.IEnumerable&lt;TQuery&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbQuery`1.System#Collections#Generic#IEnumerable&lt;TQuery&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TQuery) Implements IEnumerable(Of TQuery).GetEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TQuery&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> which when enumerated will execute a query against the database
                to load all views from the database.
            </summary>
        <returns> The query results. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbQuery`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns an <see cref="T:System.Collections.IEnumerator" /> which when enumerated will execute a query against the database
                to load all views from the database.
            </summary>
        <returns> The query results. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.ElementType">
      <MemberSignature Language="C#" Value="Type System.Linq.IQueryable.ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Linq.IQueryable.ElementType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbQuery`1.System#Linq#IQueryable#ElementType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ElementType As Type Implements IQueryable.ElementType" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbQuery&lt;'Query (requires 'Query : null)&gt;.System.Linq.IQueryable.ElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the IQueryable element type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Expression">
      <MemberSignature Language="C#" Value="System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression System.Linq.IQueryable.Expression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbQuery`1.System#Linq#IQueryable#Expression" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Expression As Expression Implements IQueryable.Expression" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbQuery&lt;'Query (requires 'Query : null)&gt;.System.Linq.IQueryable.Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the IQueryable LINQ Expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Provider">
      <MemberSignature Language="C#" Value="System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider System.Linq.IQueryable.Provider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbQuery`1.System#Linq#IQueryable#Provider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Provider As IQueryProvider Implements IQueryable.Provider" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbQuery&lt;'Query (requires 'Query : null)&gt;.System.Linq.IQueryable.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the IQueryable provider.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
