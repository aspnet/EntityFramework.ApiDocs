<Type Name="DbContext" FullName="Microsoft.EntityFrameworkCore.DbContext">
  <TypeSignature Language="C#" Value="public class DbContext : IDisposable, Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt;, Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies, Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable, Microsoft.EntityFrameworkCore.Internal.IDbQueryCache, Microsoft.EntityFrameworkCore.Internal.IDbSetCache" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbContext extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.IServiceProvider&gt;, class Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies, class Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable, class Microsoft.EntityFrameworkCore.Internal.IDbQueryCache, class Microsoft.EntityFrameworkCore.Internal.IDbSetCache, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.DbContext" />
  <TypeSignature Language="VB.NET" Value="Public Class DbContext&#xA;Implements IDbContextDependencies, IDbContextPoolable, IDbQueryCache, IDbSetCache, IDisposable, IInfrastructure(Of IServiceProvider)" />
  <TypeSignature Language="F#" Value="type DbContext = class&#xA;    interface IDisposable&#xA;    interface IInfrastructure&lt;IServiceProvider&gt;&#xA;    interface IDbContextDependencies&#xA;    interface IDbSetCache&#xA;    interface IDbQueryCache&#xA;    interface IDbContextPoolable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbContext : IDisposable, Microsoft::EntityFrameworkCore::Infrastructure::IInfrastructure&lt;IServiceProvider ^&gt;, Microsoft::EntityFrameworkCore::Internal::IDbContextDependencies, Microsoft::EntityFrameworkCore::Internal::IDbContextPoolable, Microsoft::EntityFrameworkCore::Internal::IDbQueryCache, Microsoft::EntityFrameworkCore::Internal::IDbSetCache" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Internal.IDbQueryCache</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Internal.IDbSetCache</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                A DbContext instance represents a session with the database and can be used to query and save
                instances of your entities. DbContext is a combination of the Unit Of Work and Repository patterns.
            </summary>
    <remarks>
      <para>
                    Typically you create a class that derives from DbContext and contains <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />
                    properties for each entity in the model. If the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties have a public setter,
                    they are automatically initialized when the instance of the derived context is created.
                </para>
      <para>
                    Override the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method to configure the database (and
                    other options) to be used for the context. Alternatively, if you would rather perform configuration externally
                    instead of inline in your context, you can use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1" />
                    (or <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />) to externally create an instance of <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" />
                    (or <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />) and pass it to a base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
      <para>
                    The model is discovered by running a set of conventions over the entity classes found in the
                    <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on the derived context. To further configure the model that
                    is discovered by convention, you can override the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" /> method.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbContext();" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; DbContext();" />
      <MemberSignature Language="C++ WINRT" Value=" DbContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <para>
                    Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> class. The
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                    method will be called to configure the database (and other options) to be used for this context.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbContext (Microsoft.EntityFrameworkCore.DbContextOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.DbContextOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As DbContextOptions)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.DbContext : Microsoft.EntityFrameworkCore.DbContextOptions -&gt; Microsoft.EntityFrameworkCore.DbContext" Usage="new Microsoft.EntityFrameworkCore.DbContext options" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DbContext(Microsoft::EntityFrameworkCore::DbContextOptions ^ options);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; DbContext(Microsoft::EntityFrameworkCore::DbContextOptions ^ options);" />
      <MemberSignature Language="C++ WINRT" Value=" DbContext(Microsoft::EntityFrameworkCore::DbContextOptions const &amp; options);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.DbContextOptions" />
      </Parameters>
      <Docs>
        <param name="options">The options for this context.</param>
        <summary>
          <para>
                    Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> class using the specified options.
                    The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be called to allow further
                    configuration of the options.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry Add (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry Add(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (entity As Object) As EntityEntry" />
      <MemberSignature Language="F#" Value="abstract member Add : obj -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&#xA;override this.Add : obj -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" Usage="dbContext.Add entity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry ^ Add(System::Object ^ entity);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry Add(winrt::Windows::Foundation::IInspectable const &amp; entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"> The entity to add. </param>
        <summary>
                Begins tracking the given entity, and any other reachable entities that are
                not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt; Add&lt;TEntity&gt; (TEntity entity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!!TEntity&gt; Add&lt;class TEntity&gt;(!!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add(Of TEntity As Class) (entity As TEntity) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)&#xA;override this.Add : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="dbContext.Add entity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry&lt;TEntity&gt; ^ Add(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The type of the entity. </typeparam>
        <param name="entity"> The entity to add. </param>
        <summary>
                Begins tracking the given entity, and any other reachable entities that are
                not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that
                they will be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&gt; AddAsync (object entity, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&gt; AddAsync(object entity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.AddAsync(System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AddAsync : obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&gt;&#xA;override this.AddAsync : obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&gt;" Usage="dbContext.AddAsync (entity, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.DbContext/&lt;AddAsync&gt;d__71))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="entity"> The entity to add. </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
          <para>
                    Begins tracking the given entity, and any other reachable entities that are
                    not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                    be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    This method is async only to allow special value generators, such as the one used by
                    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',
                    to access the database asynchronously. For all other cases the non async method should be used.
                </para>
        </summary>
        <returns>
                A task that represents the asynchronous Add operation. The task result contains the
                <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity. The entry provides access to change tracking
                information and operations for the entity.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAsync&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt; AddAsync&lt;TEntity&gt; (TEntity entity, System.Threading.CancellationToken cancellationToken = null) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!!TEntity&gt;&gt; AddAsync&lt;class TEntity&gt;(!!TEntity entity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.AddAsync``1(``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AddAsync : 'Entity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt; (requires 'Entity : null)&#xA;override this.AddAsync : 'Entity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt; (requires 'Entity : null)" Usage="dbContext.AddAsync (entity, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.DbContext/&lt;AddAsync&gt;d__65`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The type of the entity. </typeparam>
        <param name="entity"> The entity to add. </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
          <para>
                    Begins tracking the given entity, and any other reachable entities that are
                    not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                    be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    This method is async only to allow special value generators, such as the one used by
                    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',
                    to access the database asynchronously. For all other cases the non async method should be used.
                </para>
        </summary>
        <returns>
                A task that represents the asynchronous Add operation. The task result contains the
                <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides access to change tracking
                information and operations for the entity.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Collections.Generic.IEnumerable&lt;object&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Collections.Generic.IEnumerable`1&lt;object&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.AddRange(System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (entities As IEnumerable(Of Object))" />
      <MemberSignature Language="F#" Value="abstract member AddRange : seq&lt;obj&gt; -&gt; unit&#xA;override this.AddRange : seq&lt;obj&gt; -&gt; unit" Usage="dbContext.AddRange entities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRange(System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="entities"> The entities to add. </param>
        <summary>
                Begins tracking the given entities, and any other reachable entities that are
                not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (params object[] entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(object[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.AddRange(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (ParamArray entities As Object())" />
      <MemberSignature Language="F#" Value="abstract member AddRange : obj[] -&gt; unit&#xA;override this.AddRange : obj[] -&gt; unit" Usage="dbContext.AddRange entities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRange(... cli::array &lt;System::Object ^&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entities"> The entities to add. </param>
        <summary>
                Begins tracking the given entities, and any other reachable entities that are
                not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRangeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AddRangeAsync (params object[] entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AddRangeAsync(object[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddRangeAsync (ParamArray entities As Object()) As Task" />
      <MemberSignature Language="F#" Value="abstract member AddRangeAsync : obj[] -&gt; System.Threading.Tasks.Task&#xA;override this.AddRangeAsync : obj[] -&gt; System.Threading.Tasks.Task" Usage="dbContext.AddRangeAsync entities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AddRangeAsync(... cli::array &lt;System::Object ^&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entities"> The entities to add. </param>
        <summary>
          <para>
                    Begins tracking the given entity, and any other reachable entities that are
                    not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                    be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    This method is async only to allow special value generators, such as the one used by
                    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',
                    to access the database asynchronously. For all other cases the non async method should be used.
                </para>
        </summary>
        <returns> A task that represents the asynchronous operation. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRangeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AddRangeAsync (System.Collections.Generic.IEnumerable&lt;object&gt; entities, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AddRangeAsync(class System.Collections.Generic.IEnumerable`1&lt;object&gt; entities, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AddRangeAsync : seq&lt;obj&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AddRangeAsync : seq&lt;obj&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="dbContext.AddRangeAsync (entities, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.DbContext/&lt;AddRangeAsync&gt;d__83))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="entities"> The entities to add. </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
          <para>
                    Begins tracking the given entity, and any other reachable entities that are
                    not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                    be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    This method is async only to allow special value generators, such as the one used by
                    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',
                    to access the database asynchronously. For all other cases the non async method should be used.
                </para>
        </summary>
        <returns>
                A task that represents the asynchronous operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Attach (entity As Object) As EntityEntry" />
      <MemberSignature Language="F#" Value="abstract member Attach : obj -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&#xA;override this.Attach : obj -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" Usage="dbContext.Attach entity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry ^ Attach(System::Object ^ entity);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry Attach(winrt::Windows::Foundation::IInspectable const &amp; entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"> The entity to attach. </param>
        <summary>
          <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state
                    such that no operation will be performed when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                    is called.
                </para>
          <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
        </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt; Attach&lt;TEntity&gt; (TEntity entity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!!TEntity&gt; Attach&lt;class TEntity&gt;(!!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Attach``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Attach(Of TEntity As Class) (entity As TEntity) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member Attach : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)&#xA;override this.Attach : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="dbContext.Attach entity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry&lt;TEntity&gt; ^ Attach(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The type of the entity. </typeparam>
        <param name="entity"> The entity to attach. </param>
        <summary>
          <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state
                    such that no operation will be performed when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                    is called.
                </para>
          <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
        </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachRange">
      <MemberSignature Language="C#" Value="public virtual void AttachRange (System.Collections.Generic.IEnumerable&lt;object&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachRange(class System.Collections.Generic.IEnumerable`1&lt;object&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AttachRange (entities As IEnumerable(Of Object))" />
      <MemberSignature Language="F#" Value="abstract member AttachRange : seq&lt;obj&gt; -&gt; unit&#xA;override this.AttachRange : seq&lt;obj&gt; -&gt; unit" Usage="dbContext.AttachRange entities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AttachRange(System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="entities"> The entities to attach. </param>
        <summary>
          <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state
                    such that no operation will be performed when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                    is called.
                </para>
          <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachRange">
      <MemberSignature Language="C#" Value="public virtual void AttachRange (params object[] entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachRange(object[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AttachRange (ParamArray entities As Object())" />
      <MemberSignature Language="F#" Value="abstract member AttachRange : obj[] -&gt; unit&#xA;override this.AttachRange : obj[] -&gt; unit" Usage="dbContext.AttachRange entities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AttachRange(... cli::array &lt;System::Object ^&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entities"> The entities to attach. </param>
        <summary>
          <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state
                    such that no operation will be performed when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                    is called.
                </para>
          <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeTracker">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker ChangeTracker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker ChangeTracker" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContext.ChangeTracker" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ChangeTracker As ChangeTracker" />
      <MemberSignature Language="F#" Value="member this.ChangeTracker : Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" Usage="Microsoft.EntityFrameworkCore.DbContext.ChangeTracker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::ChangeTracking::ChangeTracker ^ ChangeTracker { Microsoft::EntityFrameworkCore::ChangeTracking::ChangeTracker ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Provides access to information and operations for entity instances this context is tracking.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade Database" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContext.Database" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Database As DatabaseFacade" />
      <MemberSignature Language="F#" Value="member this.Database : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" Usage="Microsoft.EntityFrameworkCore.DbContext.Database" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ Database { Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Provides access to database related information and operations for this context.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="dbContext.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Releases the allocated resources for this context.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entry">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry Entry (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry Entry(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Entry(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Entry (entity As Object) As EntityEntry" />
      <MemberSignature Language="F#" Value="abstract member Entry : obj -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&#xA;override this.Entry : obj -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" Usage="dbContext.Entry entity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry ^ Entry(System::Object ^ entity);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry Entry(winrt::Windows::Foundation::IInspectable const &amp; entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"> The entity to get the entry for. </param>
        <summary>
          <para>
                    Gets an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the given entity. The entry provides
                    access to change tracking information and operations for the entity.
                </para>
          <para>
                    This method may be called on an entity that is not tracked. You can then
                    set the <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> property on the returned entry
                    to have the context begin tracking the entity in the specified state.
                </para>
        </summary>
        <returns> The entry for the given entity. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entry&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt; Entry&lt;TEntity&gt; (TEntity entity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!!TEntity&gt; Entry&lt;class TEntity&gt;(!!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Entry``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Entry(Of TEntity As Class) (entity As TEntity) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member Entry : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)&#xA;override this.Entry : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="dbContext.Entry entity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry&lt;TEntity&gt; ^ Entry(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The type of the entity. </typeparam>
        <param name="entity"> The entity to get the entry for. </param>
        <summary>
                Gets an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the given entity. The entry provides
                access to change tracking information and operations for the entity.
            </summary>
        <returns> The entry for the given entity. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dbContext.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override bool Equals(Platform::Object ^ obj);" />
      <MemberSignature Language="C++ WINRT" Value=" override bool Equals(winrt::Windows::Foundation::IInspectable const &amp; obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"> The object to compare with the current object. </param>
        <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
        <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public virtual object Find (Type entityType, params object[] keyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Find(class System.Type entityType, object[] keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Find(System.Type,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Find (entityType As Type, ParamArray keyValues As Object()) As Object" />
      <MemberSignature Language="F#" Value="abstract member Find : Type * obj[] -&gt; obj&#xA;override this.Find : Type * obj[] -&gt; obj" Usage="dbContext.Find (entityType, keyValues)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Find(Type ^ entityType, ... cli::array &lt;System::Object ^&gt; ^ keyValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="System.Type" />
        <Parameter Name="keyValues" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entityType"> The type of entity to find. </param>
        <param name="keyValues">The values of the primary key for the entity to be found.</param>
        <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
        <returns>The entity found, or null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual TEntity Find&lt;TEntity&gt; (params object[] keyValues) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TEntity Find&lt;class TEntity&gt;(object[] keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Find``1(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Find(Of TEntity As Class) (ParamArray keyValues As Object()) As TEntity" />
      <MemberSignature Language="F#" Value="abstract member Find : obj[] -&gt; 'Entity (requires 'Entity : null)&#xA;override this.Find : obj[] -&gt; 'Entity (requires 'Entity : null)" Usage="dbContext.Find keyValues" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class virtual TEntity Find(... cli::array &lt;System::Object ^&gt; ^ keyValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The type of entity to find. </typeparam>
        <param name="keyValues">The values of the primary key for the entity to be found.</param>
        <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
        <returns>The entity found, or null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; FindAsync (Type entityType, params object[] keyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; FindAsync(class System.Type entityType, object[] keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.FindAsync(System.Type,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindAsync (entityType As Type, ParamArray keyValues As Object()) As Task(Of Object)" />
      <MemberSignature Language="F#" Value="abstract member FindAsync : Type * obj[] -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.FindAsync : Type * obj[] -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="dbContext.FindAsync (entityType, keyValues)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ FindAsync(Type ^ entityType, ... cli::array &lt;System::Object ^&gt; ^ keyValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="System.Type" />
        <Parameter Name="keyValues" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entityType"> The type of entity to find. </param>
        <param name="keyValues">The values of the primary key for the entity to be found.</param>
        <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
        <returns>The entity found, or null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; FindAsync (Type entityType, object[] keyValues, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; FindAsync(class System.Type entityType, object[] keyValues, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.FindAsync(System.Type,System.Object[],System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member FindAsync : Type * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.FindAsync : Type * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="dbContext.FindAsync (entityType, keyValues, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ FindAsync(Type ^ entityType, cli::array &lt;System::Object ^&gt; ^ keyValues, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="System.Type" />
        <Parameter Name="keyValues" Type="System.Object[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="entityType"> The type of entity to find. </param>
        <param name="keyValues">The values of the primary key for the entity to be found.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
        <returns>The entity found, or null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAsync&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TEntity&gt; FindAsync&lt;TEntity&gt; (params object[] keyValues) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TEntity&gt; FindAsync&lt;class TEntity&gt;(object[] keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.FindAsync``1(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindAsync(Of TEntity As Class) (ParamArray keyValues As Object()) As Task(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member FindAsync : obj[] -&gt; System.Threading.Tasks.Task&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)&#xA;override this.FindAsync : obj[] -&gt; System.Threading.Tasks.Task&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="dbContext.FindAsync keyValues" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class virtual System::Threading::Tasks::Task&lt;TEntity&gt; ^ FindAsync(... cli::array &lt;System::Object ^&gt; ^ keyValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The type of entity to find. </typeparam>
        <param name="keyValues">The values of the primary key for the entity to be found.</param>
        <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
        <returns>The entity found, or null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAsync&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TEntity&gt; FindAsync&lt;TEntity&gt; (object[] keyValues, System.Threading.CancellationToken cancellationToken) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TEntity&gt; FindAsync&lt;class TEntity&gt;(object[] keyValues, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.FindAsync``1(System.Object[],System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member FindAsync : obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)&#xA;override this.FindAsync : obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="dbContext.FindAsync (keyValues, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class virtual System::Threading::Tasks::Task&lt;TEntity&gt; ^ FindAsync(cli::array &lt;System::Object ^&gt; ^ keyValues, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Object[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The type of entity to find. </typeparam>
        <param name="keyValues">The values of the primary key for the entity to be found.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
        <returns>The entity found, or null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dbContext.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="C++ WINRT" Value=" override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Serves as the default hash function.
            </summary>
        <returns> A hash code for the current object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance">
      <MemberSignature Language="C#" Value="IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;System#IServiceProvider&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As IServiceProvider Implements IInfrastructure(Of IServiceProvider).Instance" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance" />
      <MemberSignature Language="C++ CLI" Value="property IServiceProvider ^ Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance { IServiceProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    Gets the scoped <see cref="T:System.IServiceProvider" /> being used to resolve services.
                </para>
          <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.ChangeDetector">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.ChangeDetector { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.ChangeDetector" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#ChangeDetector" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ChangeDetector As IChangeDetector Implements IDbContextDependencies.ChangeDetector" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.ChangeDetector" />
      <MemberSignature Language="C++ CLI" Value="property Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IChangeDetector ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.ChangeDetector { Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IChangeDetector ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="property Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IChangeDetector ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.ChangeDetector { Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IChangeDetector ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.ChangeDetector</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderFactory">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Internal.IEntityFinderFactory Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Internal.IEntityFinderFactory Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderFactory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#EntityFinderFactory" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property EntityFinderFactory As IEntityFinderFactory Implements IDbContextDependencies.EntityFinderFactory" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderFactory" />
      <MemberSignature Language="C++ CLI" Value="property Microsoft::EntityFrameworkCore::Internal::IEntityFinderFactory ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderFactory { Microsoft::EntityFrameworkCore::Internal::IEntityFinderFactory ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="property Microsoft::EntityFrameworkCore::Internal::IEntityFinderFactory ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderFactory { Microsoft::EntityFrameworkCore::Internal::IEntityFinderFactory ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderFactory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Internal.IEntityFinderFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderSource">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Internal.IEntityFinderSource Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Internal.IEntityFinderSource Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#EntityFinderSource" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property EntityFinderSource As IEntityFinderSource Implements IDbContextDependencies.EntityFinderSource" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderSource" />
      <MemberSignature Language="C++ CLI" Value="property Microsoft::EntityFrameworkCore::Internal::IEntityFinderSource ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderSource { Microsoft::EntityFrameworkCore::Internal::IEntityFinderSource ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="property Microsoft::EntityFrameworkCore::Internal::IEntityFinderSource ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderSource { Microsoft::EntityFrameworkCore::Internal::IEntityFinderSource ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderSource</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Internal.IEntityFinderSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityGraphAttacher">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityGraphAttacher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityGraphAttacher" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#EntityGraphAttacher" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property EntityGraphAttacher As IEntityGraphAttacher Implements IDbContextDependencies.EntityGraphAttacher" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityGraphAttacher" />
      <MemberSignature Language="C++ CLI" Value="property Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IEntityGraphAttacher ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityGraphAttacher { Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IEntityGraphAttacher ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="property Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IEntityGraphAttacher ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityGraphAttacher { Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IEntityGraphAttacher ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityGraphAttacher</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.InfrastructureLogger">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure&gt; Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.InfrastructureLogger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Infrastructure&gt; Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.InfrastructureLogger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#InfrastructureLogger" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property InfrastructureLogger As IDiagnosticsLogger(Of DbLoggerCategory.Infrastructure) Implements IDbContextDependencies.InfrastructureLogger" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.InfrastructureLogger" />
      <MemberSignature Language="C++ CLI" Value="property Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Infrastructure ^&gt; ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.InfrastructureLogger { Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Infrastructure ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.InfrastructureLogger</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Infrastructure&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QueryProvider">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QueryProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QueryProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#QueryProvider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property QueryProvider As IAsyncQueryProvider Implements IDbContextDependencies.QueryProvider" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QueryProvider" />
      <MemberSignature Language="C++ CLI" Value="property Microsoft::EntityFrameworkCore::Query::Internal::IAsyncQueryProvider ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QueryProvider { Microsoft::EntityFrameworkCore::Query::Internal::IAsyncQueryProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QueryProvider</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QuerySource">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Internal.IDbQuerySource Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QuerySource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Internal.IDbQuerySource Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QuerySource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#QuerySource" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property QuerySource As IDbQuerySource Implements IDbContextDependencies.QuerySource" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QuerySource" />
      <MemberSignature Language="C++ CLI" Value="property Microsoft::EntityFrameworkCore::Internal::IDbQuerySource ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QuerySource { Microsoft::EntityFrameworkCore::Internal::IDbQuerySource ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="property Microsoft::EntityFrameworkCore::Internal::IDbQuerySource ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QuerySource { Microsoft::EntityFrameworkCore::Internal::IDbQuerySource ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QuerySource</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Internal.IDbQuerySource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.SetSource">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Internal.IDbSetSource Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.SetSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Internal.IDbSetSource Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.SetSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#SetSource" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SetSource As IDbSetSource Implements IDbContextDependencies.SetSource" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.SetSource" />
      <MemberSignature Language="C++ CLI" Value="property Microsoft::EntityFrameworkCore::Internal::IDbSetSource ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.SetSource { Microsoft::EntityFrameworkCore::Internal::IDbSetSource ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="property Microsoft::EntityFrameworkCore::Internal::IDbSetSource ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.SetSource { Microsoft::EntityFrameworkCore::Internal::IDbSetSource ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.SetSource</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Internal.IDbSetSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.StateManager">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.StateManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.StateManager" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#StateManager" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property StateManager As IStateManager Implements IDbContextDependencies.StateManager" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.StateManager" />
      <MemberSignature Language="C++ CLI" Value="property Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IStateManager ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.StateManager { Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IStateManager ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="property Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IStateManager ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.StateManager { Microsoft::EntityFrameworkCore::ChangeTracking::Internal::IStateManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.StateManager</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.UpdateLogger">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Update&gt; Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.UpdateLogger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Update&gt; Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.UpdateLogger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextDependencies#UpdateLogger" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property UpdateLogger As IDiagnosticsLogger(Of DbLoggerCategory.Update) Implements IDbContextDependencies.UpdateLogger" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.UpdateLogger" />
      <MemberSignature Language="C++ CLI" Value="property Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Update ^&gt; ^ Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.UpdateLogger { Microsoft::EntityFrameworkCore::Diagnostics::IDiagnosticsLogger&lt;Microsoft::EntityFrameworkCore::DbLoggerCategory::Update ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.UpdateLogger</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Update&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.ResetState">
      <MemberSignature Language="C#" Value="void IDbContextPoolable.ResetState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.ResetState() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextPoolable#ResetState" />
      <MemberSignature Language="VB.NET" Value="Sub ResetState () Implements IDbContextPoolable.ResetState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.ResetState() = Microsoft::EntityFrameworkCore::Internal::IDbContextPoolable::ResetState;" />
      <MemberSignature Language="C++ CX" Value=" virtual void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.ResetState() = Microsoft::EntityFrameworkCore::Internal::IDbContextPoolable::ResetState;" />
      <MemberSignature Language="C++ WINRT" Value="void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.ResetState();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.ResetState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.Resurrect">
      <MemberSignature Language="C#" Value="void IDbContextPoolable.Resurrect (Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot configurationSnapshot);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.Resurrect(class Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot configurationSnapshot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextPoolable#Resurrect(Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot)" />
      <MemberSignature Language="VB.NET" Value="Sub Resurrect (configurationSnapshot As DbContextPoolConfigurationSnapshot) Implements IDbContextPoolable.Resurrect" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.Resurrect(Microsoft::EntityFrameworkCore::Internal::DbContextPoolConfigurationSnapshot ^ configurationSnapshot) = Microsoft::EntityFrameworkCore::Internal::IDbContextPoolable::Resurrect;" />
      <MemberSignature Language="C++ WINRT" Value="void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.Resurrect(Microsoft::EntityFrameworkCore::Internal::DbContextPoolConfigurationSnapshot const &amp; configurationSnapshot);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.Resurrect(Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationSnapshot" Type="Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot" />
      </Parameters>
      <Docs>
        <param name="configurationSnapshot">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SetPool">
      <MemberSignature Language="C#" Value="void IDbContextPoolable.SetPool (Microsoft.EntityFrameworkCore.Internal.IDbContextPool contextPool);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SetPool(class Microsoft.EntityFrameworkCore.Internal.IDbContextPool contextPool) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextPoolable#SetPool(Microsoft.EntityFrameworkCore.Internal.IDbContextPool)" />
      <MemberSignature Language="VB.NET" Value="Sub SetPool (contextPool As IDbContextPool) Implements IDbContextPoolable.SetPool" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SetPool(Microsoft::EntityFrameworkCore::Internal::IDbContextPool ^ contextPool) = Microsoft::EntityFrameworkCore::Internal::IDbContextPoolable::SetPool;" />
      <MemberSignature Language="C++ CX" Value=" virtual void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SetPool(Microsoft::EntityFrameworkCore::Internal::IDbContextPool ^ contextPool) = Microsoft::EntityFrameworkCore::Internal::IDbContextPoolable::SetPool;" />
      <MemberSignature Language="C++ WINRT" Value="void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SetPool(Microsoft::EntityFrameworkCore::Internal::IDbContextPool const &amp; contextPool);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SetPool(Microsoft.EntityFrameworkCore.Internal.IDbContextPool)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextPool" Type="Microsoft.EntityFrameworkCore.Internal.IDbContextPool" />
      </Parameters>
      <Docs>
        <param name="contextPool">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SnapshotConfiguration">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot IDbContextPoolable.SnapshotConfiguration ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SnapshotConfiguration() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbContextPoolable#SnapshotConfiguration" />
      <MemberSignature Language="VB.NET" Value="Function SnapshotConfiguration () As DbContextPoolConfigurationSnapshot Implements IDbContextPoolable.SnapshotConfiguration" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::EntityFrameworkCore::Internal::DbContextPoolConfigurationSnapshot ^ Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SnapshotConfiguration() = Microsoft::EntityFrameworkCore::Internal::IDbContextPoolable::SnapshotConfiguration;" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Internal::DbContextPoolConfigurationSnapshot Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SnapshotConfiguration();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SnapshotConfiguration</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbQueryCache.GetOrAddQuery">
      <MemberSignature Language="C#" Value="object IDbQueryCache.GetOrAddQuery (Microsoft.EntityFrameworkCore.Internal.IDbQuerySource source, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object Microsoft.EntityFrameworkCore.Internal.IDbQueryCache.GetOrAddQuery(class Microsoft.EntityFrameworkCore.Internal.IDbQuerySource source, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbQueryCache#GetOrAddQuery(Microsoft.EntityFrameworkCore.Internal.IDbQuerySource,System.Type)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ Microsoft.EntityFrameworkCore.Internal.IDbQueryCache.GetOrAddQuery(Microsoft::EntityFrameworkCore::Internal::IDbQuerySource ^ source, Type ^ type) = Microsoft::EntityFrameworkCore::Internal::IDbQueryCache::GetOrAddQuery;" />
      <MemberSignature Language="C++ CX" Value=" virtual Platform::Object ^ Microsoft.EntityFrameworkCore.Internal.IDbQueryCache.GetOrAddQuery(Microsoft::EntityFrameworkCore::Internal::IDbQuerySource ^ source, Platform::Type ^ type) = Microsoft::EntityFrameworkCore::Internal::IDbQueryCache::GetOrAddQuery;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Internal.IDbQueryCache.GetOrAddQuery(Microsoft.EntityFrameworkCore.Internal.IDbQuerySource,System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Internal.IDbQuerySource" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="type">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbSetCache.GetOrAddSet">
      <MemberSignature Language="C#" Value="object IDbSetCache.GetOrAddSet (Microsoft.EntityFrameworkCore.Internal.IDbSetSource source, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object Microsoft.EntityFrameworkCore.Internal.IDbSetCache.GetOrAddSet(class Microsoft.EntityFrameworkCore.Internal.IDbSetSource source, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Internal#IDbSetCache#GetOrAddSet(Microsoft.EntityFrameworkCore.Internal.IDbSetSource,System.Type)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ Microsoft.EntityFrameworkCore.Internal.IDbSetCache.GetOrAddSet(Microsoft::EntityFrameworkCore::Internal::IDbSetSource ^ source, Type ^ type) = Microsoft::EntityFrameworkCore::Internal::IDbSetCache::GetOrAddSet;" />
      <MemberSignature Language="C++ CX" Value=" virtual Platform::Object ^ Microsoft.EntityFrameworkCore.Internal.IDbSetCache.GetOrAddSet(Microsoft::EntityFrameworkCore::Internal::IDbSetSource ^ source, Platform::Type ^ type) = Microsoft::EntityFrameworkCore::Internal::IDbSetCache::GetOrAddSet;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Internal.IDbSetCache.GetOrAddSet(Microsoft.EntityFrameworkCore.Internal.IDbSetSource,System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Internal.IDbSetSource" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="type">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Model">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IModel Model { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IModel Model" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContext.Model" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Model As IModel" />
      <MemberSignature Language="F#" Value="member this.Model : Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="Microsoft.EntityFrameworkCore.DbContext.Model" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::Metadata::IModel ^ Model { Microsoft::EntityFrameworkCore::Metadata::IModel ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::Metadata::IModel ^ Model { Microsoft::EntityFrameworkCore::Metadata::IModel ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.Model</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The metadata about the shape of entities, the relationships between them, and how they map to the database.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnConfiguring">
      <MemberSignature Language="C#" Value="protected internal virtual void OnConfiguring (Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnConfiguring(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnConfiguring (optionsBuilder As DbContextOptionsBuilder)" />
      <MemberSignature Language="F#" Value="abstract member OnConfiguring : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder -&gt; unit&#xA;override this.OnConfiguring : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder -&gt; unit" Usage="dbContext.OnConfiguring optionsBuilder" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnConfiguring(Microsoft::EntityFrameworkCore::DbContextOptionsBuilder ^ optionsBuilder);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void OnConfiguring(Microsoft::EntityFrameworkCore::DbContextOptionsBuilder const &amp; optionsBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />
      </Parameters>
      <Docs>
        <param name="optionsBuilder">
                A builder used to create or modify options for this context. Databases (and other extensions)
                typically define extension methods on this object that allow you to configure the context.
            </param>
        <summary>
          <para>
                    Override this method to configure the database (and other options) to be used for this context.
                    This method is called for each instance of the context that is created.
                    The base implementation does nothing.
                </para>
          <para>
                    In situations where an instance of <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> may or may not have been passed
                    to the constructor, you can use <see cref="P:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.IsConfigured" /> to determine if
                    the options have already been set, and skip some or all of the logic in
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnModelCreating">
      <MemberSignature Language="C#" Value="protected internal virtual void OnModelCreating (Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnModelCreating(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />
      <MemberSignature Language="F#" Value="abstract member OnModelCreating : Microsoft.EntityFrameworkCore.ModelBuilder -&gt; unit&#xA;override this.OnModelCreating : Microsoft.EntityFrameworkCore.ModelBuilder -&gt; unit" Usage="dbContext.OnModelCreating modelBuilder" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnModelCreating(Microsoft::EntityFrameworkCore::ModelBuilder ^ modelBuilder);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void OnModelCreating(Microsoft::EntityFrameworkCore::ModelBuilder const &amp; modelBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" />
      </Parameters>
      <Docs>
        <param name="modelBuilder">
                The builder being used to construct the model for this context. Databases (and other extensions) typically
                define extension methods on this object that allow you to configure aspects of the model that are specific
                to a given database.
            </param>
        <summary>
                Override this method to further configure the model that was discovered by convention from the entity types
                exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on your derived context. The resulting model may be cached
                and re-used for subsequent instances of your derived context.
            </summary>
        <remarks>
                If a model is explicitly set on the options for this context (via <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />)
                then this method will not be run.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Query&lt;TQuery&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbQuery&lt;TQuery&gt; Query&lt;TQuery&gt; () where TQuery : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbQuery`1&lt;!!TQuery&gt; Query&lt;class TQuery&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Query``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Query(Of TQuery As Class) () As DbQuery(Of TQuery)" />
      <MemberSignature Language="F#" Value="abstract member Query : unit -&gt; Microsoft.EntityFrameworkCore.DbQuery&lt;'Query (requires 'Query : null)&gt; (requires 'Query : null)&#xA;override this.Query : unit -&gt; Microsoft.EntityFrameworkCore.DbQuery&lt;'Query (requires 'Query : null)&gt; (requires 'Query : null)" Usage="dbContext.Query " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TQuery&gt;&#xA; where TQuery : class virtual Microsoft::EntityFrameworkCore::DbQuery&lt;TQuery&gt; ^ Query();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbQuery&lt;TQuery&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TQuery">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TQuery"> The type of query for which a DbQuery should be returned. </typeparam>
        <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.DbQuery`1" /> that can be used to query instances of <typeparamref name="TQuery" />.
            </summary>
        <returns> A DbQuery for the given query type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry Remove (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry Remove(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Remove (entity As Object) As EntityEntry" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&#xA;override this.Remove : obj -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" Usage="dbContext.Remove entity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry ^ Remove(System::Object ^ entity);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry Remove(winrt::Windows::Foundation::IInspectable const &amp; entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"> The entity to remove. </param>
        <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> state such that it will
                be removed from the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        <remarks>
          <para>
                    If the entity is already tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state then the context will
                    stop tracking the entity (rather than marking it as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />) since the
                    entity was previously added to the context and does not exist in the database.
                </para>
          <para>
                    Any other reachable entities that are not already being tracked will be tracked in the same way that
                    they would be if <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)" /> was called before calling this method.
                    This allows any cascading actions to be applied when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt; Remove&lt;TEntity&gt; (TEntity entity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!!TEntity&gt; Remove&lt;class TEntity&gt;(!!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Remove``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Remove(Of TEntity As Class) (entity As TEntity) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)&#xA;override this.Remove : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="dbContext.Remove entity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry&lt;TEntity&gt; ^ Remove(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The type of the entity. </typeparam>
        <param name="entity"> The entity to remove. </param>
        <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> state such that it will
                be removed from the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        <remarks>
          <para>
                    If the entity is already tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state then the context will
                    stop tracking the entity (rather than marking it as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />) since the
                    entity was previously added to the context and does not exist in the database.
                </para>
          <para>
                    Any other reachable entities that are not already being tracked will be tracked in the same way that
                    they would be if <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Attach``1(``0)" /> was called before calling this method.
                    This allows any cascading actions to be applied when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public virtual void RemoveRange (System.Collections.Generic.IEnumerable&lt;object&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;object&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.RemoveRange(System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRange (entities As IEnumerable(Of Object))" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : seq&lt;obj&gt; -&gt; unit&#xA;override this.RemoveRange : seq&lt;obj&gt; -&gt; unit" Usage="dbContext.RemoveRange entities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRange(System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="entities"> The entities to remove. </param>
        <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> state such that it will
                be removed from the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <remarks>
          <para>
                    If any of the entities are already tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state then the context will
                    stop tracking those entities (rather than marking them as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />) since those
                    entities were previously added to the context and do not exist in the database.
                </para>
          <para>
                    Any other reachable entities that are not already being tracked will be tracked in the same way that
                    they would be if <see cref="M:Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable{System.Object})" /> was called before calling this method.
                    This allows any cascading actions to be applied when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public virtual void RemoveRange (params object[] entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRange(object[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.RemoveRange(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRange (ParamArray entities As Object())" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : obj[] -&gt; unit&#xA;override this.RemoveRange : obj[] -&gt; unit" Usage="dbContext.RemoveRange entities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRange(... cli::array &lt;System::Object ^&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entities"> The entities to remove. </param>
        <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> state such that it will
                be removed from the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <remarks>
          <para>
                    If any of the entities are already tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state then the context will
                    stop tracking those entities (rather than marking them as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />) since those
                    entities were previously added to the context and do not exist in the database.
                </para>
          <para>
                    Any other reachable entities that are not already being tracked will be tracked in the same way that
                    they would be if <see cref="M:Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object[])" /> was called before calling this method.
                    This allows any cascading actions to be applied when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public virtual int SaveChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SaveChanges () As Integer" />
      <MemberSignature Language="F#" Value="abstract member SaveChanges : unit -&gt; int&#xA;override this.SaveChanges : unit -&gt; int" Usage="dbContext.SaveChanges " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int SaveChanges();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual int SaveChanges();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual int SaveChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Saves all changes made in this context to the database.
            </summary>
        <returns>
                The number of state entries written to the database.
            </returns>
        <remarks>
                This method will automatically call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
                changes to entity instances before saving to the underlying database. This can be disabled via
                <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">
                An error is encountered while saving to the database.
            </exception>
        <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">
                A concurrency violation is encountered while saving to the database.
                A concurrency violation occurs when an unexpected number of rows are affected during save.
                This is usually because the data in the database has been modified since it was loaded into memory.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public virtual int SaveChanges (bool acceptAllChangesOnSuccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveChanges(bool acceptAllChangesOnSuccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SaveChanges (acceptAllChangesOnSuccess As Boolean) As Integer" />
      <MemberSignature Language="F#" Value="abstract member SaveChanges : bool -&gt; int&#xA;override this.SaveChanges : bool -&gt; int" Usage="dbContext.SaveChanges acceptAllChangesOnSuccess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int SaveChanges(bool acceptAllChangesOnSuccess);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual int SaveChanges(bool acceptAllChangesOnSuccess);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual int SaveChanges(bool acceptAllChangesOnSuccess);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="acceptAllChangesOnSuccess" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="acceptAllChangesOnSuccess">
                Indicates whether <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges" /> is called after the changes have
                been sent successfully to the database.
            </param>
        <summary>
                Saves all changes made in this context to the database.
            </summary>
        <returns>
                The number of state entries written to the database.
            </returns>
        <remarks>
                This method will automatically call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
                changes to entity instances before saving to the underlying database. This can be disabled via
                <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">
                An error is encountered while saving to the database.
            </exception>
        <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">
                A concurrency violation is encountered while saving to the database.
                A concurrency violation occurs when an unexpected number of rows are affected during save.
                This is usually because the data in the database has been modified since it was loaded into memory.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SaveChangesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; SaveChangesAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; SaveChangesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SaveChangesAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;&#xA;override this.SaveChangesAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="dbContext.SaveChangesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Asynchronously saves all changes made in this context to the database.
            </summary>
        <returns>
                A task that represents the asynchronous save operation. The task result contains the
                number of state entries written to the database.
            </returns>
        <remarks>
          <para>
                    This method will automatically call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
                    changes to entity instances before saving to the underlying database. This can be disabled via
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
          <para>
                    Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                    that any asynchronous operations have completed before calling another method on this context.
                </para>
        </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">
                An error is encountered while saving to the database.
            </exception>
        <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">
                A concurrency violation is encountered while saving to the database.
                A concurrency violation occurs when an unexpected number of rows are affected during save.
                This is usually because the data in the database has been modified since it was loaded into memory.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SaveChangesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; SaveChangesAsync (bool acceptAllChangesOnSuccess, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; SaveChangesAsync(bool acceptAllChangesOnSuccess, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SaveChangesAsync : bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;&#xA;override this.SaveChangesAsync : bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="dbContext.SaveChangesAsync (acceptAllChangesOnSuccess, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.EntityFrameworkCore.DbContext/&lt;SaveChangesAsync&gt;d__52))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="acceptAllChangesOnSuccess" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="acceptAllChangesOnSuccess">
                Indicates whether <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges" /> is called after the changes have
                been sent successfully to the database.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Asynchronously saves all changes made in this context to the database.
            </summary>
        <returns>
                A task that represents the asynchronous save operation. The task result contains the
                number of state entries written to the database.
            </returns>
        <remarks>
          <para>
                    This method will automatically call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
                    changes to entity instances before saving to the underlying database. This can be disabled via
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
          <para>
                    Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                    that any asynchronous operations have completed before calling another method on this context.
                </para>
        </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">
                An error is encountered while saving to the database.
            </exception>
        <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">
                A concurrency violation is encountered while saving to the database.
                A concurrency violation occurs when an unexpected number of rows are affected during save.
                This is usually because the data in the database has been modified since it was loaded into memory.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Set&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt; Set&lt;TEntity&gt; () where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbSet`1&lt;!!TEntity&gt; Set&lt;class TEntity&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Set``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Set(Of TEntity As Class) () As DbSet(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member Set : unit -&gt; Microsoft.EntityFrameworkCore.DbSet&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)&#xA;override this.Set : unit -&gt; Microsoft.EntityFrameworkCore.DbSet&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="dbContext.Set " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class virtual Microsoft::EntityFrameworkCore::DbSet&lt;TEntity&gt; ^ Set();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEntity"> The type of entity for which a set should be returned. </typeparam>
        <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> that can be used to query and save instances of <typeparamref name="TEntity" />.
            </summary>
        <returns> A set for the given entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dbContext.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override Platform::String ^ ToString();" />
      <MemberSignature Language="C++ WINRT" Value=" override std::wstring ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a string that represents the current object.
            </summary>
        <returns> A string that represents the current object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry Update (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry Update(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Update(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (entity As Object) As EntityEntry" />
      <MemberSignature Language="F#" Value="abstract member Update : obj -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&#xA;override this.Update : obj -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" Usage="dbContext.Update entity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry ^ Update(System::Object ^ entity);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry Update(winrt::Windows::Foundation::IInspectable const &amp; entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"> The entity to update. </param>
        <summary>
          <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state such that it will
                    be updated in the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    All properties of the entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)" /> to begin tracking the entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
          <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
        </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt; Update&lt;TEntity&gt; (TEntity entity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!!TEntity&gt; Update&lt;class TEntity&gt;(!!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.Update``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update(Of TEntity As Class) (entity As TEntity) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member Update : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)&#xA;override this.Update : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="dbContext.Update entity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class virtual Microsoft::EntityFrameworkCore::ChangeTracking::EntityEntry&lt;TEntity&gt; ^ Update(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The type of the entity. </typeparam>
        <param name="entity"> The entity to update. </param>
        <summary>
          <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state such that it will
                    be updated in the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    All properties of the entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Attach``1(``0)" /> to begin tracking the entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
          <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
        </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRange">
      <MemberSignature Language="C#" Value="public virtual void UpdateRange (System.Collections.Generic.IEnumerable&lt;object&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateRange(class System.Collections.Generic.IEnumerable`1&lt;object&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.UpdateRange(System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpdateRange (entities As IEnumerable(Of Object))" />
      <MemberSignature Language="F#" Value="abstract member UpdateRange : seq&lt;obj&gt; -&gt; unit&#xA;override this.UpdateRange : seq&lt;obj&gt; -&gt; unit" Usage="dbContext.UpdateRange entities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void UpdateRange(System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="entities"> The entities to update. </param>
        <summary>
          <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state such that they will
                    be updated in the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    All properties of each entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)" /> to begin tracking each entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
          <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRange">
      <MemberSignature Language="C#" Value="public virtual void UpdateRange (params object[] entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateRange(object[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContext.UpdateRange(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpdateRange (ParamArray entities As Object())" />
      <MemberSignature Language="F#" Value="abstract member UpdateRange : obj[] -&gt; unit&#xA;override this.UpdateRange : obj[] -&gt; unit" Usage="dbContext.UpdateRange entities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void UpdateRange(... cli::array &lt;System::Object ^&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entities"> The entities to update. </param>
        <summary>
          <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state such that they will
                    be updated in the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    All properties of each entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)" /> to begin tracking each entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
          <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. These entities will also begin to be tracked
                    by the context. If a reachable entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>