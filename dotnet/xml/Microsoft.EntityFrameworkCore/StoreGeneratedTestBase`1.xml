<Type Name="StoreGeneratedTestBase&lt;TFixture&gt;" FullName="Microsoft.EntityFrameworkCore.StoreGeneratedTestBase&lt;TFixture&gt;">
  <TypeSignature Language="C#" Value="public abstract class StoreGeneratedTestBase&lt;TFixture&gt; : Xunit.IClassFixture&lt;TFixture&gt; where TFixture : StoreGeneratedTestBase&lt;TFixture&gt;.StoreGeneratedFixtureBasenew()" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit StoreGeneratedTestBase`1&lt;.ctor (class Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1/StoreGeneratedFixtureBase&lt;!TFixture&gt;) TFixture&gt; extends System.Object implements class Xunit.IClassFixture`1&lt;!TFixture&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class StoreGeneratedTestBase(Of TFixture)&#xA;Implements IClassFixture(Of TFixture)" />
  <TypeSignature Language="F#" Value="type StoreGeneratedTestBase&lt;'Fixture (requires 'Fixture :&gt; StoreGeneratedTestBase&lt;'Fixture&gt;.StoreGeneratedFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt; = class&#xA;    interface IClassFixture&lt;'Fixture (requires 'Fixture :&gt; StoreGeneratedTestBase&lt;'Fixture&gt;.StoreGeneratedFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TFixture&gt;&#xA; where TFixture : StoreGeneratedTestBase&lt;TFixture&gt;::StoreGeneratedFixtureBasegcnew()public ref class StoreGeneratedTestBase abstract : Xunit::IClassFixture&lt;TFixture&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TFixture">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <BaseTypeName>Microsoft.EntityFrameworkCore.StoreGeneratedTestBase&lt;TFixture&gt;+StoreGeneratedFixtureBase</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Xunit.IClassFixture&lt;TFixture&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TFixture">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StoreGeneratedTestBase (TFixture fixture);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(!TFixture fixture) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (fixture As TFixture)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.StoreGeneratedTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.StoreGeneratedTestBase&lt;'Fixture&gt;.StoreGeneratedFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt; : 'Fixture -&gt; Microsoft.EntityFrameworkCore.StoreGeneratedTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.StoreGeneratedTestBase&lt;'Fixture&gt;.StoreGeneratedFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;" Usage="new Microsoft.EntityFrameworkCore.StoreGeneratedTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.StoreGeneratedTestBase&lt;'Fixture&gt;.StoreGeneratedFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt; fixture" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; StoreGeneratedTestBase(TFixture fixture);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; StoreGeneratedTestBase(TFixture fixture);" />
      <MemberSignature Language="C++ WINRT" Value=" StoreGeneratedTestBase(TFixture fixture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fixture" Type="TFixture" />
      </Parameters>
      <Docs>
        <param name="fixture">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="After_save_ignore_ignores_value_even_if_modified">
      <MemberSignature Language="C#" Value="public virtual void After_save_ignore_ignores_value_even_if_modified (string propertyName, string expectedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void After_save_ignore_ignores_value_even_if_modified(string propertyName, string expectedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.After_save_ignore_ignores_value_even_if_modified(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub After_save_ignore_ignores_value_even_if_modified (propertyName As String, expectedValue As String)" />
      <MemberSignature Language="F#" Value="abstract member After_save_ignore_ignores_value_even_if_modified : string * string -&gt; unit&#xA;override this.After_save_ignore_ignores_value_even_if_modified : string * string -&gt; unit" Usage="storeGeneratedTestBase.After_save_ignore_ignores_value_even_if_modified (propertyName, expectedValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void After_save_ignore_ignores_value_even_if_modified(System::String ^ propertyName, System::String ^ expectedValue);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void After_save_ignore_ignores_value_even_if_modified(Platform::String ^ propertyName, Platform::String ^ expectedValue);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void After_save_ignore_ignores_value_even_if_modified(std::wstring const &amp; propertyName, std::wstring const &amp; expectedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="expectedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="expectedValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="After_save_ignore_ignores_value_if_not_modified">
      <MemberSignature Language="C#" Value="public virtual void After_save_ignore_ignores_value_if_not_modified (string propertyName, string expectedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void After_save_ignore_ignores_value_if_not_modified(string propertyName, string expectedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.After_save_ignore_ignores_value_if_not_modified(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub After_save_ignore_ignores_value_if_not_modified (propertyName As String, expectedValue As String)" />
      <MemberSignature Language="F#" Value="abstract member After_save_ignore_ignores_value_if_not_modified : string * string -&gt; unit&#xA;override this.After_save_ignore_ignores_value_if_not_modified : string * string -&gt; unit" Usage="storeGeneratedTestBase.After_save_ignore_ignores_value_if_not_modified (propertyName, expectedValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void After_save_ignore_ignores_value_if_not_modified(System::String ^ propertyName, System::String ^ expectedValue);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void After_save_ignore_ignores_value_if_not_modified(Platform::String ^ propertyName, Platform::String ^ expectedValue);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void After_save_ignore_ignores_value_if_not_modified(std::wstring const &amp; propertyName, std::wstring const &amp; expectedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="expectedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="expectedValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="After_save_throw_always_throws_if_value_modified">
      <MemberSignature Language="C#" Value="public virtual void After_save_throw_always_throws_if_value_modified (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void After_save_throw_always_throws_if_value_modified(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.After_save_throw_always_throws_if_value_modified(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub After_save_throw_always_throws_if_value_modified (propertyName As String)" />
      <MemberSignature Language="F#" Value="abstract member After_save_throw_always_throws_if_value_modified : string -&gt; unit&#xA;override this.After_save_throw_always_throws_if_value_modified : string -&gt; unit" Usage="storeGeneratedTestBase.After_save_throw_always_throws_if_value_modified propertyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void After_save_throw_always_throws_if_value_modified(System::String ^ propertyName);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void After_save_throw_always_throws_if_value_modified(Platform::String ^ propertyName);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void After_save_throw_always_throws_if_value_modified(std::wstring const &amp; propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="After_save_throw_ignores_value_if_not_modified">
      <MemberSignature Language="C#" Value="public virtual void After_save_throw_ignores_value_if_not_modified (string propertyName, string expectedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void After_save_throw_ignores_value_if_not_modified(string propertyName, string expectedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.After_save_throw_ignores_value_if_not_modified(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub After_save_throw_ignores_value_if_not_modified (propertyName As String, expectedValue As String)" />
      <MemberSignature Language="F#" Value="abstract member After_save_throw_ignores_value_if_not_modified : string * string -&gt; unit&#xA;override this.After_save_throw_ignores_value_if_not_modified : string * string -&gt; unit" Usage="storeGeneratedTestBase.After_save_throw_ignores_value_if_not_modified (propertyName, expectedValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void After_save_throw_ignores_value_if_not_modified(System::String ^ propertyName, System::String ^ expectedValue);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void After_save_throw_ignores_value_if_not_modified(Platform::String ^ propertyName, Platform::String ^ expectedValue);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void After_save_throw_ignores_value_if_not_modified(std::wstring const &amp; propertyName, std::wstring const &amp; expectedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="expectedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="expectedValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="After_save_use_ignores_value_if_not_modified">
      <MemberSignature Language="C#" Value="public virtual void After_save_use_ignores_value_if_not_modified (string propertyName, string expectedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void After_save_use_ignores_value_if_not_modified(string propertyName, string expectedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.After_save_use_ignores_value_if_not_modified(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub After_save_use_ignores_value_if_not_modified (propertyName As String, expectedValue As String)" />
      <MemberSignature Language="F#" Value="abstract member After_save_use_ignores_value_if_not_modified : string * string -&gt; unit&#xA;override this.After_save_use_ignores_value_if_not_modified : string * string -&gt; unit" Usage="storeGeneratedTestBase.After_save_use_ignores_value_if_not_modified (propertyName, expectedValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void After_save_use_ignores_value_if_not_modified(System::String ^ propertyName, System::String ^ expectedValue);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void After_save_use_ignores_value_if_not_modified(Platform::String ^ propertyName, Platform::String ^ expectedValue);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void After_save_use_ignores_value_if_not_modified(std::wstring const &amp; propertyName, std::wstring const &amp; expectedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="expectedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="expectedValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="After_save_use_uses_value_if_modified">
      <MemberSignature Language="C#" Value="public virtual void After_save_use_uses_value_if_modified (string propertyName, string expectedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void After_save_use_uses_value_if_modified(string propertyName, string expectedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.After_save_use_uses_value_if_modified(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub After_save_use_uses_value_if_modified (propertyName As String, expectedValue As String)" />
      <MemberSignature Language="F#" Value="abstract member After_save_use_uses_value_if_modified : string * string -&gt; unit&#xA;override this.After_save_use_uses_value_if_modified : string * string -&gt; unit" Usage="storeGeneratedTestBase.After_save_use_uses_value_if_modified (propertyName, expectedValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void After_save_use_uses_value_if_modified(System::String ^ propertyName, System::String ^ expectedValue);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void After_save_use_uses_value_if_modified(Platform::String ^ propertyName, Platform::String ^ expectedValue);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void After_save_use_uses_value_if_modified(std::wstring const &amp; propertyName, std::wstring const &amp; expectedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="expectedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="expectedValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Always_computed_property_on_Added_entity_cannot_have_value_set_explicitly">
      <MemberSignature Language="C#" Value="public virtual void Always_computed_property_on_Added_entity_cannot_have_value_set_explicitly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Always_computed_property_on_Added_entity_cannot_have_value_set_explicitly() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Always_computed_property_on_Added_entity_cannot_have_value_set_explicitly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Always_computed_property_on_Added_entity_cannot_have_value_set_explicitly ()" />
      <MemberSignature Language="F#" Value="abstract member Always_computed_property_on_Added_entity_cannot_have_value_set_explicitly : unit -&gt; unit&#xA;override this.Always_computed_property_on_Added_entity_cannot_have_value_set_explicitly : unit -&gt; unit" Usage="storeGeneratedTestBase.Always_computed_property_on_Added_entity_cannot_have_value_set_explicitly " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Always_computed_property_on_Added_entity_cannot_have_value_set_explicitly();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Always_computed_property_on_Added_entity_cannot_have_value_set_explicitly();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Always_computed_property_on_Added_entity_cannot_have_value_set_explicitly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Always_computed_property_on_Added_entity_with_default_value_gets_value_from_store">
      <MemberSignature Language="C#" Value="public virtual void Always_computed_property_on_Added_entity_with_default_value_gets_value_from_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Always_computed_property_on_Added_entity_with_default_value_gets_value_from_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Always_computed_property_on_Added_entity_with_default_value_gets_value_from_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Always_computed_property_on_Added_entity_with_default_value_gets_value_from_store ()" />
      <MemberSignature Language="F#" Value="abstract member Always_computed_property_on_Added_entity_with_default_value_gets_value_from_store : unit -&gt; unit&#xA;override this.Always_computed_property_on_Added_entity_with_default_value_gets_value_from_store : unit -&gt; unit" Usage="storeGeneratedTestBase.Always_computed_property_on_Added_entity_with_default_value_gets_value_from_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Always_computed_property_on_Added_entity_with_default_value_gets_value_from_store();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Always_computed_property_on_Added_entity_with_default_value_gets_value_from_store();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Always_computed_property_on_Added_entity_with_default_value_gets_value_from_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Always_computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set">
      <MemberSignature Language="C#" Value="public virtual void Always_computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Always_computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Always_computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Always_computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set ()" />
      <MemberSignature Language="F#" Value="abstract member Always_computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set : unit -&gt; unit&#xA;override this.Always_computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set : unit -&gt; unit" Usage="storeGeneratedTestBase.Always_computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Always_computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Always_computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Always_computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Always_computed_property_on_Added_entity_with_temporary_value_gets_value_from_store">
      <MemberSignature Language="C#" Value="public virtual void Always_computed_property_on_Added_entity_with_temporary_value_gets_value_from_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Always_computed_property_on_Added_entity_with_temporary_value_gets_value_from_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Always_computed_property_on_Added_entity_with_temporary_value_gets_value_from_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Always_computed_property_on_Added_entity_with_temporary_value_gets_value_from_store ()" />
      <MemberSignature Language="F#" Value="abstract member Always_computed_property_on_Added_entity_with_temporary_value_gets_value_from_store : unit -&gt; unit&#xA;override this.Always_computed_property_on_Added_entity_with_temporary_value_gets_value_from_store : unit -&gt; unit" Usage="storeGeneratedTestBase.Always_computed_property_on_Added_entity_with_temporary_value_gets_value_from_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Always_computed_property_on_Added_entity_with_temporary_value_gets_value_from_store();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Always_computed_property_on_Added_entity_with_temporary_value_gets_value_from_store();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Always_computed_property_on_Added_entity_with_temporary_value_gets_value_from_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Always_computed_property_on_Modified_entity_is_not_included_in_update_even_when_modified">
      <MemberSignature Language="C#" Value="public virtual void Always_computed_property_on_Modified_entity_is_not_included_in_update_even_when_modified ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Always_computed_property_on_Modified_entity_is_not_included_in_update_even_when_modified() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Always_computed_property_on_Modified_entity_is_not_included_in_update_even_when_modified" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Always_computed_property_on_Modified_entity_is_not_included_in_update_even_when_modified ()" />
      <MemberSignature Language="F#" Value="abstract member Always_computed_property_on_Modified_entity_is_not_included_in_update_even_when_modified : unit -&gt; unit&#xA;override this.Always_computed_property_on_Modified_entity_is_not_included_in_update_even_when_modified : unit -&gt; unit" Usage="storeGeneratedTestBase.Always_computed_property_on_Modified_entity_is_not_included_in_update_even_when_modified " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Always_computed_property_on_Modified_entity_is_not_included_in_update_even_when_modified();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Always_computed_property_on_Modified_entity_is_not_included_in_update_even_when_modified();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Always_computed_property_on_Modified_entity_is_not_included_in_update_even_when_modified();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Always_computed_property_on_Modified_entity_is_read_from_store_when_not_modified">
      <MemberSignature Language="C#" Value="public virtual void Always_computed_property_on_Modified_entity_is_read_from_store_when_not_modified ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Always_computed_property_on_Modified_entity_is_read_from_store_when_not_modified() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Always_computed_property_on_Modified_entity_is_read_from_store_when_not_modified" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Always_computed_property_on_Modified_entity_is_read_from_store_when_not_modified ()" />
      <MemberSignature Language="F#" Value="abstract member Always_computed_property_on_Modified_entity_is_read_from_store_when_not_modified : unit -&gt; unit&#xA;override this.Always_computed_property_on_Modified_entity_is_read_from_store_when_not_modified : unit -&gt; unit" Usage="storeGeneratedTestBase.Always_computed_property_on_Modified_entity_is_read_from_store_when_not_modified " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Always_computed_property_on_Modified_entity_is_read_from_store_when_not_modified();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Always_computed_property_on_Modified_entity_is_read_from_store_when_not_modified();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Always_computed_property_on_Modified_entity_is_read_from_store_when_not_modified();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Always_computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state">
      <MemberSignature Language="C#" Value="public virtual void Always_computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Always_computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Always_computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Always_computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state ()" />
      <MemberSignature Language="F#" Value="abstract member Always_computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state : unit -&gt; unit&#xA;override this.Always_computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state : unit -&gt; unit" Usage="storeGeneratedTestBase.Always_computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Always_computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Always_computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Always_computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Always_identity_property_on_Added_entity_gets_store_value_even_when_set_explicitly">
      <MemberSignature Language="C#" Value="public virtual void Always_identity_property_on_Added_entity_gets_store_value_even_when_set_explicitly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Always_identity_property_on_Added_entity_gets_store_value_even_when_set_explicitly() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Always_identity_property_on_Added_entity_gets_store_value_even_when_set_explicitly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Always_identity_property_on_Added_entity_gets_store_value_even_when_set_explicitly ()" />
      <MemberSignature Language="F#" Value="abstract member Always_identity_property_on_Added_entity_gets_store_value_even_when_set_explicitly : unit -&gt; unit&#xA;override this.Always_identity_property_on_Added_entity_gets_store_value_even_when_set_explicitly : unit -&gt; unit" Usage="storeGeneratedTestBase.Always_identity_property_on_Added_entity_gets_store_value_even_when_set_explicitly " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Always_identity_property_on_Added_entity_gets_store_value_even_when_set_explicitly();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Always_identity_property_on_Added_entity_gets_store_value_even_when_set_explicitly();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Always_identity_property_on_Added_entity_gets_store_value_even_when_set_explicitly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Always_identity_property_on_Added_entity_with_default_value_gets_value_from_store">
      <MemberSignature Language="C#" Value="public virtual void Always_identity_property_on_Added_entity_with_default_value_gets_value_from_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Always_identity_property_on_Added_entity_with_default_value_gets_value_from_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Always_identity_property_on_Added_entity_with_default_value_gets_value_from_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Always_identity_property_on_Added_entity_with_default_value_gets_value_from_store ()" />
      <MemberSignature Language="F#" Value="abstract member Always_identity_property_on_Added_entity_with_default_value_gets_value_from_store : unit -&gt; unit&#xA;override this.Always_identity_property_on_Added_entity_with_default_value_gets_value_from_store : unit -&gt; unit" Usage="storeGeneratedTestBase.Always_identity_property_on_Added_entity_with_default_value_gets_value_from_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Always_identity_property_on_Added_entity_with_default_value_gets_value_from_store();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Always_identity_property_on_Added_entity_with_default_value_gets_value_from_store();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Always_identity_property_on_Added_entity_with_default_value_gets_value_from_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Always_identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set">
      <MemberSignature Language="C#" Value="public virtual void Always_identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Always_identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Always_identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Always_identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set ()" />
      <MemberSignature Language="F#" Value="abstract member Always_identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set : unit -&gt; unit&#xA;override this.Always_identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set : unit -&gt; unit" Usage="storeGeneratedTestBase.Always_identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Always_identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Always_identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Always_identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Always_identity_property_on_Added_entity_with_temporary_value_gets_value_from_store">
      <MemberSignature Language="C#" Value="public virtual void Always_identity_property_on_Added_entity_with_temporary_value_gets_value_from_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Always_identity_property_on_Added_entity_with_temporary_value_gets_value_from_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Always_identity_property_on_Added_entity_with_temporary_value_gets_value_from_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Always_identity_property_on_Added_entity_with_temporary_value_gets_value_from_store ()" />
      <MemberSignature Language="F#" Value="abstract member Always_identity_property_on_Added_entity_with_temporary_value_gets_value_from_store : unit -&gt; unit&#xA;override this.Always_identity_property_on_Added_entity_with_temporary_value_gets_value_from_store : unit -&gt; unit" Usage="storeGeneratedTestBase.Always_identity_property_on_Added_entity_with_temporary_value_gets_value_from_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Always_identity_property_on_Added_entity_with_temporary_value_gets_value_from_store();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Always_identity_property_on_Added_entity_with_temporary_value_gets_value_from_store();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Always_identity_property_on_Added_entity_with_temporary_value_gets_value_from_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Always_identity_property_on_Modified_entity_is_not_included_in_the_update_when_not_modified">
      <MemberSignature Language="C#" Value="public virtual void Always_identity_property_on_Modified_entity_is_not_included_in_the_update_when_not_modified ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Always_identity_property_on_Modified_entity_is_not_included_in_the_update_when_not_modified() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Always_identity_property_on_Modified_entity_is_not_included_in_the_update_when_not_modified" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Always_identity_property_on_Modified_entity_is_not_included_in_the_update_when_not_modified ()" />
      <MemberSignature Language="F#" Value="abstract member Always_identity_property_on_Modified_entity_is_not_included_in_the_update_when_not_modified : unit -&gt; unit&#xA;override this.Always_identity_property_on_Modified_entity_is_not_included_in_the_update_when_not_modified : unit -&gt; unit" Usage="storeGeneratedTestBase.Always_identity_property_on_Modified_entity_is_not_included_in_the_update_when_not_modified " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Always_identity_property_on_Modified_entity_is_not_included_in_the_update_when_not_modified();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Always_identity_property_on_Modified_entity_is_not_included_in_the_update_when_not_modified();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Always_identity_property_on_Modified_entity_is_not_included_in_the_update_when_not_modified();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Always_identity_property_on_Modified_entity_is_not_included_in_update_when_modified">
      <MemberSignature Language="C#" Value="public virtual void Always_identity_property_on_Modified_entity_is_not_included_in_update_when_modified ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Always_identity_property_on_Modified_entity_is_not_included_in_update_when_modified() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Always_identity_property_on_Modified_entity_is_not_included_in_update_when_modified" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Always_identity_property_on_Modified_entity_is_not_included_in_update_when_modified ()" />
      <MemberSignature Language="F#" Value="abstract member Always_identity_property_on_Modified_entity_is_not_included_in_update_when_modified : unit -&gt; unit&#xA;override this.Always_identity_property_on_Modified_entity_is_not_included_in_update_when_modified : unit -&gt; unit" Usage="storeGeneratedTestBase.Always_identity_property_on_Modified_entity_is_not_included_in_update_when_modified " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Always_identity_property_on_Modified_entity_is_not_included_in_update_when_modified();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Always_identity_property_on_Modified_entity_is_not_included_in_update_when_modified();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Always_identity_property_on_Modified_entity_is_not_included_in_update_when_modified();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Always_identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state">
      <MemberSignature Language="C#" Value="public virtual void Always_identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Always_identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Always_identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Always_identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state ()" />
      <MemberSignature Language="F#" Value="abstract member Always_identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state : unit -&gt; unit&#xA;override this.Always_identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state : unit -&gt; unit" Usage="storeGeneratedTestBase.Always_identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Always_identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Always_identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Always_identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Before_save_ignore_ignores_value_even_if_set">
      <MemberSignature Language="C#" Value="public virtual void Before_save_ignore_ignores_value_even_if_set (string propertyName, string expectedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Before_save_ignore_ignores_value_even_if_set(string propertyName, string expectedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Before_save_ignore_ignores_value_even_if_set(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Before_save_ignore_ignores_value_even_if_set (propertyName As String, expectedValue As String)" />
      <MemberSignature Language="F#" Value="abstract member Before_save_ignore_ignores_value_even_if_set : string * string -&gt; unit&#xA;override this.Before_save_ignore_ignores_value_even_if_set : string * string -&gt; unit" Usage="storeGeneratedTestBase.Before_save_ignore_ignores_value_even_if_set (propertyName, expectedValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Before_save_ignore_ignores_value_even_if_set(System::String ^ propertyName, System::String ^ expectedValue);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Before_save_ignore_ignores_value_even_if_set(Platform::String ^ propertyName, Platform::String ^ expectedValue);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Before_save_ignore_ignores_value_even_if_set(std::wstring const &amp; propertyName, std::wstring const &amp; expectedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="expectedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="expectedValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Before_save_ignore_ignores_value_if_not_set">
      <MemberSignature Language="C#" Value="public virtual void Before_save_ignore_ignores_value_if_not_set (string propertyName, string expectedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Before_save_ignore_ignores_value_if_not_set(string propertyName, string expectedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Before_save_ignore_ignores_value_if_not_set(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Before_save_ignore_ignores_value_if_not_set (propertyName As String, expectedValue As String)" />
      <MemberSignature Language="F#" Value="abstract member Before_save_ignore_ignores_value_if_not_set : string * string -&gt; unit&#xA;override this.Before_save_ignore_ignores_value_if_not_set : string * string -&gt; unit" Usage="storeGeneratedTestBase.Before_save_ignore_ignores_value_if_not_set (propertyName, expectedValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Before_save_ignore_ignores_value_if_not_set(System::String ^ propertyName, System::String ^ expectedValue);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Before_save_ignore_ignores_value_if_not_set(Platform::String ^ propertyName, Platform::String ^ expectedValue);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Before_save_ignore_ignores_value_if_not_set(std::wstring const &amp; propertyName, std::wstring const &amp; expectedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="expectedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="expectedValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Before_save_throw_always_throws_if_value_set">
      <MemberSignature Language="C#" Value="public virtual void Before_save_throw_always_throws_if_value_set (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Before_save_throw_always_throws_if_value_set(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Before_save_throw_always_throws_if_value_set(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Before_save_throw_always_throws_if_value_set (propertyName As String)" />
      <MemberSignature Language="F#" Value="abstract member Before_save_throw_always_throws_if_value_set : string -&gt; unit&#xA;override this.Before_save_throw_always_throws_if_value_set : string -&gt; unit" Usage="storeGeneratedTestBase.Before_save_throw_always_throws_if_value_set propertyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Before_save_throw_always_throws_if_value_set(System::String ^ propertyName);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Before_save_throw_always_throws_if_value_set(Platform::String ^ propertyName);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Before_save_throw_always_throws_if_value_set(std::wstring const &amp; propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Before_save_throw_ignores_value_if_not_set">
      <MemberSignature Language="C#" Value="public virtual void Before_save_throw_ignores_value_if_not_set (string propertyName, string expectedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Before_save_throw_ignores_value_if_not_set(string propertyName, string expectedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Before_save_throw_ignores_value_if_not_set(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Before_save_throw_ignores_value_if_not_set (propertyName As String, expectedValue As String)" />
      <MemberSignature Language="F#" Value="abstract member Before_save_throw_ignores_value_if_not_set : string * string -&gt; unit&#xA;override this.Before_save_throw_ignores_value_if_not_set : string * string -&gt; unit" Usage="storeGeneratedTestBase.Before_save_throw_ignores_value_if_not_set (propertyName, expectedValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Before_save_throw_ignores_value_if_not_set(System::String ^ propertyName, System::String ^ expectedValue);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Before_save_throw_ignores_value_if_not_set(Platform::String ^ propertyName, Platform::String ^ expectedValue);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Before_save_throw_ignores_value_if_not_set(std::wstring const &amp; propertyName, std::wstring const &amp; expectedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="expectedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="expectedValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Before_save_use_always_uses_value_if_set">
      <MemberSignature Language="C#" Value="public virtual void Before_save_use_always_uses_value_if_set (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Before_save_use_always_uses_value_if_set(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Before_save_use_always_uses_value_if_set(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Before_save_use_always_uses_value_if_set (propertyName As String)" />
      <MemberSignature Language="F#" Value="abstract member Before_save_use_always_uses_value_if_set : string -&gt; unit&#xA;override this.Before_save_use_always_uses_value_if_set : string -&gt; unit" Usage="storeGeneratedTestBase.Before_save_use_always_uses_value_if_set propertyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Before_save_use_always_uses_value_if_set(System::String ^ propertyName);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Before_save_use_always_uses_value_if_set(Platform::String ^ propertyName);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Before_save_use_always_uses_value_if_set(std::wstring const &amp; propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Before_save_use_ignores_value_if_not_set">
      <MemberSignature Language="C#" Value="public virtual void Before_save_use_ignores_value_if_not_set (string propertyName, string expectedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Before_save_use_ignores_value_if_not_set(string propertyName, string expectedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Before_save_use_ignores_value_if_not_set(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Before_save_use_ignores_value_if_not_set (propertyName As String, expectedValue As String)" />
      <MemberSignature Language="F#" Value="abstract member Before_save_use_ignores_value_if_not_set : string * string -&gt; unit&#xA;override this.Before_save_use_ignores_value_if_not_set : string * string -&gt; unit" Usage="storeGeneratedTestBase.Before_save_use_ignores_value_if_not_set (propertyName, expectedValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Before_save_use_ignores_value_if_not_set(System::String ^ propertyName, System::String ^ expectedValue);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Before_save_use_ignores_value_if_not_set(Platform::String ^ propertyName, Platform::String ^ expectedValue);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Before_save_use_ignores_value_if_not_set(std::wstring const &amp; propertyName, std::wstring const &amp; expectedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.InlineData(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xunit.Theory</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="expectedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="expectedValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Computed_property_on_Added_entity_can_have_value_set_explicitly">
      <MemberSignature Language="C#" Value="public virtual void Computed_property_on_Added_entity_can_have_value_set_explicitly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Computed_property_on_Added_entity_can_have_value_set_explicitly() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Computed_property_on_Added_entity_can_have_value_set_explicitly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Computed_property_on_Added_entity_can_have_value_set_explicitly ()" />
      <MemberSignature Language="F#" Value="abstract member Computed_property_on_Added_entity_can_have_value_set_explicitly : unit -&gt; unit&#xA;override this.Computed_property_on_Added_entity_can_have_value_set_explicitly : unit -&gt; unit" Usage="storeGeneratedTestBase.Computed_property_on_Added_entity_can_have_value_set_explicitly " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Computed_property_on_Added_entity_can_have_value_set_explicitly();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Computed_property_on_Added_entity_can_have_value_set_explicitly();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Computed_property_on_Added_entity_can_have_value_set_explicitly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Computed_property_on_Added_entity_with_default_value_gets_value_from_store">
      <MemberSignature Language="C#" Value="public virtual void Computed_property_on_Added_entity_with_default_value_gets_value_from_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Computed_property_on_Added_entity_with_default_value_gets_value_from_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Computed_property_on_Added_entity_with_default_value_gets_value_from_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Computed_property_on_Added_entity_with_default_value_gets_value_from_store ()" />
      <MemberSignature Language="F#" Value="abstract member Computed_property_on_Added_entity_with_default_value_gets_value_from_store : unit -&gt; unit&#xA;override this.Computed_property_on_Added_entity_with_default_value_gets_value_from_store : unit -&gt; unit" Usage="storeGeneratedTestBase.Computed_property_on_Added_entity_with_default_value_gets_value_from_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Computed_property_on_Added_entity_with_default_value_gets_value_from_store();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Computed_property_on_Added_entity_with_default_value_gets_value_from_store();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Computed_property_on_Added_entity_with_default_value_gets_value_from_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set">
      <MemberSignature Language="C#" Value="public virtual void Computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set ()" />
      <MemberSignature Language="F#" Value="abstract member Computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set : unit -&gt; unit&#xA;override this.Computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set : unit -&gt; unit" Usage="storeGeneratedTestBase.Computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Computed_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Computed_property_on_Added_entity_with_temporary_value_gets_value_from_store">
      <MemberSignature Language="C#" Value="public virtual void Computed_property_on_Added_entity_with_temporary_value_gets_value_from_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Computed_property_on_Added_entity_with_temporary_value_gets_value_from_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Computed_property_on_Added_entity_with_temporary_value_gets_value_from_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Computed_property_on_Added_entity_with_temporary_value_gets_value_from_store ()" />
      <MemberSignature Language="F#" Value="abstract member Computed_property_on_Added_entity_with_temporary_value_gets_value_from_store : unit -&gt; unit&#xA;override this.Computed_property_on_Added_entity_with_temporary_value_gets_value_from_store : unit -&gt; unit" Usage="storeGeneratedTestBase.Computed_property_on_Added_entity_with_temporary_value_gets_value_from_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Computed_property_on_Added_entity_with_temporary_value_gets_value_from_store();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Computed_property_on_Added_entity_with_temporary_value_gets_value_from_store();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Computed_property_on_Added_entity_with_temporary_value_gets_value_from_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Computed_property_on_Modified_entity_is_included_in_update_when_modified">
      <MemberSignature Language="C#" Value="public virtual void Computed_property_on_Modified_entity_is_included_in_update_when_modified ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Computed_property_on_Modified_entity_is_included_in_update_when_modified() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Computed_property_on_Modified_entity_is_included_in_update_when_modified" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Computed_property_on_Modified_entity_is_included_in_update_when_modified ()" />
      <MemberSignature Language="F#" Value="abstract member Computed_property_on_Modified_entity_is_included_in_update_when_modified : unit -&gt; unit&#xA;override this.Computed_property_on_Modified_entity_is_included_in_update_when_modified : unit -&gt; unit" Usage="storeGeneratedTestBase.Computed_property_on_Modified_entity_is_included_in_update_when_modified " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Computed_property_on_Modified_entity_is_included_in_update_when_modified();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Computed_property_on_Modified_entity_is_included_in_update_when_modified();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Computed_property_on_Modified_entity_is_included_in_update_when_modified();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Computed_property_on_Modified_entity_is_read_from_store_when_not_modified">
      <MemberSignature Language="C#" Value="public virtual void Computed_property_on_Modified_entity_is_read_from_store_when_not_modified ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Computed_property_on_Modified_entity_is_read_from_store_when_not_modified() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Computed_property_on_Modified_entity_is_read_from_store_when_not_modified" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Computed_property_on_Modified_entity_is_read_from_store_when_not_modified ()" />
      <MemberSignature Language="F#" Value="abstract member Computed_property_on_Modified_entity_is_read_from_store_when_not_modified : unit -&gt; unit&#xA;override this.Computed_property_on_Modified_entity_is_read_from_store_when_not_modified : unit -&gt; unit" Usage="storeGeneratedTestBase.Computed_property_on_Modified_entity_is_read_from_store_when_not_modified " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Computed_property_on_Modified_entity_is_read_from_store_when_not_modified();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Computed_property_on_Modified_entity_is_read_from_store_when_not_modified();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Computed_property_on_Modified_entity_is_read_from_store_when_not_modified();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state">
      <MemberSignature Language="C#" Value="public virtual void Computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state ()" />
      <MemberSignature Language="F#" Value="abstract member Computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state : unit -&gt; unit&#xA;override this.Computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state : unit -&gt; unit" Usage="storeGeneratedTestBase.Computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Computed_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateContext">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.DbContext CreateContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.EntityFrameworkCore.DbContext CreateContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.CreateContext" />
      <MemberSignature Language="VB.NET" Value="Protected Function CreateContext () As DbContext" />
      <MemberSignature Language="F#" Value="member this.CreateContext : unit -&gt; Microsoft.EntityFrameworkCore.DbContext" Usage="storeGeneratedTestBase.CreateContext " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Microsoft::EntityFrameworkCore::DbContext ^ CreateContext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteWithStrategyInTransaction">
      <MemberSignature Language="C#" Value="protected virtual void ExecuteWithStrategyInTransaction (Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; testOperation, Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; nestedTestOperation1 = null, Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; nestedTestOperation2 = null);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ExecuteWithStrategyInTransaction(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContext&gt; testOperation, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContext&gt; nestedTestOperation1, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContext&gt; nestedTestOperation2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.ExecuteWithStrategyInTransaction(System.Action{Microsoft.EntityFrameworkCore.DbContext},System.Action{Microsoft.EntityFrameworkCore.DbContext},System.Action{Microsoft.EntityFrameworkCore.DbContext})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ExecuteWithStrategyInTransaction (testOperation As Action(Of DbContext), Optional nestedTestOperation1 As Action(Of DbContext) = null, Optional nestedTestOperation2 As Action(Of DbContext) = null)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteWithStrategyInTransaction : Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; * Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; * Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; -&gt; unit&#xA;override this.ExecuteWithStrategyInTransaction : Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; * Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; * Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt; -&gt; unit" Usage="storeGeneratedTestBase.ExecuteWithStrategyInTransaction (testOperation, nestedTestOperation1, nestedTestOperation2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testOperation" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt;" />
        <Parameter Name="nestedTestOperation1" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt;" />
        <Parameter Name="nestedTestOperation2" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContext&gt;" />
      </Parameters>
      <Docs>
        <param name="testOperation">To be added.</param>
        <param name="nestedTestOperation1">To be added.</param>
        <param name="nestedTestOperation2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixture">
      <MemberSignature Language="C#" Value="protected TFixture Fixture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TFixture Fixture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Fixture" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Fixture As TFixture" />
      <MemberSignature Language="F#" Value="member this.Fixture : 'Fixture" Usage="Microsoft.EntityFrameworkCore.StoreGeneratedTestBase&lt;'Fixture (requires 'Fixture :&gt; Microsoft.EntityFrameworkCore.StoreGeneratedTestBase&lt;'Fixture&gt;.StoreGeneratedFixtureBase and 'Fixture : (new : unit -&gt; 'Fixture))&gt;.Fixture" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property TFixture Fixture { TFixture get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; property TFixture Fixture { TFixture get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TFixture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity_key_with_read_only_before_save_throws_if_explicit_values_set">
      <MemberSignature Language="C#" Value="public virtual void Identity_key_with_read_only_before_save_throws_if_explicit_values_set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Identity_key_with_read_only_before_save_throws_if_explicit_values_set() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Identity_key_with_read_only_before_save_throws_if_explicit_values_set" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Identity_key_with_read_only_before_save_throws_if_explicit_values_set ()" />
      <MemberSignature Language="F#" Value="abstract member Identity_key_with_read_only_before_save_throws_if_explicit_values_set : unit -&gt; unit&#xA;override this.Identity_key_with_read_only_before_save_throws_if_explicit_values_set : unit -&gt; unit" Usage="storeGeneratedTestBase.Identity_key_with_read_only_before_save_throws_if_explicit_values_set " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Identity_key_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Identity_key_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Identity_key_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity_property_on_Added_entity_can_have_value_set_explicitly">
      <MemberSignature Language="C#" Value="public virtual void Identity_property_on_Added_entity_can_have_value_set_explicitly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Identity_property_on_Added_entity_can_have_value_set_explicitly() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Identity_property_on_Added_entity_can_have_value_set_explicitly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Identity_property_on_Added_entity_can_have_value_set_explicitly ()" />
      <MemberSignature Language="F#" Value="abstract member Identity_property_on_Added_entity_can_have_value_set_explicitly : unit -&gt; unit&#xA;override this.Identity_property_on_Added_entity_can_have_value_set_explicitly : unit -&gt; unit" Usage="storeGeneratedTestBase.Identity_property_on_Added_entity_can_have_value_set_explicitly " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Identity_property_on_Added_entity_can_have_value_set_explicitly();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Identity_property_on_Added_entity_can_have_value_set_explicitly();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Identity_property_on_Added_entity_can_have_value_set_explicitly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity_property_on_Added_entity_with_default_value_gets_value_from_store">
      <MemberSignature Language="C#" Value="public virtual void Identity_property_on_Added_entity_with_default_value_gets_value_from_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Identity_property_on_Added_entity_with_default_value_gets_value_from_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Identity_property_on_Added_entity_with_default_value_gets_value_from_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Identity_property_on_Added_entity_with_default_value_gets_value_from_store ()" />
      <MemberSignature Language="F#" Value="abstract member Identity_property_on_Added_entity_with_default_value_gets_value_from_store : unit -&gt; unit&#xA;override this.Identity_property_on_Added_entity_with_default_value_gets_value_from_store : unit -&gt; unit" Usage="storeGeneratedTestBase.Identity_property_on_Added_entity_with_default_value_gets_value_from_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Identity_property_on_Added_entity_with_default_value_gets_value_from_store();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Identity_property_on_Added_entity_with_default_value_gets_value_from_store();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Identity_property_on_Added_entity_with_default_value_gets_value_from_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set">
      <MemberSignature Language="C#" Value="public virtual void Identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set ()" />
      <MemberSignature Language="F#" Value="abstract member Identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set : unit -&gt; unit&#xA;override this.Identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set : unit -&gt; unit" Usage="storeGeneratedTestBase.Identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Identity_property_on_Added_entity_with_read_only_before_save_throws_if_explicit_values_set();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store">
      <MemberSignature Language="C#" Value="public virtual void Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store ()" />
      <MemberSignature Language="F#" Value="abstract member Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store : unit -&gt; unit&#xA;override this.Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store : unit -&gt; unit" Usage="storeGeneratedTestBase.Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store_even_if_same">
      <MemberSignature Language="C#" Value="public virtual void Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store_even_if_same ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store_even_if_same() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store_even_if_same" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store_even_if_same ()" />
      <MemberSignature Language="F#" Value="abstract member Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store_even_if_same : unit -&gt; unit&#xA;override this.Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store_even_if_same : unit -&gt; unit" Usage="storeGeneratedTestBase.Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store_even_if_same " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store_even_if_same();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store_even_if_same();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Identity_property_on_Added_entity_with_temporary_value_gets_value_from_store_even_if_same();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity_property_on_Modified_entity_is_included_in_update_when_modified">
      <MemberSignature Language="C#" Value="public virtual void Identity_property_on_Modified_entity_is_included_in_update_when_modified ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Identity_property_on_Modified_entity_is_included_in_update_when_modified() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Identity_property_on_Modified_entity_is_included_in_update_when_modified" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Identity_property_on_Modified_entity_is_included_in_update_when_modified ()" />
      <MemberSignature Language="F#" Value="abstract member Identity_property_on_Modified_entity_is_included_in_update_when_modified : unit -&gt; unit&#xA;override this.Identity_property_on_Modified_entity_is_included_in_update_when_modified : unit -&gt; unit" Usage="storeGeneratedTestBase.Identity_property_on_Modified_entity_is_included_in_update_when_modified " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Identity_property_on_Modified_entity_is_included_in_update_when_modified();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Identity_property_on_Modified_entity_is_included_in_update_when_modified();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Identity_property_on_Modified_entity_is_included_in_update_when_modified();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity_property_on_Modified_entity_is_not_included_in_update_when_not_modified">
      <MemberSignature Language="C#" Value="public virtual void Identity_property_on_Modified_entity_is_not_included_in_update_when_not_modified ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Identity_property_on_Modified_entity_is_not_included_in_update_when_not_modified() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Identity_property_on_Modified_entity_is_not_included_in_update_when_not_modified" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Identity_property_on_Modified_entity_is_not_included_in_update_when_not_modified ()" />
      <MemberSignature Language="F#" Value="abstract member Identity_property_on_Modified_entity_is_not_included_in_update_when_not_modified : unit -&gt; unit&#xA;override this.Identity_property_on_Modified_entity_is_not_included_in_update_when_not_modified : unit -&gt; unit" Usage="storeGeneratedTestBase.Identity_property_on_Modified_entity_is_not_included_in_update_when_not_modified " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Identity_property_on_Modified_entity_is_not_included_in_update_when_not_modified();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Identity_property_on_Modified_entity_is_not_included_in_update_when_not_modified();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Identity_property_on_Modified_entity_is_not_included_in_update_when_not_modified();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state">
      <MemberSignature Language="C#" Value="public virtual void Identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state ()" />
      <MemberSignature Language="F#" Value="abstract member Identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state : unit -&gt; unit&#xA;override this.Identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state : unit -&gt; unit" Usage="storeGeneratedTestBase.Identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Identity_property_on_Modified_entity_with_read_only_after_save_throws_if_value_is_in_modified_state();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseTransaction">
      <MemberSignature Language="C#" Value="protected virtual void UseTransaction (Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade facade, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UseTransaction(class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade facade, class Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.UseTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub UseTransaction (facade As DatabaseFacade, transaction As IDbContextTransaction)" />
      <MemberSignature Language="F#" Value="abstract member UseTransaction : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction -&gt; unit&#xA;override this.UseTransaction : Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade * Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction -&gt; unit" Usage="storeGeneratedTestBase.UseTransaction (facade, transaction)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void UseTransaction(Microsoft::EntityFrameworkCore::Infrastructure::DatabaseFacade ^ facade, Microsoft::EntityFrameworkCore::Storage::IDbContextTransaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="facade" Type="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
        <Parameter Name="transaction" Type="Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" />
      </Parameters>
      <Docs>
        <param name="facade">To be added.</param>
        <param name="transaction">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value_generation_throws_for_common_cases">
      <MemberSignature Language="C#" Value="public virtual void Value_generation_throws_for_common_cases ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Value_generation_throws_for_common_cases() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Value_generation_throws_for_common_cases" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Value_generation_throws_for_common_cases ()" />
      <MemberSignature Language="F#" Value="abstract member Value_generation_throws_for_common_cases : unit -&gt; unit&#xA;override this.Value_generation_throws_for_common_cases : unit -&gt; unit" Usage="storeGeneratedTestBase.Value_generation_throws_for_common_cases " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Value_generation_throws_for_common_cases();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Value_generation_throws_for_common_cases();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Value_generation_throws_for_common_cases();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value_generation_works_for_common_GUID_conversions">
      <MemberSignature Language="C#" Value="public virtual void Value_generation_works_for_common_GUID_conversions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Value_generation_works_for_common_GUID_conversions() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.StoreGeneratedTestBase`1.Value_generation_works_for_common_GUID_conversions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Value_generation_works_for_common_GUID_conversions ()" />
      <MemberSignature Language="F#" Value="abstract member Value_generation_works_for_common_GUID_conversions : unit -&gt; unit&#xA;override this.Value_generation_works_for_common_GUID_conversions : unit -&gt; unit" Usage="storeGeneratedTestBase.Value_generation_works_for_common_GUID_conversions " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Value_generation_works_for_common_GUID_conversions();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Value_generation_works_for_common_GUID_conversions();" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Value_generation_works_for_common_GUID_conversions();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Specification.Tests</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xunit.Fact</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>