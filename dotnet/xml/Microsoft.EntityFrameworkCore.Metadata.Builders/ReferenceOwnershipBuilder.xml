<Type Name="ReferenceOwnershipBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder">
  <TypeSignature Language="C#" Value="public class ReferenceOwnershipBuilder : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase, Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReferenceOwnershipBuilder extends Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class ReferenceOwnershipBuilder&#xA;Inherits ReferenceReferenceBuilderBase&#xA;Implements IInfrastructure(Of InternalEntityTypeBuilder)" />
  <TypeSignature Language="F#" Value="type ReferenceOwnershipBuilder = class&#xA;    inherit ReferenceReferenceBuilderBase&#xA;    interface IInfrastructure&lt;InternalEntityTypeBuilder&gt;" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReferenceOwnershipBuilder : Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceReferenceBuilderBase, Microsoft::EntityFrameworkCore::Infrastructure::IInfrastructure&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder ^&gt;" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class ReferenceOwnershipBuilder : Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceReferenceBuilderBase, Microsoft::EntityFrameworkCore::Infrastructure::IInfrastructure&lt;Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilderBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    Provides a simple API for configuring a one-to-one ownership.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReferenceOwnershipBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType declaringEntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType relatedEntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType declaringEntityType, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType relatedEntityType, class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (declaringEntityType As EntityType, relatedEntityType As EntityType, builder As InternalRelationshipBuilder)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder (declaringEntityType, relatedEntityType, builder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReferenceOwnershipBuilder(Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ declaringEntityType, Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType ^ relatedEntityType, Microsoft::EntityFrameworkCore::Metadata::Internal::InternalRelationshipBuilder ^ builder);" />
      <MemberSignature Language="C++ WINRT" Value=" ReferenceOwnershipBuilder(Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType const &amp; declaringEntityType, Microsoft::EntityFrameworkCore::Metadata::Internal::EntityType const &amp; relatedEntityType, Microsoft::EntityFrameworkCore::Metadata::Internal::InternalRelationshipBuilder const &amp; builder);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="declaringEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
        <Parameter Name="relatedEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
        <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" />
      </Parameters>
      <Docs>
        <param name="declaringEntityType">To be added.</param>
        <param name="relatedEntityType">To be added.</param>
        <param name="builder">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ReferenceOwnershipBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder oldBuilder, bool inverted = false, bool foreignKeySet = false, bool principalKeySet = false, bool requiredSet = false);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder oldBuilder, bool inverted, bool foreignKeySet, bool principalKeySet, bool requiredSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (builder As InternalRelationshipBuilder, oldBuilder As ReferenceOwnershipBuilder, Optional inverted As Boolean = false, Optional foreignKeySet As Boolean = false, Optional principalKeySet As Boolean = false, Optional requiredSet As Boolean = false)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder * Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder * bool * bool * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder (builder, oldBuilder, inverted, foreignKeySet, principalKeySet, requiredSet)" />
      <MemberSignature Language="C++ WINRT" Value=" ReferenceOwnershipBuilder(Microsoft::EntityFrameworkCore::Metadata::Internal::InternalRelationshipBuilder const &amp; builder, Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder const &amp; oldBuilder, bool inverted = false, bool foreignKeySet = false, bool principalKeySet = false, bool requiredSet = false);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" />
        <Parameter Name="oldBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" />
        <Parameter Name="inverted" Type="System.Boolean" />
        <Parameter Name="foreignKeySet" Type="System.Boolean" />
        <Parameter Name="principalKeySet" Type="System.Boolean" />
        <Parameter Name="requiredSet" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="builder">To be added.</param>
        <param name="oldBuilder">To be added.</param>
        <param name="inverted">To be added.</param>
        <param name="foreignKeySet">To be added.</param>
        <param name="principalKeySet">To be added.</param>
        <param name="requiredSet">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder HasChangeTrackingStrategy(valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
      <MemberSignature Language="F#" Value="abstract member HasChangeTrackingStrategy : Microsoft.EntityFrameworkCore.ChangeTrackingStrategy -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&#xA;override this.HasChangeTrackingStrategy : Microsoft.EntityFrameworkCore.ChangeTrackingStrategy -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="referenceOwnershipBuilder.HasChangeTrackingStrategy changeTrackingStrategy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ HasChangeTrackingStrategy(Microsoft::EntityFrameworkCore::ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder HasChangeTrackingStrategy(Microsoft::EntityFrameworkCore::ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy"> The change tracking strategy to be used. </param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" /> to be used for this entity type.
                This strategy indicates how the context detects changes to properties for an instance of the entity type.
            </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder HasData (params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder HasData(object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasData(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasData (ParamArray data As Object()) As DataBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasData : obj[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder&#xA;override this.HasData : obj[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder" Usage="referenceOwnershipBuilder.HasData data" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::DataBuilder ^ HasData(... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">
                An array of seed data of the same type as the entity we're building.
            </param>
        <summary>
                Configures this entity to have seed data. It is used to generate data motion migrations.
            </summary>
        <returns> An object that can be used to configure the model data. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEntityTypeAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder HasEntityTypeAnnotation (string annotation, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder HasEntityTypeAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasEntityTypeAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasEntityTypeAnnotation (annotation As String, value As Object) As ReferenceOwnershipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasEntityTypeAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&#xA;override this.HasEntityTypeAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="referenceOwnershipBuilder.HasEntityTypeAnnotation (annotation, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ HasEntityTypeAnnotation(System::String ^ annotation, System::Object ^ value);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder HasEntityTypeAnnotation(std::wstring const &amp; annotation, winrt::Windows::Foundation::IInspectable const &amp; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation"> The key of the annotation to be added or updated. </param>
        <param name="value"> The value to be stored in the annotation. </param>
        <summary>
                Adds or updates an annotation on the entity type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder HasForeignKey (params string[] foreignKeyPropertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder HasForeignKey(string[] foreignKeyPropertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasForeignKey(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey (ParamArray foreignKeyPropertyNames As String()) As ReferenceOwnershipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasForeignKey : string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&#xA;override this.HasForeignKey : string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="referenceOwnershipBuilder.HasForeignKey foreignKeyPropertyNames" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ HasForeignKey(... cli::array &lt;System::String ^&gt; ^ foreignKeyPropertyNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKeyPropertyNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
        <summary>
          <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
          <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
          <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasPrincipalKey(System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
        </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKeyAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder HasForeignKeyAnnotation (string annotation, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder HasForeignKeyAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasForeignKeyAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKeyAnnotation (annotation As String, value As Object) As ReferenceOwnershipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasForeignKeyAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&#xA;override this.HasForeignKeyAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="referenceOwnershipBuilder.HasForeignKeyAnnotation (annotation, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ HasForeignKeyAnnotation(System::String ^ annotation, System::Object ^ value);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder HasForeignKeyAnnotation(std::wstring const &amp; annotation, winrt::Windows::Foundation::IInspectable const &amp; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation"> The key of the annotation to be added or updated. </param>
        <param name="value"> The value to be stored in the annotation. </param>
        <summary>
                Adds or updates an annotation on the foreign key. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder HasIndex (params string[] propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder HasIndex(string[] propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasIndex(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (ParamArray propertyNames As String()) As IndexBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasIndex : string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&#xA;override this.HasIndex : string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="referenceOwnershipBuilder.HasIndex propertyNames" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::IndexBuilder ^ HasIndex(... cli::array &lt;System::String ^&gt; ^ propertyNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyNames"> The names of the properties that make up the index. </param>
        <summary>
                Configures an index on the specified properties. If there is an existing index on the given
                set of properties, then the existing index will be returned for configuration.
            </summary>
        <returns> An object that can be used to configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMany">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder HasMany (string relatedTypeName, string navigationName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder HasMany(string relatedTypeName, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasMany(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasMany (relatedTypeName As String, Optional navigationName As String = null) As CollectionNavigationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasMany : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder&#xA;override this.HasMany : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder" Usage="referenceOwnershipBuilder.HasMany (relatedTypeName, navigationName)" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Builders::CollectionNavigationBuilder HasMany(std::wstring const &amp; relatedTypeName, std::wstring const &amp; navigationName = null);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relatedTypeName" Type="System.String" />
        <Parameter Name="navigationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relatedTypeName"> The name of the entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the collection navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
        <summary>
          <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
          <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
        </summary>
        <returns> An object that can be used to configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMany">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder HasMany (Type relatedType, string navigationName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder HasMany(class System.Type relatedType, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasMany(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasMany (relatedType As Type, Optional navigationName As String = null) As CollectionNavigationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasMany : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder&#xA;override this.HasMany : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder" Usage="referenceOwnershipBuilder.HasMany (relatedType, navigationName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relatedType" Type="System.Type" />
        <Parameter Name="navigationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relatedType"> The entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the collection navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
        <summary>
          <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
          <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
        </summary>
        <returns> An object that can be used to configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder HasOne (string relatedTypeName, string navigationName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder HasOne(string relatedTypeName, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasOne(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOne (relatedTypeName As String, Optional navigationName As String = null) As ReferenceNavigationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasOne : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder&#xA;override this.HasOne : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder" Usage="referenceOwnershipBuilder.HasOne (relatedTypeName, navigationName)" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceNavigationBuilder HasOne(std::wstring const &amp; relatedTypeName, std::wstring const &amp; navigationName = null);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relatedTypeName" Type="System.String" />
        <Parameter Name="navigationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relatedTypeName"> The name of the entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
        <summary>
          <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
          <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)" /> to fully configure
                    the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
        </summary>
        <returns> An object that can be used to configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder HasOne (Type relatedType, string navigationName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder HasOne(class System.Type relatedType, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasOne(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOne (relatedType As Type, Optional navigationName As String = null) As ReferenceNavigationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasOne : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder&#xA;override this.HasOne : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder" Usage="referenceOwnershipBuilder.HasOne (relatedType, navigationName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relatedType" Type="System.Type" />
        <Parameter Name="navigationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relatedType"> The entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
        <summary>
          <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
          <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)" /> to fully configure
                    the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
        </summary>
        <returns> An object that can be used to configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrincipalKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder HasPrincipalKey (params string[] keyPropertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder HasPrincipalKey(string[] keyPropertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.HasPrincipalKey(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPrincipalKey (ParamArray keyPropertyNames As String()) As ReferenceOwnershipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasPrincipalKey : string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&#xA;override this.HasPrincipalKey : string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="referenceOwnershipBuilder.HasPrincipalKey keyPropertyNames" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ HasPrincipalKey(... cli::array &lt;System::String ^&gt; ^ keyPropertyNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyPropertyNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
        <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>
          <para>
                    If multiple principal key properties are specified, the order of principal key properties should
                    match the order that the primary key or unique constraint properties were configured on the principal
                    entity type.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder Ignore (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder Ignore(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.Ignore(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Ignore (propertyName As String) As ReferenceOwnershipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Ignore : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&#xA;override this.Ignore : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="referenceOwnershipBuilder.Ignore propertyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ Ignore(System::String ^ propertyName);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder Ignore(std::wstring const &amp; propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"> The name of then property to be removed from the entity type. </param>
        <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                from the entity type that were added by convention.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#EntityFrameworkCore#Metadata#Internal#InternalEntityTypeBuilder&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As InternalEntityTypeBuilder Implements IInfrastructure(Of InternalEntityTypeBuilder).Instance" />
      <MemberSignature Language="F#" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&gt;.Instance" />
      <MemberSignature Language="C++ CLI" Value="property Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder ^ Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&gt;.Instance { Microsoft::EntityFrameworkCore::Metadata::Internal::InternalEntityTypeBuilder ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the internal builder being used to configure the entity type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDelete">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder OnDelete (Microsoft.EntityFrameworkCore.DeleteBehavior deleteBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder OnDelete(valuetype Microsoft.EntityFrameworkCore.DeleteBehavior deleteBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.OnDelete(Microsoft.EntityFrameworkCore.DeleteBehavior)" />
      <MemberSignature Language="F#" Value="abstract member OnDelete : Microsoft.EntityFrameworkCore.DeleteBehavior -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&#xA;override this.OnDelete : Microsoft.EntityFrameworkCore.DeleteBehavior -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="referenceOwnershipBuilder.OnDelete deleteBehavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ OnDelete(Microsoft::EntityFrameworkCore::DeleteBehavior deleteBehavior);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder OnDelete(Microsoft::EntityFrameworkCore::DeleteBehavior deleteBehavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deleteBehavior" Type="Microsoft.EntityFrameworkCore.DeleteBehavior" />
      </Parameters>
      <Docs>
        <param name="deleteBehavior"> The action to perform. </param>
        <summary>
                Configures how a delete operation is applied to dependent entities in the relationship when the
                principal is deleted or the relationship is severed.
            </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnedEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType OwnedEntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType OwnedEntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.OwnedEntityType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OwnedEntityType As IMutableEntityType" />
      <MemberSignature Language="F#" Value="member this.OwnedEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.OwnedEntityType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ OwnedEntityType { Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ OwnedEntityType { Microsoft::EntityFrameworkCore::Metadata::IMutableEntityType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The entity type being configured.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder OwnsOne (string ownedTypeName, string navigationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder OwnsOne(string ownedTypeName, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.OwnsOne(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne (ownedTypeName As String, navigationName As String) As ReferenceOwnershipBuilder" />
      <MemberSignature Language="F#" Value="abstract member OwnsOne : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&#xA;override this.OwnsOne : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="referenceOwnershipBuilder.OwnsOne (ownedTypeName, navigationName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ OwnsOne(System::String ^ ownedTypeName, System::String ^ navigationName);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder OwnsOne(std::wstring const &amp; ownedTypeName, std::wstring const &amp; navigationName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" />
        <Parameter Name="navigationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ownedTypeName"> The name of the entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <summary>
          <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
        </summary>
        <returns> An object that can be used to configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder OwnsOne (Type ownedType, string navigationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder OwnsOne(class System.Type ownedType, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.OwnsOne(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne (ownedType As Type, navigationName As String) As ReferenceOwnershipBuilder" />
      <MemberSignature Language="F#" Value="abstract member OwnsOne : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&#xA;override this.OwnsOne : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="referenceOwnershipBuilder.OwnsOne (ownedType, navigationName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ OwnsOne(Type ^ ownedType, System::String ^ navigationName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedType" Type="System.Type" />
        <Parameter Name="navigationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ownedType"> The entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <summary>
          <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
        </summary>
        <returns> An object that can be used to configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder OwnsOne (string ownedTypeName, string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder OwnsOne(string ownedTypeName, string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.OwnsOne(System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne (ownedTypeName As String, navigationName As String, buildAction As Action(Of ReferenceOwnershipBuilder)) As ReferenceOwnershipBuilder" />
      <MemberSignature Language="F#" Value="abstract member OwnsOne : string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&#xA;override this.OwnsOne : string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="referenceOwnershipBuilder.OwnsOne (ownedTypeName, navigationName, buildAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ OwnsOne(System::String ^ ownedTypeName, System::String ^ navigationName, Action&lt;Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^&gt; ^ buildAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" />
        <Parameter Name="navigationName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="ownedTypeName"> The name of the entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction"> An action that performs configuration of the relationship. </param>
        <summary>
          <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
        </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder OwnsOne (Type ownedType, string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder OwnsOne(class System.Type ownedType, string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.OwnsOne(System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne (ownedType As Type, navigationName As String, buildAction As Action(Of ReferenceOwnershipBuilder)) As ReferenceOwnershipBuilder" />
      <MemberSignature Language="F#" Value="abstract member OwnsOne : Type * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&#xA;override this.OwnsOne : Type * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="referenceOwnershipBuilder.OwnsOne (ownedType, navigationName, buildAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ OwnsOne(Type ^ ownedType, System::String ^ navigationName, Action&lt;Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^&gt; ^ buildAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedType" Type="System.Type" />
        <Parameter Name="navigationName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="ownedType"> The entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction"> An action that performs configuration of the relationship. </param>
        <summary>
          <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
        </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder Property (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder Property(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.Property(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (propertyName As String) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member Property : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&#xA;override this.Property : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="referenceOwnershipBuilder.Property propertyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ Property(System::String ^ propertyName);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder Property(std::wstring const &amp; propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"> The name of the property to be configured. </param>
        <summary>
          <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
          <para>
                    When adding a new property with this overload the property name must match the
                    name of a CLR property or field on the entity type. This overload cannot be used to
                    add a new shadow state property.
                </para>
        </summary>
        <returns> An object that can be used to configure the property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder Property (Type propertyType, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder Property(class System.Type propertyType, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.Property(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (propertyType As Type, propertyName As String) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member Property : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&#xA;override this.Property : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="referenceOwnershipBuilder.Property (propertyType, propertyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder ^ Property(Type ^ propertyType, System::String ^ propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyType"> The type of the property to be configured. </param>
        <param name="propertyName"> The name of the property to be configured. </param>
        <summary>
          <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
          <para>
                    When adding a new property, if a property with the same name exists in the entity class
                    then it will be added to the model. If no property exists in the entity class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the entity class. The current value for the property is stored in
                    the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
                </para>
        </summary>
        <returns> An object that can be used to configure the property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; Property&lt;TProperty&gt; (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; Property&lt;TProperty&gt;(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.Property``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property(Of TProperty) (propertyName As String) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="abstract member Property : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;&#xA;override this.Property : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="referenceOwnershipBuilder.Property propertyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProperty&gt;&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; ^ Property(System::String ^ propertyName);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename TProperty&gt;&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::PropertyBuilder&lt;TProperty&gt; Property(std::wstring const &amp; propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property to be configured. </typeparam>
        <param name="propertyName"> The name of the property to be configured. </param>
        <summary>
          <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
          <para>
                    When adding a new property, if a property with the same name exists in the entity class
                    then it will be added to the model. If no property exists in the entity class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the entity class. The current value for the property is stored in
                    the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
                </para>
        </summary>
        <returns> An object that can be used to configure the property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />
      <MemberSignature Language="F#" Value="abstract member UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&#xA;override this.UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder" Usage="referenceOwnershipBuilder.UsePropertyAccessMode propertyAccessMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder ^ UsePropertyAccessMode(Microsoft::EntityFrameworkCore::PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual Microsoft::EntityFrameworkCore::Metadata::Builders::ReferenceOwnershipBuilder UsePropertyAccessMode(Microsoft::EntityFrameworkCore::PropertyAccessMode propertyAccessMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this entity type. </param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for all properties of this entity type.
                </para>
          <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method will change that behavior
                    for all properties of this entity type as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
          <para>
                    Calling this method overrides for all properties of this entity type any access mode that was
                    set on the model.
                </para>
        </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>