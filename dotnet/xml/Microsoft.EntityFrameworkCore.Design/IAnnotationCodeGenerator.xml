<Type Name="IAnnotationCodeGenerator" FullName="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator">
  <TypeSignature Language="C#" Value="public interface IAnnotationCodeGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAnnotationCodeGenerator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAnnotationCodeGenerator" />
  <TypeSignature Language="F#" Value="type IAnnotationCodeGenerator = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAnnotationCodeGenerator" />
  <TypeSignature Language="C++ CX" Value="public interface class IAnnotationCodeGenerator" />
  <TypeSignature Language="C++ WINRT" Value="__interface IAnnotationCodeGenerator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                Implemented by database providers to control which <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />s need to
                have code generated (as opposed to being handled by convention) and then to generate
                the code if needed.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (entityType As IEntityType, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="iAnnotationCodeGenerator.GenerateFluentApi (entityType, annotation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::EntityFrameworkCore::Design::MethodCallCodeFragment ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Design::MethodCallCodeFragment GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IEntityType const &amp; entityType, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="entityType"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (foreignKey As IForeignKey, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="iAnnotationCodeGenerator.GenerateFluentApi (foreignKey, annotation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::EntityFrameworkCore::Design::MethodCallCodeFragment ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Design::MethodCallCodeFragment GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IForeignKey const &amp; foreignKey, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="foreignKey"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (index As IIndex, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="iAnnotationCodeGenerator.GenerateFluentApi (index, annotation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::EntityFrameworkCore::Design::MethodCallCodeFragment ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Design::MethodCallCodeFragment GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IIndex const &amp; index, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="index"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (key As IKey, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="iAnnotationCodeGenerator.GenerateFluentApi (key, annotation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::EntityFrameworkCore::Design::MethodCallCodeFragment ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Design::MethodCallCodeFragment GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IKey const &amp; key, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="key"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (model As IModel, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="iAnnotationCodeGenerator.GenerateFluentApi (model, annotation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::EntityFrameworkCore::Design::MethodCallCodeFragment ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Design::MethodCallCodeFragment GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IModel const &amp; model, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="model"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (property As IProperty, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="iAnnotationCodeGenerator.GenerateFluentApi (property, annotation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::EntityFrameworkCore::Design::MethodCallCodeFragment ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::EntityFrameworkCore::Design::MethodCallCodeFragment GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IProperty const &amp; property, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="property"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (entityType As IEntityType, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="iAnnotationCodeGenerator.GenerateFluentApi (entityType, annotation, language)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation, System::String ^ language);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Platform::String ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation, Platform::String ^ language);" />
      <MemberSignature Language="C++ WINRT" Value="std::wstring GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IEntityType const &amp; entityType, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation, std::wstring const &amp; language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use GenerateFluentApi(IEntityType, IAnnotation) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityType"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> in the given programming language.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (foreignKey As IForeignKey, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="iAnnotationCodeGenerator.GenerateFluentApi (foreignKey, annotation, language)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation, System::String ^ language);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Platform::String ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation, Platform::String ^ language);" />
      <MemberSignature Language="C++ WINRT" Value="std::wstring GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IForeignKey const &amp; foreignKey, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation, std::wstring const &amp; language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use GenerateFluentApi(IForeignKey, IAnnotation) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="foreignKey"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> in the given programming language.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (index As IIndex, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="iAnnotationCodeGenerator.GenerateFluentApi (index, annotation, language)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation, System::String ^ language);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Platform::String ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation, Platform::String ^ language);" />
      <MemberSignature Language="C++ WINRT" Value="std::wstring GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IIndex const &amp; index, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation, std::wstring const &amp; language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use GenerateFluentApi(IIndex, IAnnotation) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> in the given programming language.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (key As IKey, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="iAnnotationCodeGenerator.GenerateFluentApi (key, annotation, language)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation, System::String ^ language);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Platform::String ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation, Platform::String ^ language);" />
      <MemberSignature Language="C++ WINRT" Value="std::wstring GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IKey const &amp; key, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation, std::wstring const &amp; language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use GenerateFluentApi(IKey, IAnnotation) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> in the given programming language.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (model As IModel, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="iAnnotationCodeGenerator.GenerateFluentApi (model, annotation, language)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation, System::String ^ language);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Platform::String ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation, Platform::String ^ language);" />
      <MemberSignature Language="C++ WINRT" Value="std::wstring GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IModel const &amp; model, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation, std::wstring const &amp; language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use GenerateFluentApi(IModel, IAnnotation) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="model"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> in the given programming language.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (property As IProperty, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="iAnnotationCodeGenerator.GenerateFluentApi (property, annotation, language)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation, System::String ^ language);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Platform::String ^ GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation, Platform::String ^ language);" />
      <MemberSignature Language="C++ WINRT" Value="std::wstring GenerateFluentApi(Microsoft::EntityFrameworkCore::Metadata::IProperty const &amp; property, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation, std::wstring const &amp; language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> in the given programming language.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsHandledByConvention (entityType As IEntityType, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="iAnnotationCodeGenerator.IsHandledByConvention (entityType, annotation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IEntityType ^ entityType, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ WINRT" Value="bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IEntityType const &amp; entityType, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="entityType"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <summary>
                Checks if the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> is handled by convention when
                applied to the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />.
            </summary>
        <returns> True if the annotation is handled by convention; false if code must be generated. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsHandledByConvention (foreignKey As IForeignKey, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="iAnnotationCodeGenerator.IsHandledByConvention (foreignKey, annotation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IForeignKey ^ foreignKey, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ WINRT" Value="bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IForeignKey const &amp; foreignKey, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="foreignKey"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <summary>
                Checks if the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> is handled by convention when
                applied to the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsHandledByConvention (index As IIndex, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="iAnnotationCodeGenerator.IsHandledByConvention (index, annotation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IIndex ^ index, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ WINRT" Value="bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IIndex const &amp; index, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="index"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <summary>
                Checks if the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> is handled by convention when
                applied to the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsHandledByConvention (key As IKey, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="iAnnotationCodeGenerator.IsHandledByConvention (key, annotation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IKey ^ key, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ WINRT" Value="bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IKey const &amp; key, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="key"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <summary>
                Checks if the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> is handled by convention when
                applied to the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsHandledByConvention (model As IModel, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="iAnnotationCodeGenerator.IsHandledByConvention (model, annotation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IModel ^ model, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ WINRT" Value="bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IModel const &amp; model, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="model"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <summary>
                Checks if the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> is handled by convention when
                applied to the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
            </summary>
        <returns> True if the annotation is handled by convention; false if code must be generated. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsHandledByConvention (property As IProperty, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="iAnnotationCodeGenerator.IsHandledByConvention (property, annotation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IProperty ^ property, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation ^ annotation);" />
      <MemberSignature Language="C++ WINRT" Value="bool IsHandledByConvention(Microsoft::EntityFrameworkCore::Metadata::IProperty const &amp; property, Microsoft::EntityFrameworkCore::Infrastructure::IAnnotation const &amp; annotation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="property"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <summary>
                Checks if the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> is handled by convention when
                applied to the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>