<Overview>
  <Assemblies>
    <Assembly Name="EntityFramework" Version="6.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA2210:AssembliesShouldHaveValidStrongNames")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures", Scope="member", Target="System.Data.Entity.Core.Objects.CompiledQuery.#Compile`13(System.Linq.Expressions.Expression`1&lt;System.Func`13&lt;!!0,!!1,!!2,!!3,!!4,!!5,!!6,!!7,!!8,!!9,!!10,!!11,!!12&gt;&gt;)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Core.Mapping.ViewGeneration")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Migrations.Sql")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.ModelConfiguration")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Validation")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Migrations.Utilities")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Migrations.History")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Migrations.Builders")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.ModelConfiguration.Edm")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2243:AttributeStringLiteralsShouldParseCorrectly")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope="member", Target="System.Data.Entity.ModelConfiguration.Conventions.Sets.V1ConventionSet.#.cctor()")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Scope="member", Target="System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.#System.Data.Entity.ModelConfiguration.Conventions.IEdmConvention`1&lt;System.Data.Entity.Edm.AssociationType&gt;.Apply(System.Data.Entity.Edm.AssociationType,System.Data.Entity.Edm.EdmModel)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Scope="member", Target="System.Data.Entity.Core.Metadata.Edm.EdmModelSyntacticValidationRules.#.cctor()")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope="member", Target="System.Data.Entity.Core.Metadata.Edm.EdmModelSemanticValidationRules.#.cctor()")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Scope="member", Target="System.Data.Entity.Core.Metadata.Edm.EdmModelSemanticValidationRules.#.cctor()")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Scope="member", Target="System.Data.Entity.Core.Metadata.Edm.EdmModelSemanticValidationRules.#.cctor()")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters", MessageId="System.Console.WriteLine(System.String)", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlParser.#dump_stacks(System.Int32)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters", MessageId="System.Data.Entity.Core.SchemaObjectModel.ScalarType.ConvertToByteArray(System.String)", Scope="member", Target="System.Data.Entity.Core.Metadata.Edm.MetadataAssemblyHelper.#.cctor()")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters", MessageId="System.Data.Entity.Core.Query.PlanCompiler.PlanCompiler.Assert(System.Boolean,System.String)", Scope="member", Target="System.Data.Entity.Core.Query.PlanCompiler.PreProcessor.#ExpandView(System.Data.Entity.Core.Query.InternalTrees.Node,System.Data.Entity.Core.Query.InternalTrees.ScanTableOp,System.Data.Entity.Core.Query.InternalTrees.IsOfOp&amp;)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="Def", Scope="resource", Target="System.Data.Entity.Properties.Resources.resources")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="dddddddd-dddd-dddd-dddd-dddddddddddd", Scope="resource", Target="System.Data.Entity.Properties.Resources.resources")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="Deref", Scope="resource", Target="System.Data.Entity.Properties.Resources.resources")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope="member", Target="System.Data.Entity.Core.Mapping.StorageMappingItemCollection+ViewDictionary.#GetGeneratedView(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Mapping.StorageMappingItemCollection)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlLexer.#yy_double(System.Char[])")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlLexer.#yy_error(System.Int32,System.Boolean)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlLexer.#IsCanonicalFunctionCall(System.String,System.Char)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures", Scope="member", Target="System.Data.Entity.Core.Objects.CompiledQuery.#Compile`17(System.Linq.Expressions.Expression`1&lt;System.Func`17&lt;!!0,!!1,!!2,!!3,!!4,!!5,!!6,!!7,!!8,!!9,!!10,!!11,!!12,!!13,!!14,!!15,!!16&gt;&gt;)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures", Scope="member", Target="System.Data.Entity.Core.Objects.CompiledQuery.#Compile`16(System.Linq.Expressions.Expression`1&lt;System.Func`16&lt;!!0,!!1,!!2,!!3,!!4,!!5,!!6,!!7,!!8,!!9,!!10,!!11,!!12,!!13,!!14,!!15&gt;&gt;)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures", Scope="member", Target="System.Data.Entity.Core.Objects.CompiledQuery.#Compile`15(System.Linq.Expressions.Expression`1&lt;System.Func`15&lt;!!0,!!1,!!2,!!3,!!4,!!5,!!6,!!7,!!8,!!9,!!10,!!11,!!12,!!13,!!14&gt;&gt;)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures", Scope="member", Target="System.Data.Entity.Core.Objects.CompiledQuery.#Compile`14(System.Linq.Expressions.Expression`1&lt;System.Func`14&lt;!!0,!!1,!!2,!!3,!!4,!!5,!!6,!!7,!!8,!!9,!!10,!!11,!!12,!!13&gt;&gt;)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures", Scope="member", Target="System.Data.Entity.Core.Objects.CompiledQuery.#Compile`12(System.Linq.Expressions.Expression`1&lt;System.Func`12&lt;!!0,!!1,!!2,!!3,!!4,!!5,!!6,!!7,!!8,!!9,!!10,!!11&gt;&gt;)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures", Scope="member", Target="System.Data.Entity.Core.Objects.CompiledQuery.#Compile`11(System.Linq.Expressions.Expression`1&lt;System.Func`11&lt;!!0,!!1,!!2,!!3,!!4,!!5,!!6,!!7,!!8,!!9,!!10&gt;&gt;)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures", Scope="member", Target="System.Data.Entity.Core.Objects.CompiledQuery.#Compile`10(System.Linq.Expressions.Expression`1&lt;System.Func`10&lt;!!0,!!1,!!2,!!3,!!4,!!5,!!6,!!7,!!8,!!9&gt;&gt;)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlLexer.#yy_error_string")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlLexer.#_parserOptions")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlParser.#yyrule")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId="code", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlLexer.#yy_error(System.Int32,System.Boolean)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlParser.#YYMAJOR")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlParser.#YYMINOR")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlLexer.#yybegin(System.Int32)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlLexer.#yylength()")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlParser.#debug(System.String)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlParser.#dump_stacks(System.Int32)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlParser.#yylexdebug(System.Int32,System.Int32)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1814:PreferJaggedArraysOverMultidimensional", MessageId="Member", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlLexer.#yy_nxt")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlParser.#yyparse()")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Core.Mapping")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Core.Objects.SqlClient")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Core.Common.EntitySql")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1001:TypesThatOwnDisposableFieldsShouldBeDisposable", Scope="type", Target="System.Data.Entity.Core.Common.EntitySql.CqlLexer")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlParser.#yyparse()")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope="member", Target="System.Data.Entity.Core.Common.EntitySql.CqlParser.#yyparse()")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Scope="member", Target="System.Data.Entity.QueryableExtensions.#.cctor()")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Scope="member", Target="System.Data.Entity.QueryableExtensions.#.cctor()")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="schemaname", Scope="resource", Target="System.Data.Entity.Properties.Resources.resources")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="objectname", Scope="resource", Target="System.Data.Entity.Properties.Resources.resources")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="URIs", Scope="resource", Target="System.Data.Entity.Properties.Resources.resources")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.ComponentModel.DataAnnotations")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Edm")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.ModelConfiguration.Configuration.Properties")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.ModelConfiguration.Configuration.Properties.Navigation")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.ModelConfiguration.Configuration.Types")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes", Scope="member", Target="System.Data.Entity.Core.Objects.ObjectParameterCollection.#System.Collections.Generic.ICollection`1&lt;System.Data.Entity.Core.Objects.ObjectParameter&gt;.IsReadOnly")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope="member", Target="System.Data.Entity.Core.Metadata.Edm.ObjectItemLoadingSessionData.#.ctor(System.Data.Entity.Core.Metadata.Edm.KnownAssembliesSet,System.Data.Entity.Core.Metadata.Edm.LockedAssemblyCache,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Action`1&lt;System.String&gt;,System.Object)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1021:AvoidOutParameters", MessageId="2#", Scope="member", Target="System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#Create(System.Collections.Generic.IEnumerable`1&lt;System.Xml.XmlReader&gt;,System.Collections.ObjectModel.ReadOnlyCollection`1&lt;System.String&gt;,System.Collections.Generic.IList`1&lt;System.Data.Entity.Core.Metadata.Edm.EdmSchemaError&gt;&amp;)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1021:AvoidOutParameters", MessageId="4#", Scope="member", Target="System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#Create(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable`1&lt;System.Xml.XmlReader&gt;,System.Collections.Generic.IList`1&lt;System.String&gt;,System.Collections.Generic.IList`1&lt;System.Data.Entity.Core.Metadata.Edm.EdmSchemaError&gt;&amp;)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1021:AvoidOutParameters", MessageId="3#", Scope="member", Target="System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#Create(System.Collections.Generic.IEnumerable`1&lt;System.Xml.XmlReader&gt;,System.Collections.ObjectModel.ReadOnlyCollection`1&lt;System.String&gt;,System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Collections.Generic.IList`1&lt;System.Data.Entity.Core.Metadata.Edm.EdmSchemaError&gt;&amp;)")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId="Pluralization", Scope="namespace", Target="System.Data.Entity.Infrastructure.Pluralization")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Infrastructure.Pluralization")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope="type", Target="System.Data.Entity.Core.EntityClient.Internal.EntityCommandDefinition")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="ms", Scope="resource", Target="System.Data.Entity.Properties.Resources.resources")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Infrastructure.MappingViews")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters", MessageId="System.Data.Entity.Core.SchemaObjectModel.ScalarType.ConvertToByteArray(System.String)", Scope="member", Target="System.Data.Entity.Core.Metadata.Edm.AspProxy.#.cctor()")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.ComponentModel.DataAnnotations.Schema")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Utilities")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope="member", Target="System.Data.Entity.Core.Objects.ELinq.ExpressionConverter+StringTranslatorUtil.#ConvertToString(System.Data.Entity.Core.Objects.ELinq.ExpressionConverter,System.Linq.Expressions.Expression)")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("EntityFramework.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("EntityFramework.dll")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Reflection.AssemblyFileVersion("6.2.61023.0")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.2.0-61023")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Entity Framework")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Reflection.AssemblyTitle("EntityFramework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Resources.SatelliteContractVersion("6.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Data.Entity.Design.VersioningFacade, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-4.3.1;entity-framework-5.0.0">
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.0", FrameworkDisplayName=".NET Framework 4")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-4.3.1">
          <AttributeName>System.Reflection.AssemblyFileVersion("4.3.20217.0")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-4.3.1">
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.3.1")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-4.3.1;entity-framework-5.0.0">
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-4.3.1;entity-framework-5.0.0">
          <AttributeName>System.Reflection.AssemblyTitle("EntityFramework.dll")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-4.3.1">
          <AttributeName>System.Resources.SatelliteContractVersion("4.3.0.0")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-4.3.1;entity-framework-5.0.0">
          <AttributeName>System.Runtime.InteropServices.ComCompatibleVersion(1, 0, 3300, 0)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-4.3.1;entity-framework-5.0.0">
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-4.3.1;entity-framework-5.0.0">
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-4.3.1;entity-framework-5.0.0">
          <AttributeName>System.Security.SecurityTransparent</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-5.0.0">
          <AttributeName>System.Reflection.AssemblyFileVersion("5.0.20627.0")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-5.0.0">
          <AttributeName>System.Reflection.AssemblyInformationalVersion("5.0.0.net45")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-5.0.0">
          <AttributeName>System.Resources.SatelliteContractVersion("5.0.0.0")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="entity-framework-6.2.0">
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName=".NET Framework 4.5")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="EntityFramework.SqlServer" Version="6.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Scope="member", Target="System.Data.Entity.SqlServer.SqlSpatialServices.#InitializeMemberInfo()")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA2210:AssembliesShouldHaveValidStrongNames")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.SqlServer.Utilities")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Scope="member", Target="System.Data.Entity.SqlServer.SqlSpatialServices.#InitializeMemberInfo()")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.SqlServer")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2243:AttributeStringLiteralsShouldParseCorrectly")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Migrations.Sql")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="schemaname", Scope="resource", Target="System.Data.Entity.SqlServer.Properties.Resources.SqlServer.resources")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="objectname", Scope="resource", Target="System.Data.Entity.SqlServer.Properties.Resources.SqlServer.resources")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("EntityFramework.SqlServer.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("EntityFramework.SqlServer.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.2.61023.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.2.0-61023")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Entity Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("EntityFramework.SqlServer")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("6.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName=".NET Framework 4.5")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="EntityFramework.SqlServerCompact" Version="6.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA2210:AssembliesShouldHaveValidStrongNames")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2243:AttributeStringLiteralsShouldParseCorrectly")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Migrations.Sql")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.SqlServerCompact")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="subclause", Scope="resource", Target="System.Data.Entity.SqlServerCompact.Properties.Resources.SqlServerCompact.resources")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="rowversion", Scope="resource", Target="System.Data.Entity.SqlServerCompact.Properties.Resources.SqlServerCompact.resources")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="schemaname", Scope="resource", Target="System.Data.Entity.SqlServerCompact.Properties.Resources.SqlServerCompact.resources")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="objectname", Scope="resource", Target="System.Data.Entity.SqlServerCompact.Properties.Resources.SqlServerCompact.resources")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("EntityFramework.SqlServerCompact.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("EntityFramework.SqlServerCompact.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.2.61023.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.2.0-61023")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Entity Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("EntityFramework.SqlServerCompact")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("6.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName=".NET Framework 4.5")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="EntityFramework.SqlServerCompact.Legacy" Version="6.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA2210:AssembliesShouldHaveValidStrongNames")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2243:AttributeStringLiteralsShouldParseCorrectly")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.Migrations.Sql")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope="namespace", Target="System.Data.Entity.SqlServerCompact.Legacy")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="subclause", Scope="resource", Target="System.Data.Entity.SqlServerCompact.Legacy.Properties.Resources.SqlServerCompact.resources")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="rowversion", Scope="resource", Target="System.Data.Entity.SqlServerCompact.Legacy.Properties.Resources.SqlServerCompact.resources")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="schemaname", Scope="resource", Target="System.Data.Entity.SqlServerCompact.Legacy.Properties.Resources.SqlServerCompact.resources")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId="objectname", Scope="resource", Target="System.Data.Entity.SqlServerCompact.Legacy.Properties.Resources.SqlServerCompact.resources")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("EntityFramework.SqlServerCompact.Legacy.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("EntityFramework.SqlServerCompact.Legacy.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.2.61023.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.2.0-61023")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Entity Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("EntityFramework.SqlServerCompact.Legacy")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("6.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName=".NET Framework 4.5")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="System.ComponentModel.DataAnnotations">
      <Type Name="ColumnAttribute" Kind="Class" />
      <Type Name="ComplexTypeAttribute" Kind="Class" />
      <Type Name="DatabaseGeneratedAttribute" Kind="Class" />
      <Type Name="DatabaseGeneratedOption" Kind="Enumeration" />
      <Type Name="ForeignKeyAttribute" Kind="Class" />
      <Type Name="InversePropertyAttribute" Kind="Class" />
      <Type Name="MaxLengthAttribute" Kind="Class" />
      <Type Name="MinLengthAttribute" Kind="Class" />
      <Type Name="NotMappedAttribute" Kind="Class" />
      <Type Name="TableAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.ComponentModel.DataAnnotations.Schema">
      <Type Name="ColumnAttribute" Kind="Class" />
      <Type Name="ComplexTypeAttribute" Kind="Class" />
      <Type Name="DatabaseGeneratedAttribute" Kind="Class" />
      <Type Name="DatabaseGeneratedOption" Kind="Enumeration" />
      <Type Name="ForeignKeyAttribute" Kind="Class" />
      <Type Name="IndexAttribute" Kind="Class" />
      <Type Name="InversePropertyAttribute" Kind="Class" />
      <Type Name="NotMappedAttribute" Kind="Class" />
      <Type Name="TableAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity">
      <Type Name="CreateDatabaseIfNotExists`1" DisplayName="CreateDatabaseIfNotExists&lt;TContext&gt;" Kind="Class" />
      <Type Name="Database" Kind="Class" />
      <Type Name="DbConfiguration" Kind="Class" />
      <Type Name="DbConfigurationTypeAttribute" Kind="Class" />
      <Type Name="DbContext" Kind="Class" />
      <Type Name="DbContextTransaction" Kind="Class" />
      <Type Name="DbExtensions" Kind="Class" />
      <Type Name="DbFunctionAttribute" Kind="Class" />
      <Type Name="DbFunctions" Kind="Class" />
      <Type Name="DbModelBuilder" Kind="Class" />
      <Type Name="DbModelBuilderVersion" Kind="Enumeration" />
      <Type Name="DbModelBuilderVersionAttribute" Kind="Class" />
      <Type Name="DbSet" Kind="Class" />
      <Type Name="DbSet`1" DisplayName="DbSet&lt;TEntity&gt;" Kind="Class" />
      <Type Name="DropCreateDatabaseAlways`1" DisplayName="DropCreateDatabaseAlways&lt;TContext&gt;" Kind="Class" />
      <Type Name="DropCreateDatabaseIfModelChanges`1" DisplayName="DropCreateDatabaseIfModelChanges&lt;TContext&gt;" Kind="Class" />
      <Type Name="EntityState" Kind="Enumeration" />
      <Type Name="IDatabaseInitializer`1" DisplayName="IDatabaseInitializer&lt;TContext&gt;" Kind="Interface" />
      <Type Name="IDbSet`1" DisplayName="IDbSet&lt;TEntity&gt;" Kind="Interface" />
      <Type Name="MigrateDatabaseToLatestVersion`2" DisplayName="MigrateDatabaseToLatestVersion&lt;TContext,TMigrationsConfiguration&gt;" Kind="Class" />
      <Type Name="NullDatabaseInitializer`1" DisplayName="NullDatabaseInitializer&lt;TContext&gt;" Kind="Class" />
      <Type Name="ObservableCollectionExtensions" Kind="Class" />
      <Type Name="QueryableExtensions" Kind="Class" />
      <Type Name="TransactionalBehavior" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Core">
      <Type Name="EntityCommandCompilationException" Kind="Class" />
      <Type Name="EntityCommandExecutionException" Kind="Class" />
      <Type Name="EntityException" Kind="Class" />
      <Type Name="EntityKey" Kind="Class" />
      <Type Name="EntityKeyMember" Kind="Class" />
      <Type Name="EntitySqlException" Kind="Class" />
      <Type Name="IExtendedDataRecord" Kind="Interface" />
      <Type Name="InvalidCommandTreeException" Kind="Class" />
      <Type Name="MappingException" Kind="Class" />
      <Type Name="MetadataException" Kind="Class" />
      <Type Name="ObjectNotFoundException" Kind="Class" />
      <Type Name="OptimisticConcurrencyException" Kind="Class" />
      <Type Name="PropertyConstraintException" Kind="Class" />
      <Type Name="ProviderIncompatibleException" Kind="Class" />
      <Type Name="UpdateException" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Core.Common">
      <Type Name="DataRecordInfo" Kind="Class" />
      <Type Name="DbCommandDefinition" Kind="Class" />
      <Type Name="DbProviderManifest" Kind="Class" />
      <Type Name="DbProviderServices" Kind="Class" />
      <Type Name="DbXmlEnabledProviderManifest" Kind="Class" />
      <Type Name="EntityRecordInfo" Kind="Class" />
      <Type Name="FieldMetadata" Kind="Structure" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Core.Common.CommandTrees">
      <Type Name="BasicCommandTreeVisitor" Kind="Class" />
      <Type Name="BasicExpressionVisitor" Kind="Class" />
      <Type Name="DbAggregate" Kind="Class" />
      <Type Name="DbAndExpression" Kind="Class" />
      <Type Name="DbApplyExpression" Kind="Class" />
      <Type Name="DbArithmeticExpression" Kind="Class" />
      <Type Name="DbBinaryExpression" Kind="Class" />
      <Type Name="DbCaseExpression" Kind="Class" />
      <Type Name="DbCastExpression" Kind="Class" />
      <Type Name="DbCommandTree" Kind="Class" />
      <Type Name="DbCommandTreeKind" Kind="Enumeration" />
      <Type Name="DbComparisonExpression" Kind="Class" />
      <Type Name="DbConstantExpression" Kind="Class" />
      <Type Name="DbCrossJoinExpression" Kind="Class" />
      <Type Name="DbDeleteCommandTree" Kind="Class" />
      <Type Name="DbDerefExpression" Kind="Class" />
      <Type Name="DbDistinctExpression" Kind="Class" />
      <Type Name="DbElementExpression" Kind="Class" />
      <Type Name="DbEntityRefExpression" Kind="Class" />
      <Type Name="DbExceptExpression" Kind="Class" />
      <Type Name="DbExpression" Kind="Class" />
      <Type Name="DbExpressionBinding" Kind="Class" />
      <Type Name="DbExpressionKind" Kind="Enumeration" />
      <Type Name="DbExpressionRebinder" Kind="Class" />
      <Type Name="DbExpressionVisitor" Kind="Class" />
      <Type Name="DbExpressionVisitor`1" DisplayName="DbExpressionVisitor&lt;TResultType&gt;" Kind="Class" />
      <Type Name="DbFilterExpression" Kind="Class" />
      <Type Name="DbFunctionAggregate" Kind="Class" />
      <Type Name="DbFunctionCommandTree" Kind="Class" />
      <Type Name="DbFunctionExpression" Kind="Class" />
      <Type Name="DbGroupAggregate" Kind="Class" />
      <Type Name="DbGroupByExpression" Kind="Class" />
      <Type Name="DbGroupExpressionBinding" Kind="Class" />
      <Type Name="DbInExpression" Kind="Class" />
      <Type Name="DbInsertCommandTree" Kind="Class" />
      <Type Name="DbIntersectExpression" Kind="Class" />
      <Type Name="DbIsEmptyExpression" Kind="Class" />
      <Type Name="DbIsNullExpression" Kind="Class" />
      <Type Name="DbIsOfExpression" Kind="Class" />
      <Type Name="DbJoinExpression" Kind="Class" />
      <Type Name="DbLambda" Kind="Class" />
      <Type Name="DbLambdaExpression" Kind="Class" />
      <Type Name="DbLikeExpression" Kind="Class" />
      <Type Name="DbLimitExpression" Kind="Class" />
      <Type Name="DbModificationClause" Kind="Class" />
      <Type Name="DbModificationCommandTree" Kind="Class" />
      <Type Name="DbNewInstanceExpression" Kind="Class" />
      <Type Name="DbNotExpression" Kind="Class" />
      <Type Name="DbNullExpression" Kind="Class" />
      <Type Name="DbOfTypeExpression" Kind="Class" />
      <Type Name="DbOrExpression" Kind="Class" />
      <Type Name="DbParameterReferenceExpression" Kind="Class" />
      <Type Name="DbProjectExpression" Kind="Class" />
      <Type Name="DbPropertyExpression" Kind="Class" />
      <Type Name="DbQuantifierExpression" Kind="Class" />
      <Type Name="DbQueryCommandTree" Kind="Class" />
      <Type Name="DbRefExpression" Kind="Class" />
      <Type Name="DbRefKeyExpression" Kind="Class" />
      <Type Name="DbRelationshipNavigationExpression" Kind="Class" />
      <Type Name="DbScanExpression" Kind="Class" />
      <Type Name="DbSetClause" Kind="Class" />
      <Type Name="DbSkipExpression" Kind="Class" />
      <Type Name="DbSortClause" Kind="Class" />
      <Type Name="DbSortExpression" Kind="Class" />
      <Type Name="DbTreatExpression" Kind="Class" />
      <Type Name="DbUnaryExpression" Kind="Class" />
      <Type Name="DbUnionAllExpression" Kind="Class" />
      <Type Name="DbUpdateCommandTree" Kind="Class" />
      <Type Name="DbVariableReferenceExpression" Kind="Class" />
      <Type Name="DefaultExpressionVisitor" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder">
      <Type Name="DbExpressionBuilder" Kind="Class" />
      <Type Name="EdmFunctions" Kind="Class" />
      <Type Name="Row" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial">
      <Type Name="SpatialEdmFunctions" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Core.Common.EntitySql">
      <Type Name="EntitySqlParser" Kind="Class" />
      <Type Name="FunctionDefinition" Kind="Class" />
      <Type Name="ParseResult" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Core.EntityClient">
      <Type Name="EntityCommand" Kind="Class" />
      <Type Name="EntityConnection" Kind="Class" />
      <Type Name="EntityConnectionStringBuilder" Kind="Class" />
      <Type Name="EntityDataReader" Kind="Class" />
      <Type Name="EntityParameter" Kind="Class" />
      <Type Name="EntityParameterCollection" Kind="Class" />
      <Type Name="EntityProviderFactory" Kind="Class" />
      <Type Name="EntityTransaction" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Core.Mapping">
      <Type Name="AssociationSetMapping" Kind="Class" />
      <Type Name="AssociationSetModificationFunctionMapping" Kind="Class" />
      <Type Name="AssociationTypeMapping" Kind="Class" />
      <Type Name="ComplexPropertyMapping" Kind="Class" />
      <Type Name="ComplexTypeMapping" Kind="Class" />
      <Type Name="ConditionPropertyMapping" Kind="Class" />
      <Type Name="EndPropertyMapping" Kind="Class" />
      <Type Name="EntityContainerMapping" Kind="Class" />
      <Type Name="EntitySetBaseMapping" Kind="Class" />
      <Type Name="EntitySetMapping" Kind="Class" />
      <Type Name="EntityTypeMapping" Kind="Class" />
      <Type Name="EntityTypeModificationFunctionMapping" Kind="Class" />
      <Type Name="EntityViewContainer" Kind="Class" />
      <Type Name="EntityViewGenerationAttribute" Kind="Class" />
      <Type Name="FunctionImportComplexTypeMapping" Kind="Class" />
      <Type Name="FunctionImportEntityTypeMapping" Kind="Class" />
      <Type Name="FunctionImportEntityTypeMappingCondition" Kind="Class" />
      <Type Name="FunctionImportEntityTypeMappingConditionIsNull" Kind="Class" />
      <Type Name="FunctionImportEntityTypeMappingConditionValue" Kind="Class" />
      <Type Name="FunctionImportMapping" Kind="Class" />
      <Type Name="FunctionImportMappingComposable" Kind="Class" />
      <Type Name="FunctionImportMappingNonComposable" Kind="Class" />
      <Type Name="FunctionImportResultMapping" Kind="Class" />
      <Type Name="FunctionImportReturnTypePropertyMapping" Kind="Class" />
      <Type Name="FunctionImportReturnTypeScalarPropertyMapping" Kind="Class" />
      <Type Name="FunctionImportStructuralTypeMapping" Kind="Class" />
      <Type Name="IsNullConditionMapping" Kind="Class" />
      <Type Name="MappingBase" Kind="Class" />
      <Type Name="MappingFragment" Kind="Class" />
      <Type Name="MappingItem" Kind="Class" />
      <Type Name="MappingItemCollection" Kind="Class" />
      <Type Name="ModificationFunctionMapping" Kind="Class" />
      <Type Name="ModificationFunctionMemberPath" Kind="Class" />
      <Type Name="ModificationFunctionParameterBinding" Kind="Class" />
      <Type Name="ModificationFunctionResultBinding" Kind="Class" />
      <Type Name="PropertyMapping" Kind="Class" />
      <Type Name="ScalarPropertyMapping" Kind="Class" />
      <Type Name="StorageMappingItemCollection" Kind="Class" />
      <Type Name="StructuralTypeMapping" Kind="Class" />
      <Type Name="TypeMapping" Kind="Class" />
      <Type Name="ValueConditionMapping" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Core.Metadata.Edm">
      <Type Name="AssociationEndMember" Kind="Class" />
      <Type Name="AssociationSet" Kind="Class" />
      <Type Name="AssociationSetEnd" Kind="Class" />
      <Type Name="AssociationType" Kind="Class" />
      <Type Name="BuiltInTypeKind" Kind="Enumeration" />
      <Type Name="CollectionKind" Kind="Enumeration" />
      <Type Name="CollectionType" Kind="Class" />
      <Type Name="ComplexType" Kind="Class" />
      <Type Name="ConcurrencyMode" Kind="Enumeration" />
      <Type Name="CsdlSerializer" Kind="Class" />
      <Type Name="DataModelErrorEventArgs" Kind="Class" />
      <Type Name="DataSpace" Kind="Enumeration" />
      <Type Name="DbModelExtensions" Kind="Class" />
      <Type Name="Documentation" Kind="Class" />
      <Type Name="EdmError" Kind="Class" />
      <Type Name="EdmFunction" Kind="Class" />
      <Type Name="EdmFunctionPayload" Kind="Class" />
      <Type Name="EdmItemCollection" Kind="Class" />
      <Type Name="EdmMember" Kind="Class" />
      <Type Name="EdmModel" Kind="Class" />
      <Type Name="EdmProperty" Kind="Class" />
      <Type Name="EdmSchemaError" Kind="Class" />
      <Type Name="EdmSchemaErrorSeverity" Kind="Enumeration" />
      <Type Name="EdmType" Kind="Class" />
      <Type Name="EntityContainer" Kind="Class" />
      <Type Name="EntitySet" Kind="Class" />
      <Type Name="EntitySetBase" Kind="Class" />
      <Type Name="EntityType" Kind="Class" />
      <Type Name="EntityTypeBase" Kind="Class" />
      <Type Name="EnumMember" Kind="Class" />
      <Type Name="EnumType" Kind="Class" />
      <Type Name="Facet" Kind="Class" />
      <Type Name="FacetDescription" Kind="Class" />
      <Type Name="FunctionParameter" Kind="Class" />
      <Type Name="GlobalItem" Kind="Class" />
      <Type Name="IEdmModelAdapter" Kind="Interface" />
      <Type Name="ItemCollection" Kind="Class" />
      <Type Name="MetadataItem" Kind="Class" />
      <Type Name="MetadataProperty" Kind="Class" />
      <Type Name="MetadataWorkspace" Kind="Class" />
      <Type Name="NavigationProperty" Kind="Class" />
      <Type Name="ObjectItemCollection" Kind="Class" />
      <Type Name="OperationAction" Kind="Enumeration" />
      <Type Name="ParameterMode" Kind="Enumeration" />
      <Type Name="ParameterTypeSemantics" Kind="Enumeration" />
      <Type Name="PrimitiveType" Kind="Class" />
      <Type Name="PrimitiveTypeKind" Kind="Enumeration" />
      <Type Name="PropertyKind" Kind="Enumeration" />
      <Type Name="ReadOnlyMetadataCollection`1" DisplayName="ReadOnlyMetadataCollection&lt;T&gt;" Kind="Class" />
      <Type Name="ReadOnlyMetadataCollection`1+Enumerator" DisplayName="ReadOnlyMetadataCollection&lt;T&gt;+Enumerator" Kind="Structure" />
      <Type Name="ReferentialConstraint" Kind="Class" />
      <Type Name="RefType" Kind="Class" />
      <Type Name="RelationshipEndMember" Kind="Class" />
      <Type Name="RelationshipMultiplicity" Kind="Enumeration" />
      <Type Name="RelationshipSet" Kind="Class" />
      <Type Name="RelationshipType" Kind="Class" />
      <Type Name="RowType" Kind="Class" />
      <Type Name="SimpleType" Kind="Class" />
      <Type Name="SsdlSerializer" Kind="Class" />
      <Type Name="StoreGeneratedPattern" Kind="Enumeration" />
      <Type Name="StoreItemCollection" Kind="Class" />
      <Type Name="StructuralType" Kind="Class" />
      <Type Name="TypeUsage" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Core.Objects">
      <Type Name="CompiledQuery" Kind="Class" />
      <Type Name="CurrentValueRecord" Kind="Class" />
      <Type Name="DbUpdatableDataRecord" Kind="Class" />
      <Type Name="EntityFunctions" Kind="Class" />
      <Type Name="ExecutionOptions" Kind="Class" />
      <Type Name="IObjectSet`1" DisplayName="IObjectSet&lt;TEntity&gt;" Kind="Interface" />
      <Type Name="MergeOption" Kind="Enumeration" />
      <Type Name="ObjectContext" Kind="Class" />
      <Type Name="ObjectContextOptions" Kind="Class" />
      <Type Name="ObjectMaterializedEventArgs" Kind="Class" />
      <Type Name="ObjectMaterializedEventHandler" Kind="Delegate" />
      <Type Name="ObjectParameter" Kind="Class" />
      <Type Name="ObjectParameterCollection" Kind="Class" />
      <Type Name="ObjectQuery" Kind="Class" />
      <Type Name="ObjectQuery`1" DisplayName="ObjectQuery&lt;T&gt;" Kind="Class" />
      <Type Name="ObjectResult" Kind="Class" />
      <Type Name="ObjectResult`1" DisplayName="ObjectResult&lt;T&gt;" Kind="Class" />
      <Type Name="ObjectSet`1" DisplayName="ObjectSet&lt;TEntity&gt;" Kind="Class" />
      <Type Name="ObjectStateEntry" Kind="Class" />
      <Type Name="ObjectStateManager" Kind="Class" />
      <Type Name="OriginalValueRecord" Kind="Class" />
      <Type Name="ProxyDataContractResolver" Kind="Class" />
      <Type Name="RefreshMode" Kind="Enumeration" />
      <Type Name="SaveOptions" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Core.Objects.DataClasses">
      <Type Name="ComplexObject" Kind="Class" />
      <Type Name="EdmComplexPropertyAttribute" Kind="Class" />
      <Type Name="EdmComplexTypeAttribute" Kind="Class" />
      <Type Name="EdmEntityTypeAttribute" Kind="Class" />
      <Type Name="EdmEnumTypeAttribute" Kind="Class" />
      <Type Name="EdmFunctionAttribute" Kind="Class" />
      <Type Name="EdmPropertyAttribute" Kind="Class" />
      <Type Name="EdmRelationshipAttribute" Kind="Class" />
      <Type Name="EdmRelationshipNavigationPropertyAttribute" Kind="Class" />
      <Type Name="EdmScalarPropertyAttribute" Kind="Class" />
      <Type Name="EdmSchemaAttribute" Kind="Class" />
      <Type Name="EdmTypeAttribute" Kind="Class" />
      <Type Name="EntityCollection`1" DisplayName="EntityCollection&lt;TEntity&gt;" Kind="Class" />
      <Type Name="EntityObject" Kind="Class" />
      <Type Name="EntityReference" Kind="Class" />
      <Type Name="EntityReference`1" DisplayName="EntityReference&lt;TEntity&gt;" Kind="Class" />
      <Type Name="IEntityChangeTracker" Kind="Interface" />
      <Type Name="IEntityWithChangeTracker" Kind="Interface" />
      <Type Name="IEntityWithKey" Kind="Interface" />
      <Type Name="IEntityWithRelationships" Kind="Interface" />
      <Type Name="IRelatedEnd" Kind="Interface" />
      <Type Name="RelatedEnd" Kind="Class" />
      <Type Name="RelationshipKind" Kind="Enumeration" />
      <Type Name="RelationshipManager" Kind="Class" />
      <Type Name="StructuralObject" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Infrastructure">
      <Type Name="CommitFailedException" Kind="Class" />
      <Type Name="CommitFailureHandler" Kind="Class" />
      <Type Name="DbChangeTracker" Kind="Class" />
      <Type Name="DbCollectionEntry" Kind="Class" />
      <Type Name="DbCollectionEntry`2" DisplayName="DbCollectionEntry&lt;TEntity,TElement&gt;" Kind="Class" />
      <Type Name="DbCompiledModel" Kind="Class" />
      <Type Name="DbComplexPropertyEntry" Kind="Class" />
      <Type Name="DbComplexPropertyEntry`2" DisplayName="DbComplexPropertyEntry&lt;TEntity,TComplexProperty&gt;" Kind="Class" />
      <Type Name="DbConnectionInfo" Kind="Class" />
      <Type Name="DbConnectionStringOrigin" Kind="Enumeration" />
      <Type Name="DbContextConfiguration" Kind="Class" />
      <Type Name="DbContextInfo" Kind="Class" />
      <Type Name="DbEntityEntry" Kind="Class" />
      <Type Name="DbEntityEntry`1" DisplayName="DbEntityEntry&lt;TEntity&gt;" Kind="Class" />
      <Type Name="DbExecutionStrategy" Kind="Class" />
      <Type Name="DbMemberEntry" Kind="Class" />
      <Type Name="DbMemberEntry`2" DisplayName="DbMemberEntry&lt;TEntity,TProperty&gt;" Kind="Class" />
      <Type Name="DbModel" Kind="Class" />
      <Type Name="DbModelStore" Kind="Class" />
      <Type Name="DbPropertyEntry" Kind="Class" />
      <Type Name="DbPropertyEntry`2" DisplayName="DbPropertyEntry&lt;TEntity,TProperty&gt;" Kind="Class" />
      <Type Name="DbPropertyValues" Kind="Class" />
      <Type Name="DbProviderInfo" Kind="Class" />
      <Type Name="DbQuery" Kind="Class" />
      <Type Name="DbQuery`1" DisplayName="DbQuery&lt;TResult&gt;" Kind="Class" />
      <Type Name="DbRawSqlQuery" Kind="Class" />
      <Type Name="DbRawSqlQuery`1" DisplayName="DbRawSqlQuery&lt;TElement&gt;" Kind="Class" />
      <Type Name="DbReferenceEntry" Kind="Class" />
      <Type Name="DbReferenceEntry`2" DisplayName="DbReferenceEntry&lt;TEntity,TProperty&gt;" Kind="Class" />
      <Type Name="DbSqlQuery" Kind="Class" />
      <Type Name="DbSqlQuery`1" DisplayName="DbSqlQuery&lt;TEntity&gt;" Kind="Class" />
      <Type Name="DbUpdateConcurrencyException" Kind="Class" />
      <Type Name="DbUpdateException" Kind="Class" />
      <Type Name="DefaultDbModelStore" Kind="Class" />
      <Type Name="DefaultExecutionStrategy" Kind="Class" />
      <Type Name="DefaultManifestTokenResolver" Kind="Class" />
      <Type Name="EdmMetadata" Kind="Class" />
      <Type Name="EdmxReader" Kind="Class" />
      <Type Name="EdmxWriter" Kind="Class" />
      <Type Name="ExecutionStrategyKey" Kind="Class" />
      <Type Name="IDbAsyncEnumerable" Kind="Interface" />
      <Type Name="IDbAsyncEnumerable`1" DisplayName="IDbAsyncEnumerable&lt;T&gt;" Kind="Interface" />
      <Type Name="IDbAsyncEnumerator" Kind="Interface" />
      <Type Name="IDbAsyncEnumerator`1" DisplayName="IDbAsyncEnumerator&lt;T&gt;" Kind="Interface" />
      <Type Name="IDbAsyncQueryProvider" Kind="Interface" />
      <Type Name="IDbConnectionFactory" Kind="Interface" />
      <Type Name="IDbContextFactory`1" DisplayName="IDbContextFactory&lt;TContext&gt;" Kind="Interface" />
      <Type Name="IDbExecutionStrategy" Kind="Interface" />
      <Type Name="IDbModelCacheKey" Kind="Interface" />
      <Type Name="IDbModelCacheKeyProvider" Kind="Interface" />
      <Type Name="IDbProviderFactoryResolver" Kind="Interface" />
      <Type Name="IManifestTokenResolver" Kind="Interface" />
      <Type Name="IMetadataAnnotationSerializer" Kind="Interface" />
      <Type Name="IncludeMetadataConvention" Kind="Class" />
      <Type Name="IObjectContextAdapter" Kind="Interface" />
      <Type Name="IProviderInvariantName" Kind="Interface" />
      <Type Name="LocalDbConnectionFactory" Kind="Class" />
      <Type Name="ModelContainerConvention" Kind="Class" />
      <Type Name="ModelNamespaceConvention" Kind="Class" />
      <Type Name="ObjectReferenceEqualityComparer" Kind="Class" />
      <Type Name="ReplacementDbQueryWrapper`1" DisplayName="ReplacementDbQueryWrapper&lt;TElement&gt;" Kind="Class" />
      <Type Name="RetryLimitExceededException" Kind="Class" />
      <Type Name="SqlCeConnectionFactory" Kind="Class" />
      <Type Name="SqlConnectionFactory" Kind="Class" />
      <Type Name="SuppressDbSetInitializationAttribute" Kind="Class" />
      <Type Name="TableExistenceChecker" Kind="Class" />
      <Type Name="TransactionContext" Kind="Class" />
      <Type Name="TransactionHandler" Kind="Class" />
      <Type Name="TransactionRow" Kind="Class" />
      <Type Name="UnintentionalCodeFirstException" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Infrastructure.Annotations">
      <Type Name="AnnotationCodeGenerator" Kind="Class" />
      <Type Name="AnnotationValues" Kind="Class" />
      <Type Name="CompatibilityResult" Kind="Class" />
      <Type Name="IMergeableAnnotation" Kind="Interface" />
      <Type Name="IndexAnnotation" Kind="Class" />
      <Type Name="IndexAnnotationSerializer" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Infrastructure.DependencyResolution">
      <Type Name="DbConfigurationLoadedEventArgs" Kind="Class" />
      <Type Name="DbDependencyResolverExtensions" Kind="Class" />
      <Type Name="ExecutionStrategyResolver`1" DisplayName="ExecutionStrategyResolver&lt;T&gt;" Kind="Class" />
      <Type Name="IDbDependencyResolver" Kind="Interface" />
      <Type Name="SingletonDependencyResolver`1" DisplayName="SingletonDependencyResolver&lt;T&gt;" Kind="Class" />
      <Type Name="TransactionHandlerResolver" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Infrastructure.Design">
      <Type Name="AppConfigReader" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Infrastructure.Interception">
      <Type Name="BeginTransactionInterceptionContext" Kind="Class" />
      <Type Name="DatabaseLogFormatter" Kind="Class" />
      <Type Name="DatabaseLogger" Kind="Class" />
      <Type Name="DbCommandDispatcher" Kind="Class" />
      <Type Name="DbCommandInterceptionContext" Kind="Class" />
      <Type Name="DbCommandInterceptionContext`1" DisplayName="DbCommandInterceptionContext&lt;TResult&gt;" Kind="Class" />
      <Type Name="DbCommandInterceptor" Kind="Class" />
      <Type Name="DbCommandTreeInterceptionContext" Kind="Class" />
      <Type Name="DbConfigurationInterceptionContext" Kind="Class" />
      <Type Name="DbConnectionDispatcher" Kind="Class" />
      <Type Name="DbConnectionInterceptionContext" Kind="Class" />
      <Type Name="DbConnectionInterceptionContext`1" DisplayName="DbConnectionInterceptionContext&lt;TResult&gt;" Kind="Class" />
      <Type Name="DbConnectionPropertyInterceptionContext`1" DisplayName="DbConnectionPropertyInterceptionContext&lt;TValue&gt;" Kind="Class" />
      <Type Name="DbDispatchers" Kind="Class" />
      <Type Name="DbInterception" Kind="Class" />
      <Type Name="DbInterceptionContext" Kind="Class" />
      <Type Name="DbTransactionDispatcher" Kind="Class" />
      <Type Name="DbTransactionInterceptionContext" Kind="Class" />
      <Type Name="DbTransactionInterceptionContext`1" DisplayName="DbTransactionInterceptionContext&lt;TResult&gt;" Kind="Class" />
      <Type Name="EnlistTransactionInterceptionContext" Kind="Class" />
      <Type Name="IDbCommandInterceptor" Kind="Interface" />
      <Type Name="IDbCommandTreeInterceptor" Kind="Interface" />
      <Type Name="IDbConfigurationInterceptor" Kind="Interface" />
      <Type Name="IDbConnectionInterceptor" Kind="Interface" />
      <Type Name="IDbInterceptor" Kind="Interface" />
      <Type Name="IDbTransactionInterceptor" Kind="Interface" />
      <Type Name="MutableInterceptionContext" Kind="Class" />
      <Type Name="MutableInterceptionContext`1" DisplayName="MutableInterceptionContext&lt;TResult&gt;" Kind="Class" />
      <Type Name="PropertyInterceptionContext`1" DisplayName="PropertyInterceptionContext&lt;TValue&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Infrastructure.MappingViews">
      <Type Name="DbMappingView" Kind="Class" />
      <Type Name="DbMappingViewCache" Kind="Class" />
      <Type Name="DbMappingViewCacheFactory" Kind="Class" />
      <Type Name="DbMappingViewCacheTypeAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Infrastructure.Pluralization">
      <Type Name="CustomPluralizationEntry" Kind="Class" />
      <Type Name="EnglishPluralizationService" Kind="Class" />
      <Type Name="IPluralizationService" Kind="Interface" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Migrations">
      <Type Name="DbMigration" Kind="Class" />
      <Type Name="DbMigrationsConfiguration" Kind="Class" />
      <Type Name="DbMigrationsConfiguration`1" DisplayName="DbMigrationsConfiguration&lt;TContext&gt;" Kind="Class" />
      <Type Name="DbMigrator" Kind="Class" />
      <Type Name="DbSetMigrationsExtensions" Kind="Class" />
      <Type Name="IDbSetExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Migrations.Builders">
      <Type Name="ColumnBuilder" Kind="Class" />
      <Type Name="ParameterBuilder" Kind="Class" />
      <Type Name="TableBuilder`1" DisplayName="TableBuilder&lt;TColumns&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Migrations.Design">
      <Type Name="CSharpMigrationCodeGenerator" Kind="Class" />
      <Type Name="MigrationCodeGenerator" Kind="Class" />
      <Type Name="MigrationScaffolder" Kind="Class" />
      <Type Name="ScaffoldedMigration" Kind="Class" />
      <Type Name="ToolingException" Kind="Class" />
      <Type Name="ToolingFacade" Kind="Class" />
      <Type Name="VisualBasicMigrationCodeGenerator" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Migrations.History">
      <Type Name="HistoryContext" Kind="Class" />
      <Type Name="HistoryRow" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Migrations.Infrastructure">
      <Type Name="AutomaticDataLossException" Kind="Class" />
      <Type Name="AutomaticMigrationsDisabledException" Kind="Class" />
      <Type Name="IDbMigration" Kind="Interface" />
      <Type Name="IMigrationMetadata" Kind="Interface" />
      <Type Name="MigrationsException" Kind="Class" />
      <Type Name="MigrationsLogger" Kind="Class" />
      <Type Name="MigrationsPendingException" Kind="Class" />
      <Type Name="MigratorBase" Kind="Class" />
      <Type Name="MigratorLoggingDecorator" Kind="Class" />
      <Type Name="MigratorScriptingDecorator" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Migrations.Model">
      <Type Name="AddColumnOperation" Kind="Class" />
      <Type Name="AddForeignKeyOperation" Kind="Class" />
      <Type Name="AddPrimaryKeyOperation" Kind="Class" />
      <Type Name="AlterColumnOperation" Kind="Class" />
      <Type Name="AlterProcedureOperation" Kind="Class" />
      <Type Name="AlterTableOperation" Kind="Class" />
      <Type Name="ColumnModel" Kind="Class" />
      <Type Name="CreateIndexOperation" Kind="Class" />
      <Type Name="CreateProcedureOperation" Kind="Class" />
      <Type Name="CreateTableOperation" Kind="Class" />
      <Type Name="DeleteHistoryOperation" Kind="Class" />
      <Type Name="DropColumnOperation" Kind="Class" />
      <Type Name="DropForeignKeyOperation" Kind="Class" />
      <Type Name="DropIndexOperation" Kind="Class" />
      <Type Name="DropPrimaryKeyOperation" Kind="Class" />
      <Type Name="DropProcedureOperation" Kind="Class" />
      <Type Name="DropTableOperation" Kind="Class" />
      <Type Name="ForeignKeyOperation" Kind="Class" />
      <Type Name="HistoryOperation" Kind="Class" />
      <Type Name="IndexOperation" Kind="Class" />
      <Type Name="InsertHistoryOperation" Kind="Class" />
      <Type Name="MigrationOperation" Kind="Class" />
      <Type Name="MoveProcedureOperation" Kind="Class" />
      <Type Name="MoveTableOperation" Kind="Class" />
      <Type Name="NotSupportedOperation" Kind="Class" />
      <Type Name="ParameterModel" Kind="Class" />
      <Type Name="PrimaryKeyOperation" Kind="Class" />
      <Type Name="ProcedureOperation" Kind="Class" />
      <Type Name="PropertyModel" Kind="Class" />
      <Type Name="RenameColumnOperation" Kind="Class" />
      <Type Name="RenameIndexOperation" Kind="Class" />
      <Type Name="RenameProcedureOperation" Kind="Class" />
      <Type Name="RenameTableOperation" Kind="Class" />
      <Type Name="SqlOperation" Kind="Class" />
      <Type Name="UpdateDatabaseOperation" Kind="Class" />
      <Type Name="UpdateDatabaseOperation+Migration" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Migrations.Sql">
      <Type Name="MigrationSqlGenerator" Kind="Class" />
      <Type Name="MigrationStatement" Kind="Class" />
      <Type Name="SqlCeMigrationSqlGenerator" Kind="Class" />
      <Type Name="SqlServerMigrationSqlGenerator" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Migrations.Utilities">
      <Type Name="IndentedTextWriter" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.ModelConfiguration">
      <Type Name="ComplexTypeConfiguration`1" DisplayName="ComplexTypeConfiguration&lt;TComplexType&gt;" Kind="Class" />
      <Type Name="EntityTypeConfiguration`1" DisplayName="EntityTypeConfiguration&lt;TEntityType&gt;" Kind="Class" />
      <Type Name="ModelValidationException" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.ModelConfiguration.Configuration">
      <Type Name="AssociationMappingConfiguration" Kind="Class" />
      <Type Name="AssociationModificationStoredProcedureConfiguration`1" DisplayName="AssociationModificationStoredProcedureConfiguration&lt;TEntityType&gt;" Kind="Class" />
      <Type Name="BinaryPropertyConfiguration" Kind="Class" />
      <Type Name="CascadableNavigationPropertyConfiguration" Kind="Class" />
      <Type Name="ConfigurationRegistrar" Kind="Class" />
      <Type Name="ConventionDeleteModificationStoredProcedureConfiguration" Kind="Class" />
      <Type Name="ConventionInsertModificationStoredProcedureConfiguration" Kind="Class" />
      <Type Name="ConventionModificationStoredProcedureConfiguration" Kind="Class" />
      <Type Name="ConventionModificationStoredProceduresConfiguration" Kind="Class" />
      <Type Name="ConventionPrimitivePropertyConfiguration" Kind="Class" />
      <Type Name="ConventionsConfiguration" Kind="Class" />
      <Type Name="ConventionTypeConfiguration" Kind="Class" />
      <Type Name="ConventionTypeConfiguration`1" DisplayName="ConventionTypeConfiguration&lt;T&gt;" Kind="Class" />
      <Type Name="ConventionUpdateModificationStoredProcedureConfiguration" Kind="Class" />
      <Type Name="DateTimePropertyConfiguration" Kind="Class" />
      <Type Name="DecimalPropertyConfiguration" Kind="Class" />
      <Type Name="DeleteModificationStoredProcedureConfiguration`1" DisplayName="DeleteModificationStoredProcedureConfiguration&lt;TEntityType&gt;" Kind="Class" />
      <Type Name="DependentNavigationPropertyConfiguration`1" DisplayName="DependentNavigationPropertyConfiguration&lt;TDependentEntityType&gt;" Kind="Class" />
      <Type Name="EntityMappingConfiguration`1" DisplayName="EntityMappingConfiguration&lt;TEntityType&gt;" Kind="Class" />
      <Type Name="ForeignKeyAssociationMappingConfiguration" Kind="Class" />
      <Type Name="ForeignKeyNavigationPropertyConfiguration" Kind="Class" />
      <Type Name="IndexConfiguration" Kind="Class" />
      <Type Name="InsertModificationStoredProcedureConfiguration`1" DisplayName="InsertModificationStoredProcedureConfiguration&lt;TEntityType&gt;" Kind="Class" />
      <Type Name="LengthColumnConfiguration" Kind="Class" />
      <Type Name="LengthPropertyConfiguration" Kind="Class" />
      <Type Name="ManyNavigationPropertyConfiguration`2" DisplayName="ManyNavigationPropertyConfiguration&lt;TEntityType,TTargetEntityType&gt;" Kind="Class" />
      <Type Name="ManyToManyAssociationMappingConfiguration" Kind="Class" />
      <Type Name="ManyToManyModificationStoredProcedureConfiguration`2" DisplayName="ManyToManyModificationStoredProcedureConfiguration&lt;TEntityType,TTargetEntityType&gt;" Kind="Class" />
      <Type Name="ManyToManyModificationStoredProceduresConfiguration`2" DisplayName="ManyToManyModificationStoredProceduresConfiguration&lt;TEntityType,TTargetEntityType&gt;" Kind="Class" />
      <Type Name="ManyToManyNavigationPropertyConfiguration" Kind="Class" />
      <Type Name="ManyToManyNavigationPropertyConfiguration`2" DisplayName="ManyToManyNavigationPropertyConfiguration&lt;TEntityType,TTargetEntityType&gt;" Kind="Class" />
      <Type Name="ModificationStoredProcedureConfigurationBase" Kind="Class" />
      <Type Name="ModificationStoredProceduresConfiguration`1" DisplayName="ModificationStoredProceduresConfiguration&lt;TEntityType&gt;" Kind="Class" />
      <Type Name="NotNullConditionConfiguration" Kind="Class" />
      <Type Name="OptionalNavigationPropertyConfiguration`2" DisplayName="OptionalNavigationPropertyConfiguration&lt;TEntityType,TTargetEntityType&gt;" Kind="Class" />
      <Type Name="PrimaryKeyIndexConfiguration" Kind="Class" />
      <Type Name="PrimitiveColumnConfiguration" Kind="Class" />
      <Type Name="PrimitivePropertyConfiguration" Kind="Class" />
      <Type Name="PropertyConventionConfiguration" Kind="Class" />
      <Type Name="PropertyConventionWithHavingConfiguration`1" DisplayName="PropertyConventionWithHavingConfiguration&lt;T&gt;" Kind="Class" />
      <Type Name="PropertyMappingConfiguration" Kind="Class" />
      <Type Name="RequiredNavigationPropertyConfiguration`2" DisplayName="RequiredNavigationPropertyConfiguration&lt;TEntityType,TTargetEntityType&gt;" Kind="Class" />
      <Type Name="StringColumnConfiguration" Kind="Class" />
      <Type Name="StringPropertyConfiguration" Kind="Class" />
      <Type Name="StructuralTypeConfiguration`1" DisplayName="StructuralTypeConfiguration&lt;TStructuralType&gt;" Kind="Class" />
      <Type Name="TypeConventionConfiguration" Kind="Class" />
      <Type Name="TypeConventionConfiguration`1" DisplayName="TypeConventionConfiguration&lt;T&gt;" Kind="Class" />
      <Type Name="TypeConventionWithHavingConfiguration`1" DisplayName="TypeConventionWithHavingConfiguration&lt;T&gt;" Kind="Class" />
      <Type Name="TypeConventionWithHavingConfiguration`2" DisplayName="TypeConventionWithHavingConfiguration&lt;T,TValue&gt;" Kind="Class" />
      <Type Name="UpdateModificationStoredProcedureConfiguration`1" DisplayName="UpdateModificationStoredProcedureConfiguration&lt;TEntityType&gt;" Kind="Class" />
      <Type Name="ValueConditionConfiguration" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.ModelConfiguration.Conventions">
      <Type Name="AssociationInverseDiscoveryConvention" Kind="Class" />
      <Type Name="AttributeToColumnAnnotationConvention`2" DisplayName="AttributeToColumnAnnotationConvention&lt;TAttribute,TAnnotation&gt;" Kind="Class" />
      <Type Name="AttributeToTableAnnotationConvention`2" DisplayName="AttributeToTableAnnotationConvention&lt;TAttribute,TAnnotation&gt;" Kind="Class" />
      <Type Name="ColumnAttributeConvention" Kind="Class" />
      <Type Name="ColumnOrderingConvention" Kind="Class" />
      <Type Name="ColumnOrderingConventionStrict" Kind="Class" />
      <Type Name="ColumnTypeCasingConvention" Kind="Class" />
      <Type Name="ComplexTypeAttributeConvention" Kind="Class" />
      <Type Name="ComplexTypeDiscoveryConvention" Kind="Class" />
      <Type Name="ConcurrencyCheckAttributeConvention" Kind="Class" />
      <Type Name="Convention" Kind="Class" />
      <Type Name="DatabaseGeneratedAttributeConvention" Kind="Class" />
      <Type Name="DecimalPropertyConvention" Kind="Class" />
      <Type Name="DeclaredPropertyOrderingConvention" Kind="Class" />
      <Type Name="ForeignKeyAssociationMultiplicityConvention" Kind="Class" />
      <Type Name="ForeignKeyDiscoveryConvention" Kind="Class" />
      <Type Name="ForeignKeyIndexConvention" Kind="Class" />
      <Type Name="ForeignKeyNavigationPropertyAttributeConvention" Kind="Class" />
      <Type Name="ForeignKeyPrimitivePropertyAttributeConvention" Kind="Class" />
      <Type Name="IConceptualModelConvention`1" DisplayName="IConceptualModelConvention&lt;T&gt;" Kind="Interface" />
      <Type Name="IConvention" Kind="Interface" />
      <Type Name="IdKeyDiscoveryConvention" Kind="Class" />
      <Type Name="IndexAttributeConvention" Kind="Class" />
      <Type Name="InversePropertyAttributeConvention" Kind="Class" />
      <Type Name="IStoreModelConvention`1" DisplayName="IStoreModelConvention&lt;T&gt;" Kind="Interface" />
      <Type Name="KeyAttributeConvention" Kind="Class" />
      <Type Name="KeyDiscoveryConvention" Kind="Class" />
      <Type Name="ManyToManyCascadeDeleteConvention" Kind="Class" />
      <Type Name="MappingInheritedPropertiesSupportConvention" Kind="Class" />
      <Type Name="MaxLengthAttributeConvention" Kind="Class" />
      <Type Name="NavigationPropertyNameForeignKeyDiscoveryConvention" Kind="Class" />
      <Type Name="NotMappedPropertyAttributeConvention" Kind="Class" />
      <Type Name="NotMappedTypeAttributeConvention" Kind="Class" />
      <Type Name="OneToManyCascadeDeleteConvention" Kind="Class" />
      <Type Name="OneToOneConstraintIntroductionConvention" Kind="Class" />
      <Type Name="PluralizingEntitySetNameConvention" Kind="Class" />
      <Type Name="PluralizingTableNameConvention" Kind="Class" />
      <Type Name="PrimaryKeyNameForeignKeyDiscoveryConvention" Kind="Class" />
      <Type Name="PrimitivePropertyAttributeConfigurationConvention`1" DisplayName="PrimitivePropertyAttributeConfigurationConvention&lt;TAttribute&gt;" Kind="Class" />
      <Type Name="PropertyAttributeConfigurationConvention`1" DisplayName="PropertyAttributeConfigurationConvention&lt;TAttribute&gt;" Kind="Class" />
      <Type Name="PropertyMaxLengthConvention" Kind="Class" />
      <Type Name="RequiredNavigationPropertyAttributeConvention" Kind="Class" />
      <Type Name="RequiredPrimitivePropertyAttributeConvention" Kind="Class" />
      <Type Name="SqlCePropertyMaxLengthConvention" Kind="Class" />
      <Type Name="StoreGeneratedIdentityKeyConvention" Kind="Class" />
      <Type Name="StringLengthAttributeConvention" Kind="Class" />
      <Type Name="TableAttributeConvention" Kind="Class" />
      <Type Name="TimestampAttributeConvention" Kind="Class" />
      <Type Name="TypeAttributeConfigurationConvention`1" DisplayName="TypeAttributeConfigurationConvention&lt;TAttribute&gt;" Kind="Class" />
      <Type Name="TypeNameForeignKeyDiscoveryConvention" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Spatial">
      <Type Name="DbGeography" Kind="Class" />
      <Type Name="DbGeographyWellKnownValue" Kind="Class" />
      <Type Name="DbGeometry" Kind="Class" />
      <Type Name="DbGeometryWellKnownValue" Kind="Class" />
      <Type Name="DbSpatialDataReader" Kind="Class" />
      <Type Name="DbSpatialServices" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.SqlServer">
      <Type Name="SqlAzureExecutionStrategy" Kind="Class" />
      <Type Name="SqlFunctions" Kind="Class" />
      <Type Name="SqlProviderServices" Kind="Class" />
      <Type Name="SqlServerMigrationSqlGenerator" Kind="Class" />
      <Type Name="SqlSpatialFunctions" Kind="Class" />
      <Type Name="SqlSpatialServices" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.SqlServer.Utilities">
      <Type Name="TaskExtensions" Kind="Class" />
      <Type Name="TaskExtensions+CultureAwaiter" Kind="Structure" />
      <Type Name="TaskExtensions+CultureAwaiter`1" DisplayName="TaskExtensions+CultureAwaiter&lt;T&gt;" Kind="Structure" />
    </Namespace>
    <Namespace Name="System.Data.Entity.SqlServerCompact">
      <Type Name="SqlCeFunctions" Kind="Class" />
      <Type Name="SqlCeMigrationSqlGenerator" Kind="Class" />
      <Type Name="SqlCeProviderServices" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.SqlServerCompact.Legacy">
      <Type Name="SqlCeFunctions" Kind="Class" />
      <Type Name="SqlCeMigrationSqlGenerator" Kind="Class" />
      <Type Name="SqlCeProviderServices" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Utilities">
      <Type Name="TaskExtensions" Kind="Class" />
      <Type Name="TaskExtensions+CultureAwaiter" Kind="Structure" />
      <Type Name="TaskExtensions+CultureAwaiter`1" DisplayName="TaskExtensions+CultureAwaiter&lt;T&gt;" Kind="Structure" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Validation">
      <Type Name="DbEntityValidationException" Kind="Class" />
      <Type Name="DbEntityValidationResult" Kind="Class" />
      <Type Name="DbUnexpectedValidationException" Kind="Class" />
      <Type Name="DbValidationError" Kind="Class" />
    </Namespace>
  </Types>
  <Title>Untitled</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />
      </Targets>
      <Member MemberName="Aggregate">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate Aggregate (this System.Data.Entity.Core.Metadata.Edm.EdmFunction function, System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate Aggregate(class System.Data.Entity.Core.Metadata.Edm.EdmFunction function, class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate (function As EdmFunction, argument As DbExpression) As DbFunctionAggregate" />
        <MemberSignature Language="F#" Value="static member Aggregate : System.Data.Entity.Core.Metadata.Edm.EdmFunction * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate (function, argument)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="function" Type="System.Data.Entity.Core.Metadata.Edm.EdmFunction" RefType="this" />
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="function">The function that defines the aggregate operation.</param>
          <param name="argument">The argument over which the aggregate function should be calculated.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />
      </Targets>
      <Member MemberName="AggregateDistinct">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate AggregateDistinct (this System.Data.Entity.Core.Metadata.Edm.EdmFunction function, System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate AggregateDistinct(class System.Data.Entity.Core.Metadata.Edm.EdmFunction function, class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AggregateDistinct (function As EdmFunction, argument As DbExpression) As DbFunctionAggregate" />
        <MemberSignature Language="F#" Value="static member AggregateDistinct : System.Data.Entity.Core.Metadata.Edm.EdmFunction * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct (function, argument)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="function" Type="System.Data.Entity.Core.Metadata.Edm.EdmFunction" RefType="this" />
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="function">The function that defines the aggregate operation.</param>
          <param name="argument">The argument over which the aggregate function should be calculated.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" /> that is applied in a distinct fashion.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="All">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression All (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression All(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function All (source As DbExpression, predicate As Func(Of DbExpression, DbExpression)) As DbQuantifierExpression" />
        <MemberSignature Language="F#" Value="static member All : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All (source, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">An expression that specifies the input set.</param>
          <param name="predicate">A method representing a predicate to evaluate for each member of the input set.    This method must produce an expression with a Boolean result type that provides the predicate logic.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for all elements of the input set.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="All">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression All (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Data.Entity.Core.Common.CommandTrees.DbExpression predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression All(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Data.Entity.Core.Common.CommandTrees.DbExpression predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function All (input As DbExpressionBinding, predicate As DbExpression) As DbQuantifierExpression" />
        <MemberSignature Language="F#" Value="static member All : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All (input, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="predicate" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="input">An expression binding that specifies the input set.</param>
          <param name="predicate">An expression representing a predicate to evaluate for each member of the input set.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for all elements of the input set.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="And">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbAndExpression And (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbAndExpression And(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function And (left As DbExpression, right As DbExpression) As DbAndExpression" />
        <MemberSignature Language="F#" Value="static member And : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbAndExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">A Boolean expression that specifies the left argument.</param>
          <param name="right">A Boolean expression that specifies the right argument.</param>
          <summary>
            Creates an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" /> that performs the logical And of the left and right arguments.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Any">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbExpression Any (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbExpression Any(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any (source As DbExpression) As DbExpression" />
        <MemberSignature Language="F#" Value="static member Any : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">An expression that specifies the input set.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that determines whether the specified set argument is non-empty.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Any">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression Any (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression Any(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any (source As DbExpression, predicate As Func(Of DbExpression, DbExpression)) As DbQuantifierExpression" />
        <MemberSignature Language="F#" Value="static member Any : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any (source, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">An expression that specifies the input set.</param>
          <param name="predicate">A method representing the predicate to evaluate for each member of the input set. This method must produce an expression with a Boolean result type that provides the predicate logic.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for any element of the input set.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="Any">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression Any (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Data.Entity.Core.Common.CommandTrees.DbExpression predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression Any(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Data.Entity.Core.Common.CommandTrees.DbExpression predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any (input As DbExpressionBinding, predicate As DbExpression) As DbQuantifierExpression" />
        <MemberSignature Language="F#" Value="static member Any : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any (input, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="predicate" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="input">An expression binding that specifies the input set.</param>
          <param name="predicate">An expression representing a predicate to evaluate for each member of the input set.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for any element of the input set.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />
      </Targets>
      <Member MemberName="As">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.KeyValuePair&lt;string,System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt; As (this System.Data.Entity.Core.Common.CommandTrees.DbAggregate value, string alias);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt; As(class System.Data.Entity.Core.Common.CommandTrees.DbAggregate value, string alias) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbAggregate,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function As (value As DbAggregate, alias As String) As KeyValuePair(Of String, DbAggregate)" />
        <MemberSignature Language="F#" Value="static member As : System.Data.Entity.Core.Common.CommandTrees.DbAggregate * string -&gt; System.Collections.Generic.KeyValuePair&lt;string, System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt;" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As (value, alias)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Entity.Core.Common.CommandTrees.DbAggregate" RefType="this" />
          <Parameter Name="alias" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="value">The value in the key/value pair.</param>
          <param name="alias">The key in the key/value pair.</param>
          <summary>Returns the specified arguments as a key/value pair object.</summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbAggregate,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="As">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.KeyValuePair&lt;string,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; As (this System.Data.Entity.Core.Common.CommandTrees.DbExpression value, string alias);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; As(class System.Data.Entity.Core.Common.CommandTrees.DbExpression value, string alias) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function As (value As DbExpression, alias As String) As KeyValuePair(Of String, DbExpression)" />
        <MemberSignature Language="F#" Value="static member As : System.Data.Entity.Core.Common.CommandTrees.DbExpression * string -&gt; System.Collections.Generic.KeyValuePair&lt;string, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As (value, alias)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="alias" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="value">The value in the key/value pair.</param>
          <param name="alias">The key in the key/value pair.</param>
          <summary>Returns the specified arguments as a key/value pair object.</summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Bind">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding Bind (this System.Data.Entity.Core.Common.CommandTrees.DbExpression input);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding Bind(class System.Data.Entity.Core.Common.CommandTrees.DbExpression input) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Bind (input As DbExpression) As DbExpressionBinding" />
        <MemberSignature Language="F#" Value="static member Bind : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind input" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="input">The expression to bind.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that uses a generated variable name to bind the given expression.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="BindAs">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding BindAs (this System.Data.Entity.Core.Common.CommandTrees.DbExpression input, string varName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding BindAs(class System.Data.Entity.Core.Common.CommandTrees.DbExpression input, string varName) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BindAs (input As DbExpression, varName As String) As DbExpressionBinding" />
        <MemberSignature Language="F#" Value="static member BindAs : System.Data.Entity.Core.Common.CommandTrees.DbExpression * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs (input, varName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="varName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="input">The expression to bind.</param>
          <param name="varName">The variable name that should be used for the binding.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that uses the specified variable name to bind the given expression
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="CastTo">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbCastExpression CastTo (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Metadata.Edm.TypeUsage toType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbCastExpression CastTo(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Metadata.Edm.TypeUsage toType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CastTo (argument As DbExpression, toType As TypeUsage) As DbCastExpression" />
        <MemberSignature Language="F#" Value="static member CastTo : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo (argument, toType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbCastExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="toType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
        </Parameters>
        <Docs>
          <param name="argument">The argument to which the cast should be applied.</param>
          <param name="toType">Type metadata that specifies the type to cast to.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" /> that applies a cast operation to a polymorphic argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Targets>
      <Member MemberName="Constant">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression Constant (this System.Data.Entity.Core.Metadata.Edm.TypeUsage constantType, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression Constant(class System.Data.Entity.Core.Metadata.Edm.TypeUsage constantType, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Constant (constantType As TypeUsage, value As Object) As DbConstantExpression" />
        <MemberSignature Language="F#" Value="static member Constant : System.Data.Entity.Core.Metadata.Edm.TypeUsage * obj -&gt; System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant (constantType, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="constantType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" RefType="this" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="constantType">The type of the constant value.</param>
          <param name="value">The constant value to represent.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> of the specified primitive type with the given constant value.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />
      </Targets>
      <Member MemberName="CreateRef">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; keyValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef(class System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; keyValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="F#" Value="static member CreateRef : System.Data.Entity.Core.Metadata.Edm.EntitySet * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef (entitySet, keyValues)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entitySet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySet" RefType="this" />
          <Parameter Name="keyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="entitySet">The entity set in which the referenced element resides.</param>
          <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity based on key values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />
      </Targets>
      <Member MemberName="CreateRef">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, params System.Data.Entity.Core.Common.CommandTrees.DbExpression[] keyValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef(class System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, class System.Data.Entity.Core.Common.CommandTrees.DbExpression[] keyValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
        <MemberSignature Language="F#" Value="static member CreateRef : System.Data.Entity.Core.Metadata.Edm.EntitySet * System.Data.Entity.Core.Common.CommandTrees.DbExpression[] -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef (entitySet, keyValues)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entitySet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySet" RefType="this" />
          <Parameter Name="keyValues" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="entitySet">The entity set in which the referenced element resides.</param>
          <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity based on key values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />
      </Targets>
      <Member MemberName="CreateRef">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, System.Data.Entity.Core.Metadata.Edm.EntityType entityType, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; keyValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef(class System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, class System.Data.Entity.Core.Metadata.Edm.EntityType entityType, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; keyValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="F#" Value="static member CreateRef : System.Data.Entity.Core.Metadata.Edm.EntitySet * System.Data.Entity.Core.Metadata.Edm.EntityType * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef (entitySet, entityType, keyValues)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entitySet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySet" RefType="this" />
          <Parameter Name="entityType" Type="System.Data.Entity.Core.Metadata.Edm.EntityType" />
          <Parameter Name="keyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="entitySet">The entity set in which the referenced element resides.</param>
          <param name="entityType">The specific type of the referenced entity. This must be an entity type from the same hierarchy as the entity set's element type.</param>
          <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity of a given type based on key values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />
      </Targets>
      <Member MemberName="CreateRef">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, System.Data.Entity.Core.Metadata.Edm.EntityType entityType, params System.Data.Entity.Core.Common.CommandTrees.DbExpression[] keyValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef(class System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, class System.Data.Entity.Core.Metadata.Edm.EntityType entityType, class System.Data.Entity.Core.Common.CommandTrees.DbExpression[] keyValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
        <MemberSignature Language="F#" Value="static member CreateRef : System.Data.Entity.Core.Metadata.Edm.EntitySet * System.Data.Entity.Core.Metadata.Edm.EntityType * System.Data.Entity.Core.Common.CommandTrees.DbExpression[] -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef (entitySet, entityType, keyValues)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entitySet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySet" RefType="this" />
          <Parameter Name="entityType" Type="System.Data.Entity.Core.Metadata.Edm.EntityType" />
          <Parameter Name="keyValues" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="entitySet">The entity set in which the referenced element resides.</param>
          <param name="entityType">The specific type of the referenced entity. This must be an entity type from the same hierarchy as the entity set's element type.</param>
          <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity of a given type based on key values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="CrossApply">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression CrossApply (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair&lt;string,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; apply);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression CrossApply(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; apply) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CrossApply (source As DbExpression, apply As Func(Of DbExpression, KeyValuePair(Of String, DbExpression))) As DbApplyExpression" />
        <MemberSignature Language="F#" Value="static member CrossApply : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Collections.Generic.KeyValuePair&lt;string, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply (source, apply)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="apply" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt;" />
        </Parameters>
        <Docs>
          <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
          <param name="apply">A method that specifies the logic to evaluate once for each member of the input set. </param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="CrossApply">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression CrossApply (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding apply);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression CrossApply(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding apply) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CrossApply (input As DbExpressionBinding, apply As DbExpressionBinding) As DbApplyExpression" />
        <MemberSignature Language="F#" Value="static member CrossApply : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding -&gt; System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply (input, apply)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="apply" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
        </Parameters>
        <Docs>
          <param name="input">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </param>
          <param name="apply">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies logic to evaluate once for each member of the input set.
            </param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Deref">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression Deref (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression Deref(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Deref (argument As DbExpression) As DbDerefExpression" />
        <MemberSignature Language="F#" Value="static member Deref : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref argument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that provides the reference. This expression must have a reference Type.
            </param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" /> that retrieves a specific Entity given a reference expression.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Distinct">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression Distinct (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression Distinct(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct (argument As DbExpression) As DbDistinctExpression" />
        <MemberSignature Language="F#" Value="static member Distinct : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct argument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">An expression that defines the set over which to perfom the distinct operation.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" /> that removes duplicates from the given set argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Divide">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Divide (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Divide(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Divide (left As DbExpression, right As DbExpression) As DbArithmeticExpression" />
        <MemberSignature Language="F#" Value="static member Divide : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that specifies the left argument.</param>
          <param name="right">An expression that specifies the right argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that divides the left argument by the right argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Element">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbElementExpression Element (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbElementExpression Element(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Element (argument As DbExpression) As DbElementExpression" />
        <MemberSignature Language="F#" Value="static member Element : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element argument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbElementExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">An expression that specifies the input set.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" /> that converts a set into a singleton.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Equal">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression Equal (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression Equal(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Equal (left As DbExpression, right As DbExpression) As DbComparisonExpression" />
        <MemberSignature Language="F#" Value="static member Equal : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that specifies the left argument.</param>
          <param name="right">An expression that specifies the right argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that compares the left and right arguments for equality.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Except">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression Except (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression Except(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except (left As DbExpression, right As DbExpression) As DbExceptExpression" />
        <MemberSignature Language="F#" Value="static member Except : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that defines the left set argument.</param>
          <param name="right">An expression that defines the right set argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" /> that computes the subtraction of the right set argument from the left set argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Exists">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbExpression Exists (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbExpression Exists(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Exists (argument As DbExpression) As DbExpression" />
        <MemberSignature Language="F#" Value="static member Exists : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists argument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">An expression that specifies the input set.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that determines whether the specified set argument is non-empty.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="Filter">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression Filter (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Data.Entity.Core.Common.CommandTrees.DbExpression predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression Filter(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Data.Entity.Core.Common.CommandTrees.DbExpression predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Filter (input As DbExpressionBinding, predicate As DbExpression) As DbFilterExpression" />
        <MemberSignature Language="F#" Value="static member Filter : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter (input, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="predicate" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="input">An expression binding that specifies the input set.</param>
          <param name="predicate">An expression representing a predicate to evaluate for each member of the input set.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> that filters the elements in the given input set using the specified predicate.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="FullOuterJoin">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression FullOuterJoin (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; joinCondition);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression FullOuterJoin(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right, class System.Func`3&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; joinCondition) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FullOuterJoin (left As DbExpression, right As DbExpression, joinCondition As Func(Of DbExpression, DbExpression, DbExpression)) As DbJoinExpression" />
        <MemberSignature Language="F#" Value="static member FullOuterJoin : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin (left, right, joinCondition)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
          <Parameter Name="joinCondition" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="left">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the left set argument.
            </param>
          <param name="right">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the right set argument.
            </param>
          <param name="joinCondition"> A method representing the condition on which to join. This method must produce an expression with a Boolean result type that provides the logic of the join condition.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expressions, on the specified join condition, using FullOuterJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="FullOuterJoin">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression FullOuterJoin (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding left, System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding right, System.Data.Entity.Core.Common.CommandTrees.DbExpression joinCondition);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression FullOuterJoin(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding left, class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding right, class System.Data.Entity.Core.Common.CommandTrees.DbExpression joinCondition) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FullOuterJoin (left As DbExpressionBinding, right As DbExpressionBinding, joinCondition As DbExpression) As DbJoinExpression" />
        <MemberSignature Language="F#" Value="static member FullOuterJoin : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin (left, right, joinCondition)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
          <Parameter Name="joinCondition" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the left set argument.
            </param>
          <param name="right">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the right set argument.
            </param>
          <param name="joinCondition">An expression that specifies the condition on which to join.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expression bindings, on the specified join condition, using FullOuterJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="GetEntityRef">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression GetEntityRef (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression GetEntityRef(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityRef (argument As DbExpression) As DbEntityRefExpression" />
        <MemberSignature Language="F#" Value="static member GetEntityRef : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef argument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">The expression that provides the entity. This expression must have an entity result type.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" /> that retrieves the ref of the specifed entity in structural form.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="GetRefKey">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression GetRefKey (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression GetRefKey(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRefKey (argument As DbExpression) As DbRefKeyExpression" />
        <MemberSignature Language="F#" Value="static member GetRefKey : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey argument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">The expression that provides the reference. This expression must have a reference Type with an Entity element type.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" /> that retrieves the key values of the specifed reference in structural form.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="GreaterThan">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression GreaterThan (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression GreaterThan(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GreaterThan (left As DbExpression, right As DbExpression) As DbComparisonExpression" />
        <MemberSignature Language="F#" Value="static member GreaterThan : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that specifies the left argument.</param>
          <param name="right">An expression that specifies the right argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is greater than the right argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="GreaterThanOrEqual">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression GreaterThanOrEqual (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression GreaterThanOrEqual(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GreaterThanOrEqual (left As DbExpression, right As DbExpression) As DbComparisonExpression" />
        <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that specifies the left argument.</param>
          <param name="right">An expression that specifies the right argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is greater than or equal to the right argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="GroupBind">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding GroupBind (this System.Data.Entity.Core.Common.CommandTrees.DbExpression input);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding GroupBind(class System.Data.Entity.Core.Common.CommandTrees.DbExpression input) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBind (input As DbExpression) As DbGroupExpressionBinding" />
        <MemberSignature Language="F#" Value="static member GroupBind : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind input" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="input">The expression to bind.</param>
          <summary>Creates a new group expression binding that uses generated variable and group variable names to bind the given expression.</summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="GroupBindAs">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding GroupBindAs (this System.Data.Entity.Core.Common.CommandTrees.DbExpression input, string varName, string groupVarName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding GroupBindAs(class System.Data.Entity.Core.Common.CommandTrees.DbExpression input, string varName, string groupVarName) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBindAs (input As DbExpression, varName As String, groupVarName As String) As DbGroupExpressionBinding" />
        <MemberSignature Language="F#" Value="static member GroupBindAs : System.Data.Entity.Core.Common.CommandTrees.DbExpression * string * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs (input, varName, groupVarName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="varName" Type="System.String" />
          <Parameter Name="groupVarName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="input">The expression to bind.</param>
          <param name="varName">The variable name that should be used for the binding.</param>
          <param name="groupVarName">The variable name that should be used to refer to the group when the new group expression binding is used in a group-by expression.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> that uses the specified variable name and group variable names to bind the given expression.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />
      </Targets>
      <Member MemberName="GroupBy">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression GroupBy (this System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding input, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; keys, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt;&gt; aggregates);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression GroupBy(class System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding input, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; keys, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt;&gt; aggregates) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy (input As DbGroupExpressionBinding, keys As IEnumerable(Of KeyValuePair(Of String, DbExpression)), aggregates As IEnumerable(Of KeyValuePair(Of String, DbAggregate))) As DbGroupByExpression" />
        <MemberSignature Language="F#" Value="static member GroupBy : System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt;&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy (input, keys, aggregates)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" RefType="this" />
          <Parameter Name="keys" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt;" />
          <Parameter Name="aggregates" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt;&gt;" />
        </Parameters>
        <Docs>
          <param name="input">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> that specifies the input set.
            </param>
          <param name="keys">A list of string-expression pairs that define the grouping columns.</param>
          <param name="aggregates">A list of expressions that specify aggregates to apply.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> that groups the elements of the input set according to the specified group keys and applies the given aggregates.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="In">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbInExpression In (this System.Data.Entity.Core.Common.CommandTrees.DbExpression expression, System.Collections.Generic.IList&lt;System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression&gt; list);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbInExpression In(class System.Data.Entity.Core.Common.CommandTrees.DbExpression expression, class System.Collections.Generic.IList`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression&gt; list) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function In (expression As DbExpression, list As IList(Of DbConstantExpression)) As DbInExpression" />
        <MemberSignature Language="F#" Value="static member In : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Collections.Generic.IList&lt;System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbInExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In (expression, list)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbInExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expression" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="list" Type="System.Collections.Generic.IList&lt;System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="expression"> A DbExpression to be matched. </param>
          <param name="list"> A list of DbConstantExpression to test for a match. </param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" /> that matches the result of the specified
            expression with the results of the constant expressions in the specified list.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="InnerJoin">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression InnerJoin (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; joinCondition);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression InnerJoin(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right, class System.Func`3&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; joinCondition) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InnerJoin (left As DbExpression, right As DbExpression, joinCondition As Func(Of DbExpression, DbExpression, DbExpression)) As DbJoinExpression" />
        <MemberSignature Language="F#" Value="static member InnerJoin : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin (left, right, joinCondition)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
          <Parameter Name="joinCondition" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="left">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the left set argument.
            </param>
          <param name="right">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the right set argument.
            </param>
          <param name="joinCondition">A method representing the condition on which to join. This method must produce an expression with a Boolean result type that provides the logic of the join condition.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expressions, on the specified join condition, using InnerJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="InnerJoin">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression InnerJoin (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding left, System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding right, System.Data.Entity.Core.Common.CommandTrees.DbExpression joinCondition);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression InnerJoin(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding left, class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding right, class System.Data.Entity.Core.Common.CommandTrees.DbExpression joinCondition) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InnerJoin (left As DbExpressionBinding, right As DbExpressionBinding, joinCondition As DbExpression) As DbJoinExpression" />
        <MemberSignature Language="F#" Value="static member InnerJoin : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin (left, right, joinCondition)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
          <Parameter Name="joinCondition" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the left set argument.
            </param>
          <param name="right">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the right set argument.
            </param>
          <param name="joinCondition">An expression that specifies the condition on which to join.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expression bindings, on the specified join condition, using InnerJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Intersect">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression Intersect (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression Intersect(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect (left As DbExpression, right As DbExpression) As DbIntersectExpression" />
        <MemberSignature Language="F#" Value="static member Intersect : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that defines the left set argument.</param>
          <param name="right">An expression that defines the right set argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" /> that computes the intersection of the left and right set arguments.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />
      </Targets>
      <Member MemberName="Invoke">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression Invoke (this System.Data.Entity.Core.Common.CommandTrees.DbLambda lambda, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression Invoke(class System.Data.Entity.Core.Common.CommandTrees.DbLambda lambda, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; arguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Invoke (lambda As DbLambda, arguments As IEnumerable(Of DbExpression)) As DbLambdaExpression" />
        <MemberSignature Language="F#" Value="static member Invoke : System.Data.Entity.Core.Common.CommandTrees.DbLambda * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke (lambda, arguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="lambda" Type="System.Data.Entity.Core.Common.CommandTrees.DbLambda" RefType="this" />
          <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="lambda">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> instance representing the Lambda function to apply.
            </param>
          <param name="arguments">A list of expressions that provide the arguments.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> representing the application of the specified Lambda function to the given arguments.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />
      </Targets>
      <Member MemberName="Invoke">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression Invoke (this System.Data.Entity.Core.Common.CommandTrees.DbLambda lambda, params System.Data.Entity.Core.Common.CommandTrees.DbExpression[] arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression Invoke(class System.Data.Entity.Core.Common.CommandTrees.DbLambda lambda, class System.Data.Entity.Core.Common.CommandTrees.DbExpression[] arguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Invoke (lambda As DbLambda, ParamArray arguments As DbExpression()) As DbLambdaExpression" />
        <MemberSignature Language="F#" Value="static member Invoke : System.Data.Entity.Core.Common.CommandTrees.DbLambda * System.Data.Entity.Core.Common.CommandTrees.DbExpression[] -&gt; System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke (lambda, arguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="lambda" Type="System.Data.Entity.Core.Common.CommandTrees.DbLambda" RefType="this" />
          <Parameter Name="arguments" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="lambda">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> instance representing the Lambda function to apply.
            </param>
          <param name="arguments">Expressions that provide the arguments.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> representing the application of the specified Lambda function to the given arguments.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />
      </Targets>
      <Member MemberName="Invoke">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Invoke (this System.Data.Entity.Core.Metadata.Edm.EdmFunction function, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Invoke(class System.Data.Entity.Core.Metadata.Edm.EdmFunction function, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; arguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Invoke (function As EdmFunction, arguments As IEnumerable(Of DbExpression)) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Invoke : System.Data.Entity.Core.Metadata.Edm.EdmFunction * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke (function, arguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="function" Type="System.Data.Entity.Core.Metadata.Edm.EdmFunction" RefType="this" />
          <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="function">Metadata for the function to invoke.</param>
          <param name="arguments">A list of expressions that provide the arguments to the function.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> representing the invocation of the specified function with the given arguments.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />
      </Targets>
      <Member MemberName="Invoke">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Invoke (this System.Data.Entity.Core.Metadata.Edm.EdmFunction function, params System.Data.Entity.Core.Common.CommandTrees.DbExpression[] arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Invoke(class System.Data.Entity.Core.Metadata.Edm.EdmFunction function, class System.Data.Entity.Core.Common.CommandTrees.DbExpression[] arguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Invoke (function As EdmFunction, ParamArray arguments As DbExpression()) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Invoke : System.Data.Entity.Core.Metadata.Edm.EdmFunction * System.Data.Entity.Core.Common.CommandTrees.DbExpression[] -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke (function, arguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="function" Type="System.Data.Entity.Core.Metadata.Edm.EdmFunction" RefType="this" />
          <Parameter Name="arguments" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="function">Metadata for the function to invoke.</param>
          <param name="arguments">Expressions that provide the arguments to the function.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> representing the invocation of the specified function with the given arguments.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsEmpty">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression IsEmpty (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression IsEmpty(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsEmpty (argument As DbExpression) As DbIsEmptyExpression" />
        <MemberSignature Language="F#" Value="static member IsEmpty : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty argument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">An expression that specifies the input set.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> that determines whether the specified set argument is an empty set.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsNull">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression IsNull (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression IsNull(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsNull (argument As DbExpression) As DbIsNullExpression" />
        <MemberSignature Language="F#" Value="static member IsNull : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull argument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">An expression that specifies the argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" /> that determines whether the specified argument is null.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsOf">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression IsOf (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Metadata.Edm.TypeUsage type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression IsOf(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Metadata.Edm.TypeUsage type) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsOf (argument As DbExpression, type As TypeUsage) As DbIsOfExpression" />
        <MemberSignature Language="F#" Value="static member IsOf : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf (argument, type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
        </Parameters>
        <Docs>
          <param name="argument">An expression that specifies the instance.</param>
          <param name="type">Type metadata that specifies the type that the instance's result type should be compared to.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> that determines whether the given argument is of the specified type or a subtype.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsOfOnly">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression IsOfOnly (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Metadata.Edm.TypeUsage type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression IsOfOnly(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Metadata.Edm.TypeUsage type) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsOfOnly (argument As DbExpression, type As TypeUsage) As DbIsOfExpression" />
        <MemberSignature Language="F#" Value="static member IsOfOnly : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly (argument, type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
        </Parameters>
        <Docs>
          <param name="argument">An expression that specifies the instance.</param>
          <param name="type">Type metadata that specifies the type that the instance's result type should be compared to.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> expression that determines whether the given argument is of the specified type, and only that type (not a subtype).
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Join">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression Join (this System.Data.Entity.Core.Common.CommandTrees.DbExpression outer, System.Data.Entity.Core.Common.CommandTrees.DbExpression inner, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; outerKey, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; innerKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression Join(class System.Data.Entity.Core.Common.CommandTrees.DbExpression outer, class System.Data.Entity.Core.Common.CommandTrees.DbExpression inner, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; outerKey, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; innerKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join (outer As DbExpression, inner As DbExpression, outerKey As Func(Of DbExpression, DbExpression), innerKey As Func(Of DbExpression, DbExpression)) As DbJoinExpression" />
        <MemberSignature Language="F#" Value="static member Join : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join (outer, inner, outerKey, innerKey)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="outer" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="inner" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
          <Parameter Name="outerKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="innerKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="outer">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the outer set argument.
            </param>
          <param name="inner">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the inner set argument.
            </param>
          <param name="outerKey">A method that specifies how the outer key value should be derived from an element of the outer set.</param>
          <param name="innerKey">A method that specifies how the inner key value should be derived from an element of the inner set.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the outer and inner expressions, on an equality condition between the specified outer and inner keys, using InnerJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Join&lt;TSelector&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression Join&lt;TSelector&gt; (this System.Data.Entity.Core.Common.CommandTrees.DbExpression outer, System.Data.Entity.Core.Common.CommandTrees.DbExpression inner, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; outerKey, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; innerKey, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,TSelector&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression Join&lt;TSelector&gt;(class System.Data.Entity.Core.Common.CommandTrees.DbExpression outer, class System.Data.Entity.Core.Common.CommandTrees.DbExpression inner, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; outerKey, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; innerKey, class System.Func`3&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression, !!TSelector&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TSelector) (outer As DbExpression, inner As DbExpression, outerKey As Func(Of DbExpression, DbExpression), innerKey As Func(Of DbExpression, DbExpression), selector As Func(Of DbExpression, DbExpression, TSelector)) As DbProjectExpression" />
        <MemberSignature Language="F#" Value="static member Join : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression, 'Selector&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join (outer, inner, outerKey, innerKey, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSelector" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="inner" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
          <Parameter Name="outerKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="innerKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="selector" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,TSelector&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSelector">The type of the  selector .</typeparam>
          <param name="outer">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the outer set argument.
            </param>
          <param name="inner">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the inner set argument.
            </param>
          <param name="outerKey">A method that specifies how the outer key value should be derived from an element of the outer set.</param>
          <param name="innerKey">A method that specifies how the inner key value should be derived from an element of the inner set.</param>
          <param name="selector">
            A method that specifies how an element of the result set should be derived from elements of the inner and outer sets. This method must produce an instance of a type that is compatible with Join and can be resolved into a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            . Compatibility requirements for  TSelector  are described in remarks.
            </param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that projects the specified selector over the sets specified by the outer and inner expressions, joined on an equality condition between the specified outer and inner keys, using InnerJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="LeftOuterJoin">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression LeftOuterJoin (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; joinCondition);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression LeftOuterJoin(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right, class System.Func`3&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; joinCondition) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LeftOuterJoin (left As DbExpression, right As DbExpression, joinCondition As Func(Of DbExpression, DbExpression, DbExpression)) As DbJoinExpression" />
        <MemberSignature Language="F#" Value="static member LeftOuterJoin : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin (left, right, joinCondition)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
          <Parameter Name="joinCondition" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="left">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the left set argument.
            </param>
          <param name="right">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the right set argument.
            </param>
          <param name="joinCondition">A method representing the condition on which to join. This method must produce an expression with a Boolean result type that provides the logic of the join condition.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expressions, on the specified join condition, using LeftOuterJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="LeftOuterJoin">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression LeftOuterJoin (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding left, System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding right, System.Data.Entity.Core.Common.CommandTrees.DbExpression joinCondition);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression LeftOuterJoin(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding left, class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding right, class System.Data.Entity.Core.Common.CommandTrees.DbExpression joinCondition) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LeftOuterJoin (left As DbExpressionBinding, right As DbExpressionBinding, joinCondition As DbExpression) As DbJoinExpression" />
        <MemberSignature Language="F#" Value="static member LeftOuterJoin : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin (left, right, joinCondition)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
          <Parameter Name="joinCondition" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the left set argument.
            </param>
          <param name="right">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the right set argument.
            </param>
          <param name="joinCondition">An expression that specifies the condition on which to join.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expression bindings, on the specified join condition, using LeftOuterJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="LessThan">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression LessThan (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression LessThan(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LessThan (left As DbExpression, right As DbExpression) As DbComparisonExpression" />
        <MemberSignature Language="F#" Value="static member LessThan : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that specifies the left argument.</param>
          <param name="right">An expression that specifies the right argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is less than the right argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="LessThanOrEqual">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression LessThanOrEqual (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression LessThanOrEqual(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LessThanOrEqual (left As DbExpression, right As DbExpression) As DbComparisonExpression" />
        <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that specifies the left argument.</param>
          <param name="right">An expression that specifies the right argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is less than or equal to the right argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Like">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression Like (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Common.CommandTrees.DbExpression pattern);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression Like(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression pattern) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Like (argument As DbExpression, pattern As DbExpression) As DbLikeExpression" />
        <MemberSignature Language="F#" Value="static member Like : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like (argument, pattern)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="pattern" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="argument">An expression that specifies the input string.</param>
          <param name="pattern">An expression that specifies the pattern string.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> that compares the specified input string to the given pattern.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Like">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression Like (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Common.CommandTrees.DbExpression pattern, System.Data.Entity.Core.Common.CommandTrees.DbExpression escape);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression Like(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression pattern, class System.Data.Entity.Core.Common.CommandTrees.DbExpression escape) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Like (argument As DbExpression, pattern As DbExpression, escape As DbExpression) As DbLikeExpression" />
        <MemberSignature Language="F#" Value="static member Like : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like (argument, pattern, escape)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="pattern" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
          <Parameter Name="escape" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="argument">An expression that specifies the input string.</param>
          <param name="pattern">An expression that specifies the pattern string.</param>
          <param name="escape">An optional expression that specifies the escape string.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> that compares the specified input string to the given pattern using the optional escape.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Limit">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression Limit (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Common.CommandTrees.DbExpression count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression Limit(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression count) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Limit (argument As DbExpression, count As DbExpression) As DbLimitExpression" />
        <MemberSignature Language="F#" Value="static member Limit : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit (argument, count)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="count" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="argument">An expression that specifies the input collection.</param>
          <param name="count">An expression that specifies the limit value.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> that restricts the number of elements in the Argument collection to the specified count Limit value. Tied results are not included in the output.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Minus">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Minus (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Minus(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Minus (left As DbExpression, right As DbExpression) As DbArithmeticExpression" />
        <MemberSignature Language="F#" Value="static member Minus : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that specifies the left argument.</param>
          <param name="right">An expression that specifies the right argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that subtracts the right argument from the left argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Modulo">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Modulo (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Modulo(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Modulo (left As DbExpression, right As DbExpression) As DbArithmeticExpression" />
        <MemberSignature Language="F#" Value="static member Modulo : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that specifies the left argument.</param>
          <param name="right">An expression that specifies the right argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that computes the remainder of the left argument divided by the right argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Multiply">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Multiply (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Multiply(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Multiply (left As DbExpression, right As DbExpression) As DbArithmeticExpression" />
        <MemberSignature Language="F#" Value="static member Multiply : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that specifies the left argument.</param>
          <param name="right">An expression that specifies the right argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that multiplies the left argument by the right argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Navigate">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression Navigate (this System.Data.Entity.Core.Common.CommandTrees.DbExpression navigateFrom, System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember fromEnd, System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember toEnd);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression Navigate(class System.Data.Entity.Core.Common.CommandTrees.DbExpression navigateFrom, class System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember fromEnd, class System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember toEnd) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Navigate (navigateFrom As DbExpression, fromEnd As RelationshipEndMember, toEnd As RelationshipEndMember) As DbRelationshipNavigationExpression" />
        <MemberSignature Language="F#" Value="static member Navigate : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember * System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate (navigateFrom, fromEnd, toEnd)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="navigateFrom" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="fromEnd" Type="System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" />
          <Parameter Name="toEnd" Type="System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" />
        </Parameters>
        <Docs>
          <param name="navigateFrom">An expression that specifies the instance from which navigation should occur.</param>
          <param name="fromEnd">Metadata for the property that represents the end of the relationship from which navigation should occur.</param>
          <param name="toEnd">Metadata for the property that represents the end of the relationship to which navigation should occur.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> representing the navigation of a composition or association relationship.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType" />
      </Targets>
      <Member MemberName="Navigate">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression Navigate (this System.Data.Entity.Core.Metadata.Edm.RelationshipType type, string fromEndName, string toEndName, System.Data.Entity.Core.Common.CommandTrees.DbExpression navigateFrom);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression Navigate(class System.Data.Entity.Core.Metadata.Edm.RelationshipType type, string fromEndName, string toEndName, class System.Data.Entity.Core.Common.CommandTrees.DbExpression navigateFrom) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Navigate (type As RelationshipType, fromEndName As String, toEndName As String, navigateFrom As DbExpression) As DbRelationshipNavigationExpression" />
        <MemberSignature Language="F#" Value="static member Navigate : System.Data.Entity.Core.Metadata.Edm.RelationshipType * string * string * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate (type, fromEndName, toEndName, navigateFrom)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.RelationshipType" RefType="this" />
          <Parameter Name="fromEndName" Type="System.String" />
          <Parameter Name="toEndName" Type="System.String" />
          <Parameter Name="navigateFrom" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="type">Metadata for the relation type that represents the relationship.</param>
          <param name="fromEndName">The name of the property of the relation type that represents the end of the relationship from which navigation should occur.</param>
          <param name="toEndName">The name of the property of the relation type that represents the end of the relationship to which navigation should occur.</param>
          <param name="navigateFrom">An expression the specifies the instance from which naviagtion should occur.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> representing the navigation of a composition or association relationship.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Negate">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Negate (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Negate(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Negate (argument As DbExpression) As DbArithmeticExpression" />
        <MemberSignature Language="F#" Value="static member Negate : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate argument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">An expression that specifies the argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that negates the value of the argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Targets>
      <Member MemberName="New">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression New (this System.Data.Entity.Core.Metadata.Edm.TypeUsage instanceType, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression New(class System.Data.Entity.Core.Metadata.Edm.TypeUsage instanceType, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; arguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function New (instanceType As TypeUsage, arguments As IEnumerable(Of DbExpression)) As DbNewInstanceExpression" />
        <MemberSignature Language="F#" Value="static member New : System.Data.Entity.Core.Metadata.Edm.TypeUsage * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New (instanceType, arguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="instanceType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" RefType="this" />
          <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="instanceType">The type of the new instance.</param>
          <param name="arguments">Expressions that specify values of the new instances, interpreted according to the instance's type.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />. If the type argument is a collection type, the arguments specify the elements of the collection. Otherwise the arguments are used as property or column values in the new instance.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Targets>
      <Member MemberName="New">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression New (this System.Data.Entity.Core.Metadata.Edm.TypeUsage instanceType, params System.Data.Entity.Core.Common.CommandTrees.DbExpression[] arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression New(class System.Data.Entity.Core.Metadata.Edm.TypeUsage instanceType, class System.Data.Entity.Core.Common.CommandTrees.DbExpression[] arguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function New (instanceType As TypeUsage, ParamArray arguments As DbExpression()) As DbNewInstanceExpression" />
        <MemberSignature Language="F#" Value="static member New : System.Data.Entity.Core.Metadata.Edm.TypeUsage * System.Data.Entity.Core.Common.CommandTrees.DbExpression[] -&gt; System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New (instanceType, arguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="instanceType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" RefType="this" />
          <Parameter Name="arguments" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="instanceType">The type of the new instance.</param>
          <param name="arguments">Expressions that specify values of the new instances, interpreted according to the instance's type.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />. If the type argument is a collection type, the arguments specify the elements of the collection. Otherwise the arguments are used as property or column values in the new instance.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Targets>
      <Member MemberName="NewEmptyCollection">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression NewEmptyCollection (this System.Data.Entity.Core.Metadata.Edm.TypeUsage collectionType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression NewEmptyCollection(class System.Data.Entity.Core.Metadata.Edm.TypeUsage collectionType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function NewEmptyCollection (collectionType As TypeUsage) As DbNewInstanceExpression" />
        <MemberSignature Language="F#" Value="static member NewEmptyCollection : System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection collectionType" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collectionType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collectionType">The type metadata for the collection to create</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that constructs an empty collection of the specified collection type.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Not">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbNotExpression Not (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbNotExpression Not(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Not (argument As DbExpression) As DbNotExpression" />
        <MemberSignature Language="F#" Value="static member Not : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not argument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbNotExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">A Boolean expression that specifies the argument.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> that performs the logical negation of the given argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="NotEqual">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression NotEqual (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression NotEqual(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function NotEqual (left As DbExpression, right As DbExpression) As DbComparisonExpression" />
        <MemberSignature Language="F#" Value="static member NotEqual : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that specifies the left argument.</param>
          <param name="right">An expression that specifies the right argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that compares the left and right arguments for inequality.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Targets>
      <Member MemberName="Null">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbNullExpression Null (this System.Data.Entity.Core.Metadata.Edm.TypeUsage nullType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbNullExpression Null(class System.Data.Entity.Core.Metadata.Edm.TypeUsage nullType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Null (nullType As TypeUsage) As DbNullExpression" />
        <MemberSignature Language="F#" Value="static member Null : System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null nullType" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbNullExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="nullType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="nullType">The type of the null value.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />, which represents a typed null value.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="OfType">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression OfType (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Metadata.Edm.TypeUsage type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression OfType(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Metadata.Edm.TypeUsage type) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OfType (argument As DbExpression, type As TypeUsage) As DbOfTypeExpression" />
        <MemberSignature Language="F#" Value="static member OfType : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType (argument, type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
        </Parameters>
        <Docs>
          <param name="argument">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
          <param name="type">Type metadata for the type that elements of the input set must have to be included in the resulting set.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> that produces a set consisting of the elements of the given input set that are of the specified type.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="OfTypeOnly">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression OfTypeOnly (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Metadata.Edm.TypeUsage type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression OfTypeOnly(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Metadata.Edm.TypeUsage type) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OfTypeOnly (argument As DbExpression, type As TypeUsage) As DbOfTypeExpression" />
        <MemberSignature Language="F#" Value="static member OfTypeOnly : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly (argument, type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
        </Parameters>
        <Docs>
          <param name="argument">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
          <param name="type">Type metadata for the type that elements of the input set must match exactly to be included in the resulting set.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> that produces a set consisting of the elements of the given input set that are of exactly the specified type.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Or">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbOrExpression Or (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbOrExpression Or(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Or (left As DbExpression, right As DbExpression) As DbOrExpression" />
        <MemberSignature Language="F#" Value="static member Or : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbOrExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">A Boolean expression that specifies the left argument.</param>
          <param name="right">A Boolean expression that specifies the right argument.</param>
          <summary>
            Creates an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" /> that performs the logical Or of the left and right arguments.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="OrderBy">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderBy (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderBy(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy (source As DbExpression, sortKey As Func(Of DbExpression, DbExpression)) As DbSortExpression" />
        <MemberSignature Language="F#" Value="static member OrderBy : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy (source, sortKey)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">An expression that specifies the input set.</param>
          <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with ascending sort order and default collation.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="OrderBy">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderBy (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderBy(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy (source As DbExpression, sortKey As Func(Of DbExpression, DbExpression), collation As String) As DbSortExpression" />
        <MemberSignature Language="F#" Value="static member OrderBy : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy (source, sortKey, collation)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="collation" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="source">An expression that specifies the input set.</param>
          <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
          <param name="collation">The collation to sort under.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with ascending sort order and the specified collation.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="OrderByDescending">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderByDescending (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderByDescending(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending (source As DbExpression, sortKey As Func(Of DbExpression, DbExpression)) As DbSortExpression" />
        <MemberSignature Language="F#" Value="static member OrderByDescending : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending (source, sortKey)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">An expression that specifies the input set.</param>
          <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with descending sort order and default collation.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="OrderByDescending">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderByDescending (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderByDescending(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending (source As DbExpression, sortKey As Func(Of DbExpression, DbExpression), collation As String) As DbSortExpression" />
        <MemberSignature Language="F#" Value="static member OrderByDescending : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending (source, sortKey, collation)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="collation" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="source">An expression that specifies the input set.</param>
          <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
          <param name="collation">The collation to sort under.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with descending sort order and the specified collation.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="OuterApply">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression OuterApply (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair&lt;string,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; apply);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression OuterApply(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; apply) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OuterApply (source As DbExpression, apply As Func(Of DbExpression, KeyValuePair(Of String, DbExpression))) As DbApplyExpression" />
        <MemberSignature Language="F#" Value="static member OuterApply : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Collections.Generic.KeyValuePair&lt;string, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply (source, apply)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="apply" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt;" />
        </Parameters>
        <Docs>
          <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
          <param name="apply">A method that specifies the logic to evaluate once for each member of the input set.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set have an apply column value of null.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="OuterApply">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression OuterApply (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding apply);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression OuterApply(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding apply) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OuterApply (input As DbExpressionBinding, apply As DbExpressionBinding) As DbApplyExpression" />
        <MemberSignature Language="F#" Value="static member OuterApply : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding -&gt; System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply (input, apply)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="apply" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
        </Parameters>
        <Docs>
          <param name="input">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </param>
          <param name="apply">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies logic to evaluate once for each member of the input set.
            </param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set have an apply column value of null.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Targets>
      <Member MemberName="Parameter">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression Parameter (this System.Data.Entity.Core.Metadata.Edm.TypeUsage type, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression Parameter(class System.Data.Entity.Core.Metadata.Edm.TypeUsage type, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Parameter (type As TypeUsage, name As String) As DbParameterReferenceExpression" />
        <MemberSignature Language="F#" Value="static member Parameter : System.Data.Entity.Core.Metadata.Edm.TypeUsage * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter (type, name)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="type">The type of the referenced parameter.</param>
          <param name="name">The name of the referenced parameter.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> that references a parameter with the specified name and type.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Plus">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Plus (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Plus(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Plus (left As DbExpression, right As DbExpression) As DbArithmeticExpression" />
        <MemberSignature Language="F#" Value="static member Plus : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that specifies the left argument.</param>
          <param name="right">An expression that specifies the right argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that adds the left argument to the right argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="Project">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression Project (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Data.Entity.Core.Common.CommandTrees.DbExpression projection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression Project(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Data.Entity.Core.Common.CommandTrees.DbExpression projection) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Project (input As DbExpressionBinding, projection As DbExpression) As DbProjectExpression" />
        <MemberSignature Language="F#" Value="static member Project : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project (input, projection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="projection" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="input">An expression binding that specifies the input set.</param>
          <param name="projection">An expression to project over the set.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that projects the specified expression over the given input set.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Property">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, System.Data.Entity.Core.Metadata.Edm.EdmProperty propertyMetadata);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property(class System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, class System.Data.Entity.Core.Metadata.Edm.EdmProperty propertyMetadata) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EdmProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Property (instance As DbExpression, propertyMetadata As EdmProperty) As DbPropertyExpression" />
        <MemberSignature Language="F#" Value="static member Property : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.EdmProperty -&gt; System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property (instance, propertyMetadata)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="instance" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="propertyMetadata" Type="System.Data.Entity.Core.Metadata.Edm.EdmProperty" />
        </Parameters>
        <Docs>
          <param name="instance">The instance from which to retrieve the property. May be null if the property is static.</param>
          <param name="propertyMetadata">Metadata for the property to retrieve.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the specified property.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EdmProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Property">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, System.Data.Entity.Core.Metadata.Edm.NavigationProperty navigationProperty);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property(class System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, class System.Data.Entity.Core.Metadata.Edm.NavigationProperty navigationProperty) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.NavigationProperty)" />
        <MemberSignature Language="F#" Value="static member Property : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.NavigationProperty -&gt; System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property (instance, navigationProperty)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="instance" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="navigationProperty" Type="System.Data.Entity.Core.Metadata.Edm.NavigationProperty" />
        </Parameters>
        <Docs>
          <param name="instance">The instance from which to retrieve the navigation property.</param>
          <param name="navigationProperty">Metadata for the navigation property to retrieve.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the specified navigation property.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.NavigationProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Property">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember relationshipEnd);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property(class System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, class System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember relationshipEnd) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Property (instance As DbExpression, relationshipEnd As RelationshipEndMember) As DbPropertyExpression" />
        <MemberSignature Language="F#" Value="static member Property : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember -&gt; System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property (instance, relationshipEnd)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="instance" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="relationshipEnd" Type="System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" />
        </Parameters>
        <Docs>
          <param name="instance">The instance from which to retrieve the relationship end member.</param>
          <param name="relationshipEnd">Metadata for the relationship end member to retrieve.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the specified relationship end member.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Property">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, string propertyName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property(class System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, string propertyName) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Property (instance As DbExpression, propertyName As String) As DbPropertyExpression" />
        <MemberSignature Language="F#" Value="static member Property : System.Data.Entity.Core.Common.CommandTrees.DbExpression * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property (instance, propertyName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="instance" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="propertyName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="instance">The instance from which to retrieve the property.</param>
          <param name="propertyName">The name of the property to retrieve.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the instance property with the specified name from the given instance.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />
      </Targets>
      <Member MemberName="RefFromKey">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRefExpression RefFromKey (this System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, System.Data.Entity.Core.Common.CommandTrees.DbExpression keyRow);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRefExpression RefFromKey(class System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, class System.Data.Entity.Core.Common.CommandTrees.DbExpression keyRow) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="F#" Value="static member RefFromKey : System.Data.Entity.Core.Metadata.Edm.EntitySet * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey (entitySet, keyRow)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entitySet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySet" RefType="this" />
          <Parameter Name="keyRow" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="entitySet">The Entity set in which the referenced element resides.</param>
          <param name="keyRow">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that constructs a record with columns that match (in number, type, and order) the Key properties of the referenced Entity type.
            </param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific Entity based on key values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />
      </Targets>
      <Member MemberName="RefFromKey">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRefExpression RefFromKey (this System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, System.Data.Entity.Core.Common.CommandTrees.DbExpression keyRow, System.Data.Entity.Core.Metadata.Edm.EntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRefExpression RefFromKey(class System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, class System.Data.Entity.Core.Common.CommandTrees.DbExpression keyRow, class System.Data.Entity.Core.Metadata.Edm.EntityType entityType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EntityType)" />
        <MemberSignature Language="F#" Value="static member RefFromKey : System.Data.Entity.Core.Metadata.Edm.EntitySet * System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.EntityType -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey (entitySet, keyRow, entityType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entitySet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySet" RefType="this" />
          <Parameter Name="keyRow" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
          <Parameter Name="entityType" Type="System.Data.Entity.Core.Metadata.Edm.EntityType" />
        </Parameters>
        <Docs>
          <param name="entitySet">The Entity set in which the referenced element resides.</param>
          <param name="keyRow">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that constructs a record with columns that match (in number, type, and order) the Key properties of the referenced Entity type.
            </param>
          <param name="entityType">The type of the Entity that the reference should refer to.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific Entity based on key values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />
      </Targets>
      <Member MemberName="Scan">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbScanExpression Scan (this System.Data.Entity.Core.Metadata.Edm.EntitySetBase targetSet);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbScanExpression Scan(class System.Data.Entity.Core.Metadata.Edm.EntitySetBase targetSet) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Scan (targetSet As EntitySetBase) As DbScanExpression" />
        <MemberSignature Language="F#" Value="static member Scan : System.Data.Entity.Core.Metadata.Edm.EntitySetBase -&gt; System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan targetSet" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbScanExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="targetSet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySetBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="targetSet">Metadata for the entity or relationship set to reference.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" /> that references the specified entity or relationship set.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Select&lt;TProjection&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression Select&lt;TProjection&gt; (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,TProjection&gt; projection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression Select&lt;TProjection&gt;(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, !!TProjection&gt; projection) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TProjection) (source As DbExpression, projection As Func(Of DbExpression, TProjection)) As DbProjectExpression" />
        <MemberSignature Language="F#" Value="static member Select : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, 'Projection&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select (source, projection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProjection" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="projection" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,TProjection&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TProjection">The method result type of projection.</typeparam>
          <param name="source">An expression that specifies the input set.</param>
          <param name="projection">
            A method that specifies how to derive the projected expression given a member of the input set. This method must produce an instance of a type that is compatible with Select and can be resolved into a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            . Compatibility requirements for  TProjection  are described in remarks.
            </param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that selects the specified expression over the given input set.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SelectMany">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression SelectMany (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; apply);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression SelectMany(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; apply) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany (source As DbExpression, apply As Func(Of DbExpression, DbExpression)) As DbProjectExpression" />
        <MemberSignature Language="F#" Value="static member SelectMany : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany (source, apply)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="apply" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
          <param name="apply">A method that represents the logic to evaluate once for each member of the input set.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included. A
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />
            is then created that selects the apply column from each row, producing the overall collection of apply results.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSelector&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression SelectMany&lt;TSelector&gt; (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; apply, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,TSelector&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression SelectMany&lt;TSelector&gt;(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; apply, class System.Func`3&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression, !!TSelector&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSelector) (source As DbExpression, apply As Func(Of DbExpression, DbExpression), selector As Func(Of DbExpression, DbExpression, TSelector)) As DbProjectExpression" />
        <MemberSignature Language="F#" Value="static member SelectMany : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression, 'Selector&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany (source, apply, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSelector" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="apply" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="selector" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,TSelector&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSelector">The method result type of selector.</typeparam>
          <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
          <param name="apply">A method that represents the logic to evaluate once for each member of the input set. </param>
          <param name="selector">
            A method that specifies how an element of the result set should be derived given an element of the input and apply sets. This method must produce an instance of a type that is compatible with SelectMany and can be resolved into a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            . Compatibility requirements for  TSelector  are described in remarks.
            </param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included. A
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />
            is then created that selects the specified selector over each row, producing the overall collection of results.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="Skip">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression Skip (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt; sortOrder, System.Data.Entity.Core.Common.CommandTrees.DbExpression count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression Skip(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt; sortOrder, class System.Data.Entity.Core.Common.CommandTrees.DbExpression count) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip (input As DbExpressionBinding, sortOrder As IEnumerable(Of DbSortClause), count As DbExpression) As DbSkipExpression" />
        <MemberSignature Language="F#" Value="static member Skip : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt; * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip (input, sortOrder, count)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="sortOrder" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt;" />
          <Parameter Name="count" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="input">An expression binding that specifies the input set.</param>
          <param name="sortOrder">A list of sort specifications that determine how the elements of the input set should be sorted.</param>
          <param name="count">An expression the specifies how many elements of the ordered set to skip.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> that sorts the given input set by the given sort specifications before skipping the specified number of elements.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />
      </Targets>
      <Member MemberName="Skip">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression Skip (this System.Data.Entity.Core.Common.CommandTrees.DbSortExpression argument, System.Data.Entity.Core.Common.CommandTrees.DbExpression count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression Skip(class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression argument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression count) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip (argument As DbSortExpression, count As DbExpression) As DbSkipExpression" />
        <MemberSignature Language="F#" Value="static member Skip : System.Data.Entity.Core.Common.CommandTrees.DbSortExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip (argument, count)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" RefType="this" />
          <Parameter Name="count" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="argument">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that specifies the sorted input set.
            </param>
          <param name="count">An expression the specifies how many elements of the ordered set to skip.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> that skips the specified number of elements from the given sorted input set.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="Sort">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression Sort (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt; sortOrder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression Sort(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt; sortOrder) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sort (input As DbExpressionBinding, sortOrder As IEnumerable(Of DbSortClause)) As DbSortExpression" />
        <MemberSignature Language="F#" Value="static member Sort : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort (input, sortOrder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="sortOrder" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt;" />
        </Parameters>
        <Docs>
          <param name="input">An expression binding that specifies the input set.</param>
          <param name="sortOrder">A list of sort specifications that determine how the elements of the input set should be sorted.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort specifications.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Take">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression Take (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Common.CommandTrees.DbExpression count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression Take(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression count) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take (argument As DbExpression, count As DbExpression) As DbLimitExpression" />
        <MemberSignature Language="F#" Value="static member Take : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take (argument, count)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="count" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="argument">An expression that specifies the input collection.</param>
          <param name="count">An expression that specifies the limit value.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> that restricts the number of elements in the Argument collection to the specified count Limit value. Tied results are not included in the output.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />
      </Targets>
      <Member MemberName="ThenBy">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenBy (this System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenBy(class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy (source As DbSortExpression, sortKey As Func(Of DbExpression, DbExpression)) As DbSortExpression" />
        <MemberSignature Language="F#" Value="static member ThenBy : System.Data.Entity.Core.Common.CommandTrees.DbSortExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy (source, sortKey)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">A DbSortExpression that specifies the ordered input set.</param>
          <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in ascending sort order and  with default collation.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />
      </Targets>
      <Member MemberName="ThenBy">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenBy (this System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenBy(class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy (source As DbSortExpression, sortKey As Func(Of DbExpression, DbExpression), collation As String) As DbSortExpression" />
        <MemberSignature Language="F#" Value="static member ThenBy : System.Data.Entity.Core.Common.CommandTrees.DbSortExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy (source, sortKey, collation)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="collation" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="source">A DbSortExpression that specifies the ordered input set.</param>
          <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
          <param name="collation">The collation to sort under.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in ascending sort order and  with the specified collation.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />
      </Targets>
      <Member MemberName="ThenByDescending">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenByDescending (this System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenByDescending(class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending (source As DbSortExpression, sortKey As Func(Of DbExpression, DbExpression)) As DbSortExpression" />
        <MemberSignature Language="F#" Value="static member ThenByDescending : System.Data.Entity.Core.Common.CommandTrees.DbSortExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending (source, sortKey)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">A DbSortExpression that specifies the ordered input set.</param>
          <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in descending sort order and  with default collation.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />
      </Targets>
      <Member MemberName="ThenByDescending">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenByDescending (this System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenByDescending(class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending (source As DbSortExpression, sortKey As Func(Of DbExpression, DbExpression), collation As String) As DbSortExpression" />
        <MemberSignature Language="F#" Value="static member ThenByDescending : System.Data.Entity.Core.Common.CommandTrees.DbSortExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending (source, sortKey, collation)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="collation" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="source">A DbSortExpression that specifies the ordered input set.</param>
          <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition.</param>
          <param name="collation">The collation to sort under.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in descending sort order and  with the specified collation.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="ToSortClause">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClause (this System.Data.Entity.Core.Common.CommandTrees.DbExpression key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClause(class System.Data.Entity.Core.Common.CommandTrees.DbExpression key) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToSortClause (key As DbExpression) As DbSortClause" />
        <MemberSignature Language="F#" Value="static member ToSortClause : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortClause" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause key" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortClause</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key">The expression that defines the sort key.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with an ascending sort order and default collation.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="ToSortClause">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClause (this System.Data.Entity.Core.Common.CommandTrees.DbExpression key, string collation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClause(class System.Data.Entity.Core.Common.CommandTrees.DbExpression key, string collation) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToSortClause (key As DbExpression, collation As String) As DbSortClause" />
        <MemberSignature Language="F#" Value="static member ToSortClause : System.Data.Entity.Core.Common.CommandTrees.DbExpression * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortClause" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause (key, collation)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortClause</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="collation" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="key">The expression that defines the sort key.</param>
          <param name="collation">The collation to sort under.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with an ascending sort order and the specified collation.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="ToSortClauseDescending">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClauseDescending (this System.Data.Entity.Core.Common.CommandTrees.DbExpression key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClauseDescending(class System.Data.Entity.Core.Common.CommandTrees.DbExpression key) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToSortClauseDescending (key As DbExpression) As DbSortClause" />
        <MemberSignature Language="F#" Value="static member ToSortClauseDescending : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortClause" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending key" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortClause</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key">The expression that defines the sort key.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with a descending sort order and default collation.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="ToSortClauseDescending">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClauseDescending (this System.Data.Entity.Core.Common.CommandTrees.DbExpression key, string collation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClauseDescending(class System.Data.Entity.Core.Common.CommandTrees.DbExpression key, string collation) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToSortClauseDescending (key As DbExpression, collation As String) As DbSortClause" />
        <MemberSignature Language="F#" Value="static member ToSortClauseDescending : System.Data.Entity.Core.Common.CommandTrees.DbExpression * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortClause" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending (key, collation)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortClause</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="collation" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="key">The expression that defines the sort key.</param>
          <param name="collation">The collation to sort under.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with a descending sort order and the specified collation.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="TreatAs">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression TreatAs (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Metadata.Edm.TypeUsage treatType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression TreatAs(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Metadata.Edm.TypeUsage treatType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TreatAs (argument As DbExpression, treatType As TypeUsage) As DbTreatExpression" />
        <MemberSignature Language="F#" Value="static member TreatAs : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs (argument, treatType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="treatType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
        </Parameters>
        <Docs>
          <param name="argument">An expression that specifies the instance.</param>
          <param name="treatType">Type metadata for the treat-as type.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="UnaryMinus">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression UnaryMinus (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression UnaryMinus(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UnaryMinus (argument As DbExpression) As DbArithmeticExpression" />
        <MemberSignature Language="F#" Value="static member UnaryMinus : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus argument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">An expression that specifies the argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that negates the value of the argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Union">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbExpression Union (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbExpression Union(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union (left As DbExpression, right As DbExpression) As DbExpression" />
        <MemberSignature Language="F#" Value="static member Union : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that defines the left set argument.</param>
          <param name="right">An expression that defines the right set argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that computes the union of the left and right set arguments with duplicates removed.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="UnionAll">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression UnionAll (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression UnionAll(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UnionAll (left As DbExpression, right As DbExpression) As DbUnionAllExpression" />
        <MemberSignature Language="F#" Value="static member UnionAll : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll (left, right)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">An expression that defines the left set argument.</param>
          <param name="right">An expression that defines the right set argument.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> that computes the union of the left and right set arguments and does not remove duplicates.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Targets>
      <Member MemberName="Variable">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression Variable (this System.Data.Entity.Core.Metadata.Edm.TypeUsage type, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression Variable(class System.Data.Entity.Core.Metadata.Edm.TypeUsage type, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Variable (type As TypeUsage, name As String) As DbVariableReferenceExpression" />
        <MemberSignature Language="F#" Value="static member Variable : System.Data.Entity.Core.Metadata.Edm.TypeUsage * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable (type, name)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="type">The type of the referenced variable.</param>
          <param name="name">The name of the referenced variable.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> that references a variable with the specified name and type.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Where">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression Where (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression Where(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where (source As DbExpression, predicate As Func(Of DbExpression, DbExpression)) As DbFilterExpression" />
        <MemberSignature Language="F#" Value="static member Where : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where (source, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">An expression that specifies the input set.</param>
          <param name="predicate">A method representing the predicate to evaluate for each member of the input set.    This method must produce an expression with a Boolean result type that provides the predicate logic.</param>
          <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> that filters the elements in the given input set using the specified predicate.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Abs">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Abs (this System.Data.Entity.Core.Common.CommandTrees.DbExpression value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Abs(class System.Data.Entity.Core.Common.CommandTrees.DbExpression value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Abs (value As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Abs : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs value" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">An expression that specifies the numeric value.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Abs' function with the specified argument, which must each have a numeric result type. The result type of the expression is the same as the result type of value.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddDays">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddDays (this System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue, System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddDays(class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue, class System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDays (dateValue As DbExpression, addValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member AddDays : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays (dateValue, addValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="dateValue">An expression that specifies the value to which addValueshould be added.</param>
          <param name="addValue">An expression that specifies the number of days to add to dateValue.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddDays' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of dateValue.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddHours">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddHours (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue, System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddHours(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue, class System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddHours (timeValue As DbExpression, addValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member AddHours : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours (timeValue, addValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
          <param name="addValue">An expression that specifies the number of hours to add to timeValue.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddHours' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddMicroseconds">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddMicroseconds (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue, System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddMicroseconds(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue, class System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddMicroseconds (timeValue As DbExpression, addValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member AddMicroseconds : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds (timeValue, addValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
          <param name="addValue">An expression that specifies the number of microseconds to add to timeValue.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddMicroseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddMilliseconds">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddMilliseconds (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue, System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddMilliseconds(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue, class System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddMilliseconds (timeValue As DbExpression, addValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member AddMilliseconds : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds (timeValue, addValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
          <param name="addValue">An expression that specifies the number of milliseconds to add to timeValue.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddMilliseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddMinutes">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddMinutes (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue, System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddMinutes(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue, class System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddMinutes (timeValue As DbExpression, addValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member AddMinutes : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes (timeValue, addValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
          <param name="addValue">An expression that specifies the number of minutes to add to timeValue.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddMinutes' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddMonths">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddMonths (this System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue, System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddMonths(class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue, class System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddMonths (dateValue As DbExpression, addValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member AddMonths : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths (dateValue, addValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="dateValue">An expression that specifies the value to which addValueshould be added.</param>
          <param name="addValue">An expression that specifies the number of months to add to dateValue.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddMonths' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of dateValue.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddNanoseconds">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddNanoseconds (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue, System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddNanoseconds(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue, class System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddNanoseconds (timeValue As DbExpression, addValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member AddNanoseconds : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds (timeValue, addValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
          <param name="addValue">An expression that specifies the number of nanoseconds to add to timeValue.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddNanoseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddSeconds">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddSeconds (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue, System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddSeconds(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue, class System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddSeconds (timeValue As DbExpression, addValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member AddSeconds : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds (timeValue, addValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
          <param name="addValue">An expression that specifies the number of seconds to add to timeValue.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddSeconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddYears">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddYears (this System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue, System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AddYears(class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue, class System.Data.Entity.Core.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddYears (dateValue As DbExpression, addValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member AddYears : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears (dateValue, addValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="dateValue">An expression that specifies the value to which addValueshould be added.</param>
          <param name="addValue">An expression that specifies the number of years to add to dateValue.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddYears' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of dateValue.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Average (this System.Data.Entity.Core.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Average(class System.Data.Entity.Core.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (collection As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Average : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average collection" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">An expression that specifies the collection from which the average value should be computed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Avg' function over the specified collection. The result type of the expression is the same as the element type of the collection.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="BitwiseAnd">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression BitwiseAnd (this System.Data.Entity.Core.Common.CommandTrees.DbExpression value1, System.Data.Entity.Core.Common.CommandTrees.DbExpression value2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression BitwiseAnd(class System.Data.Entity.Core.Common.CommandTrees.DbExpression value1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression value2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BitwiseAnd (value1 As DbExpression, value2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member BitwiseAnd : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd (value1, value2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="value2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="value1">An expression that specifies the first operand.</param>
          <param name="value2">An expression that specifies the second operand.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BitwiseAnd' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="BitwiseNot">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression BitwiseNot (this System.Data.Entity.Core.Common.CommandTrees.DbExpression value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression BitwiseNot(class System.Data.Entity.Core.Common.CommandTrees.DbExpression value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BitwiseNot (value As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member BitwiseNot : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot value" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">An expression that specifies the first operand.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BitwiseNot' function with the specified argument, which must have an integer numeric result type. The result type of the expression is the same as the type of the arguments.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="BitwiseOr">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression BitwiseOr (this System.Data.Entity.Core.Common.CommandTrees.DbExpression value1, System.Data.Entity.Core.Common.CommandTrees.DbExpression value2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression BitwiseOr(class System.Data.Entity.Core.Common.CommandTrees.DbExpression value1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression value2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BitwiseOr (value1 As DbExpression, value2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member BitwiseOr : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr (value1, value2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="value2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="value1">An expression that specifies the first operand.</param>
          <param name="value2">An expression that specifies the second operand.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BitwiseOr' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="BitwiseXor">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression BitwiseXor (this System.Data.Entity.Core.Common.CommandTrees.DbExpression value1, System.Data.Entity.Core.Common.CommandTrees.DbExpression value2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression BitwiseXor(class System.Data.Entity.Core.Common.CommandTrees.DbExpression value1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression value2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BitwiseXor (value1 As DbExpression, value2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member BitwiseXor : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor (value1, value2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="value2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="value1">An expression that specifies the first operand.</param>
          <param name="value2">An expression that specifies the second operand.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BitwiseXor' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Ceiling">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Ceiling (this System.Data.Entity.Core.Common.CommandTrees.DbExpression value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Ceiling(class System.Data.Entity.Core.Common.CommandTrees.DbExpression value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Ceiling (value As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Ceiling : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling value" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">An expression that specifies the numeric value.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Ceiling' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of value.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Concat">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Concat (this System.Data.Entity.Core.Common.CommandTrees.DbExpression string1, System.Data.Entity.Core.Common.CommandTrees.DbExpression string2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Concat(class System.Data.Entity.Core.Common.CommandTrees.DbExpression string1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression string2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Concat (string1 As DbExpression, string2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Concat : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat (string1, string2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="string1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="string2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="string1">An expression that specifies the string that should appear first in the concatenated result string.</param>
          <param name="string2">An expression that specifies the string that should appear second in the concatenated result string.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Concat' function with the specified arguments, which must each have a string result type. The result type of the expression is string.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Contains">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbExpression Contains (this System.Data.Entity.Core.Common.CommandTrees.DbExpression searchedString, System.Data.Entity.Core.Common.CommandTrees.DbExpression searchedForString);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbExpression Contains(class System.Data.Entity.Core.Common.CommandTrees.DbExpression searchedString, class System.Data.Entity.Core.Common.CommandTrees.DbExpression searchedForString) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains (searchedString As DbExpression, searchedForString As DbExpression) As DbExpression" />
        <MemberSignature Language="F#" Value="static member Contains : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains (searchedString, searchedForString)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="searchedString" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="searchedForString" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="searchedString">An expression that specifies the string to search for any occurence of searchedForString.</param>
          <param name="searchedForString">An expression that specifies the string to search for in searchedString.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Contains' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Count">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Count (this System.Data.Entity.Core.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Count(class System.Data.Entity.Core.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count (collection As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Count : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count collection" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">An expression that specifies the collection over which the count value should be computed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Count' function over the specified collection. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Day">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Day (this System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Day(class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Day (dateValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Day : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day dateValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="dateValue">An expression that specifies the value from which the day should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Day' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DayOfYear">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DayOfYear (this System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DayOfYear(class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DayOfYear (dateValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member DayOfYear : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear dateValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="dateValue">An expression that specifies the value from which the day within the year should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DayOfYear' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffDays">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffDays (this System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffDays(class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DiffDays (dateValue1 As DbExpression, dateValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member DiffDays : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays (dateValue1, dateValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="dateValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="dateValue1">An expression that specifies the first date value argument.</param>
          <param name="dateValue2">An expression that specifies the second date value argument.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffDays' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffHours">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffHours (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffHours(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DiffHours (timeValue1 As DbExpression, timeValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member DiffHours : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours (timeValue1, timeValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="timeValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue1">An expression that specifies the first time value argument.</param>
          <param name="timeValue2">An expression that specifies the second time value argument.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffHours' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffMicroseconds">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffMicroseconds (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffMicroseconds(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DiffMicroseconds (timeValue1 As DbExpression, timeValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member DiffMicroseconds : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds (timeValue1, timeValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="timeValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue1">An expression that specifies the first time value argument.</param>
          <param name="timeValue2">An expression that specifies the second time value argument.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffMicroseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffMilliseconds">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffMilliseconds (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffMilliseconds(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DiffMilliseconds (timeValue1 As DbExpression, timeValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member DiffMilliseconds : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds (timeValue1, timeValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="timeValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue1">An expression that specifies the first time value argument.</param>
          <param name="timeValue2">An expression that specifies the second time value argument.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffMilliseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffMinutes">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffMinutes (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffMinutes(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DiffMinutes (timeValue1 As DbExpression, timeValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member DiffMinutes : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes (timeValue1, timeValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="timeValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue1">An expression that specifies the first time value argument.</param>
          <param name="timeValue2">An expression that specifies the second time value argument.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffMinutes' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffMonths">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffMonths (this System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffMonths(class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DiffMonths (dateValue1 As DbExpression, dateValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member DiffMonths : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths (dateValue1, dateValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="dateValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="dateValue1">An expression that specifies the first date value argument.</param>
          <param name="dateValue2">An expression that specifies the second date value argument.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffMonths' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffNanoseconds">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffNanoseconds (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffNanoseconds(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DiffNanoseconds (timeValue1 As DbExpression, timeValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member DiffNanoseconds : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds (timeValue1, timeValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="timeValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue1">An expression that specifies the first time value argument.</param>
          <param name="timeValue2">An expression that specifies the second time value argument.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffNanoseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffSeconds">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffSeconds (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffSeconds(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DiffSeconds (timeValue1 As DbExpression, timeValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member DiffSeconds : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds (timeValue1, timeValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="timeValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue1">An expression that specifies the first time value argument.</param>
          <param name="timeValue2">An expression that specifies the second time value argument.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffSeconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffYears">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffYears (this System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression DiffYears(class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DiffYears (dateValue1 As DbExpression, dateValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member DiffYears : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears (dateValue1, dateValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="dateValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="dateValue1">An expression that specifies the first date value argument.</param>
          <param name="dateValue2">An expression that specifies the second date value argument.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffYears' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="EndsWith">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression EndsWith (this System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument, System.Data.Entity.Core.Common.CommandTrees.DbExpression suffix);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression EndsWith(class System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression suffix) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EndsWith (stringArgument As DbExpression, suffix As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member EndsWith : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith (stringArgument, suffix)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="suffix" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="stringArgument">An expression that specifies the string that is searched at the end for string suffix.</param>
          <param name="suffix">An expression that specifies the target string that is searched for at the end of stringArgument.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'EndsWith' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Floor">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Floor (this System.Data.Entity.Core.Common.CommandTrees.DbExpression value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Floor(class System.Data.Entity.Core.Common.CommandTrees.DbExpression value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Floor (value As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Floor : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor value" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">An expression that specifies the numeric value.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Floor' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of value.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="GetTotalOffsetMinutes">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression GetTotalOffsetMinutes (this System.Data.Entity.Core.Common.CommandTrees.DbExpression dateTimeOffsetArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression GetTotalOffsetMinutes(class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateTimeOffsetArgument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetTotalOffsetMinutes (dateTimeOffsetArgument As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member GetTotalOffsetMinutes : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes dateTimeOffsetArgument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateTimeOffsetArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="dateTimeOffsetArgument">An expression that specifies the DateTimeOffset value from which the minute offset from GMT should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GetTotalOffsetMinutes' function with the specified argument, which must have a DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Hour">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Hour (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Hour(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Hour (timeValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Hour : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour timeValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="timeValue">An expression that specifies the value from which the hour should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Hour' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IndexOf">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression IndexOf (this System.Data.Entity.Core.Common.CommandTrees.DbExpression searchString, System.Data.Entity.Core.Common.CommandTrees.DbExpression stringToFind);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression IndexOf(class System.Data.Entity.Core.Common.CommandTrees.DbExpression searchString, class System.Data.Entity.Core.Common.CommandTrees.DbExpression stringToFind) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf (searchString As DbExpression, stringToFind As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member IndexOf : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf (searchString, stringToFind)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="searchString" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="stringToFind" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="searchString">An expression that specifies the string to search for stringToFind.</param>
          <param name="stringToFind">An expression that specifies the string to locate within searchString should be checked.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IndexOf' function with the specified arguments, which must each have a string result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Left">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Left (this System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument, System.Data.Entity.Core.Common.CommandTrees.DbExpression length);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Left(class System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression length) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Left (stringArgument As DbExpression, length As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Left : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left (stringArgument, length)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="length" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="stringArgument">An expression that specifies the string from which to extract the leftmost substring.</param>
          <param name="length">An expression that specifies the length of the leftmost substring to extract from stringArgument.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Left' function with the specified arguments, which must have a string and integer numeric result type. The result type of the expression is string.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Length">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Length (this System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Length(class System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Length (stringArgument As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Length : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length stringArgument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringArgument">An expression that specifies the string for which the length should be computed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Length' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="LongCount">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression LongCount (this System.Data.Entity.Core.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression LongCount(class System.Data.Entity.Core.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount (collection As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member LongCount : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount collection" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">An expression that specifies the collection over which the count value should be computed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BigCount' function over the specified collection. The result type of the expression is Edm.Int64.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Max (this System.Data.Entity.Core.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Max(class System.Data.Entity.Core.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (collection As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Max : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max collection" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">An expression that specifies the collection from which the maximum value should be retrieved</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Max' function over the specified collection. The result type of the expression is the same as the element type of the collection.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Millisecond">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Millisecond (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Millisecond(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Millisecond (timeValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Millisecond : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond timeValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="timeValue">An expression that specifies the value from which the millisecond should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Millisecond' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Min (this System.Data.Entity.Core.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Min(class System.Data.Entity.Core.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (collection As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Min : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min collection" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">An expression that specifies the collection from which the minimum value should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Min' function over the specified collection. The result type of the expression is the same as the element type of the collection.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Minute">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Minute (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Minute(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Minute (timeValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Minute : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute timeValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="timeValue">An expression that specifies the value from which the minute should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Minute' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Month">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Month (this System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Month(class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Month (dateValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Month : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month dateValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="dateValue">An expression that specifies the value from which the month should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Month' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Power">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Power (this System.Data.Entity.Core.Common.CommandTrees.DbExpression baseArgument, System.Data.Entity.Core.Common.CommandTrees.DbExpression exponent);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Power(class System.Data.Entity.Core.Common.CommandTrees.DbExpression baseArgument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression exponent) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Power (baseArgument As DbExpression, exponent As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Power : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power (baseArgument, exponent)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="baseArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="exponent" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="baseArgument">An expression that specifies the numeric value to raise to the given power.</param>
          <param name="exponent">An expression that specifies the power to which baseArgument should be raised.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Power' function with the specified arguments, which must have numeric result types. The result type of the expression is the same as the result type of baseArgument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Replace">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Replace (this System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument, System.Data.Entity.Core.Common.CommandTrees.DbExpression toReplace, System.Data.Entity.Core.Common.CommandTrees.DbExpression replacement);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Replace(class System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression toReplace, class System.Data.Entity.Core.Common.CommandTrees.DbExpression replacement) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Replace (stringArgument As DbExpression, toReplace As DbExpression, replacement As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Replace : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace (stringArgument, toReplace, replacement)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="toReplace" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
          <Parameter Name="replacement" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="stringArgument">An expression that specifies the string in which to perform the replacement operation.</param>
          <param name="toReplace">An expression that specifies the string that is replaced.</param>
          <param name="replacement">An expression that specifies the replacement string.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Replace' function with the specified arguments, which must each have a string result type. The result type of the expression is also string.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Reverse">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Reverse (this System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Reverse(class System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Reverse (stringArgument As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Reverse : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse stringArgument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringArgument">An expression that specifies the string to reverse.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Reverse' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Right">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Right (this System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument, System.Data.Entity.Core.Common.CommandTrees.DbExpression length);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Right(class System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression length) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Right (stringArgument As DbExpression, length As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Right : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right (stringArgument, length)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="length" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="stringArgument">An expression that specifies the string from which to extract the rightmost substring.</param>
          <param name="length">An expression that specifies the length of the rightmost substring to extract from stringArgument.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Right' function with the specified arguments, which must have a string and integer numeric result type. The result type of the expression is string.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Round">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Round (this System.Data.Entity.Core.Common.CommandTrees.DbExpression value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Round(class System.Data.Entity.Core.Common.CommandTrees.DbExpression value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Round (value As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Round : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round value" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">An expression that specifies the numeric value to round.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Round' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of value.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Round">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Round (this System.Data.Entity.Core.Common.CommandTrees.DbExpression value, System.Data.Entity.Core.Common.CommandTrees.DbExpression digits);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Round(class System.Data.Entity.Core.Common.CommandTrees.DbExpression value, class System.Data.Entity.Core.Common.CommandTrees.DbExpression digits) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Round (value As DbExpression, digits As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Round : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round (value, digits)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="digits" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="value">An expression that specifies the numeric value to round.</param>
          <param name="digits">An expression that specifies the number of digits of precision to use when rounding.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Round' function with the specified arguments, which must have a single, double or decimal, and integer result types. The result type of the expression is the same as the result type of value.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Second">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Second (this System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Second(class System.Data.Entity.Core.Common.CommandTrees.DbExpression timeValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Second (timeValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Second : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second timeValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="timeValue">An expression that specifies the value from which the second should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Second' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="StartsWith">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression StartsWith (this System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument, System.Data.Entity.Core.Common.CommandTrees.DbExpression prefix);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression StartsWith(class System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression prefix) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartsWith (stringArgument As DbExpression, prefix As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member StartsWith : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith (stringArgument, prefix)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="prefix" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="stringArgument">An expression that specifies the string that is searched at the start for string prefix.</param>
          <param name="prefix">An expression that specifies the target string that is searched for at the start of stringArgument.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'StartsWith' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="StDev">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression StDev (this System.Data.Entity.Core.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression StDev(class System.Data.Entity.Core.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StDev (collection As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member StDev : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev collection" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">An expression that specifies the collection for which the standard deviation should be computed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'StDev' function over the non-null members of the specified collection. The result type of the expression is Edm.Double.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="StDevP">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression StDevP (this System.Data.Entity.Core.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression StDevP(class System.Data.Entity.Core.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StDevP (collection As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member StDevP : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP collection" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">An expression that specifies the collection for which the standard deviation should be computed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'StDevP' function over the population of the specified collection. The result type of the expression is Edm.Double.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Substring">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Substring (this System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument, System.Data.Entity.Core.Common.CommandTrees.DbExpression start, System.Data.Entity.Core.Common.CommandTrees.DbExpression length);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Substring(class System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression start, class System.Data.Entity.Core.Common.CommandTrees.DbExpression length) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Substring (stringArgument As DbExpression, start As DbExpression, length As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Substring : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring (stringArgument, start, length)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="start" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
          <Parameter Name="length" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="stringArgument">An expression that specifies the string from which to extract the substring.</param>
          <param name="start">An expression that specifies the starting index from which the substring should be taken.</param>
          <param name="length">An expression that specifies the length of the substring.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Substring' function with the specified arguments, which must have a string and integer numeric result types. The result type of the expression is string.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Sum (this System.Data.Entity.Core.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Sum(class System.Data.Entity.Core.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (collection As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Sum : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum collection" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">An expression that specifies the collection from which the sum should be computed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Sum' function over the specified collection. The result type of the expression is the same as the element type of the collection.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="ToLower">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression ToLower (this System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression ToLower(class System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLower (stringArgument As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member ToLower : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower stringArgument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringArgument">An expression that specifies the string that should be converted to lower case.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'ToLower' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="ToUpper">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression ToUpper (this System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression ToUpper(class System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToUpper (stringArgument As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member ToUpper : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper stringArgument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringArgument">An expression that specifies the string that should be converted to upper case.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'ToUpper' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Trim">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Trim (this System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Trim(class System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim (stringArgument As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Trim : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim stringArgument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringArgument">An expression that specifies the string from which leading and trailing space should be removed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Trim' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="TrimEnd">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression TrimEnd (this System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression TrimEnd(class System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd (stringArgument As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member TrimEnd : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd stringArgument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringArgument">An expression that specifies the string from which trailing space should be removed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'RTrim' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="TrimStart">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression TrimStart (this System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression TrimStart(class System.Data.Entity.Core.Common.CommandTrees.DbExpression stringArgument) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart (stringArgument As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member TrimStart : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart stringArgument" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringArgument">An expression that specifies the string from which leading space should be removed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'LTrim' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Truncate">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Truncate (this System.Data.Entity.Core.Common.CommandTrees.DbExpression value, System.Data.Entity.Core.Common.CommandTrees.DbExpression digits);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Truncate(class System.Data.Entity.Core.Common.CommandTrees.DbExpression value, class System.Data.Entity.Core.Common.CommandTrees.DbExpression digits) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Truncate (value As DbExpression, digits As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Truncate : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate (value, digits)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="digits" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="value">An expression that specifies the numeric value to truncate.</param>
          <param name="digits">An expression that specifies the number of digits of precision to use when truncating.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Truncate' function with the specified arguments, which must have a single, double or decimal, and integer result types. The result type of the expression is the same as the result type of value.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="TruncateTime">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression TruncateTime (this System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression TruncateTime(class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TruncateTime (dateValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member TruncateTime : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime dateValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="dateValue">An expression that specifies the value for which the time portion should be truncated.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'TruncateTime' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is the same as the result type of dateValue.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Var">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Var (this System.Data.Entity.Core.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Var(class System.Data.Entity.Core.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Var (collection As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Var : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var collection" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">An expression that specifies the collection for which the statistical variance should be computed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Var' function over the non-null members of the specified collection. The result type of the expression is Edm.Double.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="VarP">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression VarP (this System.Data.Entity.Core.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression VarP(class System.Data.Entity.Core.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function VarP (collection As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member VarP : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP collection" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">An expression that specifies the collection for which the statistical variance should be computed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'VarP' function over the population of the specified collection. The result type of the expression Edm.Double.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Year">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Year (this System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Year(class System.Data.Entity.Core.Common.CommandTrees.DbExpression dateValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Year (dateValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Year : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year dateValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="dateValue">An expression that specifies the value from which the year should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Year' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Area">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Area (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Area(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Area (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Area : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the spatial surface value for which the area should be calculated.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Area' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AsBinary">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AsBinary (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AsBinary(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsBinary (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member AsBinary : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the spatial value from which the well known binary representation should be produced.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AsBinary' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Binary.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AsGml">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AsGml (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AsGml(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsGml (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member AsGml : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the spatial value from which the Geography Markup Language (GML) representation should be produced.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AsGml' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.String.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AsText">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AsText (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression AsText(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsText (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member AsText : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the spatial value from which the well known text representation should be produced.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AsText' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.String.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Centroid">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Centroid (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Centroid(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Centroid (geometryValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Centroid : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid geometryValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">An expression that specifies the geometry surface value from which the centroid should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Centroid' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="CoordinateSystemId">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression CoordinateSystemId (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression CoordinateSystemId(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CoordinateSystemId (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member CoordinateSystemId : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the value from which the coordinate system id (SRID) should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CoordinateSystemId' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Distance">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Distance (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Distance(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distance (spatialValue1 As DbExpression, spatialValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Distance : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance (spatialValue1, spatialValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">An expression that specifies the first spatial value.</param>
          <param name="spatialValue2">An expression that specifies the spatial value from which the distance from spatialValue1 should be measured.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Distance' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type.  The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is Edm.Double.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Elevation">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Elevation (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Elevation(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Elevation (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Elevation : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the spatial point value from which the elevation (Z co-ordinate) value should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Elevation' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="EndPoint">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression EndPoint (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression EndPoint(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EndPoint (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member EndPoint : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the spatial curve value from which the end point should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'EndPoint' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type is the same as that of spatialValue.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="ExteriorRing">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression ExteriorRing (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression ExteriorRing(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExteriorRing (geometryValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member ExteriorRing : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing geometryValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">The geometry value.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'ExteriorRing' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="InteriorRingAt">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression InteriorRingAt (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue, System.Data.Entity.Core.Common.CommandTrees.DbExpression indexValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression InteriorRingAt(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue, class System.Data.Entity.Core.Common.CommandTrees.DbExpression indexValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InteriorRingAt (geometryValue As DbExpression, indexValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member InteriorRingAt : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt (geometryValue, indexValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="indexValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="geometryValue">The geometry value.</param>
          <param name="indexValue">An expression that specifies the position of the interior ring to be retrieved from within the polygon.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'InteriorRingAt' function with the specified arguments. The first argument must have an Edm.Geometry result type. The second argument must have an integer numeric result types. The result type of the expression is Edm.Geometry.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="InteriorRingCount">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression InteriorRingCount (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression InteriorRingCount(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InteriorRingCount (geometryValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member InteriorRingCount : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount geometryValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">The geometry value.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'InteriorRingCount' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsClosedSpatial">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression IsClosedSpatial (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression IsClosedSpatial(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsClosedSpatial (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member IsClosedSpatial : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the spatial curve value from which the IsClosedSpatial value should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsClosedSpatial' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type is Edm.Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsEmptySpatial">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression IsEmptySpatial (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression IsEmptySpatial(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsEmptySpatial (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member IsEmptySpatial : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the spatial value from which the IsEmptySpatial value should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsEmptySpatial' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsRing">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression IsRing (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression IsRing(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsRing (geometryValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member IsRing : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing geometryValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">An expression that specifies the geometry curve value from which the IsRing value should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsRing' function with the specified argument, which must have an Edm.Geometry result type. The result type is Edm.Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsSimpleGeometry">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression IsSimpleGeometry (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression IsSimpleGeometry(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsSimpleGeometry (geometryValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member IsSimpleGeometry : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry geometryValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">The geometry value.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsSimpleGeometry' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsValidGeometry">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression IsValidGeometry (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression IsValidGeometry(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsValidGeometry (geometryValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member IsValidGeometry : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry geometryValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">An expression that specifies the geometry value which should be tested for spatial validity.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsValidGeometry' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Latitude">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Latitude (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geographyValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Latitude(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geographyValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Latitude (geographyValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Latitude : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude geographyValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geographyValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geographyValue">An expression that specifies the geography point value from which the Latitude value should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Latitude' function with the specified argument, which must have an Edm.Geography result type. The result type of the expression is Edm.Double.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Longitude">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Longitude (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geographyValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Longitude(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geographyValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Longitude (geographyValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Longitude : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude geographyValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geographyValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geographyValue">An expression that specifies the geography point value from which the Longitude value should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Longitude' function with the specified argument, which must have an Edm.Geography result type. The result type of the expression is Edm.Double.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Measure">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Measure (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Measure(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Measure (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member Measure : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the spatial point value from which the Measure (M) co-ordinate value should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Measure' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="PointAt">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression PointAt (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue, System.Data.Entity.Core.Common.CommandTrees.DbExpression indexValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression PointAt(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue, class System.Data.Entity.Core.Common.CommandTrees.DbExpression indexValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PointAt (spatialValue As DbExpression, indexValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member PointAt : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt (spatialValue, indexValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="indexValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the spatial line string value.</param>
          <param name="indexValue">An expression that specifies the position of the point to be retrieved from within the line string.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'PointAt' function with the specified arguments. The first argument must have an Edm.Geography or Edm.Geometry result type. The second argument must have an integer numeric result type. The result type of the expression is the same as that of spatialValue.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="PointCount">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression PointCount (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression PointCount(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PointCount (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member PointCount : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the spatial line string value from which the number of points should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'PointCount' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="PointOnSurface">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression PointOnSurface (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression PointOnSurface(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PointOnSurface (geometryValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member PointOnSurface : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface geometryValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">An expression that specifies the geometry surface value from which the point should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'PointOnSurface' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialBoundary">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialBoundary (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialBoundary(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialBoundary (geometryValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialBoundary : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary geometryValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">An expression that specifies the geometry value from which the SpatialBoundary value should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialBoundary' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialBuffer">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialBuffer (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue, System.Data.Entity.Core.Common.CommandTrees.DbExpression distance);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialBuffer(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue, class System.Data.Entity.Core.Common.CommandTrees.DbExpression distance) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialBuffer (spatialValue As DbExpression, distance As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialBuffer : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer (spatialValue, distance)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="distance" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the spatial value.</param>
          <param name="distance">An expression that specifies the buffer distance.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialBuffer' function with the specified arguments, which must have a Edm.Geography or Edm.Geometry and Edm.Double result types. The result type of the expression is Edm.Geometry.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialContains">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialContains (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialContains(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialContains (geometryValue1 As DbExpression, geometryValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialContains : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains (geometryValue1, geometryValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="geometryValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="geometryValue1">An expression that specifies the first geometry value.</param>
          <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialContains' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialConvexHull">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialConvexHull (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialConvexHull(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialConvexHull (geometryValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialConvexHull : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull geometryValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">An expression that specifies the geometry value from which the convex hull value should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialConvexHull' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialCrosses">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialCrosses (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialCrosses(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialCrosses (geometryValue1 As DbExpression, geometryValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialCrosses : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses (geometryValue1, geometryValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="geometryValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="geometryValue1">An expression that specifies the first geometry value.</param>
          <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialCrosses' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialDifference">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialDifference (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialDifference(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialDifference (spatialValue1 As DbExpression, spatialValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialDifference : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference (spatialValue1, spatialValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">An expression that specifies the first spatial value.</param>
          <param name="spatialValue2">An expression that specifies the spatial value for which the difference with spatialValue1 should be computed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialDifference' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is the same as the type of spatialValue1 and spatialValue2.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialDimension">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialDimension (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialDimension(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialDimension (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialDimension : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the value from which the Dimension value should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialDimension' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialDisjoint">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialDisjoint (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialDisjoint(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialDisjoint (spatialValue1 As DbExpression, spatialValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialDisjoint : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint (spatialValue1, spatialValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">An expression that specifies the first spatial value.</param>
          <param name="spatialValue2">An expression that specifies the spatial value that should be compared with spatialValue1 for disjointness.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialDisjoint' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is Edm.Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialElementAt">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialElementAt (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue, System.Data.Entity.Core.Common.CommandTrees.DbExpression indexValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialElementAt(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue, class System.Data.Entity.Core.Common.CommandTrees.DbExpression indexValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialElementAt (spatialValue As DbExpression, indexValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialElementAt : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt (spatialValue, indexValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="indexValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the geography or geometry collection value.</param>
          <param name="indexValue">An expression that specifies the position of the element to be retrieved from within the geometry or geography collection.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialElementAt' function with the specified arguments. The first argument must have an Edm.Geography or Edm.Geometry result type. The second argument must have an integer numeric result type. The result type of the expression is the same as that of spatialValue.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialElementCount">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialElementCount (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialElementCount(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialElementCount (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialElementCount : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the geography or geometry collection value from which the number of elements should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialElementCount' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialEnvelope">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialEnvelope (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialEnvelope(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialEnvelope (geometryValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialEnvelope : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope geometryValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">An expression that specifies the value from which the Envelope value should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialEnvelope' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialEquals">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialEquals (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialEquals(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialEquals (spatialValue1 As DbExpression, spatialValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialEquals : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals (spatialValue1, spatialValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">An expression that specifies the first spatial value.</param>
          <param name="spatialValue2">An expression that specifies the spatial value that should be compared with spatialValue1 for equality.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialEquals' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is Edm.Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialIntersection">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialIntersection (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialIntersection(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialIntersection (spatialValue1 As DbExpression, spatialValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialIntersection : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection (spatialValue1, spatialValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">An expression that specifies the first spatial value.</param>
          <param name="spatialValue2">An expression that specifies the spatial value for which the intersection with spatialValue1 should be computed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialIntersection' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is the same as the type of spatialValue1 and spatialValue2.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialIntersects">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialIntersects (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialIntersects(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialIntersects (spatialValue1 As DbExpression, spatialValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialIntersects : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects (spatialValue1, spatialValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">An expression that specifies the first spatial value.</param>
          <param name="spatialValue2">An expression that specifies the spatial value that should be compared with spatialValue1 for intersection.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialIntersects' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is Edm.Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialLength">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialLength (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialLength(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialLength (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialLength : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the spatial curve value from which the length should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialLength' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialOverlaps">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialOverlaps (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialOverlaps(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialOverlaps (geometryValue1 As DbExpression, geometryValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialOverlaps : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps (geometryValue1, geometryValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="geometryValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="geometryValue1">An expression that specifies the first geometry value.</param>
          <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialOverlaps' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialRelate">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialRelate (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue2, System.Data.Entity.Core.Common.CommandTrees.DbExpression intersectionPatternMatrix);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialRelate(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue2, class System.Data.Entity.Core.Common.CommandTrees.DbExpression intersectionPatternMatrix) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialRelate (geometryValue1 As DbExpression, geometryValue2 As DbExpression, intersectionPatternMatrix As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialRelate : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate (geometryValue1, geometryValue2, intersectionPatternMatrix)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="geometryValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
          <Parameter Name="intersectionPatternMatrix" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="geometryValue1">An expression that specifies the first geometry value.</param>
          <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
          <param name="intersectionPatternMatrix">An expression that specifies the text representation of the Dimensionally Extended Nine-Intersection Model (DE-9IM) intersection pattern used to compare geometryValue1 and geometryValue2.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialRelate' function with the specified arguments, which must have Edm.Geometry and string result types. The result type of the expression is Edm.Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialSymmetricDifference">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialSymmetricDifference (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialSymmetricDifference(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialSymmetricDifference (spatialValue1 As DbExpression, spatialValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialSymmetricDifference : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference (spatialValue1, spatialValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">An expression that specifies the first spatial value.</param>
          <param name="spatialValue2">An expression that specifies the spatial value for which the symmetric difference with spatialValue1 should be computed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialSymmetricDifference' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is the same as the type of spatialValue1 and spatialValue2.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialTouches">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialTouches (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialTouches(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialTouches (geometryValue1 As DbExpression, geometryValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialTouches : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches (geometryValue1, geometryValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="geometryValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="geometryValue1">An expression that specifies the first geometry value.</param>
          <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialTouches' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialTypeName">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialTypeName (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialTypeName(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialTypeName (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialTypeName : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the value from which the Geometry Type name should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialTypeName' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.String.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialUnion">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialUnion (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialUnion(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialUnion (spatialValue1 As DbExpression, spatialValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialUnion : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion (spatialValue1, spatialValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">An expression that specifies the first spatial value.</param>
          <param name="spatialValue2">An expression that specifies the spatial value for which the union with spatialValue1 should be computed.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialUnion' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is the same as the type of spatialValue1 and spatialValue2.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialWithin">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialWithin (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue1, System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression SpatialWithin(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SpatialWithin (geometryValue1 As DbExpression, geometryValue2 As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member SpatialWithin : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin (geometryValue1, geometryValue2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue1" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="geometryValue2" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="geometryValue1">An expression that specifies the first geometry value.</param>
          <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialWithin' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="StartPoint">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression StartPoint (this System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression StartPoint(class System.Data.Entity.Core.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartPoint (spatialValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member StartPoint : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint spatialValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">An expression that specifies the spatial curve value from which the start point should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'StartPoint' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type is the same as that of spatialValue.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="XCoordinate">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression XCoordinate (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression XCoordinate(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function XCoordinate (geometryValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member XCoordinate : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate geometryValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">An expression that specifies the geometry point value from which the X co-ordinate value should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'XCoordinate' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="YCoordinate">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression YCoordinate (this System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression YCoordinate(class System.Data.Entity.Core.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function YCoordinate (geometryValue As DbExpression) As DbFunctionExpression" />
        <MemberSignature Language="F#" Value="static member YCoordinate : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate geometryValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">An expression that specifies the geometry point value from which the Y co-ordinate value should be retrieved.</param>
          <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'YCoordinate' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter" />
      </Targets>
      <Member MemberName="GetConceptualModel">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Metadata.Edm.EdmModel GetConceptualModel (this System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Metadata.Edm.EdmModel GetConceptualModel(class System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter model) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetConceptualModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConceptualModel (model As IEdmModelAdapter) As EdmModel" />
        <MemberSignature Language="F#" Value="static member GetConceptualModel : System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter -&gt; System.Data.Entity.Core.Metadata.Edm.EdmModel" Usage="System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetConceptualModel model" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Metadata.Edm.EdmModel</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model">An instance of a class that implements IEdmModelAdapter (ex. DbModel).</param>
          <summary>
            Gets the conceptual model from the specified DbModel.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Metadata.Edm.DbModelExtensions" Member="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetConceptualModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter" />
      </Targets>
      <Member MemberName="GetStoreModel">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Metadata.Edm.EdmModel GetStoreModel (this System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Metadata.Edm.EdmModel GetStoreModel(class System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter model) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetStoreModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetStoreModel (model As IEdmModelAdapter) As EdmModel" />
        <MemberSignature Language="F#" Value="static member GetStoreModel : System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter -&gt; System.Data.Entity.Core.Metadata.Edm.EdmModel" Usage="System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetStoreModel model" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Core.Metadata.Edm.EdmModel</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="model" Type="System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter" RefType="this" />
        </Parameters>
        <Docs>
          <param name="model">An instance of a class that implements IEdmModelAdapter (ex. DbModel).</param>
          <summary>
            Gets the store model from the specified DbModel.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Core.Metadata.Edm.DbModelExtensions" Member="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetStoreModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="AsNoTracking">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable AsNoTracking (this System.Linq.IQueryable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable AsNoTracking(class System.Linq.IQueryable source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbExtensions.AsNoTracking(System.Linq.IQueryable)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsNoTracking (source As IQueryable) As IQueryable" />
        <MemberSignature Language="F#" Value="static member AsNoTracking : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="System.Data.Entity.DbExtensions.AsNoTracking source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" Index="0" FrameworkAlternate="entity-framework-4.3.1" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">The source query.</param>
          <summary>
                Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext" />
                or <see cref="T:System.Data.Objects.ObjectContext" />.  This method works by calling the AsNoTracking method of the
                underlying query object.  If the underlying query object does not have a AsNoTracking method,
                then calling this method will have no affect.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.DbExtensions" Member="M:System.Data.Entity.DbExtensions.AsNoTracking(System.Linq.IQueryable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AsNoTracking&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; AsNoTracking&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; AsNoTracking&lt;class T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsNoTracking(Of T As Class) (source As IQueryable(Of T)) As IQueryable(Of T)" />
        <MemberSignature Language="F#" Value="static member AsNoTracking : System.Linq.IQueryable&lt;'T (requires 'T : null)&gt; -&gt; System.Linq.IQueryable&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="System.Data.Entity.DbExtensions.AsNoTracking source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" Index="0" FrameworkAlternate="entity-framework-4.3.1" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The element type.</typeparam>
          <param name="source">The source query.</param>
          <summary>
                Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext" />
                or <see cref="T:System.Data.Objects.ObjectContext" />.  This method works by calling the AsNoTracking method of the
                underlying query object.  If the underlying query object does not have a AsNoTracking method,
                then calling this method will have no affect.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.DbExtensions" Member="M:System.Data.Entity.DbExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="Include">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable Include (this System.Linq.IQueryable source, string path);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable Include(class System.Linq.IQueryable source, string path) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Include (source As IQueryable, path As String) As IQueryable" />
        <MemberSignature Language="F#" Value="static member Include : System.Linq.IQueryable * string -&gt; System.Linq.IQueryable" Usage="System.Data.Entity.DbExtensions.Include (source, path)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" Index="0" FrameworkAlternate="entity-framework-4.3.1" RefType="this" />
          <Parameter Name="path" Type="System.String" Index="1" FrameworkAlternate="entity-framework-4.3.1" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="path">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Entity.DbExtensions" Member="M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Include&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; Include&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source, string path) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; Include&lt;class T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source, string path) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Include(Of T As Class) (source As IQueryable(Of T), path As String) As IQueryable(Of T)" />
        <MemberSignature Language="F#" Value="static member Include : System.Linq.IQueryable&lt;'T (requires 'T : null)&gt; * string -&gt; System.Linq.IQueryable&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="System.Data.Entity.DbExtensions.Include (source, path)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" Index="0" FrameworkAlternate="entity-framework-4.3.1" RefType="this" />
          <Parameter Name="path" Type="System.String" Index="1" FrameworkAlternate="entity-framework-4.3.1" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="path">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Entity.DbExtensions" Member="M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Include&lt;T,TProperty&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; Include&lt;T,TProperty&gt; (this System.Linq.IQueryable&lt;T&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;T,TProperty&gt;&gt; path) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; Include&lt;class T, TProperty&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, !!TProperty&gt;&gt; path) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Include(Of T As Class, TProperty As Class) (source As IQueryable(Of T), path As Expression(Of Func(Of T, TProperty))) As IQueryable(Of T)" />
        <MemberSignature Language="F#" Value="static member Include : System.Linq.IQueryable&lt;'T (requires 'T : null)&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'T, 'Property&gt;&gt; -&gt; System.Linq.IQueryable&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="System.Data.Entity.DbExtensions.Include (source, path)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" Index="0" FrameworkAlternate="entity-framework-4.3.1" RefType="this" />
          <Parameter Name="path" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,TProperty&gt;&gt;" Index="1" FrameworkAlternate="entity-framework-4.3.1" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <typeparam name="TProperty">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="path">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Entity.DbExtensions" Member="M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="Load">
        <MemberSignature Language="C#" Value="public static void Load (this System.Linq.IQueryable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Load(class System.Linq.IQueryable source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbExtensions.Load(System.Linq.IQueryable)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Load (source As IQueryable)" />
        <MemberSignature Language="F#" Value="static member Load : System.Linq.IQueryable -&gt; unit" Usage="System.Data.Entity.DbExtensions.Load source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" Index="0" FrameworkAlternate="entity-framework-4.3.1" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">The source query.</param>
          <summary>
                Enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Objects.ObjectSet`1" />,
                <see cref="T:System.Data.Objects.ObjectQuery`1" />, and others the results of the query will be loaded into the associated <see cref="T:System.Data.Entity.DbContext" />,
                <see cref="T:System.Data.Objects.ObjectContext" /> or other cache on the client.
                This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.DbExtensions" Member="M:System.Data.Entity.DbExtensions.Load(System.Linq.IQueryable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.ObjectModel.ObservableCollection`1" />
      </Targets>
      <Member MemberName="ToBindingList&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.ComponentModel.BindingList&lt;T&gt; ToBindingList&lt;T&gt; (this System.Collections.ObjectModel.ObservableCollection&lt;T&gt; source) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.BindingList`1&lt;!!T&gt; ToBindingList&lt;class T&gt;(class System.Collections.ObjectModel.ObservableCollection`1&lt;!!T&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToBindingList(Of T As Class) (source As ObservableCollection(Of T)) As BindingList(Of T)" />
        <MemberSignature Language="F#" Value="static member ToBindingList : System.Collections.ObjectModel.ObservableCollection&lt;'T (requires 'T : null)&gt; -&gt; System.ComponentModel.BindingList&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="System.Data.Entity.DbExtensions.ToBindingList source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ComponentModel.BindingList&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.ObjectModel.ObservableCollection&lt;T&gt;" Index="0" FrameworkAlternate="entity-framework-4.3.1" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The element type.</typeparam>
          <param name="source">The collection that the binding list will stay in sync with.</param>
          <summary>
                Returns an <see cref="T:System.ComponentModel.BindingList`1" /> implementation that stays in sync with the given <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.DbExtensions" Member="M:System.Data.Entity.DbExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />
      </Targets>
      <Member MemberName="GetService">
        <MemberSignature Language="C#" Value="public static object GetService (this System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetService(class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)" />
        <MemberSignature Language="F#" Value="static member GetService : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver * Type -&gt; obj" Usage="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService (resolver, type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="resolver" Type="System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="resolver"> The resolver to use. </param>
          <param name="type"> The contract type to resolve. </param>
          <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> passing the given type argument and using
            null for the name argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions" Member="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />
      </Targets>
      <Member MemberName="GetService&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetService&lt;T&gt; (this System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetService&lt;T&gt;(class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetService(Of T) (resolver As IDbDependencyResolver) As T" />
        <MemberSignature Language="F#" Value="static member GetService : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver -&gt; 'T" Usage="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService resolver" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="resolver" Type="System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The contract type to resolve. </typeparam>
          <param name="resolver"> The resolver to use. </param>
          <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> passing the generic type of the method as
            the type argument and null for the name argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions" Member="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />
      </Targets>
      <Member MemberName="GetService&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetService&lt;T&gt; (this System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, object key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetService&lt;T&gt;(class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, object key) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetService(Of T) (resolver As IDbDependencyResolver, key As Object) As T" />
        <MemberSignature Language="F#" Value="static member GetService : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver * obj -&gt; 'T" Usage="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService (resolver, key)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="resolver" Type="System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" RefType="this" />
          <Parameter Name="key" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The contract type to resolve. </typeparam>
          <param name="resolver"> The resolver to use. </param>
          <param name="key"> The key of the dependency to resolve. </param>
          <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> passing the generic type of the method and the given
            name as arguments.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions" Member="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />
      </Targets>
      <Member MemberName="GetServices">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;object&gt; GetServices (this System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetServices(class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)" />
        <MemberSignature Language="F#" Value="static member GetServices : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver * Type -&gt; seq&lt;obj&gt;" Usage="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices (resolver, type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="resolver" Type="System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="resolver"> The resolver to use. </param>
          <param name="type"> The contract type to resolve. </param>
          <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> passing the given type argument and using
            null for the name argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions" Member="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />
      </Targets>
      <Member MemberName="GetServices&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetServices&lt;T&gt; (this System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetServices&lt;T&gt;(class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetServices(Of T) (resolver As IDbDependencyResolver) As IEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member GetServices : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver -&gt; seq&lt;'T&gt;" Usage="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices resolver" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="resolver" Type="System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The contract type to resolve. </typeparam>
          <param name="resolver"> The resolver to use. </param>
          <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> passing the generic type of the method as
            the type argument and null for the name argument.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions" Member="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />
      </Targets>
      <Member MemberName="GetServices&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetServices&lt;T&gt; (this System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, object key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetServices&lt;T&gt;(class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, object key) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetServices(Of T) (resolver As IDbDependencyResolver, key As Object) As IEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member GetServices : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver * obj -&gt; seq&lt;'T&gt;" Usage="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices (resolver, key)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="resolver" Type="System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" RefType="this" />
          <Parameter Name="key" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The contract type to resolve. </typeparam>
          <param name="resolver"> The resolver to use. </param>
          <param name="key"> The key of the dependency to resolve. </param>
          <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> passing the generic type of the method and the given
            name as arguments.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions" Member="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.IDbSet`1" />
      </Targets>
      <Member MemberName="AddOrUpdate&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static void AddOrUpdate&lt;TEntity&gt; (this System.Data.Entity.IDbSet&lt;TEntity&gt; set, params TEntity[] entities) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddOrUpdate&lt;class TEntity&gt;(class System.Data.Entity.IDbSet`1&lt;!!TEntity&gt; set, !!TEntity[] entities) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddOrUpdate(Of TEntity As Class) (set As IDbSet(Of TEntity), ParamArray entities As TEntity())" />
        <MemberSignature Language="F#" Value="static member AddOrUpdate : System.Data.Entity.IDbSet&lt;'Entity (requires 'Entity : null)&gt; * 'Entity[] -&gt; unit (requires 'Entity : null)" Usage="System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate (set, entities)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="set" Type="System.Data.Entity.IDbSet&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="entities" Type="TEntity[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TEntity">The type of entities to add or update.</typeparam>
          <param name="set">The set to which the entities belong.</param>
          <param name="entities"> The entities to add or update. </param>
          <summary>
            Adds or updates entities by key when SaveChanges is called. Equivalent to an "upsert" operation
            from database terminology.
            This method can useful when seeding data using Migrations.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Migrations.DbSetMigrationsExtensions" Member="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.IDbSet`1" />
      </Targets>
      <Member MemberName="AddOrUpdate&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static void AddOrUpdate&lt;TEntity&gt; (this System.Data.Entity.IDbSet&lt;TEntity&gt; set, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; identifierExpression, params TEntity[] entities) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddOrUpdate&lt;class TEntity&gt;(class System.Data.Entity.IDbSet`1&lt;!!TEntity&gt; set, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; identifierExpression, !!TEntity[] entities) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddOrUpdate(Of TEntity As Class) (set As IDbSet(Of TEntity), identifierExpression As Expression(Of Func(Of TEntity, Object)), ParamArray entities As TEntity())" />
        <MemberSignature Language="F#" Value="static member AddOrUpdate : System.Data.Entity.IDbSet&lt;'Entity (requires 'Entity : null)&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; * 'Entity[] -&gt; unit (requires 'Entity : null)" Usage="System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate (set, identifierExpression, entities)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="set" Type="System.Data.Entity.IDbSet&lt;TEntity&gt;" RefType="this" />
          <Parameter Name="identifierExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
          <Parameter Name="entities" Type="TEntity[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TEntity">The type of entities to add or update.</typeparam>
          <param name="set">The set to which the entities belong.</param>
          <param name="identifierExpression"> An expression specifying the properties that should be used when determining whether an Add or Update operation should be performed. </param>
          <param name="entities"> The entities to add or update. </param>
          <summary>
            Adds or updates entities by a custom identification expression when SaveChanges is called.
            Equivalent to an "upsert" operation from database terminology.
            This method can useful when seeding data using Migrations.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Migrations.DbSetMigrationsExtensions" Member="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.IDbSet`1" />
      </Targets>
      <Member MemberName="AddOrUpdate&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static void AddOrUpdate&lt;TEntity&gt; (this System.Data.Entity.IDbSet&lt;TEntity&gt; set, params TEntity[] entities) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddOrUpdate&lt;class TEntity&gt;(class System.Data.Entity.IDbSet`1&lt;!!TEntity&gt; set, !!TEntity[] entities) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddOrUpdate(Of TEntity As Class) (set As IDbSet(Of TEntity), ParamArray entities As TEntity())" />
        <MemberSignature Language="F#" Value="static member AddOrUpdate : System.Data.Entity.IDbSet&lt;'Entity (requires 'Entity : null)&gt; * 'Entity[] -&gt; unit (requires 'Entity : null)" Usage="System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate (set, entities)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="set" Type="System.Data.Entity.IDbSet&lt;TEntity&gt;" Index="0" FrameworkAlternate="entity-framework-4.3.1" RefType="this" />
          <Parameter Name="entities" Type="TEntity[]" Index="1" FrameworkAlternate="entity-framework-4.3.1">
            <Attributes>
              <Attribute FrameworkAlternate="entity-framework-4.3.1">
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TEntity">To be added.</typeparam>
          <param name="set">To be added.</param>
          <param name="entities">The entities to add or update.</param>
          <summary>
                Adds or updates entities by key when SaveChanges is called. Equivalent to an "upsert" operation
                from database terminology. 
                This method can useful when seeding data using Migrations.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Migrations.IDbSetExtensions" Member="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Entity.IDbSet`1" />
      </Targets>
      <Member MemberName="AddOrUpdate&lt;TEntity&gt;">
        <MemberSignature Language="C#" Value="public static void AddOrUpdate&lt;TEntity&gt; (this System.Data.Entity.IDbSet&lt;TEntity&gt; set, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; identifierExpression, params TEntity[] entities) where TEntity : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddOrUpdate&lt;class TEntity&gt;(class System.Data.Entity.IDbSet`1&lt;!!TEntity&gt; set, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; identifierExpression, !!TEntity[] entities) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddOrUpdate(Of TEntity As Class) (set As IDbSet(Of TEntity), identifierExpression As Expression(Of Func(Of TEntity, Object)), ParamArray entities As TEntity())" />
        <MemberSignature Language="F#" Value="static member AddOrUpdate : System.Data.Entity.IDbSet&lt;'Entity (requires 'Entity : null)&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; * 'Entity[] -&gt; unit (requires 'Entity : null)" Usage="System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate (set, identifierExpression, entities)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEntity">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="set" Type="System.Data.Entity.IDbSet&lt;TEntity&gt;" Index="0" FrameworkAlternate="entity-framework-4.3.1" RefType="this" />
          <Parameter Name="identifierExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" Index="1" FrameworkAlternate="entity-framework-4.3.1" />
          <Parameter Name="entities" Type="TEntity[]" Index="2" FrameworkAlternate="entity-framework-4.3.1">
            <Attributes>
              <Attribute FrameworkAlternate="entity-framework-4.3.1">
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TEntity">To be added.</typeparam>
          <param name="set">To be added.</param>
          <param name="identifierExpression">
                An expression specifying the properties that should be used when determining
                whether an Add or Update operation should be performed.
            </param>
          <param name="entities">The entities to add or update.</param>
          <summary>
                Adds or updates entities by a custom identification expression when SaveChanges is called.
                Equivalent to an "upsert" operation from database terminology.
                This method can useful when seeding data using Migrations.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Migrations.IDbSetExtensions" Member="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.ObjectModel.ObservableCollection`1" />
      </Targets>
      <Member MemberName="ToBindingList&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.ComponentModel.BindingList&lt;T&gt; ToBindingList&lt;T&gt; (this System.Collections.ObjectModel.ObservableCollection&lt;T&gt; source) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.BindingList`1&lt;!!T&gt; ToBindingList&lt;class T&gt;(class System.Collections.ObjectModel.ObservableCollection`1&lt;!!T&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.ObservableCollectionExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToBindingList(Of T As Class) (source As ObservableCollection(Of T)) As BindingList(Of T)" />
        <MemberSignature Language="F#" Value="static member ToBindingList : System.Collections.ObjectModel.ObservableCollection&lt;'T (requires 'T : null)&gt; -&gt; System.ComponentModel.BindingList&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="System.Data.Entity.ObservableCollectionExtensions.ToBindingList source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ComponentModel.BindingList&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.ObjectModel.ObservableCollection&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The element type. </typeparam>
          <param name="source"> The collection that the binding list will stay in sync with. </param>
          <summary>
            Returns an <see cref="T:System.ComponentModel.BindingList`1" /> implementation that stays in sync with the given
            <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.ObservableCollectionExtensions" Member="M:System.Data.Entity.ObservableCollectionExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AllAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AllAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AllAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AllAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of Boolean)" />
        <MemberSignature Language="F#" Value="static member AllAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.AllAsync (source, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <summary>
            Asynchronously determines whether all the elements of a sequence satisfy a condition.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AllAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AllAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AllAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AllAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.AllAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously determines whether all the elements of a sequence satisfy a condition.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AnyAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AnyAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AnyAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AnyAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of Boolean)" />
        <MemberSignature Language="F#" Value="static member AnyAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.AnyAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to check for being empty.
            </param>
          <summary>
            Asynchronously determines whether a sequence contains any elements.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AnyAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AnyAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AnyAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AnyAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of Boolean)" />
        <MemberSignature Language="F#" Value="static member AnyAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.AnyAsync (source, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <summary>
            Asynchronously determines whether any element of a sequence satisfies a condition.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AnyAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AnyAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AnyAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AnyAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.AnyAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously determines whether any element of a sequence satisfies a condition.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AnyAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AnyAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AnyAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AnyAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.AnyAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to check for being empty.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously determines whether a sequence contains any elements.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="AsNoTracking">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable AsNoTracking (this System.Linq.IQueryable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable AsNoTracking(class System.Linq.IQueryable source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AsNoTracking(System.Linq.IQueryable)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsNoTracking (source As IQueryable) As IQueryable" />
        <MemberSignature Language="F#" Value="static member AsNoTracking : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="System.Data.Entity.QueryableExtensions.AsNoTracking source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source"> The source query. </param>
          <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext" />
            or <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.  This method works by calling the AsNoTracking method of the
            underlying query object.  If the underlying query object does not have an AsNoTracking method,
            then calling this method will have no affect.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AsNoTracking(System.Linq.IQueryable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AsNoTracking&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; AsNoTracking&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; AsNoTracking&lt;class T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsNoTracking(Of T As Class) (source As IQueryable(Of T)) As IQueryable(Of T)" />
        <MemberSignature Language="F#" Value="static member AsNoTracking : System.Linq.IQueryable&lt;'T (requires 'T : null)&gt; -&gt; System.Linq.IQueryable&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="System.Data.Entity.QueryableExtensions.AsNoTracking source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The element type. </typeparam>
          <param name="source"> The source query. </param>
          <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext" />
            or <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.  This method works by calling the AsNoTracking method of the
            underlying query object.  If the underlying query object does not have an AsNoTracking method,
            then calling this method will have no affect.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="AsStreaming">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable AsStreaming (this System.Linq.IQueryable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable AsStreaming(class System.Linq.IQueryable source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AsStreaming(System.Linq.IQueryable)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStreaming (source As IQueryable) As IQueryable" />
        <MemberSignature Language="F#" Value="static member AsStreaming : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="System.Data.Entity.QueryableExtensions.AsStreaming source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable" /> to apply AsStreaming to.
            </param>
          <summary>
            Returns a new query that will stream the results instead of buffering. This method works by calling
            the AsStreaming method of the underlying query object. If the underlying query object does not have
            an AsStreaming method, then calling this method will have no affect.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AsStreaming(System.Linq.IQueryable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AsStreaming&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; AsStreaming&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; AsStreaming&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AsStreaming``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStreaming(Of T) (source As IQueryable(Of T)) As IQueryable(Of T)" />
        <MemberSignature Language="F#" Value="static member AsStreaming : System.Linq.IQueryable&lt;'T&gt; -&gt; System.Linq.IQueryable&lt;'T&gt;" Usage="System.Data.Entity.QueryableExtensions.AsStreaming source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to apply AsStreaming to.
            </param>
          <summary>
            Returns a new query that will stream the results instead of buffering. This method works by calling
            the AsStreaming method of the underlying query object. If the underlying query object does not have
            an AsStreaming method, then calling this method will have no affect.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AsStreaming``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; AverageAsync (this System.Linq.IQueryable&lt;decimal&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Decimal)) As Task(Of Decimal)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;decimal&gt; -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; AverageAsync (this System.Linq.IQueryable&lt;decimal&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Decimal&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;decimal&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;double&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;float64&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Double)) As Task(Of Double)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;double&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Double" /> values to calculate the average of.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Double" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;double&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;float64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;double&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Double" /> values to calculate the average of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Double" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;int&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;int32&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Integer)) As Task(Of Double)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;int&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Int32" /> values to calculate the average of.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;int&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;int32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Int32" /> values to calculate the average of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;long&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;int64&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Long)) As Task(Of Double)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;int64&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Int64" /> values to calculate the average of.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;long&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;int64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;int64&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Int64" /> values to calculate the average of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Nullable(Of Decimal))) As Task(Of Nullable(Of Decimal))" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Nullable(Of Double))) As Task(Of Nullable(Of Double))" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Nullable(Of Integer))) As Task(Of Nullable(Of Double))" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Nullable(Of Long))) As Task(Of Nullable(Of Double))" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;int64&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;int64&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Nullable(Of Single))) As Task(Of Nullable(Of Single))" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;single&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;single&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; AverageAsync (this System.Linq.IQueryable&lt;float&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; AverageAsync(class System.Linq.IQueryable`1&lt;float32&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Single)) As Task(Of Single)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;single&gt; -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Single" /> values to calculate the average of.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Single" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; AverageAsync (this System.Linq.IQueryable&lt;float&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; AverageAsync(class System.Linq.IQueryable`1&lt;float32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;single&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Single" /> values to calculate the average of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Single" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal))) As Task(Of Decimal)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, decimal&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, decimal&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float64&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double))) As Task(Of Double)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, double&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float64&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, double&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int32&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer))) As Task(Of Double)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int32&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int64&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long))) As Task(Of Double)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int64&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int64&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int64&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Decimal)))) As Task(Of Nullable(Of Decimal))" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;decimal&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;decimal&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Double)))) As Task(Of Nullable(Of Double))" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;double&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;double&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Integer)))) As Task(Of Nullable(Of Double))" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Long)))) As Task(Of Nullable(Of Double))" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int64&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int64&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Single)))) As Task(Of Nullable(Of Single))" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;single&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;single&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float32&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single))) As Task(Of Single)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, single&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="AverageAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float32&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, single&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source"> A sequence of values to calculate the average of. </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ContainsAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; ContainsAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; ContainsAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TSource item) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ContainsAsync(Of TSource) (source As IQueryable(Of TSource), item As TSource) As Task(Of Boolean)" />
        <MemberSignature Language="F#" Value="static member ContainsAsync : System.Linq.IQueryable&lt;'Source&gt; * 'Source -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.ContainsAsync (source, item)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="item" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <param name="item"> The object to locate in the sequence. </param>
          <summary>
            Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ContainsAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; ContainsAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource item, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; ContainsAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TSource item, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ContainsAsync : System.Linq.IQueryable&lt;'Source&gt; * 'Source * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.ContainsAsync (source, item, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="item" Type="TSource" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <param name="item"> The object to locate in the sequence. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="CountAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; CountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; CountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CountAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of Integer)" />
        <MemberSignature Language="F#" Value="static member CountAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.CountAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
          <summary>
            Asynchronously returns the number of elements in a sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="CountAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; CountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; CountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CountAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of Integer)" />
        <MemberSignature Language="F#" Value="static member CountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.CountAsync (source, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <summary>
            Asynchronously returns the number of elements in a sequence that satisfy a condition.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="CountAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; CountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; CountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member CountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.CountAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously returns the number of elements in a sequence that satisfy a condition.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="CountAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; CountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; CountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member CountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.CountAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously returns the number of elements in a sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of TSource)" />
        <MemberSignature Language="F#" Value="static member FirstAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
          <summary>
            Asynchronously returns the first element of a sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of TSource)" />
        <MemberSignature Language="F#" Value="static member FirstAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstAsync (source, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member FirstAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member FirstAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously returns the first element of a sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefaultAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of TSource)" />
        <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
          <summary>
            Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefaultAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of TSource)" />
        <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync (source, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition
            or a default value if no such element is found.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition
            or a default value if no such element is found.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="ForEachAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ForEachAsync (this System.Linq.IQueryable source, Action&lt;object&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ForEachAsync(class System.Linq.IQueryable source, class System.Action`1&lt;object&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForEachAsync (source As IQueryable, action As Action(Of Object)) As Task" />
        <MemberSignature Language="F#" Value="static member ForEachAsync : System.Linq.IQueryable * Action&lt;obj&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Data.Entity.QueryableExtensions.ForEachAsync (source, action)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
          <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        </Parameters>
        <Docs>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable" /> to enumerate.
            </param>
          <param name="action"> The action to perform on each element. </param>
          <summary>
            Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="ForEachAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ForEachAsync (this System.Linq.IQueryable source, Action&lt;object&gt; action, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ForEachAsync(class System.Linq.IQueryable source, class System.Action`1&lt;object&gt; action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ForEachAsync : System.Linq.IQueryable * Action&lt;obj&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Data.Entity.QueryableExtensions.ForEachAsync (source, action, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
          <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable" /> to enumerate.
            </param>
          <param name="action"> The action to perform on each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ForEachAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ForEachAsync&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source, Action&lt;T&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ForEachAsync&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source, class System.Action`1&lt;!!T&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForEachAsync(Of T) (source As IQueryable(Of T), action As Action(Of T)) As Task" />
        <MemberSignature Language="F#" Value="static member ForEachAsync : System.Linq.IQueryable&lt;'T&gt; * Action&lt;'T&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Data.Entity.QueryableExtensions.ForEachAsync (source, action)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
          <Parameter Name="action" Type="System.Action&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to enumerate.
            </param>
          <param name="action"> The action to perform on each element. </param>
          <summary>
            Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ForEachAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ForEachAsync&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source, Action&lt;T&gt; action, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ForEachAsync&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source, class System.Action`1&lt;!!T&gt; action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ForEachAsync : System.Linq.IQueryable&lt;'T&gt; * Action&lt;'T&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Data.Entity.QueryableExtensions.ForEachAsync (source, action, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
          <Parameter Name="action" Type="System.Action&lt;T&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to enumerate.
            </param>
          <param name="action"> The action to perform on each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="Include">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable Include (this System.Linq.IQueryable source, string path);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable Include(class System.Linq.IQueryable source, string path) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Include(System.Linq.IQueryable,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Include (source As IQueryable, path As String) As IQueryable" />
        <MemberSignature Language="F#" Value="static member Include : System.Linq.IQueryable * string -&gt; System.Linq.IQueryable" Usage="System.Data.Entity.QueryableExtensions.Include (source, path)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
          <Parameter Name="path" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="source">
            The source <see cref="T:System.Linq.IQueryable" /> on which to call Include.
            </param>
          <param name="path"> The dot-separated list of related objects to return in the query results. </param>
          <summary>
            Specifies the related objects to include in the query results.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.Include(System.Linq.IQueryable,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Include&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; Include&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source, string path);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; Include&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source, string path) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Include(Of T) (source As IQueryable(Of T), path As String) As IQueryable(Of T)" />
        <MemberSignature Language="F#" Value="static member Include : System.Linq.IQueryable&lt;'T&gt; * string -&gt; System.Linq.IQueryable&lt;'T&gt;" Usage="System.Data.Entity.QueryableExtensions.Include (source, path)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
          <Parameter Name="path" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The type of entity being queried. </typeparam>
          <param name="source">
            The source <see cref="T:System.Linq.IQueryable`1" /> on which to call Include.
            </param>
          <param name="path"> The dot-separated list of related objects to return in the query results. </param>
          <summary>
            Specifies the related objects to include in the query results.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Include&lt;T,TProperty&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; Include&lt;T,TProperty&gt; (this System.Linq.IQueryable&lt;T&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;T,TProperty&gt;&gt; path);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; Include&lt;T, TProperty&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, !!TProperty&gt;&gt; path) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Include(Of T, TProperty) (source As IQueryable(Of T), path As Expression(Of Func(Of T, TProperty))) As IQueryable(Of T)" />
        <MemberSignature Language="F#" Value="static member Include : System.Linq.IQueryable&lt;'T&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'T, 'Property&gt;&gt; -&gt; System.Linq.IQueryable&lt;'T&gt;" Usage="System.Data.Entity.QueryableExtensions.Include (source, path)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="TProperty" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
          <Parameter Name="path" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,TProperty&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The type of entity being queried. </typeparam>
          <typeparam name="TProperty"> The type of navigation property being included. </typeparam>
          <param name="source"> The source IQueryable on which to call Include. </param>
          <param name="path"> A lambda expression representing the path to include. </param>
          <summary>
            Specifies the related objects to include in the query results.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="Load">
        <MemberSignature Language="C#" Value="public static void Load (this System.Linq.IQueryable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Load(class System.Linq.IQueryable source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Load(System.Linq.IQueryable)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Load (source As IQueryable)" />
        <MemberSignature Language="F#" Value="static member Load : System.Linq.IQueryable -&gt; unit" Usage="System.Data.Entity.QueryableExtensions.Load source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source"> The source query. </param>
          <summary>
            Enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1" />,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, and others the results of the query will be loaded into the associated
            <see cref="T:System.Data.Entity.DbContext" />
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> or other cache on the client.
            This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.Load(System.Linq.IQueryable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="LoadAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task LoadAsync (this System.Linq.IQueryable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task LoadAsync(class System.Linq.IQueryable source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LoadAsync (source As IQueryable) As Task" />
        <MemberSignature Language="F#" Value="static member LoadAsync : System.Linq.IQueryable -&gt; System.Threading.Tasks.Task" Usage="System.Data.Entity.QueryableExtensions.LoadAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source"> The source query. </param>
          <summary>
            Asynchronously enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1" />,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, and others the results of the query will be loaded into the associated
            <see cref="T:System.Data.Entity.DbContext" />
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> or other cache on the client.
            This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="LoadAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task LoadAsync (this System.Linq.IQueryable source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task LoadAsync(class System.Linq.IQueryable source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member LoadAsync : System.Linq.IQueryable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Data.Entity.QueryableExtensions.LoadAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source"> The source query. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1" />,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, and others the results of the query will be loaded into the associated
            <see cref="T:System.Data.Entity.DbContext" />
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> or other cache on the client.
            This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LongCountAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; LongCountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; LongCountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCountAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of Long)" />
        <MemberSignature Language="F#" Value="static member LongCountAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.LongCountAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
          <summary>
            Asynchronously returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LongCountAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; LongCountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; LongCountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCountAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of Long)" />
        <MemberSignature Language="F#" Value="static member LongCountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.LongCountAsync (source, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <summary>
            Asynchronously returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence
            that satisfy a condition.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LongCountAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; LongCountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; LongCountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member LongCountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.LongCountAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
          <param name="predicate"> A function to test each element for a condition. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence
            that satisfy a condition.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LongCountAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; LongCountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; LongCountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member LongCountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.LongCountAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="MaxAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; MaxAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; MaxAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MaxAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of TSource)" />
        <MemberSignature Language="F#" Value="static member MaxAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.MaxAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
          <summary>
            Asynchronously returns the maximum value of a sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="MaxAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; MaxAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; MaxAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member MaxAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.MaxAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously returns the maximum value of a sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="MaxAsync&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; MaxAsync&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; MaxAsync&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MaxAsync(Of TSource, TResult) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As Task(Of TResult)" />
        <MemberSignature Language="F#" Value="static member MaxAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Data.Entity.QueryableExtensions.MaxAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TResult">
            The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="MaxAsync&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; MaxAsync&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; MaxAsync&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member MaxAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Data.Entity.QueryableExtensions.MaxAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TResult">
            The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="MinAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; MinAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; MinAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MinAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of TSource)" />
        <MemberSignature Language="F#" Value="static member MinAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.MinAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
          <summary>
            Asynchronously returns the minimum value of a sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="MinAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; MinAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; MinAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member MinAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.MinAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously returns the minimum value of a sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="MinAsync&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; MinAsync&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; MinAsync&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MinAsync(Of TSource, TResult) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As Task(Of TResult)" />
        <MemberSignature Language="F#" Value="static member MinAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Data.Entity.QueryableExtensions.MinAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TResult">
            The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="MinAsync&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; MinAsync&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; MinAsync&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member MinAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Data.Entity.QueryableExtensions.MinAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TResult">
            The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of TSource)" />
        <MemberSignature Language="F#" Value="static member SingleAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <summary>
            Asynchronously returns the only element of a sequence, and throws an exception
            if there is not exactly one element in the sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of TSource)" />
        <MemberSignature Language="F#" Value="static member SingleAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleAsync (source, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <param name="predicate"> A function to test an element for a condition. </param>
          <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified condition,
            and throws an exception if more than one such element exists.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SingleAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <param name="predicate"> A function to test an element for a condition. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified condition,
            and throws an exception if more than one such element exists.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SingleAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously returns the only element of a sequence, and throws an exception
            if there is not exactly one element in the sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefaultAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of TSource)" />
        <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <summary>
            Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;
            this method throws an exception if there is more than one element in the sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefaultAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of TSource)" />
        <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync (source, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <param name="predicate"> A function to test an element for a condition. </param>
          <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified condition or
            a default value if no such element exists; this method throws an exception if more than one element
            satisfies the condition.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync (source, predicate, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <param name="predicate"> A function to test an element for a condition. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified condition or
            a default value if no such element exists; this method throws an exception if more than one element
            satisfies the condition.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;
            this method throws an exception if there is more than one element in the sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Skip&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;int&gt;&gt; countAccessor);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`1&lt;int32&gt;&gt; countAccessor) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip(Of TSource) (source As IQueryable(Of TSource), countAccessor As Expression(Of Func(Of Integer))) As IQueryable(Of TSource)" />
        <MemberSignature Language="F#" Value="static member Skip : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;int&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.Skip (source, countAccessor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="countAccessor" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">The type of the elements of source.</typeparam>
          <param name="source">A sequence to return elements from.</param>
          <param name="countAccessor">An expression that evaluates to the number of elements to skip.</param>
          <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; SumAsync (this System.Linq.IQueryable&lt;decimal&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Decimal)) As Task(Of Decimal)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;decimal&gt; -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; SumAsync (this System.Linq.IQueryable&lt;decimal&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Decimal&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;decimal&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; SumAsync (this System.Linq.IQueryable&lt;double&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; SumAsync(class System.Linq.IQueryable`1&lt;float64&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Double)) As Task(Of Double)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;double&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Double" /> values to calculate the sum of.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Double" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; SumAsync (this System.Linq.IQueryable&lt;double&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; SumAsync(class System.Linq.IQueryable`1&lt;float64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;double&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Double" /> values to calculate the sum of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Double" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; SumAsync (this System.Linq.IQueryable&lt;int&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; SumAsync(class System.Linq.IQueryable`1&lt;int32&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Integer)) As Task(Of Integer)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;int&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; SumAsync (this System.Linq.IQueryable&lt;int&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; SumAsync(class System.Linq.IQueryable`1&lt;int32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; SumAsync (this System.Linq.IQueryable&lt;long&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; SumAsync(class System.Linq.IQueryable`1&lt;int64&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Long)) As Task(Of Long)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;int64&gt; -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; SumAsync (this System.Linq.IQueryable&lt;long&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; SumAsync(class System.Linq.IQueryable`1&lt;int64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;int64&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Nullable(Of Decimal))) As Task(Of Nullable(Of Decimal))" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Nullable(Of Double))) As Task(Of Nullable(Of Double))" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Nullable(Of Integer))) As Task(Of Nullable(Of Integer))" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;long&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Nullable(Of Long))) As Task(Of Nullable(Of Long))" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;int64&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int64&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int64&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;long&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;int64&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int64&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int64&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Nullable(Of Single))) As Task(Of Nullable(Of Single))" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;single&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;single&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; SumAsync (this System.Linq.IQueryable&lt;float&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; SumAsync(class System.Linq.IQueryable`1&lt;float32&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Single)) As Task(Of Single)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;single&gt; -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Single" /> values to calculate the sum of.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Single" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; SumAsync (this System.Linq.IQueryable&lt;float&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; SumAsync(class System.Linq.IQueryable`1&lt;float32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;single&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            A sequence of <see cref="T:System.Single" /> values to calculate the sum of.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Single" /> values.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal))) As Task(Of Decimal)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, decimal&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, decimal&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float64&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double))) As Task(Of Double)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, double&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float64&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, double&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int32&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer))) As Task(Of Integer)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int32&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int64&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long))) As Task(Of Long)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int64&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int64&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int64&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Decimal)))) As Task(Of Nullable(Of Decimal))" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;decimal&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;decimal&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Double)))) As Task(Of Nullable(Of Double))" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;double&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;double&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Integer)))) As Task(Of Nullable(Of Integer))" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;long&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Long)))) As Task(Of Nullable(Of Long))" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int64&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int64&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int64&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;long&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int64&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int64&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int64&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Single)))) As Task(Of Nullable(Of Single))" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;single&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;single&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float32&gt;&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single))) As Task(Of Single)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, single&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SumAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float32&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, single&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
          <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
          <param name="selector"> A projection function to apply to each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Take&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;int&gt;&gt; countAccessor);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`1&lt;int32&gt;&gt; countAccessor) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take(Of TSource) (source As IQueryable(Of TSource), countAccessor As Expression(Of Func(Of Integer))) As IQueryable(Of TSource)" />
        <MemberSignature Language="F#" Value="static member Take : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;int&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.Take (source, countAccessor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="countAccessor" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">The type of the elements of source.</typeparam>
          <param name="source">The sequence to return elements from.</param>
          <param name="countAccessor">An expression that evaluates to the number of elements 
            to return.</param>
          <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToArrayAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource[]&gt; ToArrayAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource[]&gt; ToArrayAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToArrayAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of TSource())" />
        <MemberSignature Language="F#" Value="static member ToArrayAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;'Source[]&gt;" Usage="System.Data.Entity.QueryableExtensions.ToArrayAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource[]&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create an array from.
            </param>
          <summary>
            Creates an array from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToArrayAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource[]&gt; ToArrayAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource[]&gt; ToArrayAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ToArrayAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source[]&gt;" Usage="System.Data.Entity.QueryableExtensions.ToArrayAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TSource[]&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create an array from.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Creates an array from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToDictionaryAsync&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt; ToDictionaryAsync&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt;&gt; ToDictionaryAsync&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionaryAsync(Of TSource, TKey) (source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey)) As Task(Of Dictionary(Of TKey, TSource))" />
        <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
          <param name="keySelector"> A function to extract a key from each element. </param>
          <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector function.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToDictionaryAsync&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt; ToDictionaryAsync&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt;&gt; ToDictionaryAsync&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionaryAsync(Of TSource, TKey) (source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As Task(Of Dictionary(Of TKey, TSource))" />
        <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector, comparer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
          <param name="keySelector"> A function to extract a key from each element. </param>
          <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
          <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector function and a comparer.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToDictionaryAsync&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt; ToDictionaryAsync&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt;&gt; ToDictionaryAsync&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector, comparer, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
          <param name="keySelector"> A function to extract a key from each element. </param>
          <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector function and a comparer.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToDictionaryAsync&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt; ToDictionaryAsync&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt;&gt; ToDictionaryAsync&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
          <param name="keySelector"> A function to extract a key from each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector function.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToDictionaryAsync&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt;&gt; ToDictionaryAsync&lt;TSource, TKey, TElement&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionaryAsync(Of TSource, TKey, TElement) (source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Task(Of Dictionary(Of TKey, TElement))" />
        <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector, elementSelector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
          <typeparam name="TElement">
            The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
          <param name="keySelector"> A function to extract a key from each element. </param>
          <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
          <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector and an element selector function.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToDictionaryAsync&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt;&gt; ToDictionaryAsync&lt;TSource, TKey, TElement&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionaryAsync(Of TSource, TKey, TElement) (source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As Task(Of Dictionary(Of TKey, TElement))" />
        <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector, elementSelector, comparer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
          <typeparam name="TElement">
            The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
          <param name="keySelector"> A function to extract a key from each element. </param>
          <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
          <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
          <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector function, a comparer, and an element selector function.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToDictionaryAsync&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt;&gt; ToDictionaryAsync&lt;TSource, TKey, TElement&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector, elementSelector, comparer, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
          <typeparam name="TElement">
            The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
          <param name="keySelector"> A function to extract a key from each element. </param>
          <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
          <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector function, a comparer, and an element selector function.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToDictionaryAsync&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt;&gt; ToDictionaryAsync&lt;TSource, TKey, TElement&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector, elementSelector, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
          <typeparam name="TElement">
            The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
          <param name="keySelector"> A function to extract a key from each element. </param>
          <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector and an element selector function.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="ToListAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;object&gt;&gt; ToListAsync (this System.Linq.IQueryable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;object&gt;&gt; ToListAsync(class System.Linq.IQueryable source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToListAsync (source As IQueryable) As Task(Of List(Of Object))" />
        <MemberSignature Language="F#" Value="static member ToListAsync : System.Linq.IQueryable -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;obj&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToListAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Object&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.
            </param>
          <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Linq.IQueryable" /> by enumerating it asynchronously.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="ToListAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;object&gt;&gt; ToListAsync (this System.Linq.IQueryable source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;object&gt;&gt; ToListAsync(class System.Linq.IQueryable source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ToListAsync : System.Linq.IQueryable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;obj&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToListAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Object&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Linq.IQueryable" /> by enumerating it asynchronously.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToListAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TSource&gt;&gt; ToListAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;!!TSource&gt;&gt; ToListAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToListAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of List(Of TSource))" />
        <MemberSignature Language="F#" Value="static member ToListAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;'Source&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToListAsync source" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.
            </param>
          <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ToListAsync&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TSource&gt;&gt; ToListAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;!!TSource&gt;&gt; ToListAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ToListAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;'Source&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToListAsync (source, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
          <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a list from.
            </param>
          <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
          <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.QueryableExtensions" Member="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Threading.Tasks.Task" />
      </Targets>
      <Member MemberName="WithCurrentCulture">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.SqlServer.Utilities.TaskExtensions.CultureAwaiter WithCurrentCulture (this System.Threading.Tasks.Task task);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Data.Entity.SqlServer.Utilities.TaskExtensions/CultureAwaiter WithCurrentCulture(class System.Threading.Tasks.Task task) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.SqlServer.Utilities.TaskExtensions.WithCurrentCulture(System.Threading.Tasks.Task)" />
        <MemberSignature Language="F#" Value="static member WithCurrentCulture : System.Threading.Tasks.Task -&gt; System.Data.Entity.SqlServer.Utilities.TaskExtensions.CultureAwaiter" Usage="System.Data.Entity.SqlServer.Utilities.TaskExtensions.WithCurrentCulture task" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.SqlServer.Utilities.TaskExtensions+CultureAwaiter</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="task" Type="System.Threading.Tasks.Task" RefType="this" />
        </Parameters>
        <Docs>
          <param name="task">The task to be awaited on.</param>
          <summary>
            Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" /> to avoid
            marshalling the continuation
            back to the original context, but preserve the current culture and UI culture.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.SqlServer.Utilities.TaskExtensions" Member="M:System.Data.Entity.SqlServer.Utilities.TaskExtensions.WithCurrentCulture(System.Threading.Tasks.Task)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Threading.Tasks.Task`1" />
      </Targets>
      <Member MemberName="WithCurrentCulture&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.SqlServer.Utilities.TaskExtensions.CultureAwaiter&lt;T&gt; WithCurrentCulture&lt;T&gt; (this System.Threading.Tasks.Task&lt;T&gt; task);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Data.Entity.SqlServer.Utilities.TaskExtensions/CultureAwaiter`1&lt;!!T&gt; WithCurrentCulture&lt;T&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; task) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.SqlServer.Utilities.TaskExtensions.WithCurrentCulture``1(System.Threading.Tasks.Task{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithCurrentCulture(Of T) (task As Task(Of T)) As TaskExtensions.CultureAwaiter(Of T)" />
        <MemberSignature Language="F#" Value="static member WithCurrentCulture : System.Threading.Tasks.Task&lt;'T&gt; -&gt; System.Data.Entity.SqlServer.Utilities.TaskExtensions.CultureAwaiter&lt;'T&gt;" Usage="System.Data.Entity.SqlServer.Utilities.TaskExtensions.WithCurrentCulture task" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.SqlServer.Utilities.TaskExtensions+CultureAwaiter&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The type of the result produced by the associated <see cref="T:System.Threading.Tasks.Task`1" />.
            </typeparam>
          <param name="task">The task to be awaited on.</param>
          <summary>
            Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1" /> to avoid
            marshalling the continuation
            back to the original context, but preserve the current culture and UI culture.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.SqlServer.Utilities.TaskExtensions" Member="M:System.Data.Entity.SqlServer.Utilities.TaskExtensions.WithCurrentCulture``1(System.Threading.Tasks.Task{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Threading.Tasks.Task" />
      </Targets>
      <Member MemberName="WithCurrentCulture">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter WithCurrentCulture (this System.Threading.Tasks.Task task);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Data.Entity.Utilities.TaskExtensions/CultureAwaiter WithCurrentCulture(class System.Threading.Tasks.Task task) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture(System.Threading.Tasks.Task)" />
        <MemberSignature Language="F#" Value="static member WithCurrentCulture : System.Threading.Tasks.Task -&gt; System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter" Usage="System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture task" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Utilities.TaskExtensions+CultureAwaiter</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="task" Type="System.Threading.Tasks.Task" RefType="this" />
        </Parameters>
        <Docs>
          <param name="task">The task to be awaited on.</param>
          <summary>
            Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" /> to avoid
            marshalling the continuation
            back to the original context, but preserve the current culture and UI culture.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Utilities.TaskExtensions" Member="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture(System.Threading.Tasks.Task)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Threading.Tasks.Task`1" />
      </Targets>
      <Member MemberName="WithCurrentCulture&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter&lt;T&gt; WithCurrentCulture&lt;T&gt; (this System.Threading.Tasks.Task&lt;T&gt; task);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Data.Entity.Utilities.TaskExtensions/CultureAwaiter`1&lt;!!T&gt; WithCurrentCulture&lt;T&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; task) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture``1(System.Threading.Tasks.Task{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithCurrentCulture(Of T) (task As Task(Of T)) As TaskExtensions.CultureAwaiter(Of T)" />
        <MemberSignature Language="F#" Value="static member WithCurrentCulture : System.Threading.Tasks.Task&lt;'T&gt; -&gt; System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter&lt;'T&gt;" Usage="System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture task" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Entity.Utilities.TaskExtensions+CultureAwaiter&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The type of the result produced by the associated <see cref="T:System.Threading.Tasks.Task`1" />.
            </typeparam>
          <param name="task">The task to be awaited on.</param>
          <summary>
            Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1" /> to avoid
            marshalling the continuation
            back to the original context, but preserve the current culture and UI culture.
            </summary>
        </Docs>
        <Link Type="System.Data.Entity.Utilities.TaskExtensions" Member="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture``1(System.Threading.Tasks.Task{``0})" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
