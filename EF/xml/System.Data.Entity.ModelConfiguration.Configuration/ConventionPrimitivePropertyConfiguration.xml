<Type Name="ConventionPrimitivePropertyConfiguration" FullName="System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration">
  <TypeSignature Language="C#" Value="public class ConventionPrimitivePropertyConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConventionPrimitivePropertyConfiguration extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />
  <TypeSignature Language="VB.NET" Value="Public Class ConventionPrimitivePropertyConfiguration" />
  <TypeSignature Language="F#" Value="type ConventionPrimitivePropertyConfiguration = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Used to configure a primitive property of an entity type or complex type.
            This configuration functionality is available via lightweight conventions.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ClrPropertyInfo">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.PropertyInfo ClrPropertyInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.PropertyInfo ClrPropertyInfo" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ClrPropertyInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ClrPropertyInfo As PropertyInfo" />
      <MemberSignature Language="F#" Value="member this.ClrPropertyInfo : System.Reflection.PropertyInfo" Usage="System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ClrPropertyInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo" /> for this property.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="conventionPrimitivePropertyConfiguration.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="conventionPrimitivePropertyConfiguration.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="conventionPrimitivePropertyConfiguration.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the <see cref="T:System.Type" /> of the current instance.
            </summary>
        <returns>The exact runtime type of the current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasColumnAnnotation">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasColumnAnnotation (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasColumnAnnotation(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasColumnAnnotation (name As String, value As Object) As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member HasColumnAnnotation : string * obj -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.HasColumnAnnotation : string * obj -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.HasColumnAnnotation (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
        <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
        <summary>
            Sets an annotation in the model for the database column used to store the property. The annotation
            value can later be used when processing the column such as when creating migrations.
            </summary>
        <returns>The same configuration instance so that multiple calls can be chained.</returns>
        <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> if the type of
            the annotation value is anything other than a string. Calling this method will have no effect if the 
            annotation with the given name has already been configured.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasColumnName">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasColumnName (string columnName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasColumnName(string columnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasColumnName (columnName As String) As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member HasColumnName : string -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.HasColumnName : string -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.HasColumnName columnName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName"> The name of the column. </param>
        <summary>
            Configures the name of the database column used to store the property.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasColumnOrder">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasColumnOrder (int columnOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasColumnOrder(int32 columnOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnOrder(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasColumnOrder (columnOrder As Integer) As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member HasColumnOrder : int -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.HasColumnOrder : int -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.HasColumnOrder columnOrder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnOrder"> The order that this column should appear in the database table. </param>
        <summary>
            Configures the order of the database column used to store the property.
            This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasColumnType">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasColumnType (string columnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasColumnType(string columnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasColumnType (columnType As String) As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member HasColumnType : string -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.HasColumnType : string -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.HasColumnType columnType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnType"> Name of the database provider specific data type. </param>
        <summary>
            Configures the data type of the database column used to store the property.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDatabaseGeneratedOption">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasDatabaseGeneratedOption (System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption databaseGeneratedOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasDatabaseGeneratedOption(valuetype System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption databaseGeneratedOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)" />
      <MemberSignature Language="F#" Value="abstract member HasDatabaseGeneratedOption : System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.HasDatabaseGeneratedOption : System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.HasDatabaseGeneratedOption databaseGeneratedOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseGeneratedOption" Type="System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption" />
      </Parameters>
      <Docs>
        <param name="databaseGeneratedOption"> The pattern used to generate values for the property in the database. </param>
        <summary>
            Configures how values for the property are generated by the database.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMaxLength">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasMaxLength (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasMaxLength(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasMaxLength(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasMaxLength (maxLength As Integer) As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member HasMaxLength : int -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.HasMaxLength : int -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.HasMaxLength maxLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength"> The maximum length for the property. </param>
        <summary>
            Configures the property to have the specified maximum length.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            This method throws if the property does not have length facets.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasParameterName">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasParameterName (string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasParameterName(string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasParameterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasParameterName (parameterName As String) As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member HasParameterName : string -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.HasParameterName : string -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.HasParameterName parameterName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameterName">Name of the parameter.</param>
        <summary>
            Configures the name of the parameter used in stored procedures for this property.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrecision">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasPrecision (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasPrecision(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPrecision (value As Byte) As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member HasPrecision : byte -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.HasPrecision : byte -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.HasPrecision value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"> Precision of the property. </param>
        <summary>
            Configures the precision of the <see cref="T:System.DateTime" /> property.
            If the database provider does not support precision for the data type of the column then the value is ignored.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            This method will throw if the property is not a <see cref="T:System.DateTime" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrecision">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasPrecision (byte precision, byte scale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration HasPrecision(unsigned int8 precision, unsigned int8 scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPrecision (precision As Byte, scale As Byte) As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member HasPrecision : byte * byte -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.HasPrecision : byte * byte -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.HasPrecision (precision, scale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precision" Type="System.Byte" />
        <Parameter Name="scale" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="precision"> The precision of the property. </param>
        <param name="scale"> The scale of the property. </param>
        <summary>
            Configures the precision and scale of the <see cref="T:System.Decimal" /> property.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            This method will throw if the property is not a <see cref="T:System.Decimal" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConcurrencyToken">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsConcurrencyToken ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsConcurrencyToken() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsConcurrencyToken () As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member IsConcurrencyToken : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.IsConcurrencyToken : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.IsConcurrencyToken " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Configures the property to be used as an optimistic concurrency token.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConcurrencyToken">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsConcurrencyToken (bool concurrencyToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsConcurrencyToken(bool concurrencyToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsConcurrencyToken (concurrencyToken As Boolean) As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member IsConcurrencyToken : bool -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.IsConcurrencyToken : bool -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.IsConcurrencyToken concurrencyToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="concurrencyToken" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="concurrencyToken"> Value indicating if the property is a concurrency token or not. </param>
        <summary>
            Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFixedLength">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsFixedLength ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsFixedLength() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsFixedLength" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsFixedLength () As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member IsFixedLength : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.IsFixedLength : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.IsFixedLength " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Configures the property to be fixed length.
            Use HasMaxLength to set the length that the property is fixed to.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            This method throws if the property does not have length facets.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKey">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsKey () As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member IsKey : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.IsKey : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.IsKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Configures this property to be part of the entity type's primary key.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that
            multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMaxLength">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsMaxLength ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsMaxLength() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsMaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsMaxLength () As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member IsMaxLength : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.IsMaxLength : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.IsMaxLength " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Configures the property to allow the maximum length supported by the database provider.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            This method throws if the property does not have length facets.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOptional">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsOptional ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsOptional() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsOptional" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsOptional () As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member IsOptional : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.IsOptional : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.IsOptional " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Configures the property to be optional.
            The database column used to store this property will be nullable.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRequired">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsRequired ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsRequired() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRequired" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsRequired () As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member IsRequired : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.IsRequired : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.IsRequired " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Configures the property to be required.
            The database column used to store this property will be non-nullable.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRowVersion">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsRowVersion ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsRowVersion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRowVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsRowVersion () As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member IsRowVersion : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.IsRowVersion : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.IsRowVersion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Configures the property to be a row version in the database.
            The actual data type will vary depending on the database provider being used.
            Setting the property to be a row version will automatically configure it to be an
            optimistic concurrency token.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            This method throws if the property is not a <see cref="T:System.Byte[]" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicode">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsUnicode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsUnicode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsUnicode () As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member IsUnicode : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.IsUnicode : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.IsUnicode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Configures the property to support Unicode string content.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            This method throws if the property is not a <see cref="T:System.String" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicode">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsUnicode (bool unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsUnicode(bool unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsUnicode (unicode As Boolean) As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member IsUnicode : bool -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.IsUnicode : bool -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.IsUnicode unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="unicode"> Value indicating if the property supports Unicode string content or not. </param>
        <summary>
            Configures whether or not the property supports Unicode string content.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            This method throws if the property is not a <see cref="T:System.String" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVariableLength">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsVariableLength ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration IsVariableLength() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsVariableLength" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsVariableLength () As ConventionPrimitivePropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member IsVariableLength : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration&#xA;override this.IsVariableLength : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" Usage="conventionPrimitivePropertyConfiguration.IsVariableLength " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Configures the property to be variable length.
            Properties are variable length by default.
            </summary>
        <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>
            Calling this will have no effect once it has been configured.
            This method throws if the property does not have length facets.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="conventionPrimitivePropertyConfiguration.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>