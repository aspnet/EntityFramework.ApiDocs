<Type Name="ObjectStateEntry" FullName="System.Data.Entity.Core.Objects.ObjectStateEntry">
  <TypeSignature Language="C#" Value="public abstract class ObjectStateEntry : System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ObjectStateEntry extends System.Object implements class System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ObjectStateEntry&#xA;Implements IEntityChangeTracker" />
  <TypeSignature Language="F#" Value="type ObjectStateEntry = class&#xA;    interface IEntityChangeTracker" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents either a entity, entity stub or relationship
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AcceptChanges">
      <MemberSignature Language="C#" Value="public abstract void AcceptChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AcceptChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.AcceptChanges" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AcceptChanges ()" />
      <MemberSignature Language="F#" Value="abstract member AcceptChanges : unit -&gt; unit" Usage="objectStateEntry.AcceptChanges " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Core.IEntityStateEntry.AcceptChanges</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Accepts the current values as original values.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyCurrentValues">
      <MemberSignature Language="C#" Value="public abstract void ApplyCurrentValues (object currentEntity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyCurrentValues(object currentEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ApplyCurrentValues (currentEntity As Object)" />
      <MemberSignature Language="F#" Value="abstract member ApplyCurrentValues : obj -&gt; unit" Usage="objectStateEntry.ApplyCurrentValues currentEntity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentEntity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="currentEntity">The detached object that has updated values to apply to the object.  currentEntity  can also be the object’s entity key.</param>
        <summary>Sets the current values of the entry to match the property values of a supplied object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyOriginalValues">
      <MemberSignature Language="C#" Value="public abstract void ApplyOriginalValues (object originalEntity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyOriginalValues(object originalEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ApplyOriginalValues (originalEntity As Object)" />
      <MemberSignature Language="F#" Value="abstract member ApplyOriginalValues : obj -&gt; unit" Usage="objectStateEntry.ApplyOriginalValues originalEntity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalEntity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="originalEntity">The detached object that has original values to apply to the object.  originalEntity  can also be the object’s entity key.</param>
        <summary>Sets the original values of the entry to match the property values of a supplied object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeState">
      <MemberSignature Language="C#" Value="public abstract void ChangeState (System.Data.Entity.EntityState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ChangeState(valuetype System.Data.Entity.EntityState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ChangeState(System.Data.Entity.EntityState)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ChangeState (state As EntityState)" />
      <MemberSignature Language="F#" Value="abstract member ChangeState : System.Data.Entity.EntityState -&gt; unit" Usage="objectStateEntry.ChangeState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Data.Entity.EntityState" />
      </Parameters>
      <Docs>
        <param name="state">
            The <see cref="T:System.Data.Entity.EntityState" /> value to set for the
            <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State" />
            property of the entry.
            </param>
        <summary>
            Changes state of the entry to the specified <see cref="T:System.Data.Entity.EntityState" /> value.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentValues">
      <MemberSignature Language="C#" Value="public abstract System.Data.Entity.Core.Objects.CurrentValueRecord CurrentValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.Core.Objects.CurrentValueRecord CurrentValues" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectStateEntry.CurrentValues" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CurrentValues As CurrentValueRecord" />
      <MemberSignature Language="F#" Value="member this.CurrentValues : System.Data.Entity.Core.Objects.CurrentValueRecord" Usage="System.Data.Entity.Core.Objects.ObjectStateEntry.CurrentValues" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Entity.Core.IEntityStateEntry.CurrentValues</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.CurrentValueRecord</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the current property values of the object or relationship associated with this
            <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            .
            </summary>
        <value>
            A <see cref="T:System.Data.Entity.Core.Objects.CurrentValueRecord" /> that contains the current values of the object or relationship associated with this
            <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            .
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public abstract void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.Delete" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Delete ()" />
      <MemberSignature Language="F#" Value="abstract member Delete : unit -&gt; unit" Usage="objectStateEntry.Delete " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Core.IEntityStateEntry.Delete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Marks an entity as deleted.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity">
      <MemberSignature Language="C#" Value="public abstract object Entity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Entity" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectStateEntry.Entity" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Entity As Object" />
      <MemberSignature Language="F#" Value="member this.Entity : obj" Usage="System.Data.Entity.Core.Objects.ObjectStateEntry.Entity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the entity object.</summary>
        <value>The entity object.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityKey">
      <MemberSignature Language="C#" Value="public abstract System.Data.Entity.Core.EntityKey EntityKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.Core.EntityKey EntityKey" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property EntityKey As EntityKey" />
      <MemberSignature Language="F#" Value="member this.EntityKey : System.Data.Entity.Core.EntityKey" Usage="System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.EntityKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the entity key.</summary>
        <value>The entity key.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntitySet">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.Metadata.Edm.EntitySetBase EntitySet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.Core.Metadata.Edm.EntitySetBase EntitySet" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntitySet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntitySet As EntitySetBase" />
      <MemberSignature Language="F#" Value="member this.EntitySet : System.Data.Entity.Core.Metadata.Edm.EntitySetBase" Usage="System.Data.Entity.Core.Objects.ObjectStateEntry.EntitySet" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Entity.Core.IEntityStateEntry.EntitySet</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Metadata.Edm.EntitySetBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> for the object or relationship.
            </summary>
        <value>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> for the object or relationship.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedProperties">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;string&gt; GetModifiedProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetModifiedProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetModifiedProperties" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetModifiedProperties () As IEnumerable(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetModifiedProperties : unit -&gt; seq&lt;string&gt;" Usage="objectStateEntry.GetModifiedProperties " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Core.IEntityStateEntry.GetModifiedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the names of an object’s properties that have changed since the last time
            <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />
            was called.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of names as string.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUpdatableOriginalValues">
      <MemberSignature Language="C#" Value="public abstract System.Data.Entity.Core.Objects.OriginalValueRecord GetUpdatableOriginalValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Core.Objects.OriginalValueRecord GetUpdatableOriginalValues() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetUpdatableOriginalValues" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUpdatableOriginalValues () As OriginalValueRecord" />
      <MemberSignature Language="F#" Value="abstract member GetUpdatableOriginalValues : unit -&gt; System.Data.Entity.Core.Objects.OriginalValueRecord" Usage="objectStateEntry.GetUpdatableOriginalValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.OriginalValueRecord</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the updatable version of original values of the object associated with this
            <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            .
            </summary>
        <returns>The updatable original values of object data.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPropertyChanged">
      <MemberSignature Language="C#" Value="public abstract bool IsPropertyChanged (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPropertyChanged(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.IsPropertyChanged(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsPropertyChanged (propertyName As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsPropertyChanged : string -&gt; bool" Usage="objectStateEntry.IsPropertyChanged propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property.</param>
        <summary>Uses DetectChanges to determine whether or not the current value of the property with the given name is different from its original value. Note that this may be different from the property being marked as modified since a property which has not changed can still be marked as modified.</summary>
        <returns>true if the property has changed; otherwise, false.</returns>
        <remarks>
            Note that this property always returns the same result as the modified state of the property for change tracking 
            proxies and entities that derive from the EntityObject base class. This is because original values are not tracked 
            for these entity types and hence there is no way to know if the current value is really different from the 
            original value.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRelationship">
      <MemberSignature Language="C#" Value="public abstract bool IsRelationship { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRelationship" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectStateEntry.IsRelationship" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsRelationship As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsRelationship : bool" Usage="System.Data.Entity.Core.Objects.ObjectStateEntry.IsRelationship" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Entity.Core.IEntityStateEntry.IsRelationship</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates whether the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> represents a relationship.
            </summary>
        <value>
            true if the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> represents a relationship; otherwise, false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectStateManager">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.Objects.ObjectStateManager ObjectStateManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.Core.Objects.ObjectStateManager ObjectStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectStateEntry.ObjectStateManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ObjectStateManager As ObjectStateManager" />
      <MemberSignature Language="F#" Value="member this.ObjectStateManager : System.Data.Entity.Core.Objects.ObjectStateManager" Usage="System.Data.Entity.Core.Objects.ObjectStateEntry.ObjectStateManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.ObjectStateManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> for the
            <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            .
            </summary>
        <value>
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> for the
            <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            .
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalValues">
      <MemberSignature Language="C#" Value="public abstract System.Data.Common.DbDataRecord OriginalValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbDataRecord OriginalValues" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property OriginalValues As DbDataRecord" />
      <MemberSignature Language="F#" Value="member this.OriginalValues : System.Data.Common.DbDataRecord" Usage="System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Entity.Core.IEntityStateEntry.OriginalValues</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataRecord</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the read-only version of original values of the object or relationship.</summary>
        <value>The read-only version of original values of the relationship set entry or entity.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectPropertyChanges">
      <MemberSignature Language="C#" Value="public abstract void RejectPropertyChanges (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RejectPropertyChanges(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.RejectPropertyChanges(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub RejectPropertyChanges (propertyName As String)" />
      <MemberSignature Language="F#" Value="abstract member RejectPropertyChanges : string -&gt; unit" Usage="objectStateEntry.RejectPropertyChanges propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property to change.</param>
        <summary>Rejects any changes made to the property with the given name since the property was last loaded, attached, saved, or changes were accepted. The original value of the property is stored and the property will no longer be marked as modified.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RelationshipManager">
      <MemberSignature Language="C#" Value="public abstract System.Data.Entity.Core.Objects.DataClasses.RelationshipManager RelationshipManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.Core.Objects.DataClasses.RelationshipManager RelationshipManager" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectStateEntry.RelationshipManager" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property RelationshipManager As RelationshipManager" />
      <MemberSignature Language="F#" Value="member this.RelationshipManager : System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" Usage="System.Data.Entity.Core.Objects.ObjectStateEntry.RelationshipManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.DataClasses.RelationshipManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> instance for the object represented by entry.
            </summary>
        <value>
            The <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> object.
            </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The entry is a stub or represents a relationship</exception>
      </Docs>
    </Member>
    <Member MemberName="SetModified">
      <MemberSignature Language="C#" Value="public abstract void SetModified ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetModified() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModified" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetModified ()" />
      <MemberSignature Language="F#" Value="abstract member SetModified : unit -&gt; unit" Usage="objectStateEntry.SetModified " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Core.IEntityStateEntry.SetModified</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the state of the object or relationship to modify.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">If State is not Modified or Unchanged</exception>
      </Docs>
    </Member>
    <Member MemberName="SetModifiedProperty">
      <MemberSignature Language="C#" Value="public abstract void SetModifiedProperty (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetModifiedProperty(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModifiedProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetModifiedProperty (propertyName As String)" />
      <MemberSignature Language="F#" Value="abstract member SetModifiedProperty : string -&gt; unit" Usage="objectStateEntry.SetModifiedProperty propertyName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Core.IEntityStateEntry.SetModifiedProperty(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property.</param>
        <summary>Marks the specified property as modified.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"> If State is not Modified or Unchanged </exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Data.Entity.EntityState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.Entity.EntityState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As EntityState" />
      <MemberSignature Language="F#" Value="member this.State : System.Data.Entity.EntityState" Usage="System.Data.Entity.Core.Objects.ObjectStateEntry.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.EntityState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the state of the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.
            </summary>
        <value>
            The state of the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged">
      <MemberSignature Language="C#" Value="void IEntityChangeTracker.EntityComplexMemberChanged (string entityMemberName, object complexObject, string complexObjectMemberName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(string entityMemberName, object complexObject, string complexObjectMemberName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub EntityComplexMemberChanged (entityMemberName As String, complexObject As Object, complexObjectMemberName As String) Implements IEntityChangeTracker.EntityComplexMemberChanged" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityMemberName" Type="System.String" />
        <Parameter Name="complexObject" Type="System.Object" />
        <Parameter Name="complexObjectMemberName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityMemberName"> The name of the top-level entity property that has changed </param>
        <param name="complexObject"> The complex object that contains the property that changed </param>
        <param name="complexObjectMemberName"> The name of the property that changed on complexObject </param>
        <summary>
            Used to report that a complex property has been changed
            The property value that was cached during EntityMemberChanging is now added to OriginalValues
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging">
      <MemberSignature Language="C#" Value="void IEntityChangeTracker.EntityComplexMemberChanging (string entityMemberName, object complexObject, string complexObjectMemberName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(string entityMemberName, object complexObject, string complexObjectMemberName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub EntityComplexMemberChanging (entityMemberName As String, complexObject As Object, complexObjectMemberName As String) Implements IEntityChangeTracker.EntityComplexMemberChanging" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityMemberName" Type="System.String" />
        <Parameter Name="complexObject" Type="System.Object" />
        <Parameter Name="complexObjectMemberName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityMemberName"> The name of the top-level entity property that is changing </param>
        <param name="complexObject"> The complex object that contains the property that is changing </param>
        <param name="complexObjectMemberName"> The name of the property that is changing on complexObject </param>
        <summary>
            Used to report that a complex property is about to change
            The current value of the specified property is cached when this method is called.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged">
      <MemberSignature Language="C#" Value="void IEntityChangeTracker.EntityMemberChanged (string entityMemberName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(string entityMemberName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub EntityMemberChanged (entityMemberName As String) Implements IEntityChangeTracker.EntityMemberChanged" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityMemberName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityMemberName"> The name of the entity property that has changing </param>
        <summary>
            Used to report that a scalar entity property has been changed
            The property value that was cached during EntityMemberChanging is now
            added to OriginalValues
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging">
      <MemberSignature Language="C#" Value="void IEntityChangeTracker.EntityMemberChanging (string entityMemberName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(string entityMemberName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub EntityMemberChanging (entityMemberName As String) Implements IEntityChangeTracker.EntityMemberChanging" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityMemberName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityMemberName"> The name of the entity property that is changing </param>
        <summary>
            Used to report that a scalar entity property is about to change
            The current value of the specified property is cached when this method is called.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <MemberSignature Language="C#" Value="System.Data.Entity.EntityState System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.Entity.EntityState System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityState" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property EntityState As EntityState Implements IEntityChangeTracker.EntityState" />
      <MemberSignature Language="F#" Usage="System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.EntityState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the EntityState from the ObjectStateEntry
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>