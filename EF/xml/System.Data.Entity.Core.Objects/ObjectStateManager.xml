<Type Name="ObjectStateManager" FullName="System.Data.Entity.Core.Objects.ObjectStateManager">
  <TypeSignature Language="C#" Value="public class ObjectStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectStateManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Core.Objects.ObjectStateManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectStateManager" />
  <TypeSignature Language="F#" Value="type ObjectStateManager = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Maintains object state and identity management for entity type instances and relationship instances.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectStateManager (System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace metadataWorkspace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace metadataWorkspace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateManager.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.Core.Objects.ObjectStateManager : System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace -&gt; System.Data.Entity.Core.Objects.ObjectStateManager" Usage="new System.Data.Entity.Core.Objects.ObjectStateManager metadataWorkspace" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="metadataWorkspace" Type="System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />
      </Parameters>
      <Docs>
        <param name="metadataWorkspace">
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, which supplies mapping and metadata information.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeObjectState">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Core.Objects.ObjectStateEntry ChangeObjectState (object entity, System.Data.Entity.EntityState entityState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Core.Objects.ObjectStateEntry ChangeObjectState(object entity, valuetype System.Data.Entity.EntityState entityState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.Entity.EntityState)" />
      <MemberSignature Language="F#" Value="abstract member ChangeObjectState : obj * System.Data.Entity.EntityState -&gt; System.Data.Entity.Core.Objects.ObjectStateEntry&#xA;override this.ChangeObjectState : obj * System.Data.Entity.EntityState -&gt; System.Data.Entity.Core.Objects.ObjectStateEntry" Usage="objectStateManager.ChangeObjectState (entity, entityState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.ObjectStateEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="entityState" Type="System.Data.Entity.EntityState" />
      </Parameters>
      <Docs>
        <param name="entity">The object for which the state must be changed.</param>
        <param name="entityState">The new state of the object.</param>
        <summary>
            Changes state of the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for a specific object to the specified  entityState .
            </summary>
        <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the supplied  entity .
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When  entity  is null.</exception>
        <exception cref="T:System.InvalidOperationException">
            When the object is not detached and does not have an entry in the state manager
            or when you try to change the state to <see cref="F:System.Data.Entity.EntityState.Detached" />
            from any other <see cref="T:System.Data.Entity.EntityState" />
            or when  state  is not a valid <see cref="T:System.Data.Entity.EntityState" /> value.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeRelationshipState">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Core.Objects.ObjectStateEntry ChangeRelationshipState (object sourceEntity, object targetEntity, string navigationProperty, System.Data.Entity.EntityState relationshipState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Core.Objects.ObjectStateEntry ChangeRelationshipState(object sourceEntity, object targetEntity, string navigationProperty, valuetype System.Data.Entity.EntityState relationshipState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.Entity.EntityState)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ChangeRelationshipState (sourceEntity As Object, targetEntity As Object, navigationProperty As String, relationshipState As EntityState) As ObjectStateEntry" />
      <MemberSignature Language="F#" Value="abstract member ChangeRelationshipState : obj * obj * string * System.Data.Entity.EntityState -&gt; System.Data.Entity.Core.Objects.ObjectStateEntry&#xA;override this.ChangeRelationshipState : obj * obj * string * System.Data.Entity.EntityState -&gt; System.Data.Entity.Core.Objects.ObjectStateEntry" Usage="objectStateManager.ChangeRelationshipState (sourceEntity, targetEntity, navigationProperty, relationshipState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.ObjectStateEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceEntity" Type="System.Object" />
        <Parameter Name="targetEntity" Type="System.Object" />
        <Parameter Name="navigationProperty" Type="System.String" />
        <Parameter Name="relationshipState" Type="System.Data.Entity.EntityState" />
      </Parameters>
      <Docs>
        <param name="sourceEntity">
            The object instance or <see cref="T:System.Data.Entity.Core.EntityKey" /> of the source entity at one end of the relationship.
            </param>
        <param name="targetEntity">
            The object instance or <see cref="T:System.Data.Entity.Core.EntityKey" /> of the target entity at the other end of the relationship.
            </param>
        <param name="navigationProperty">The name of the navigation property on  source  that returns the specified  target .</param>
        <param name="relationshipState">
            The requested <see cref="T:System.Data.Entity.EntityState" /> of the specified relationship.
            </param>
        <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and the name of the navigation property.</summary>
        <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the relationship that was changed.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When  source  or  target  is null.</exception>
        <exception cref="T:System.InvalidOperationException">
            When trying to change the state of the relationship to a state other than 
                <see cref="F:System.Data.Entity.EntityState.Deleted" /> or <see cref="F:System.Data.Entity.EntityState.Detached" /> 
            when either  source  or  target  is in a <see cref="F:System.Data.Entity.EntityState.Deleted" /> state 
            or when you try to change the state of the relationship to a state other than
            <see cref="F:System.Data.Entity.EntityState.Added" /> or <see cref="F:System.Data.Entity.EntityState.Detached" />
            when either  source  or  target  is in an <see ref="F:System.Data.Entity.EntityState.Added" /> state 
            or when  state  is not a valid <see cref="T:System.Data.Entity.EntityState" /> value
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeRelationshipState">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Core.Objects.ObjectStateEntry ChangeRelationshipState (object sourceEntity, object targetEntity, string relationshipName, string targetRoleName, System.Data.Entity.EntityState relationshipState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Core.Objects.ObjectStateEntry ChangeRelationshipState(object sourceEntity, object targetEntity, string relationshipName, string targetRoleName, valuetype System.Data.Entity.EntityState relationshipState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.Entity.EntityState)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ChangeRelationshipState (sourceEntity As Object, targetEntity As Object, relationshipName As String, targetRoleName As String, relationshipState As EntityState) As ObjectStateEntry" />
      <MemberSignature Language="F#" Value="abstract member ChangeRelationshipState : obj * obj * string * string * System.Data.Entity.EntityState -&gt; System.Data.Entity.Core.Objects.ObjectStateEntry&#xA;override this.ChangeRelationshipState : obj * obj * string * string * System.Data.Entity.EntityState -&gt; System.Data.Entity.Core.Objects.ObjectStateEntry" Usage="objectStateManager.ChangeRelationshipState (sourceEntity, targetEntity, relationshipName, targetRoleName, relationshipState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.ObjectStateEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceEntity" Type="System.Object" />
        <Parameter Name="targetEntity" Type="System.Object" />
        <Parameter Name="relationshipName" Type="System.String" />
        <Parameter Name="targetRoleName" Type="System.String" />
        <Parameter Name="relationshipState" Type="System.Data.Entity.EntityState" />
      </Parameters>
      <Docs>
        <param name="sourceEntity">
            The object instance or <see cref="T:System.Data.Entity.Core.EntityKey" /> of the source entity at one end of the relationship.
            </param>
        <param name="targetEntity">
            The object instance or <see cref="T:System.Data.Entity.Core.EntityKey" /> of the target entity at the other end of the relationship.
            </param>
        <param name="relationshipName">The name of the relationship.</param>
        <param name="targetRoleName">The role name at the  target  end of the relationship.</param>
        <param name="relationshipState">
            The requested <see cref="T:System.Data.Entity.EntityState" /> of the specified relationship.
            </param>
        <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and the properties of the relationship.</summary>
        <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the relationship that was changed.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When  source  or  target  is null.</exception>
        <exception cref="T:System.InvalidOperationException">
            When you try to change the state of the relationship to a state other than
            <see cref="F:System.Data.Entity.EntityState.Deleted" /> or <see cref="F:System.Data.Entity.EntityState.Detached" /> 
            when either  source  or  target  is in a <see cref="F:System.Data.Entity.EntityState.Deleted" /> state 
            or when you try to change the state of the relationship to a state other than
            <see cref="F:System.Data.Entity.EntityState.Added" /> or <see cref="F:System.Data.Entity.EntityState.Detached" />
            when either  source  or  target  is in an
            <see cref="F:System.Data.Entity.EntityState.Added" /> state 
            or when  state  is not a valid  <see cref="T:System.Data.Entity.EntityState" /> value.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeRelationshipState&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Core.Objects.ObjectStateEntry ChangeRelationshipState&lt;TEntity&gt; (TEntity sourceEntity, object targetEntity, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; navigationPropertySelector, System.Data.Entity.EntityState relationshipState) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Core.Objects.ObjectStateEntry ChangeRelationshipState&lt;class TEntity&gt;(!!TEntity sourceEntity, object targetEntity, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; navigationPropertySelector, valuetype System.Data.Entity.EntityState relationshipState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.EntityState)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ChangeRelationshipState(Of TEntity As Class) (sourceEntity As TEntity, targetEntity As Object, navigationPropertySelector As Expression(Of Func(Of TEntity, Object)), relationshipState As EntityState) As ObjectStateEntry" />
      <MemberSignature Language="F#" Value="abstract member ChangeRelationshipState : 'Entity * obj * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; * System.Data.Entity.EntityState -&gt; System.Data.Entity.Core.Objects.ObjectStateEntry (requires 'Entity : null)&#xA;override this.ChangeRelationshipState : 'Entity * obj * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; * System.Data.Entity.EntityState -&gt; System.Data.Entity.Core.Objects.ObjectStateEntry (requires 'Entity : null)" Usage="objectStateManager.ChangeRelationshipState (sourceEntity, targetEntity, navigationPropertySelector, relationshipState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.ObjectStateEntry</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="sourceEntity" Type="TEntity" />
        <Parameter Name="targetEntity" Type="System.Object" />
        <Parameter Name="navigationPropertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
        <Parameter Name="relationshipState" Type="System.Data.Entity.EntityState" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type of the  source  object.</typeparam>
        <param name="sourceEntity">
            The object instance or <see cref="T:System.Data.Entity.Core.EntityKey" /> of the source entity at one end of the relationship.
            </param>
        <param name="targetEntity">
            The object instance or <see cref="T:System.Data.Entity.Core.EntityKey" /> of the target entity at the other end of the relationship.
            </param>
        <param name="navigationPropertySelector">A LINQ expression that selects the navigation property on  source  that returns the specified  target .</param>
        <param name="relationshipState">
            The requested <see cref="T:System.Data.Entity.EntityState" /> of the specified relationship.
            </param>
        <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and a LINQ expression that defines the navigation property.</summary>
        <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the relationship that was changed.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When  source ,  target , or  selector  is null.</exception>
        <exception cref="T:System.ArgumentException"> selector  is malformed or cannot return a navigation property.</exception>
        <exception cref="T:System.InvalidOperationException">
            When you try to change the state of the relationship to a state other than
            <see cref="F:System.Data.Entity.EntityState.Deleted" />  or <see cref="F:System.Data.Entity.EntityState.Detached" /> 
            when either  source  or  target  is in a
            <see cref="F:System.Data.Entity.EntityState.Deleted" /> state
            or when you try to change the state of the relationship to a state other than
            <see cref="F:System.Data.Entity.EntityState.Added" />  or <see cref="F:System.Data.Entity.EntityState.Detached" />
            when either  source  or  target  is in an <see cref="F:System.Data.Entity.EntityState.Added" /> state 
            or when  state  is not a valid <see cref="T:System.Data.Entity.EntityState" /> value.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetObjectStateEntries">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Objects.ObjectStateEntry&gt; GetObjectStateEntries (System.Data.Entity.EntityState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Objects.ObjectStateEntry&gt; GetObjectStateEntries(valuetype System.Data.Entity.EntityState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.Entity.EntityState)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObjectStateEntries (state As EntityState) As IEnumerable(Of ObjectStateEntry)" />
      <MemberSignature Language="F#" Value="abstract member GetObjectStateEntries : System.Data.Entity.EntityState -&gt; seq&lt;System.Data.Entity.Core.Objects.ObjectStateEntry&gt;&#xA;override this.GetObjectStateEntries : System.Data.Entity.EntityState -&gt; seq&lt;System.Data.Entity.Core.Objects.ObjectStateEntry&gt;" Usage="objectStateManager.GetObjectStateEntries state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Objects.ObjectStateEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Data.Entity.EntityState" />
      </Parameters>
      <Docs>
        <param name="state">
            An <see cref="T:System.Data.Entity.EntityState" /> used to filter the returned
            <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            objects.
            </param>
        <summary>
            Returns a collection of <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> objects for objects or relationships with the given state.
            </summary>
        <returns>
            A collection of <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> objects in the given
            <see cref="T:System.Data.Entity.EntityState" />
            .
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            When  state  is <see cref="F:System.Data.Entity.EntityState.Detached" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetObjectStateEntry">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Core.Objects.ObjectStateEntry GetObjectStateEntry (System.Data.Entity.Core.EntityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Core.Objects.ObjectStateEntry GetObjectStateEntry(class System.Data.Entity.Core.EntityKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.Entity.Core.EntityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObjectStateEntry (key As EntityKey) As ObjectStateEntry" />
      <MemberSignature Language="F#" Value="abstract member GetObjectStateEntry : System.Data.Entity.Core.EntityKey -&gt; System.Data.Entity.Core.Objects.ObjectStateEntry&#xA;override this.GetObjectStateEntry : System.Data.Entity.Core.EntityKey -&gt; System.Data.Entity.Core.Objects.ObjectStateEntry" Usage="objectStateManager.GetObjectStateEntry key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.ObjectStateEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.Entity.Core.EntityKey" />
      </Parameters>
      <Docs>
        <param name="key">
            The <see cref="T:System.Data.Entity.Core.EntityKey" />.
            </param>
        <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the object or relationship entry with the specified key.
            </summary>
        <returns>
            The corresponding <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the given
            <see cref="T:System.Data.Entity.Core.EntityKey" />
            .
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When  key  is null.</exception>
        <exception cref="T:System.ArgumentException">When the specified  key  cannot be found in the state manager.</exception>
        <exception cref="T:System.InvalidOperationException">
            No entity with the specified <see cref="T:System.Data.Entity.Core.EntityKey" /> exists in the
            <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetObjectStateEntry">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Core.Objects.ObjectStateEntry GetObjectStateEntry (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Core.Objects.ObjectStateEntry GetObjectStateEntry(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObjectStateEntry (entity As Object) As ObjectStateEntry" />
      <MemberSignature Language="F#" Value="abstract member GetObjectStateEntry : obj -&gt; System.Data.Entity.Core.Objects.ObjectStateEntry&#xA;override this.GetObjectStateEntry : obj -&gt; System.Data.Entity.Core.Objects.ObjectStateEntry" Usage="objectStateManager.GetObjectStateEntry entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.ObjectStateEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
            The <see cref="T:System.Object" /> to which the retrieved
            <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            belongs.
            </param>
        <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the specified object.
            </summary>
        <returns>
            The corresponding <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the given
            <see cref="T:System.Object" />
            .
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
            No entity for the specified <see cref="T:System.Object" /> exists in the
            <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipManager">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Core.Objects.DataClasses.RelationshipManager GetRelationshipManager (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Core.Objects.DataClasses.RelationshipManager GetRelationshipManager(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetRelationshipManager(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelationshipManager (entity As Object) As RelationshipManager" />
      <MemberSignature Language="F#" Value="abstract member GetRelationshipManager : obj -&gt; System.Data.Entity.Core.Objects.DataClasses.RelationshipManager&#xA;override this.GetRelationshipManager : obj -&gt; System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" Usage="objectStateManager.GetRelationshipManager entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.DataClasses.RelationshipManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
            The object for which to return the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.
            </param>
        <summary>
            Returns the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> that is used by the specified object.
            </summary>
        <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> for the specified object.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
            The entity does not implement IEntityWithRelationships and is not tracked by this ObjectStateManager
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MetadataWorkspace">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace MetadataWorkspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace MetadataWorkspace" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectStateManager.MetadataWorkspace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MetadataWorkspace As MetadataWorkspace" />
      <MemberSignature Language="F#" Value="member this.MetadataWorkspace : System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" Usage="System.Data.Entity.Core.Objects.ObjectStateManager.MetadataWorkspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> associated with this state manager.
            </summary>
        <value>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> associated with this
            <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />
            .
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectStateManagerChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CollectionChangeEventHandler ObjectStateManagerChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CollectionChangeEventHandler ObjectStateManagerChanged" />
      <MemberSignature Language="DocId" Value="E:System.Data.Entity.Core.Objects.ObjectStateManager.ObjectStateManagerChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectStateManagerChanged As CollectionChangeEventHandler " />
      <MemberSignature Language="F#" Value="member this.ObjectStateManagerChanged : System.ComponentModel.CollectionChangeEventHandler " Usage="member this.ObjectStateManagerChanged : System.ComponentModel.CollectionChangeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CollectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when entities are added to or removed from the state manager.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetObjectStateEntry">
      <MemberSignature Language="C#" Value="public virtual bool TryGetObjectStateEntry (System.Data.Entity.Core.EntityKey key, out System.Data.Entity.Core.Objects.ObjectStateEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetObjectStateEntry(class System.Data.Entity.Core.EntityKey key, [out] class System.Data.Entity.Core.Objects.ObjectStateEntry&amp; entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Objects.ObjectStateEntry@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetObjectStateEntry (key As EntityKey, ByRef entry As ObjectStateEntry) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetObjectStateEntry : System.Data.Entity.Core.EntityKey *  -&gt; bool&#xA;override this.TryGetObjectStateEntry : System.Data.Entity.Core.EntityKey *  -&gt; bool" Usage="objectStateManager.TryGetObjectStateEntry (key, entry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.Entity.Core.EntityKey" />
        <Parameter Name="entry" Type="System.Data.Entity.Core.Objects.ObjectStateEntry" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">
            The given <see cref="T:System.Data.Entity.Core.EntityKey" />.
            </param>
        <param name="entry">
            When this method returns, contains an <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the given
            <see cref="T:System.Data.Entity.Core.EntityKey" />
            This parameter is passed uninitialized.
            </param>
        <summary>
            Tries to retrieve the corresponding <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the object or relationship with the specified
            <see cref="T:System.Data.Entity.Core.EntityKey" />
            .
            </summary>
        <returns>
            A Boolean value that is true if there is a corresponding
            <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            for the given
            <see cref="T:System.Data.Entity.Core.EntityKey" />
            ; otherwise, false.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">A null (Nothing in Visual Basic) value is provided for  key .</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetObjectStateEntry">
      <MemberSignature Language="C#" Value="public virtual bool TryGetObjectStateEntry (object entity, out System.Data.Entity.Core.Objects.ObjectStateEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetObjectStateEntry(object entity, [out] class System.Data.Entity.Core.Objects.ObjectStateEntry&amp; entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Entity.Core.Objects.ObjectStateEntry@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetObjectStateEntry (entity As Object, ByRef entry As ObjectStateEntry) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetObjectStateEntry : obj *  -&gt; bool&#xA;override this.TryGetObjectStateEntry : obj *  -&gt; bool" Usage="objectStateManager.TryGetObjectStateEntry (entity, entry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="entry" Type="System.Data.Entity.Core.Objects.ObjectStateEntry" RefType="out" />
      </Parameters>
      <Docs>
        <param name="entity">
            The <see cref="T:System.Object" /> to which the retrieved
            <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            belongs.
            </param>
        <param name="entry">
            When this method returns, contains the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the given
            <see cref="T:System.Data.Entity.Core.EntityKey" />
            This parameter is passed uninitialized.
            </param>
        <summary>
            Tries to retrieve the corresponding <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the specified
            <see cref="T:System.Object" />
            .
            </summary>
        <returns>
            A Boolean value that is true if there is a corresponding
            <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            for the given object; otherwise, false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetRelationshipManager">
      <MemberSignature Language="C#" Value="public virtual bool TryGetRelationshipManager (object entity, out System.Data.Entity.Core.Objects.DataClasses.RelationshipManager relationshipManager);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetRelationshipManager(object entity, [out] class System.Data.Entity.Core.Objects.DataClasses.RelationshipManager&amp; relationshipManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Entity.Core.Objects.DataClasses.RelationshipManager@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetRelationshipManager (entity As Object, ByRef relationshipManager As RelationshipManager) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetRelationshipManager : obj *  -&gt; bool&#xA;override this.TryGetRelationshipManager : obj *  -&gt; bool" Usage="objectStateManager.TryGetRelationshipManager (entity, relationshipManager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="relationshipManager" Type="System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" RefType="out" />
      </Parameters>
      <Docs>
        <param name="entity">
            The object for which to return the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.
            </param>
        <param name="relationshipManager">
            When this method returns, contains the
            <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />
            for the  entity .
            </param>
        <summary>
            Returns the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> that is used by the specified object.
            </summary>
        <returns>
            true if a <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> instance was returned for the supplied  entity ; otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>