<Type Name="DbExpressionBuilder" FullName="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder">
  <TypeSignature Language="C#" Value="public static class DbExpressionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DbExpressionBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Module DbExpressionBuilder" />
  <TypeSignature Language="F#" Value="type DbExpressionBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId="Db")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Provides an API to construct <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s and allows that API to be accessed as extension methods on the expression type itself.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Aggregate">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate Aggregate (this System.Data.Entity.Core.Metadata.Edm.EdmFunction function, System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate Aggregate(class System.Data.Entity.Core.Metadata.Edm.EdmFunction function, class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate (function As EdmFunction, argument As DbExpression) As DbFunctionAggregate" />
      <MemberSignature Language="F#" Value="static member Aggregate : System.Data.Entity.Core.Metadata.Edm.EdmFunction * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate (function, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Data.Entity.Core.Metadata.Edm.EdmFunction" RefType="this" />
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="function">The function that defines the aggregate operation.</param>
        <param name="argument">The argument over which the aggregate function should be calculated.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />.
            </summary>
        <returns>A new function aggregate with a reference to the given function and argument. The function aggregate's Distinct property will have the value false.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">function or argument null.</exception>
        <exception cref="T:System.ArgumentException">function is not an aggregate function or has more than one argument, or the result type of argument is not equal or promotable to the parameter type of function.</exception>
      </Docs>
    </Member>
    <Member MemberName="AggregateDistinct">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate AggregateDistinct (this System.Data.Entity.Core.Metadata.Edm.EdmFunction function, System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate AggregateDistinct(class System.Data.Entity.Core.Metadata.Edm.EdmFunction function, class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AggregateDistinct (function As EdmFunction, argument As DbExpression) As DbFunctionAggregate" />
      <MemberSignature Language="F#" Value="static member AggregateDistinct : System.Data.Entity.Core.Metadata.Edm.EdmFunction * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct (function, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Data.Entity.Core.Metadata.Edm.EdmFunction" RefType="this" />
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="function">The function that defines the aggregate operation.</param>
        <param name="argument">The argument over which the aggregate function should be calculated.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" /> that is applied in a distinct fashion.
            </summary>
        <returns>A new function aggregate with a reference to the given function and argument. The function aggregate's Distinct property will have the value true.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">function or argument is null.</exception>
        <exception cref="T:System.ArgumentException">function is not an aggregate function or has more than one argument, or the result type of argument is not equal or promotable to the parameter type of function.</exception>
      </Docs>
    </Member>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression All (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression All(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function All (source As DbExpression, predicate As Func(Of DbExpression, DbExpression)) As DbQuantifierExpression" />
      <MemberSignature Language="F#" Value="static member All : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="source">An expression that specifies the input set.</param>
        <param name="predicate">A method representing a predicate to evaluate for each member of the input set.    This method must produce an expression with a Boolean result type that provides the predicate logic.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for all elements of the input set.
            </summary>
        <returns>A new DbQuantifierExpression that represents the All operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by predicate is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by Predicate  does not have a Boolean result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression All (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Data.Entity.Core.Common.CommandTrees.DbExpression predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression All(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Data.Entity.Core.Common.CommandTrees.DbExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function All (input As DbExpressionBinding, predicate As DbExpression) As DbQuantifierExpression" />
      <MemberSignature Language="F#" Value="static member All : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All (input, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
        <Parameter Name="predicate" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="input">An expression binding that specifies the input set.</param>
        <param name="predicate">An expression representing a predicate to evaluate for each member of the input set.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for all elements of the input set.
            </summary>
        <returns>A new DbQuantifierExpression that represents the All operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">input or predicate is null.</exception>
        <exception cref="T:System.ArgumentException">predicate  does not have a Boolean result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbAndExpression And (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbAndExpression And(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function And (left As DbExpression, right As DbExpression) As DbAndExpression" />
      <MemberSignature Language="F#" Value="static member And : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbAndExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">A Boolean expression that specifies the left argument.</param>
        <param name="right">A Boolean expression that specifies the right argument.</param>
        <summary>
            Creates an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" /> that performs the logical And of the left and right arguments.
            </summary>
        <returns>A new DbAndExpression with the specified arguments.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">left and right  does not have a Boolean result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbExpression Any (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbExpression Any(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any (source As DbExpression) As DbExpression" />
      <MemberSignature Language="F#" Value="static member Any : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">An expression that specifies the input set.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that determines whether the specified set argument is non-empty.
            </summary>
        <returns>
            A new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> applied to a new
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />
            with the specified argument.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">source is null.</exception>
        <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression Any (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression Any(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any (source As DbExpression, predicate As Func(Of DbExpression, DbExpression)) As DbQuantifierExpression" />
      <MemberSignature Language="F#" Value="static member Any : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="source">An expression that specifies the input set.</param>
        <param name="predicate">A method representing the predicate to evaluate for each member of the input set. This method must produce an expression with a Boolean result type that provides the predicate logic.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for any element of the input set.
            </summary>
        <returns>A new DbQuantifierExpression that represents the Any operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by predicate is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by predicate does not have a Boolean result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression Any (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Data.Entity.Core.Common.CommandTrees.DbExpression predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression Any(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Data.Entity.Core.Common.CommandTrees.DbExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any (input As DbExpressionBinding, predicate As DbExpression) As DbQuantifierExpression" />
      <MemberSignature Language="F#" Value="static member Any : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any (input, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
        <Parameter Name="predicate" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="input">An expression binding that specifies the input set.</param>
        <param name="predicate">An expression representing a predicate to evaluate for each member of the input set.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for any element of the input set.
            </summary>
        <returns>A new DbQuantifierExpression that represents the Any operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">input or predicate is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by predicate does not have a Boolean result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="As">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.KeyValuePair&lt;string,System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt; As (this System.Data.Entity.Core.Common.CommandTrees.DbAggregate value, string alias);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt; As(class System.Data.Entity.Core.Common.CommandTrees.DbAggregate value, string alias) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbAggregate,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function As (value As DbAggregate, alias As String) As KeyValuePair(Of String, DbAggregate)" />
      <MemberSignature Language="F#" Value="static member As : System.Data.Entity.Core.Common.CommandTrees.DbAggregate * string -&gt; System.Collections.Generic.KeyValuePair&lt;string, System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt;" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As (value, alias)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Entity.Core.Common.CommandTrees.DbAggregate" RefType="this" />
        <Parameter Name="alias" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The value in the key/value pair.</param>
        <param name="alias">The key in the key/value pair.</param>
        <summary>Returns the specified arguments as a key/value pair object.</summary>
        <returns>A key/value pair object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.KeyValuePair&lt;string,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; As (this System.Data.Entity.Core.Common.CommandTrees.DbExpression value, string alias);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; As(class System.Data.Entity.Core.Common.CommandTrees.DbExpression value, string alias) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function As (value As DbExpression, alias As String) As KeyValuePair(Of String, DbExpression)" />
      <MemberSignature Language="F#" Value="static member As : System.Data.Entity.Core.Common.CommandTrees.DbExpression * string -&gt; System.Collections.Generic.KeyValuePair&lt;string, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As (value, alias)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="alias" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The value in the key/value pair.</param>
        <param name="alias">The key in the key/value pair.</param>
        <summary>Returns the specified arguments as a key/value pair object.</summary>
        <returns>A key/value pair object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding Bind (this System.Data.Entity.Core.Common.CommandTrees.DbExpression input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding Bind(class System.Data.Entity.Core.Common.CommandTrees.DbExpression input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Bind (input As DbExpression) As DbExpressionBinding" />
      <MemberSignature Language="F#" Value="static member Bind : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="input">The expression to bind.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that uses a generated variable name to bind the given expression.
            </summary>
        <returns>A new expression binding with the specified expression and a generated variable name.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">input is null.</exception>
        <exception cref="T:System.ArgumentException">input does not have a collection result.</exception>
      </Docs>
    </Member>
    <Member MemberName="BindAs">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding BindAs (this System.Data.Entity.Core.Common.CommandTrees.DbExpression input, string varName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding BindAs(class System.Data.Entity.Core.Common.CommandTrees.DbExpression input, string varName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BindAs (input As DbExpression, varName As String) As DbExpressionBinding" />
      <MemberSignature Language="F#" Value="static member BindAs : System.Data.Entity.Core.Common.CommandTrees.DbExpression * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs (input, varName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="varName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">The expression to bind.</param>
        <param name="varName">The variable name that should be used for the binding.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that uses the specified variable name to bind the given expression
            </summary>
        <returns>A new expression binding with the specified expression and variable name.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">input or varName is null.</exception>
        <exception cref="T:System.ArgumentException">input does not have a collection result.</exception>
      </Docs>
    </Member>
    <Member MemberName="Case">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression Case (System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; whenExpressions, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; thenExpressions, System.Data.Entity.Core.Common.CommandTrees.DbExpression elseExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression Case(class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; whenExpressions, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; thenExpressions, class System.Data.Entity.Core.Common.CommandTrees.DbExpression elseExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Case (whenExpressions As IEnumerable(Of DbExpression), thenExpressions As IEnumerable(Of DbExpression), elseExpression As DbExpression) As DbCaseExpression" />
      <MemberSignature Language="F#" Value="static member Case : seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case (whenExpressions, thenExpressions, elseExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whenExpressions" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        <Parameter Name="thenExpressions" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        <Parameter Name="elseExpression" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="whenExpressions">A list of expressions that provide the conditional for of each case.</param>
        <param name="thenExpressions">A list of expressions that provide the result of each case.</param>
        <param name="elseExpression">An expression that defines the result when no case is matched.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </summary>
        <returns>A new DbCaseExpression with the specified cases and default result.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">whenExpressions or thenExpressions is null or contains null, or elseExpression is null.</exception>
        <exception cref="T:System.ArgumentException">whenExpressions or thenExpressions is empty or whenExpressions contains an expression with a non-Boolean result type, or no common result type exists for all expressions in thenExpressions and elseExpression.</exception>
      </Docs>
    </Member>
    <Member MemberName="CastTo">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbCastExpression CastTo (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Metadata.Edm.TypeUsage toType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbCastExpression CastTo(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Metadata.Edm.TypeUsage toType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CastTo (argument As DbExpression, toType As TypeUsage) As DbCastExpression" />
      <MemberSignature Language="F#" Value="static member CastTo : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo (argument, toType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbCastExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="toType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Parameters>
      <Docs>
        <param name="argument">The argument to which the cast should be applied.</param>
        <param name="toType">Type metadata that specifies the type to cast to.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" /> that applies a cast operation to a polymorphic argument.
            </summary>
        <returns>A new DbCastExpression with the specified argument and target type.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Argument or toType is null.</exception>
        <exception cref="T:System.ArgumentException">The specified cast is not valid.</exception>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression Constant (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression Constant(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Constant (value As Object) As DbConstantExpression" />
      <MemberSignature Language="F#" Value="static member Constant : obj -&gt; System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The constant value to represent.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the given constant value.
            </summary>
        <returns>A new DbConstantExpression with the given value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">value is null.</exception>
        <exception cref="T:System.ArgumentException">value is not an instance of a valid constant type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression Constant (this System.Data.Entity.Core.Metadata.Edm.TypeUsage constantType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression Constant(class System.Data.Entity.Core.Metadata.Edm.TypeUsage constantType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Constant (constantType As TypeUsage, value As Object) As DbConstantExpression" />
      <MemberSignature Language="F#" Value="static member Constant : System.Data.Entity.Core.Metadata.Edm.TypeUsage * obj -&gt; System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant (constantType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constantType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" RefType="this" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="constantType">The type of the constant value.</param>
        <param name="value">The constant value to represent.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> of the specified primitive type with the given constant value.
            </summary>
        <returns>A new DbConstantExpression with the given value and a result type of constantType.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">value or constantType is null.</exception>
        <exception cref="T:System.ArgumentException">value is not an instance of a valid constant type, constantType does not represent a primitive type, or value is of a different primitive type than that represented by constantType.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRef">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; keyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef(class System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="F#" Value="static member CreateRef : System.Data.Entity.Core.Metadata.Edm.EntitySet * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef (entitySet, keyValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRefExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySet" RefType="this" />
        <Parameter Name="keyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="entitySet">The entity set in which the referenced element resides.</param>
        <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity based on key values.
            </summary>
        <returns>A new DbRefExpression that references the element with the specified key values in the given entity set.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">entitySet is null, or keyValues is null or contains null.</exception>
        <exception cref="T:System.ArgumentException">The count of keyValues does not match the count of key members declared by the entitySet’s element type, or keyValues contains an expression with a result type that is not compatible with the type of the corresponding key member.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRef">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, params System.Data.Entity.Core.Common.CommandTrees.DbExpression[] keyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef(class System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, class System.Data.Entity.Core.Common.CommandTrees.DbExpression[] keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
      <MemberSignature Language="F#" Value="static member CreateRef : System.Data.Entity.Core.Metadata.Edm.EntitySet * System.Data.Entity.Core.Common.CommandTrees.DbExpression[] -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef (entitySet, keyValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRefExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySet" RefType="this" />
        <Parameter Name="keyValues" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entitySet">The entity set in which the referenced element resides.</param>
        <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity based on key values.
            </summary>
        <returns>A new DbRefExpression that references the element with the specified key values in the given entity set.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">entitySet is null, or keyValues is null or contains null.</exception>
        <exception cref="T:System.ArgumentException">The count of keyValues does not match the count of key members declared by the entitySet’s element type, or keyValues contains an expression with a result type that is not compatible with the type of the corresponding key member.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRef">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, System.Data.Entity.Core.Metadata.Edm.EntityType entityType, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; keyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef(class System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, class System.Data.Entity.Core.Metadata.Edm.EntityType entityType, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="F#" Value="static member CreateRef : System.Data.Entity.Core.Metadata.Edm.EntitySet * System.Data.Entity.Core.Metadata.Edm.EntityType * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef (entitySet, entityType, keyValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRefExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySet" RefType="this" />
        <Parameter Name="entityType" Type="System.Data.Entity.Core.Metadata.Edm.EntityType" />
        <Parameter Name="keyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="entitySet">The entity set in which the referenced element resides.</param>
        <param name="entityType">The specific type of the referenced entity. This must be an entity type from the same hierarchy as the entity set's element type.</param>
        <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity of a given type based on key values.
            </summary>
        <returns>A new DbRefExpression that references the element with the specified key values in the given entity set.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">entitySet or entityType is null, or keyValues is null or contains null.</exception>
        <exception cref="T:System.ArgumentException">The count of keyValues does not match the count of key members declared by the entitySet’s element type, or keyValues contains an expression with a result type that is not compatible with the type of the corresponding key member.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRef">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, System.Data.Entity.Core.Metadata.Edm.EntityType entityType, params System.Data.Entity.Core.Common.CommandTrees.DbExpression[] keyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRefExpression CreateRef(class System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, class System.Data.Entity.Core.Metadata.Edm.EntityType entityType, class System.Data.Entity.Core.Common.CommandTrees.DbExpression[] keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
      <MemberSignature Language="F#" Value="static member CreateRef : System.Data.Entity.Core.Metadata.Edm.EntitySet * System.Data.Entity.Core.Metadata.Edm.EntityType * System.Data.Entity.Core.Common.CommandTrees.DbExpression[] -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef (entitySet, entityType, keyValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRefExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySet" RefType="this" />
        <Parameter Name="entityType" Type="System.Data.Entity.Core.Metadata.Edm.EntityType" />
        <Parameter Name="keyValues" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entitySet">The entity set in which the referenced element resides.</param>
        <param name="entityType">The specific type of the referenced entity. This must be an entity type from the same hierarchy as the entity set's element type.</param>
        <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity of a given type based on key values.
            </summary>
        <returns>A new DbRefExpression that references the element with the specified key values in the given entity set.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">entitySet or entityType is null, or keyValues is null or contains null.</exception>
        <exception cref="T:System.ArgumentException">The count of keyValues does not match the count of key members declared by the entitySet’s element type, or keyValues contains an expression with a result type that is not compatible with the type of the corresponding key member.</exception>
      </Docs>
    </Member>
    <Member MemberName="CrossApply">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression CrossApply (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair&lt;string,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; apply);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression CrossApply(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; apply) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CrossApply (source As DbExpression, apply As Func(Of DbExpression, KeyValuePair(Of String, DbExpression))) As DbApplyExpression" />
      <MemberSignature Language="F#" Value="static member CrossApply : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Collections.Generic.KeyValuePair&lt;string, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply (source, apply)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="apply" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
        <param name="apply">A method that specifies the logic to evaluate once for each member of the input set. </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included.
            </summary>
        <returns>
            An new DbApplyExpression with the specified input and apply bindings and an
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of CrossApply.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The result of apply contains a name or expression that is null.</exception>
        <exception cref="T:System.ArgumentException">The result of apply contains a name or expression that is not valid in an expression binding.</exception>
      </Docs>
    </Member>
    <Member MemberName="CrossApply">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression CrossApply (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding apply);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression CrossApply(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding apply) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CrossApply (input As DbExpressionBinding, apply As DbExpressionBinding) As DbApplyExpression" />
      <MemberSignature Language="F#" Value="static member CrossApply : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding -&gt; System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply (input, apply)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
        <Parameter Name="apply" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
      </Parameters>
      <Docs>
        <param name="input">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </param>
        <param name="apply">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies logic to evaluate once for each member of the input set.
            </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included.
            </summary>
        <returns>
            An new DbApplyExpression with the specified input and apply bindings and an
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of CrossApply.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">input or apply is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="CrossJoin">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression CrossJoin (System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression CrossJoin(class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Function CrossJoin (inputs As IEnumerable(Of DbExpressionBinding)) As DbCrossJoinExpression" />
      <MemberSignature Language="F#" Value="static member CrossJoin : seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">A list of expression bindings that specifies the input sets.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" /> that unconditionally joins the sets specified by the list of input expression bindings.
            </summary>
        <returns>
            A new DbCrossJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of CrossJoin, that represents the unconditional join of the input sets.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">inputs is null or contains null element.</exception>
        <exception cref="T:System.ArgumentException">inputs contains fewer than 2 expression bindings.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deref">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression Deref (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression Deref(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Deref (argument As DbExpression) As DbDerefExpression" />
      <MemberSignature Language="F#" Value="static member Deref : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId="Deref")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that provides the reference. This expression must have a reference Type.
            </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" /> that retrieves a specific Entity given a reference expression.
            </summary>
        <returns>A new DbDerefExpression that retrieves the specified Entity.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument is null.</exception>
        <exception cref="T:System.ArgumentException">argument does not have a reference result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Distinct">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression Distinct (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression Distinct(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct (argument As DbExpression) As DbDistinctExpression" />
      <MemberSignature Language="F#" Value="static member Distinct : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">An expression that defines the set over which to perform the distinct operation.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" /> that removes duplicates from the given set argument.
            </summary>
        <returns>A new DbDistinctExpression that represents the distinct operation applied to the specified set argument.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument is null.</exception>
        <exception cref="T:System.ArgumentException">argument does not have a collection result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Divide (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Divide(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Divide (left As DbExpression, right As DbExpression) As DbArithmeticExpression" />
      <MemberSignature Language="F#" Value="static member Divide : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that specifies the left argument.</param>
        <param name="right">An expression that specifies the right argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that divides the left argument by the right argument.
            </summary>
        <returns>A new DbArithmeticExpression representing the division operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common numeric result type exists between left or right.</exception>
      </Docs>
    </Member>
    <Member MemberName="Element">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbElementExpression Element (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbElementExpression Element(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Element (argument As DbExpression) As DbElementExpression" />
      <MemberSignature Language="F#" Value="static member Element : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbElementExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">An expression that specifies the input set.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" /> that converts a set into a singleton.
            </summary>
        <returns>A DbElementExpression that represents the conversion of the set argument to a singleton.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument is null.</exception>
        <exception cref="T:System.ArgumentException">argument does not have a collection result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression Equal (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression Equal(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Equal (left As DbExpression, right As DbExpression) As DbComparisonExpression" />
      <MemberSignature Language="F#" Value="static member Equal : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that specifies the left argument.</param>
        <param name="right">An expression that specifies the right argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that compares the left and right arguments for equality.
            </summary>
        <returns>A new DbComparisonExpression representing the equality comparison.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common equality-comparable result type exists between left and right.</exception>
      </Docs>
    </Member>
    <Member MemberName="Except">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression Except (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression Except(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except (left As DbExpression, right As DbExpression) As DbExceptExpression" />
      <MemberSignature Language="F#" Value="static member Except : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that defines the left set argument.</param>
        <param name="right">An expression that defines the right set argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" /> that computes the subtraction of the right set argument from the left set argument.
            </summary>
        <returns>A new DbExceptExpression that represents the difference of the left argument from the right argument.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common collection result type exists between left and right.</exception>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbExpression Exists (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbExpression Exists(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Exists (argument As DbExpression) As DbExpression" />
      <MemberSignature Language="F#" Value="static member Exists : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">An expression that specifies the input set.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that determines whether the specified set argument is non-empty.
            </summary>
        <returns>
            A new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> applied to a new
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />
            with the specified argument.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument is null.</exception>
        <exception cref="T:System.ArgumentException">argument does not have a collection result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="False">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression False { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression False" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property False As DbConstantExpression" />
      <MemberSignature Language="F#" Value="member this.False : System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the Boolean value false.
            </summary>
        <value>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the Boolean value false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression Filter (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Data.Entity.Core.Common.CommandTrees.DbExpression predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression Filter(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Data.Entity.Core.Common.CommandTrees.DbExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Filter (input As DbExpressionBinding, predicate As DbExpression) As DbFilterExpression" />
      <MemberSignature Language="F#" Value="static member Filter : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter (input, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
        <Parameter Name="predicate" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="input">An expression binding that specifies the input set.</param>
        <param name="predicate">An expression representing a predicate to evaluate for each member of the input set.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> that filters the elements in the given input set using the specified predicate.
            </summary>
        <returns>A new DbFilterExpression that produces the filtered set.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">input or predicate is null.</exception>
        <exception cref="T:System.ArgumentException">predicate does not have a Boolean result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="FullOuterJoin">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression FullOuterJoin (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; joinCondition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression FullOuterJoin(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right, class System.Func`3&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; joinCondition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FullOuterJoin (left As DbExpression, right As DbExpression, joinCondition As Func(Of DbExpression, DbExpression, DbExpression)) As DbJoinExpression" />
      <MemberSignature Language="F#" Value="static member FullOuterJoin : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin (left, right, joinCondition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        <Parameter Name="joinCondition" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the left set argument.
            </param>
        <param name="right">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the right set argument.
            </param>
        <param name="joinCondition"> A method representing the condition on which to join. This method must produce an expression with a Boolean result type that provides the logic of the join condition.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expressions, on the specified join condition, using FullOuterJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of FullOuterJoin, that represents the full outer join operation applied to the left and right input sets under the given join condition.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by joinCondition is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by joinCondition does not have a Boolean result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="FullOuterJoin">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression FullOuterJoin (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding left, System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding right, System.Data.Entity.Core.Common.CommandTrees.DbExpression joinCondition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression FullOuterJoin(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding left, class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding right, class System.Data.Entity.Core.Common.CommandTrees.DbExpression joinCondition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FullOuterJoin (left As DbExpressionBinding, right As DbExpressionBinding, joinCondition As DbExpression) As DbJoinExpression" />
      <MemberSignature Language="F#" Value="static member FullOuterJoin : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin (left, right, joinCondition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
        <Parameter Name="joinCondition" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the left set argument.
            </param>
        <param name="right">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the right set argument.
            </param>
        <param name="joinCondition">An expression that specifies the condition on which to join.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expression bindings, on the specified join condition, using FullOuterJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of FullOuterJoin, that represents the full outer join operation applied to the left and right     input sets under the given join condition.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by joinCondition does not have a Boolean result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityRef">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression GetEntityRef (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression GetEntityRef(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityRef (argument As DbExpression) As DbEntityRefExpression" />
      <MemberSignature Language="F#" Value="static member GetEntityRef : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">The expression that provides the entity. This expression must have an entity result type.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" /> that retrieves the ref of the specified entity in structural form.
            </summary>
        <returns>A new DbEntityRefExpression that retrieves a reference to the specified entity.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument is null.</exception>
        <exception cref="T:System.ArgumentException">argument does not have an entity result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRefKey">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression GetRefKey (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression GetRefKey(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRefKey (argument As DbExpression) As DbRefKeyExpression" />
      <MemberSignature Language="F#" Value="static member GetRefKey : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">The expression that provides the reference. This expression must have a reference Type with an Entity element type.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" /> that retrieves the key values of the specified reference in structural form.
            </summary>
        <returns>A new DbRefKeyExpression that retrieves the key values of the specified reference.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument is null.</exception>
        <exception cref="T:System.ArgumentException">argument does not have a reference result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression GreaterThan (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression GreaterThan(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GreaterThan (left As DbExpression, right As DbExpression) As DbComparisonExpression" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that specifies the left argument.</param>
        <param name="right">An expression that specifies the right argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is greater than the right argument.
            </summary>
        <returns>A new DbComparisonExpression representing the greater-than comparison.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common order-comparable result type exists between left and right.</exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression GreaterThanOrEqual (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression GreaterThanOrEqual(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GreaterThanOrEqual (left As DbExpression, right As DbExpression) As DbComparisonExpression" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that specifies the left argument.</param>
        <param name="right">An expression that specifies the right argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is greater than or equal to the right argument.
            </summary>
        <returns>A new DbComparisonExpression representing the greater-than-or-equal-to comparison.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common order-comparable result type exists between left and right.</exception>
      </Docs>
    </Member>
    <Member MemberName="GroupAggregate">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate GroupAggregate (System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate GroupAggregate(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupAggregate (argument As DbExpression) As DbGroupAggregate" />
      <MemberSignature Language="F#" Value="static member GroupAggregate : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupAggregate argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="argument"> The argument over which to perform the nest operation </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate" /> over the specified argument
            </summary>
        <returns> A new group aggregate representing the elements of the group referenced by the given argument. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="argument" />
            is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBind">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding GroupBind (this System.Data.Entity.Core.Common.CommandTrees.DbExpression input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding GroupBind(class System.Data.Entity.Core.Common.CommandTrees.DbExpression input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBind (input As DbExpression) As DbGroupExpressionBinding" />
      <MemberSignature Language="F#" Value="static member GroupBind : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="input">The expression to bind.</param>
        <summary>Creates a new group expression binding that uses generated variable and group variable names to bind the given expression.</summary>
        <returns>A new group expression binding with the specified expression and a generated variable name and group variable name.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">input is null.</exception>
        <exception cref="T:System.ArgumentException">input does not have a collection result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBindAs">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding GroupBindAs (this System.Data.Entity.Core.Common.CommandTrees.DbExpression input, string varName, string groupVarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding GroupBindAs(class System.Data.Entity.Core.Common.CommandTrees.DbExpression input, string varName, string groupVarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBindAs (input As DbExpression, varName As String, groupVarName As String) As DbGroupExpressionBinding" />
      <MemberSignature Language="F#" Value="static member GroupBindAs : System.Data.Entity.Core.Common.CommandTrees.DbExpression * string * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs (input, varName, groupVarName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="varName" Type="System.String" />
        <Parameter Name="groupVarName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">The expression to bind.</param>
        <param name="varName">The variable name that should be used for the binding.</param>
        <param name="groupVarName">The variable name that should be used to refer to the group when the new group expression binding is used in a group-by expression.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> that uses the specified variable name and group variable names to bind the given expression.
            </summary>
        <returns>A new group expression binding with the specified expression, variable name and group variable name.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">input, varName or groupVarName is null.</exception>
        <exception cref="T:System.ArgumentException">input does not have a collection result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression GroupBy (this System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding input, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; keys, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt;&gt; aggregates);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression GroupBy(class System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding input, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; keys, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt;&gt; aggregates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy (input As DbGroupExpressionBinding, keys As IEnumerable(Of KeyValuePair(Of String, DbExpression)), aggregates As IEnumerable(Of KeyValuePair(Of String, DbAggregate))) As DbGroupByExpression" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt;&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy (input, keys, aggregates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" RefType="this" />
        <Parameter Name="keys" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt;" />
        <Parameter Name="aggregates" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="input">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> that specifies the input set.
            </param>
        <param name="keys">A list of string-expression pairs that define the grouping columns.</param>
        <param name="aggregates">A list of expressions that specify aggregates to apply.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> that groups the elements of the input set according to the specified group keys and applies the given aggregates.
            </summary>
        <returns>A new DbGroupByExpression with the specified input set, grouping keys and aggregates.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">input, keys or aggregates is null, keys contains a null column key or expression, or aggregates contains a null aggregate column name or aggregate.</exception>
        <exception cref="T:System.ArgumentException">Both keys and aggregates are empty, or an invalid or duplicate column name was specified.</exception>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbInExpression In (this System.Data.Entity.Core.Common.CommandTrees.DbExpression expression, System.Collections.Generic.IList&lt;System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression&gt; list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbInExpression In(class System.Data.Entity.Core.Common.CommandTrees.DbExpression expression, class System.Collections.Generic.IList`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression&gt; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function In (expression As DbExpression, list As IList(Of DbConstantExpression)) As DbInExpression" />
      <MemberSignature Language="F#" Value="static member In : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Collections.Generic.IList&lt;System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbInExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In (expression, list)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbInExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="list" Type="System.Collections.Generic.IList&lt;System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="expression"> A DbExpression to be matched. </param>
        <param name="list"> A list of DbConstantExpression to test for a match. </param>
        <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" /> that matches the result of the specified
            expression with the results of the constant expressions in the specified list.
            </summary>
        <returns>
            A new DbInExpression with the specified arguments.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" />
            or
            <paramref name="list" />
            is null.
            </exception>
        <exception cref="T:System.ArgumentException">
            The result type of
            <paramref name="expression" />
            is different than the result type of an expression from
            <paramref name="list" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="InnerJoin">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression InnerJoin (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; joinCondition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression InnerJoin(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right, class System.Func`3&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; joinCondition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InnerJoin (left As DbExpression, right As DbExpression, joinCondition As Func(Of DbExpression, DbExpression, DbExpression)) As DbJoinExpression" />
      <MemberSignature Language="F#" Value="static member InnerJoin : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin (left, right, joinCondition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        <Parameter Name="joinCondition" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the left set argument.
            </param>
        <param name="right">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the right set argument.
            </param>
        <param name="joinCondition">A method representing the condition on which to join. This method must produce an expression with a Boolean result type that provides the logic of the join condition.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expressions, on the specified join condition, using InnerJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of InnerJoin, that represents the inner join operation applied to the left and right input sets under the given join condition.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by joinCondition is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by joinCondition does not have a Boolean result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="InnerJoin">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression InnerJoin (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding left, System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding right, System.Data.Entity.Core.Common.CommandTrees.DbExpression joinCondition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression InnerJoin(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding left, class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding right, class System.Data.Entity.Core.Common.CommandTrees.DbExpression joinCondition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InnerJoin (left As DbExpressionBinding, right As DbExpressionBinding, joinCondition As DbExpression) As DbJoinExpression" />
      <MemberSignature Language="F#" Value="static member InnerJoin : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin (left, right, joinCondition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
        <Parameter Name="joinCondition" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the left set argument.
            </param>
        <param name="right">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the right set argument.
            </param>
        <param name="joinCondition">An expression that specifies the condition on which to join.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expression bindings, on the specified join condition, using InnerJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of InnerJoin, that represents the inner join operation applied to the left and right     input sets under the given join condition.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
        <exception cref="T:System.ArgumentException">joinCondition does not have a Boolean result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression Intersect (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression Intersect(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect (left As DbExpression, right As DbExpression) As DbIntersectExpression" />
      <MemberSignature Language="F#" Value="static member Intersect : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that defines the left set argument.</param>
        <param name="right">An expression that defines the right set argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" /> that computes the intersection of the left and right set arguments.
            </summary>
        <returns>A new DbIntersectExpression that represents the intersection of the left and right arguments.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common collection result type exists between left or right.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression Invoke (this System.Data.Entity.Core.Common.CommandTrees.DbLambda lambda, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression Invoke(class System.Data.Entity.Core.Common.CommandTrees.DbLambda lambda, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Invoke (lambda As DbLambda, arguments As IEnumerable(Of DbExpression)) As DbLambdaExpression" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Data.Entity.Core.Common.CommandTrees.DbLambda * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke (lambda, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lambda" Type="System.Data.Entity.Core.Common.CommandTrees.DbLambda" RefType="this" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="lambda">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> instance representing the Lambda function to apply.
            </param>
        <param name="arguments">A list of expressions that provide the arguments.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> representing the application of the specified Lambda function to the given arguments.
            </summary>
        <returns>A new Expression representing the Lambda function application.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">lambda or arguments is null.</exception>
        <exception cref="T:System.ArgumentException">The count of arguments does not equal the number of variables declared by lambda, or arguments contains an expression that has a result type that is not equal or promotable to the corresponding variable type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression Invoke (this System.Data.Entity.Core.Common.CommandTrees.DbLambda lambda, params System.Data.Entity.Core.Common.CommandTrees.DbExpression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression Invoke(class System.Data.Entity.Core.Common.CommandTrees.DbLambda lambda, class System.Data.Entity.Core.Common.CommandTrees.DbExpression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Invoke (lambda As DbLambda, ParamArray arguments As DbExpression()) As DbLambdaExpression" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Data.Entity.Core.Common.CommandTrees.DbLambda * System.Data.Entity.Core.Common.CommandTrees.DbExpression[] -&gt; System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke (lambda, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lambda" Type="System.Data.Entity.Core.Common.CommandTrees.DbLambda" RefType="this" />
        <Parameter Name="arguments" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="lambda">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> instance representing the Lambda function to apply.
            </param>
        <param name="arguments">Expressions that provide the arguments.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> representing the application of the specified Lambda function to the given arguments.
            </summary>
        <returns>A new expression representing the Lambda function application.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">lambda or arguments is null.</exception>
        <exception cref="T:System.ArgumentException">The count of arguments does not equal the number of variables declared by lambda, or arguments contains an expression that has a result type that is not equal or promotable to the corresponding variable type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Invoke (this System.Data.Entity.Core.Metadata.Edm.EdmFunction function, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Invoke(class System.Data.Entity.Core.Metadata.Edm.EdmFunction function, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Invoke (function As EdmFunction, arguments As IEnumerable(Of DbExpression)) As DbFunctionExpression" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Data.Entity.Core.Metadata.Edm.EdmFunction * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke (function, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Data.Entity.Core.Metadata.Edm.EdmFunction" RefType="this" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="function">Metadata for the function to invoke.</param>
        <param name="arguments">A list of expressions that provide the arguments to the function.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> representing the invocation of the specified function with the given arguments.
            </summary>
        <returns>A new DbFunctionExpression representing the function invocation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">function is null, or arguments is null or contains null.</exception>
        <exception cref="T:System.ArgumentException">The count of arguments does not equal the number of parameters declared by function, or arguments contains an expression that has a result type that is not equal or promotable to the corresponding function parameter type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Invoke (this System.Data.Entity.Core.Metadata.Edm.EdmFunction function, params System.Data.Entity.Core.Common.CommandTrees.DbExpression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression Invoke(class System.Data.Entity.Core.Metadata.Edm.EdmFunction function, class System.Data.Entity.Core.Common.CommandTrees.DbExpression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Invoke (function As EdmFunction, ParamArray arguments As DbExpression()) As DbFunctionExpression" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Data.Entity.Core.Metadata.Edm.EdmFunction * System.Data.Entity.Core.Common.CommandTrees.DbExpression[] -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke (function, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Data.Entity.Core.Metadata.Edm.EdmFunction" RefType="this" />
        <Parameter Name="arguments" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="function">Metadata for the function to invoke.</param>
        <param name="arguments">Expressions that provide the arguments to the function.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> representing the invocation of the specified function with the given arguments.
            </summary>
        <returns>A new DbFunctionExpression representing the function invocation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">function is null, or arguments is null or contains null.</exception>
        <exception cref="T:System.ArgumentException">The count of arguments does not equal the number of parameters declared by function, or arguments contains an expression that has a result type that is not equal or promotable to the corresponding function parameter type.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression IsEmpty (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression IsEmpty(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsEmpty (argument As DbExpression) As DbIsEmptyExpression" />
      <MemberSignature Language="F#" Value="static member IsEmpty : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">An expression that specifies the input set.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> that determines whether the specified set argument is an empty set.
            </summary>
        <returns>A new DbIsEmptyExpression with the specified argument.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument is null.</exception>
        <exception cref="T:System.ArgumentException">argument does not have a collection result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression IsNull (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression IsNull(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsNull (argument As DbExpression) As DbIsNullExpression" />
      <MemberSignature Language="F#" Value="static member IsNull : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">An expression that specifies the argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" /> that determines whether the specified argument is null.
            </summary>
        <returns>A new DbIsNullExpression with the specified argument.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument is null.</exception>
        <exception cref="T:System.ArgumentException">argument has a collection result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsOf">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression IsOf (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Metadata.Edm.TypeUsage type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression IsOf(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Metadata.Edm.TypeUsage type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsOf (argument As DbExpression, type As TypeUsage) As DbIsOfExpression" />
      <MemberSignature Language="F#" Value="static member IsOf : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf (argument, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Parameters>
      <Docs>
        <param name="argument">An expression that specifies the instance.</param>
        <param name="type">Type metadata that specifies the type that the instance's result type should be compared to.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> that determines whether the given argument is of the specified type or a subtype.
            </summary>
        <returns>A new DbIsOfExpression with the specified instance and type and DbExpressionKind IsOf.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument or type is null.</exception>
        <exception cref="T:System.ArgumentException">type is not in the same type hierarchy as the result type of argument.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsOfOnly">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression IsOfOnly (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Metadata.Edm.TypeUsage type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression IsOfOnly(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Metadata.Edm.TypeUsage type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsOfOnly (argument As DbExpression, type As TypeUsage) As DbIsOfExpression" />
      <MemberSignature Language="F#" Value="static member IsOfOnly : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly (argument, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Parameters>
      <Docs>
        <param name="argument">An expression that specifies the instance.</param>
        <param name="type">Type metadata that specifies the type that the instance's result type should be compared to.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> expression that determines whether the given argument is of the specified type, and only that type (not a subtype).
            </summary>
        <returns>A new DbIsOfExpression with the specified instance and type and DbExpressionKind IsOfOnly.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument or type is null.</exception>
        <exception cref="T:System.ArgumentException">type is not in the same type hierarchy as the result type of argument.</exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression Join (this System.Data.Entity.Core.Common.CommandTrees.DbExpression outer, System.Data.Entity.Core.Common.CommandTrees.DbExpression inner, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; outerKey, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; innerKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression Join(class System.Data.Entity.Core.Common.CommandTrees.DbExpression outer, class System.Data.Entity.Core.Common.CommandTrees.DbExpression inner, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; outerKey, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; innerKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join (outer As DbExpression, inner As DbExpression, outerKey As Func(Of DbExpression, DbExpression), innerKey As Func(Of DbExpression, DbExpression)) As DbJoinExpression" />
      <MemberSignature Language="F#" Value="static member Join : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join (outer, inner, outerKey, innerKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outer" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="inner" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        <Parameter Name="outerKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        <Parameter Name="innerKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="outer">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the outer set argument.
            </param>
        <param name="inner">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the inner set argument.
            </param>
        <param name="outerKey">A method that specifies how the outer key value should be derived from an element of the outer set.</param>
        <param name="innerKey">A method that specifies how the inner key value should be derived from an element of the inner set.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the outer and inner expressions, on an equality condition between the specified outer and inner keys, using InnerJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of InnerJoin, that represents the inner join operation applied to the left and right input sets under a join condition that compares the outer and inner key values for equality.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by outerKey or innerKey is null.</exception>
        <exception cref="T:System.ArgumentException">The expressions produced by outerKey and innerKey are not comparable for equality.</exception>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;TSelector&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression Join&lt;TSelector&gt; (this System.Data.Entity.Core.Common.CommandTrees.DbExpression outer, System.Data.Entity.Core.Common.CommandTrees.DbExpression inner, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; outerKey, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; innerKey, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,TSelector&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression Join&lt;TSelector&gt;(class System.Data.Entity.Core.Common.CommandTrees.DbExpression outer, class System.Data.Entity.Core.Common.CommandTrees.DbExpression inner, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; outerKey, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; innerKey, class System.Func`3&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression, !!TSelector&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TSelector) (outer As DbExpression, inner As DbExpression, outerKey As Func(Of DbExpression, DbExpression), innerKey As Func(Of DbExpression, DbExpression), selector As Func(Of DbExpression, DbExpression, TSelector)) As DbProjectExpression" />
      <MemberSignature Language="F#" Value="static member Join : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression, 'Selector&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join (outer, inner, outerKey, innerKey, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSelector" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="inner" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        <Parameter Name="outerKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        <Parameter Name="innerKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        <Parameter Name="selector" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,TSelector&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSelector">The type of the  selector .</typeparam>
        <param name="outer">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the outer set argument.
            </param>
        <param name="inner">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the inner set argument.
            </param>
        <param name="outerKey">A method that specifies how the outer key value should be derived from an element of the outer set.</param>
        <param name="innerKey">A method that specifies how the inner key value should be derived from an element of the inner set.</param>
        <param name="selector">
            A method that specifies how an element of the result set should be derived from elements of the inner and outer sets. This method must produce an instance of a type that is compatible with Join and can be resolved into a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            . Compatibility requirements for  TSelector  are described in remarks.
            </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that projects the specified selector over the sets specified by the outer and inner expressions, joined on an equality condition between the specified outer and inner keys, using InnerJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        <returns>
            A new DbProjectExpression with the specified selector as its projection, and a new DbJoinExpression as its input. The input DbJoinExpression is created with an
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of InnerJoin, that represents the inner join operation applied to the left and right input sets under a join condition that compares the outer and inner key values for equality.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The result of selector is null after conversion to DbExpression.</exception>
        <exception cref="T:System.ArgumentException">The result of Selector is not compatible with SelectMany.</exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbLambda Lambda (System.Data.Entity.Core.Common.CommandTrees.DbExpression body, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbLambda Lambda(class System.Data.Entity.Core.Common.CommandTrees.DbExpression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Function Lambda (body As DbExpression, variables As IEnumerable(Of DbVariableReferenceExpression)) As DbLambda" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Data.Entity.Core.Common.CommandTrees.DbExpression * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbLambda" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda (body, variables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbLambda</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">An expression that defines the logic of the Lambda function.</param>
        <param name="variables">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> collection that represents the formal parameters to the Lambda function. These variables are valid for use in the body expression.
            </param>
        <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> with the specified inline Lambda function implementation and formal parameters.
            </summary>
        <returns>A new expression that describes an inline Lambda function with the specified body and formal parameters.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">variables is null or contains null, or body is null.</exception>
        <exception cref="T:System.ArgumentException">variables contains more than one element with the same variable name.</exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbLambda Lambda (System.Data.Entity.Core.Common.CommandTrees.DbExpression body, params System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[] variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbLambda Lambda(class System.Data.Entity.Core.Common.CommandTrees.DbExpression body, class System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[] variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Lambda (body As DbExpression, ParamArray variables As DbVariableReferenceExpression()) As DbLambda" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[] -&gt; System.Data.Entity.Core.Common.CommandTrees.DbLambda" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda (body, variables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbLambda</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        <Parameter Name="variables" Type="System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">An expression that defines the logic of the Lambda function.</param>
        <param name="variables">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> collection that represents the formal parameters to the Lambda function. These variables are valid for use in the body expression.
            </param>
        <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> with the specified inline Lambda function implementation and formal parameters.
            </summary>
        <returns>A new expression that describes an inline Lambda function with the specified body and formal parameters.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">variables is null or contains null, or body is null.</exception>
        <exception cref="T:System.ArgumentException">variables contains more than one element with the same variable name.</exception>
      </Docs>
    </Member>
    <Member MemberName="LeftOuterJoin">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression LeftOuterJoin (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; joinCondition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression LeftOuterJoin(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right, class System.Func`3&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; joinCondition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LeftOuterJoin (left As DbExpression, right As DbExpression, joinCondition As Func(Of DbExpression, DbExpression, DbExpression)) As DbJoinExpression" />
      <MemberSignature Language="F#" Value="static member LeftOuterJoin : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin (left, right, joinCondition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        <Parameter Name="joinCondition" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the left set argument.
            </param>
        <param name="right">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the right set argument.
            </param>
        <param name="joinCondition">A method representing the condition on which to join. This method must produce an expression with a Boolean result type that provides the logic of the join condition.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expressions, on the specified join condition, using LeftOuterJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of LeftOuterJoin, that represents the left outer join operation applied to the left and right input sets under the given join condition.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by joinCondition is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by joinCondition does not have a Boolean result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="LeftOuterJoin">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression LeftOuterJoin (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding left, System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding right, System.Data.Entity.Core.Common.CommandTrees.DbExpression joinCondition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression LeftOuterJoin(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding left, class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding right, class System.Data.Entity.Core.Common.CommandTrees.DbExpression joinCondition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LeftOuterJoin (left As DbExpressionBinding, right As DbExpressionBinding, joinCondition As DbExpression) As DbJoinExpression" />
      <MemberSignature Language="F#" Value="static member LeftOuterJoin : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin (left, right, joinCondition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
        <Parameter Name="joinCondition" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the left set argument.
            </param>
        <param name="right">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the right set argument.
            </param>
        <param name="joinCondition">An expression that specifies the condition on which to join.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expression bindings, on the specified join condition, using LeftOuterJoin as the
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
        <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of LeftOuterJoin, that represents the left outer join operation applied to the left and right     input sets under the given join condition.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
        <exception cref="T:System.ArgumentException">joinCondition does not have a Boolean result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression LessThan (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression LessThan(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LessThan (left As DbExpression, right As DbExpression) As DbComparisonExpression" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that specifies the left argument.</param>
        <param name="right">An expression that specifies the right argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is less than the right argument.
            </summary>
        <returns>A new DbComparisonExpression representing the less-than comparison.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common order-comparable result type exists between left and right.</exception>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression LessThanOrEqual (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression LessThanOrEqual(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LessThanOrEqual (left As DbExpression, right As DbExpression) As DbComparisonExpression" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that specifies the left argument.</param>
        <param name="right">An expression that specifies the right argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is less than or equal to the right argument.
            </summary>
        <returns>A new DbComparisonExpression representing the less-than-or-equal-to comparison.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common result type that is both equality- and order-comparable exists between left and right.</exception>
      </Docs>
    </Member>
    <Member MemberName="Like">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression Like (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Common.CommandTrees.DbExpression pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression Like(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Like (argument As DbExpression, pattern As DbExpression) As DbLikeExpression" />
      <MemberSignature Language="F#" Value="static member Like : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like (argument, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="pattern" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="argument">An expression that specifies the input string.</param>
        <param name="pattern">An expression that specifies the pattern string.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> that compares the specified input string to the given pattern.
            </summary>
        <returns>A new DbLikeExpression with the specified input, pattern and a null escape.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Argument or pattern is null.</exception>
        <exception cref="T:System.ArgumentException">Argument or pattern does not have a string result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Like">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression Like (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Common.CommandTrees.DbExpression pattern, System.Data.Entity.Core.Common.CommandTrees.DbExpression escape);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression Like(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression pattern, class System.Data.Entity.Core.Common.CommandTrees.DbExpression escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Like (argument As DbExpression, pattern As DbExpression, escape As DbExpression) As DbLikeExpression" />
      <MemberSignature Language="F#" Value="static member Like : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like (argument, pattern, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="pattern" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        <Parameter Name="escape" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="argument">An expression that specifies the input string.</param>
        <param name="pattern">An expression that specifies the pattern string.</param>
        <param name="escape">An optional expression that specifies the escape string.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> that compares the specified input string to the given pattern using the optional escape.
            </summary>
        <returns>A new DbLikeExpression with the specified input, pattern and escape.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument,  pattern or escape is null.</exception>
        <exception cref="T:System.ArgumentException">argument,  pattern or escape does not have a string result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Limit">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression Limit (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Common.CommandTrees.DbExpression count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression Limit(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Limit (argument As DbExpression, count As DbExpression) As DbLimitExpression" />
      <MemberSignature Language="F#" Value="static member Limit : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit (argument, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="count" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="argument">An expression that specifies the input collection.</param>
        <param name="count">An expression that specifies the limit value.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> that restricts the number of elements in the Argument collection to the specified count Limit value. Tied results are not included in the output.
            </summary>
        <returns>A new DbLimitExpression with the specified argument and count limit values that does not include tied results.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument or count is null.</exception>
        <exception cref="T:System.ArgumentException">argument does not have a collection result type, or count does not have a result type that is equal or promotable to a 64-bit integer type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Minus">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Minus (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Minus(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Minus (left As DbExpression, right As DbExpression) As DbArithmeticExpression" />
      <MemberSignature Language="F#" Value="static member Minus : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that specifies the left argument.</param>
        <param name="right">An expression that specifies the right argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that subtracts the right argument from the left argument.
            </summary>
        <returns>A new DbArithmeticExpression representing the subtraction operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common numeric result type exists between left and right.</exception>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Modulo (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Modulo(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Modulo (left As DbExpression, right As DbExpression) As DbArithmeticExpression" />
      <MemberSignature Language="F#" Value="static member Modulo : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that specifies the left argument.</param>
        <param name="right">An expression that specifies the right argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that computes the remainder of the left argument divided by the right argument.
            </summary>
        <returns>A new DbArithmeticExpression representing the modulo operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common numeric result type exists between left and right.</exception>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Multiply (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Multiply(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Multiply (left As DbExpression, right As DbExpression) As DbArithmeticExpression" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that specifies the left argument.</param>
        <param name="right">An expression that specifies the right argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that multiplies the left argument by the right argument.
            </summary>
        <returns>A new DbArithmeticExpression representing the multiplication operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common numeric result type exists between left and right.</exception>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression Navigate (this System.Data.Entity.Core.Common.CommandTrees.DbExpression navigateFrom, System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember fromEnd, System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember toEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression Navigate(class System.Data.Entity.Core.Common.CommandTrees.DbExpression navigateFrom, class System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember fromEnd, class System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember toEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Navigate (navigateFrom As DbExpression, fromEnd As RelationshipEndMember, toEnd As RelationshipEndMember) As DbRelationshipNavigationExpression" />
      <MemberSignature Language="F#" Value="static member Navigate : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember * System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate (navigateFrom, fromEnd, toEnd)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigateFrom" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="fromEnd" Type="System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" />
        <Parameter Name="toEnd" Type="System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" />
      </Parameters>
      <Docs>
        <param name="navigateFrom">An expression that specifies the instance from which navigation should occur.</param>
        <param name="fromEnd">Metadata for the property that represents the end of the relationship from which navigation should occur.</param>
        <param name="toEnd">Metadata for the property that represents the end of the relationship to which navigation should occur.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> representing the navigation of a composition or association relationship.
            </summary>
        <returns>A new DbRelationshipNavigationExpression representing the navigation of the specified from and to relation ends of the specified relation type from the specified navigation source instance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">fromEnd, toEnd or navigateFrom is null.</exception>
        <exception cref="T:System.ArgumentException">fromEnd and toEnd are not declared by the same relationship type, or navigateFrom has a result type that is not compatible with the property type of fromEnd.</exception>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression Navigate (this System.Data.Entity.Core.Metadata.Edm.RelationshipType type, string fromEndName, string toEndName, System.Data.Entity.Core.Common.CommandTrees.DbExpression navigateFrom);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression Navigate(class System.Data.Entity.Core.Metadata.Edm.RelationshipType type, string fromEndName, string toEndName, class System.Data.Entity.Core.Common.CommandTrees.DbExpression navigateFrom) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Navigate (type As RelationshipType, fromEndName As String, toEndName As String, navigateFrom As DbExpression) As DbRelationshipNavigationExpression" />
      <MemberSignature Language="F#" Value="static member Navigate : System.Data.Entity.Core.Metadata.Edm.RelationshipType * string * string * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate (type, fromEndName, toEndName, navigateFrom)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.RelationshipType" RefType="this" />
        <Parameter Name="fromEndName" Type="System.String" />
        <Parameter Name="toEndName" Type="System.String" />
        <Parameter Name="navigateFrom" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="type">Metadata for the relation type that represents the relationship.</param>
        <param name="fromEndName">The name of the property of the relation type that represents the end of the relationship from which navigation should occur.</param>
        <param name="toEndName">The name of the property of the relation type that represents the end of the relationship to which navigation should occur.</param>
        <param name="navigateFrom">An expression the specifies the instance from which navigation should occur.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> representing the navigation of a composition or association relationship.
            </summary>
        <returns>A new DbRelationshipNavigationExpression representing the navigation of the specified from and to relation ends of the specified relation type from the specified navigation source instance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">type, fromEndName, toEndName or navigateFrom is null.</exception>
        <exception cref="T:System.ArgumentException">type is not associated with this command tree's metadata workspace or navigateFrom is associated with a different command tree, or type does not declare a relation end property with name toEndName or fromEndName, or navigateFrom has a result type that is not compatible with the property type of the relation end property with name fromEndName.</exception>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Negate (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Negate(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Negate (argument As DbExpression) As DbArithmeticExpression" />
      <MemberSignature Language="F#" Value="static member Negate : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">An expression that specifies the argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that negates the value of the argument.
            </summary>
        <returns>A new DbArithmeticExpression representing the negation operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument is null.</exception>
        <exception cref="T:System.ArgumentException">No numeric result type exists for argument.</exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression New (this System.Data.Entity.Core.Metadata.Edm.TypeUsage instanceType, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression New(class System.Data.Entity.Core.Metadata.Edm.TypeUsage instanceType, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function New (instanceType As TypeUsage, arguments As IEnumerable(Of DbExpression)) As DbNewInstanceExpression" />
      <MemberSignature Language="F#" Value="static member New : System.Data.Entity.Core.Metadata.Edm.TypeUsage * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New (instanceType, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" RefType="this" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="instanceType">The type of the new instance.</param>
        <param name="arguments">Expressions that specify values of the new instances, interpreted according to the instance's type.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />. If the type argument is a collection type, the arguments specify the elements of the collection. Otherwise the arguments are used as property or column values in the new instance.
            </summary>
        <returns>A new DbNewInstanceExpression with the specified type and arguments.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">instanceType or arguments is null, or arguments contains null.</exception>
        <exception cref="T:System.ArgumentException">arguments is empty or the result types of the contained expressions do not match the requirements of instanceType  (as explained in the remarks section).</exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression New (this System.Data.Entity.Core.Metadata.Edm.TypeUsage instanceType, params System.Data.Entity.Core.Common.CommandTrees.DbExpression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression New(class System.Data.Entity.Core.Metadata.Edm.TypeUsage instanceType, class System.Data.Entity.Core.Common.CommandTrees.DbExpression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function New (instanceType As TypeUsage, ParamArray arguments As DbExpression()) As DbNewInstanceExpression" />
      <MemberSignature Language="F#" Value="static member New : System.Data.Entity.Core.Metadata.Edm.TypeUsage * System.Data.Entity.Core.Common.CommandTrees.DbExpression[] -&gt; System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New (instanceType, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" RefType="this" />
        <Parameter Name="arguments" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instanceType">The type of the new instance.</param>
        <param name="arguments">Expressions that specify values of the new instances, interpreted according to the instance's type.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />. If the type argument is a collection type, the arguments specify the elements of the collection. Otherwise the arguments are used as property or column values in the new instance.
            </summary>
        <returns>A new DbNewInstanceExpression with the specified type and arguments.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">instanceType or arguments is null, or arguments contains null.</exception>
        <exception cref="T:System.ArgumentException">arguments is empty or the result types of the contained expressions do not match the requirements of instanceType  (as explained in the remarks section).</exception>
      </Docs>
    </Member>
    <Member MemberName="NewCollection">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression NewCollection (System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; elements);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression NewCollection(class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; elements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Function NewCollection (elements As IEnumerable(Of DbExpression)) As DbNewInstanceExpression" />
      <MemberSignature Language="F#" Value="static member NewCollection : seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection elements" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elements" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="elements">A list of expressions that provide the elements of the collection.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that constructs a collection containing the specified elements. The type of the collection is based on the common type of the elements. If no common element type exists an exception is thrown.
            </summary>
        <returns>A new DbNewInstanceExpression with the specified collection type and arguments.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">elements is null, or contains null.</exception>
        <exception cref="T:System.ArgumentException">elements is empty or contains expressions for which no common result type exists.</exception>
      </Docs>
    </Member>
    <Member MemberName="NewCollection">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression NewCollection (params System.Data.Entity.Core.Common.CommandTrees.DbExpression[] elements);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression NewCollection(class System.Data.Entity.Core.Common.CommandTrees.DbExpression[] elements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Entity.Core.Common.CommandTrees.DbExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Function NewCollection (ParamArray elements As DbExpression()) As DbNewInstanceExpression" />
      <MemberSignature Language="F#" Value="static member NewCollection : System.Data.Entity.Core.Common.CommandTrees.DbExpression[] -&gt; System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection elements" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elements" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="elements">A list of expressions that provide the elements of the collection.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that constructs a collection containing the specified elements. The type of the collection is based on the common type of the elements. If no common element type exists an exception is thrown.
            </summary>
        <returns>A new DbNewInstanceExpression with the specified collection type and arguments.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">elements is null, or contains null..</exception>
        <exception cref="T:System.ArgumentException">elements is empty or contains expressions for which no common result type exists.</exception>
      </Docs>
    </Member>
    <Member MemberName="NewEmptyCollection">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression NewEmptyCollection (this System.Data.Entity.Core.Metadata.Edm.TypeUsage collectionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression NewEmptyCollection(class System.Data.Entity.Core.Metadata.Edm.TypeUsage collectionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function NewEmptyCollection (collectionType As TypeUsage) As DbNewInstanceExpression" />
      <MemberSignature Language="F#" Value="static member NewEmptyCollection : System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection collectionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" RefType="this" />
      </Parameters>
      <Docs>
        <param name="collectionType">The type metadata for the collection to create</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that constructs an empty collection of the specified collection type.
            </summary>
        <returns>A new DbNewInstanceExpression with the specified collection type and an empty Arguments list.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">collectionType is null.</exception>
        <exception cref="T:System.ArgumentException">collectionType is not a collection type.</exception>
      </Docs>
    </Member>
    <Member MemberName="NewRow">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression NewRow (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; columnValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression NewRow(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; columnValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" />
      <MemberSignature Language="VB.NET" Value="Public Function NewRow (columnValues As IEnumerable(Of KeyValuePair(Of String, DbExpression))) As DbNewInstanceExpression" />
      <MemberSignature Language="F#" Value="static member NewRow : seq&lt;System.Collections.Generic.KeyValuePair&lt;string, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow columnValues" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnValues" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="columnValues">A list of string-DbExpression key-value pairs that defines the structure and values of the row.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that produces a row with the specified named columns and the given values, specified as expressions.
            </summary>
        <returns>A new DbNewInstanceExpression that represents the construction of the row.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">columnValues is null or contains an element with a null column name or expression.</exception>
        <exception cref="T:System.ArgumentException">columnValues is empty, or contains a duplicate or invalid column name.</exception>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbNotExpression Not (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbNotExpression Not(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Not (argument As DbExpression) As DbNotExpression" />
      <MemberSignature Language="F#" Value="static member Not : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbNotExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">A Boolean expression that specifies the argument.</param>
        <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> that performs the logical negation of the given argument.
            </summary>
        <returns>A new DbNotExpression with the specified argument.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument is null.</exception>
        <exception cref="T:System.ArgumentException">argument does not have a Boolean result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression NotEqual (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression NotEqual(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function NotEqual (left As DbExpression, right As DbExpression) As DbComparisonExpression" />
      <MemberSignature Language="F#" Value="static member NotEqual : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that specifies the left argument.</param>
        <param name="right">An expression that specifies the right argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that compares the left and right arguments for inequality.
            </summary>
        <returns>A new DbComparisonExpression representing the inequality comparison.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common equality-comparable result type exists between left and right.</exception>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbNullExpression Null (this System.Data.Entity.Core.Metadata.Edm.TypeUsage nullType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbNullExpression Null(class System.Data.Entity.Core.Metadata.Edm.TypeUsage nullType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Null (nullType As TypeUsage) As DbNullExpression" />
      <MemberSignature Language="F#" Value="static member Null : System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null nullType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbNullExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nullType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" RefType="this" />
      </Parameters>
      <Docs>
        <param name="nullType">The type of the null value.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />, which represents a typed null value.
            </summary>
        <returns>An instance of DbNullExpression.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">nullType is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="OfType">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression OfType (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Metadata.Edm.TypeUsage type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression OfType(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Metadata.Edm.TypeUsage type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OfType (argument As DbExpression, type As TypeUsage) As DbOfTypeExpression" />
      <MemberSignature Language="F#" Value="static member OfType : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType (argument, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Parameters>
      <Docs>
        <param name="argument">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
        <param name="type">Type metadata for the type that elements of the input set must have to be included in the resulting set.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> that produces a set consisting of the elements of the given input set that are of the specified type.
            </summary>
        <returns>
            A new DbOfTypeExpression with the specified set argument and type, and an ExpressionKind of
            <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType" />
            .
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument or type is null.</exception>
        <exception cref="T:System.ArgumentException">argument does not have a collection result type, or type is not a type in the same type hierarchy as the element type of the collection result type of argument.</exception>
      </Docs>
    </Member>
    <Member MemberName="OfTypeOnly">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression OfTypeOnly (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Metadata.Edm.TypeUsage type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression OfTypeOnly(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Metadata.Edm.TypeUsage type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OfTypeOnly (argument As DbExpression, type As TypeUsage) As DbOfTypeExpression" />
      <MemberSignature Language="F#" Value="static member OfTypeOnly : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly (argument, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Parameters>
      <Docs>
        <param name="argument">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
        <param name="type">Type metadata for the type that elements of the input set must match exactly to be included in the resulting set.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> that produces a set consisting of the elements of the given input set that are of exactly the specified type.
            </summary>
        <returns>
            A new DbOfTypeExpression with the specified set argument and type, and an ExpressionKind of
            <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly" />
            .
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument or type is null.</exception>
        <exception cref="T:System.ArgumentException">argument does not have a collection result type, or type is not a type in the same type hierarchy as the element type of the collection result type of argument.</exception>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbOrExpression Or (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbOrExpression Or(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Or (left As DbExpression, right As DbExpression) As DbOrExpression" />
      <MemberSignature Language="F#" Value="static member Or : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbOrExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">A Boolean expression that specifies the left argument.</param>
        <param name="right">A Boolean expression that specifies the right argument.</param>
        <summary>
            Creates an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" /> that performs the logical Or of the left and right arguments.
            </summary>
        <returns>A new DbOrExpression with the specified arguments.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">left or right does not have a Boolean result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderBy (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderBy(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy (source As DbExpression, sortKey As Func(Of DbExpression, DbExpression)) As DbSortExpression" />
      <MemberSignature Language="F#" Value="static member OrderBy : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy (source, sortKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="source">An expression that specifies the input set.</param>
        <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with ascending sort order and default collation.
            </summary>
        <returns>A new DbSortExpression that represents the order-by operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderBy (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderBy(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy (source As DbExpression, sortKey As Func(Of DbExpression, DbExpression), collation As String) As DbSortExpression" />
      <MemberSignature Language="F#" Value="static member OrderBy : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy (source, sortKey, collation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        <Parameter Name="collation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">An expression that specifies the input set.</param>
        <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
        <param name="collation">The collation to sort under.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with ascending sort order and the specified collation.
            </summary>
        <returns>A new DbSortExpression that represents the order-by operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by sortKey  does not have an order-comparable string result type.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
      </Docs>
    </Member>
    <Member MemberName="OrderByDescending">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderByDescending (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderByDescending(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending (source As DbExpression, sortKey As Func(Of DbExpression, DbExpression)) As DbSortExpression" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending (source, sortKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="source">An expression that specifies the input set.</param>
        <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with descending sort order and default collation.
            </summary>
        <returns>A new DbSortExpression that represents the order-by operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="OrderByDescending">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderByDescending (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression OrderByDescending(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending (source As DbExpression, sortKey As Func(Of DbExpression, DbExpression), collation As String) As DbSortExpression" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending (source, sortKey, collation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        <Parameter Name="collation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">An expression that specifies the input set.</param>
        <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
        <param name="collation">The collation to sort under.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with descending sort order and the specified collation.
            </summary>
        <returns>A new DbSortExpression that represents the order-by operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable string result type.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
      </Docs>
    </Member>
    <Member MemberName="OuterApply">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression OuterApply (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair&lt;string,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; apply);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression OuterApply(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; apply) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OuterApply (source As DbExpression, apply As Func(Of DbExpression, KeyValuePair(Of String, DbExpression))) As DbApplyExpression" />
      <MemberSignature Language="F#" Value="static member OuterApply : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Collections.Generic.KeyValuePair&lt;string, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply (source, apply)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="apply" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
        <param name="apply">A method that specifies the logic to evaluate once for each member of the input set.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set have an apply column value of null.
            </summary>
        <returns>
            An new DbApplyExpression with the specified input and apply bindings and an
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of OuterApply.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The result of apply contains a name or expression that is null.</exception>
        <exception cref="T:System.ArgumentException">The result of apply contains a name or expression that is not valid in an expression binding.</exception>
      </Docs>
    </Member>
    <Member MemberName="OuterApply">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression OuterApply (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding apply);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression OuterApply(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding apply) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OuterApply (input As DbExpressionBinding, apply As DbExpressionBinding) As DbApplyExpression" />
      <MemberSignature Language="F#" Value="static member OuterApply : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding -&gt; System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply (input, apply)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
        <Parameter Name="apply" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />
      </Parameters>
      <Docs>
        <param name="input">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </param>
        <param name="apply">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies logic to evaluate once for each member of the input set.
            </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set have an apply column value of null.
            </summary>
        <returns>
            An new DbApplyExpression with the specified input and apply bindings and an
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of OuterApply.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">input or apply is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression Parameter (this System.Data.Entity.Core.Metadata.Edm.TypeUsage type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression Parameter(class System.Data.Entity.Core.Metadata.Edm.TypeUsage type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Parameter (type As TypeUsage, name As String) As DbParameterReferenceExpression" />
      <MemberSignature Language="F#" Value="static member Parameter : System.Data.Entity.Core.Metadata.Edm.TypeUsage * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the referenced parameter.</param>
        <param name="name">The name of the referenced parameter.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> that references a parameter with the specified name and type.
            </summary>
        <returns>A DbParameterReferenceExpression that represents a reference to a parameter with the specified name and type. The result type of the expression will be the same as type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Plus">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Plus (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression Plus(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Plus (left As DbExpression, right As DbExpression) As DbArithmeticExpression" />
      <MemberSignature Language="F#" Value="static member Plus : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that specifies the left argument.</param>
        <param name="right">An expression that specifies the right argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that adds the left argument to the right argument.
            </summary>
        <returns>A new DbArithmeticExpression representing the addition operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common numeric result type exists between left and right.</exception>
      </Docs>
    </Member>
    <Member MemberName="Project">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression Project (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Data.Entity.Core.Common.CommandTrees.DbExpression projection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression Project(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Data.Entity.Core.Common.CommandTrees.DbExpression projection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Project (input As DbExpressionBinding, projection As DbExpression) As DbProjectExpression" />
      <MemberSignature Language="F#" Value="static member Project : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project (input, projection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
        <Parameter Name="projection" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="input">An expression binding that specifies the input set.</param>
        <param name="projection">An expression to project over the set.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that projects the specified expression over the given input set.
            </summary>
        <returns>A new DbProjectExpression that represents the projection operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">input or projection is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, System.Data.Entity.Core.Metadata.Edm.EdmProperty propertyMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property(class System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, class System.Data.Entity.Core.Metadata.Edm.EdmProperty propertyMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EdmProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Property (instance As DbExpression, propertyMetadata As EdmProperty) As DbPropertyExpression" />
      <MemberSignature Language="F#" Value="static member Property : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.EdmProperty -&gt; System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property (instance, propertyMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters", Justification="required for this feature")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="propertyMetadata" Type="System.Data.Entity.Core.Metadata.Edm.EdmProperty" />
      </Parameters>
      <Docs>
        <param name="instance">The instance from which to retrieve the property. May be null if the property is static.</param>
        <param name="propertyMetadata">Metadata for the property to retrieve.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the specified property.
            </summary>
        <returns>A new DbPropertyExpression representing the property retrieval.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">propertyMetadata is null or instance is null and the property is not static.</exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, System.Data.Entity.Core.Metadata.Edm.NavigationProperty navigationProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property(class System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, class System.Data.Entity.Core.Metadata.Edm.NavigationProperty navigationProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.NavigationProperty)" />
      <MemberSignature Language="F#" Value="static member Property : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.NavigationProperty -&gt; System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property (instance, navigationProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters", Justification="required for this feature")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="navigationProperty" Type="System.Data.Entity.Core.Metadata.Edm.NavigationProperty" />
      </Parameters>
      <Docs>
        <param name="instance">The instance from which to retrieve the navigation property.</param>
        <param name="navigationProperty">Metadata for the navigation property to retrieve.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the specified navigation property.
            </summary>
        <returns>A new DbPropertyExpression representing the navigation property retrieval.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">navigationProperty or instance is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember relationshipEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property(class System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, class System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember relationshipEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Property (instance As DbExpression, relationshipEnd As RelationshipEndMember) As DbPropertyExpression" />
      <MemberSignature Language="F#" Value="static member Property : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember -&gt; System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property (instance, relationshipEnd)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters", Justification="required for this feature")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="relationshipEnd" Type="System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" />
      </Parameters>
      <Docs>
        <param name="instance">The instance from which to retrieve the relationship end member.</param>
        <param name="relationshipEnd">Metadata for the relationship end member to retrieve.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the specified relationship end member.
            </summary>
        <returns>A new DbPropertyExpression representing the relationship end member retrieval.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">relationshipEnd is null or instance is null and the property is not static.</exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression Property(class System.Data.Entity.Core.Common.CommandTrees.DbExpression instance, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Property (instance As DbExpression, propertyName As String) As DbPropertyExpression" />
      <MemberSignature Language="F#" Value="static member Property : System.Data.Entity.Core.Common.CommandTrees.DbExpression * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property (instance, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instance">The instance from which to retrieve the property.</param>
        <param name="propertyName">The name of the property to retrieve.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the instance property with the specified name from the given instance.
            </summary>
        <returns>A new DbPropertyExpression that represents the property retrieval.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">propertyName is null or instance is null and the property is not static.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">No property with the specified name is declared by the type of instance.</exception>
      </Docs>
    </Member>
    <Member MemberName="RefFromKey">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRefExpression RefFromKey (this System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, System.Data.Entity.Core.Common.CommandTrees.DbExpression keyRow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRefExpression RefFromKey(class System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, class System.Data.Entity.Core.Common.CommandTrees.DbExpression keyRow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="F#" Value="static member RefFromKey : System.Data.Entity.Core.Metadata.Edm.EntitySet * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey (entitySet, keyRow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRefExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySet" RefType="this" />
        <Parameter Name="keyRow" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="entitySet">The Entity set in which the referenced element resides.</param>
        <param name="keyRow">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that constructs a record with columns that match (in number, type, and order) the Key properties of the referenced Entity type.
            </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific Entity based on key values.
            </summary>
        <returns>A new DbRefExpression that references the element with the specified key values in the given Entity set.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">entitySet or keyRow is null.</exception>
        <exception cref="T:System.ArgumentException">keyRow does not have a record result type that matches the key properties of the referenced entity set's entity type.</exception>
      </Docs>
    </Member>
    <Member MemberName="RefFromKey">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbRefExpression RefFromKey (this System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, System.Data.Entity.Core.Common.CommandTrees.DbExpression keyRow, System.Data.Entity.Core.Metadata.Edm.EntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbRefExpression RefFromKey(class System.Data.Entity.Core.Metadata.Edm.EntitySet entitySet, class System.Data.Entity.Core.Common.CommandTrees.DbExpression keyRow, class System.Data.Entity.Core.Metadata.Edm.EntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EntityType)" />
      <MemberSignature Language="F#" Value="static member RefFromKey : System.Data.Entity.Core.Metadata.Edm.EntitySet * System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.EntityType -&gt; System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey (entitySet, keyRow, entityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbRefExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySet" RefType="this" />
        <Parameter Name="keyRow" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        <Parameter Name="entityType" Type="System.Data.Entity.Core.Metadata.Edm.EntityType" />
      </Parameters>
      <Docs>
        <param name="entitySet">The Entity set in which the referenced element resides.</param>
        <param name="keyRow">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that constructs a record with columns that match (in number, type, and order) the Key properties of the referenced Entity type.
            </param>
        <param name="entityType">The type of the Entity that the reference should refer to.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific Entity based on key values.
            </summary>
        <returns>A new DbRefExpression that references the element with the specified key values in the given Entity set.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">entitySet, keyRow or entityType is null.</exception>
        <exception cref="T:System.ArgumentException">entityType is not in the same type hierarchy as the entity set's entity type, or keyRow does not have a record result type that matches the key properties of the referenced entity set's entity type.</exception>
      </Docs>
    </Member>
    <Member MemberName="Scan">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbScanExpression Scan (this System.Data.Entity.Core.Metadata.Edm.EntitySetBase targetSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbScanExpression Scan(class System.Data.Entity.Core.Metadata.Edm.EntitySetBase targetSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Scan (targetSet As EntitySetBase) As DbScanExpression" />
      <MemberSignature Language="F#" Value="static member Scan : System.Data.Entity.Core.Metadata.Edm.EntitySetBase -&gt; System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan targetSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbScanExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetSet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySetBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="targetSet">Metadata for the entity or relationship set to reference.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" /> that references the specified entity or relationship set.
            </summary>
        <returns>A new DbScanExpression based on the specified entity or relationship set.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">targetSet is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="Select&lt;TProjection&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression Select&lt;TProjection&gt; (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,TProjection&gt; projection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression Select&lt;TProjection&gt;(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, !!TProjection&gt; projection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TProjection) (source As DbExpression, projection As Func(Of DbExpression, TProjection)) As DbProjectExpression" />
      <MemberSignature Language="F#" Value="static member Select : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, 'Projection&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select (source, projection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProjection" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="projection" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,TProjection&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProjection">The method result type of projection.</typeparam>
        <param name="source">An expression that specifies the input set.</param>
        <param name="projection">
            A method that specifies how to derive the projected expression given a member of the input set. This method must produce an instance of a type that is compatible with Select and can be resolved into a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            . Compatibility requirements for  TProjection  are described in remarks.
            </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that selects the specified expression over the given input set.
            </summary>
        <returns>A new DbProjectExpression that represents the select operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The result of projection is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression SelectMany (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; apply);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression SelectMany(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; apply) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany (source As DbExpression, apply As Func(Of DbExpression, DbExpression)) As DbProjectExpression" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany (source, apply)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="apply" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
        <param name="apply">A method that represents the logic to evaluate once for each member of the input set.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included. A
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />
            is then created that selects the apply column from each row, producing the overall collection of apply results.
            </summary>
        <returns>
            An new DbProjectExpression that selects the apply column from a new DbApplyExpression with the specified input and apply bindings and an
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of CrossApply.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by apply is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by apply does not have a collection type.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSelector&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression SelectMany&lt;TSelector&gt; (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; apply, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,TSelector&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression SelectMany&lt;TSelector&gt;(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; apply, class System.Func`3&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression, !!TSelector&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSelector) (source As DbExpression, apply As Func(Of DbExpression, DbExpression), selector As Func(Of DbExpression, DbExpression, TSelector)) As DbProjectExpression" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression, 'Selector&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany (source, apply, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSelector" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="apply" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        <Parameter Name="selector" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,TSelector&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSelector">The method result type of selector.</typeparam>
        <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
        <param name="apply">A method that represents the logic to evaluate once for each member of the input set. </param>
        <param name="selector">
            A method that specifies how an element of the result set should be derived given an element of the input and apply sets. This method must produce an instance of a type that is compatible with SelectMany and can be resolved into a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            . Compatibility requirements for  TSelector  are described in remarks.
            </param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included. A
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />
            is then created that selects the specified selector over each row, producing the overall collection of results.
            </summary>
        <returns>
            An new DbProjectExpression that selects the result of the given selector from a new DbApplyExpression with the specified input and apply bindings and an
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of CrossApply.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The result of selector is null on conversion to DbExpression.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by apply does not have a collection type. does not have a collection type. </exception>
      </Docs>
    </Member>
    <Member MemberName="SetClause">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSetClause SetClause (System.Data.Entity.Core.Common.CommandTrees.DbExpression property, System.Data.Entity.Core.Common.CommandTrees.DbExpression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSetClause SetClause(class System.Data.Entity.Core.Common.CommandTrees.DbExpression property, class System.Data.Entity.Core.Common.CommandTrees.DbExpression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SetClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetClause (property As DbExpression, value As DbExpression) As DbSetClause" />
      <MemberSignature Language="F#" Value="static member SetClause : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSetClause" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SetClause (property, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSetClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
        <Parameter Name="value" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="property">The property to be set.</param>
        <param name="value">The value to set the property to.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause" /> representing setting a property to a value.
            </summary>
        <returns>The newly created set clause.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression Skip (this System.Data.Entity.Core.Common.CommandTrees.DbSortExpression argument, System.Data.Entity.Core.Common.CommandTrees.DbExpression count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression Skip(class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression argument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip (argument As DbSortExpression, count As DbExpression) As DbSkipExpression" />
      <MemberSignature Language="F#" Value="static member Skip : System.Data.Entity.Core.Common.CommandTrees.DbSortExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip (argument, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" RefType="this" />
        <Parameter Name="count" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="argument">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that specifies the sorted input set.
            </param>
        <param name="count">An expression the specifies how many elements of the ordered set to skip.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> that skips the specified number of elements from the given sorted input set.
            </summary>
        <returns>A new DbSkipExpression that represents the skip operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument or count is null.</exception>
        <exception cref="T:System.ArgumentException">
            count is not <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> or
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />
            or has a result type that is not equal or promotable to a 64-bit integer type.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression Skip (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt; sortOrder, System.Data.Entity.Core.Common.CommandTrees.DbExpression count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression Skip(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt; sortOrder, class System.Data.Entity.Core.Common.CommandTrees.DbExpression count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip (input As DbExpressionBinding, sortOrder As IEnumerable(Of DbSortClause), count As DbExpression) As DbSkipExpression" />
      <MemberSignature Language="F#" Value="static member Skip : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt; * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip (input, sortOrder, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
        <Parameter Name="sortOrder" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt;" />
        <Parameter Name="count" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="input">An expression binding that specifies the input set.</param>
        <param name="sortOrder">A list of sort specifications that determine how the elements of the input set should be sorted.</param>
        <param name="count">An expression the specifies how many elements of the ordered set to skip.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> that sorts the given input set by the given sort specifications before skipping the specified number of elements.
            </summary>
        <returns>A new DbSkipExpression that represents the skip operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">input, sortOrder or count is null, or sortOrder contains null.</exception>
        <exception cref="T:System.ArgumentException">
            sortOrder is empty, or count is not <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> or
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />
            or has a result type that is not equal or promotable to a 64-bit integer type.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression Sort (this System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt; sortOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression Sort(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding input, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt; sortOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sort (input As DbExpressionBinding, sortOrder As IEnumerable(Of DbSortClause)) As DbSortExpression" />
      <MemberSignature Language="F#" Value="static member Sort : System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding * seq&lt;System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort (input, sortOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" RefType="this" />
        <Parameter Name="sortOrder" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Common.CommandTrees.DbSortClause&gt;" />
      </Parameters>
      <Docs>
        <param name="input">An expression binding that specifies the input set.</param>
        <param name="sortOrder">A list of sort specifications that determine how the elements of the input set should be sorted.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort specifications.
            </summary>
        <returns>A new DbSortExpression that represents the sort operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">input or sortOrder is null, or sortOrder contains null.</exception>
        <exception cref="T:System.ArgumentException">sortOrder is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Take">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression Take (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Common.CommandTrees.DbExpression count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression Take(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Common.CommandTrees.DbExpression count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take (argument As DbExpression, count As DbExpression) As DbLimitExpression" />
      <MemberSignature Language="F#" Value="static member Take : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take (argument, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="count" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="argument">An expression that specifies the input collection.</param>
        <param name="count">An expression that specifies the limit value.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> that restricts the number of elements in the Argument collection to the specified count Limit value. Tied results are not included in the output.
            </summary>
        <returns>A new DbLimitExpression with the specified argument and count limit values that does not include tied results.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument or count is null.</exception>
        <exception cref="T:System.ArgumentException">argument does not have a collection result type, count does not have a result type that is equal or promotable to a 64-bit integer type.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThenBy">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenBy (this System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenBy(class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy (source As DbSortExpression, sortKey As Func(Of DbExpression, DbExpression)) As DbSortExpression" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Data.Entity.Core.Common.CommandTrees.DbSortExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy (source, sortKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" RefType="this" />
        <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="source">A DbSortExpression that specifies the ordered input set.</param>
        <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in ascending sort order and  with default collation.
            </summary>
        <returns>A new DbSortExpression that represents the new overall order-by operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
        <exception cref="T:System.ArgumentException">sortKey does not have an order-comparable result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThenBy">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenBy (this System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenBy(class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy (source As DbSortExpression, sortKey As Func(Of DbExpression, DbExpression), collation As String) As DbSortExpression" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Data.Entity.Core.Common.CommandTrees.DbSortExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy (source, sortKey, collation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" RefType="this" />
        <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        <Parameter Name="collation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">A DbSortExpression that specifies the ordered input set.</param>
        <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
        <param name="collation">The collation to sort under.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in ascending sort order and  with the specified collation.
            </summary>
        <returns>A new DbSortExpression that represents the new overall order-by operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable string result type.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThenByDescending">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenByDescending (this System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenByDescending(class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending (source As DbSortExpression, sortKey As Func(Of DbExpression, DbExpression)) As DbSortExpression" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Data.Entity.Core.Common.CommandTrees.DbSortExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending (source, sortKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" RefType="this" />
        <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="source">A DbSortExpression that specifies the ordered input set.</param>
        <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in descending sort order and  with default collation.
            </summary>
        <returns>A new DbSortExpression that represents the new overall order-by operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThenByDescending">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenByDescending (this System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression ThenByDescending(class System.Data.Entity.Core.Common.CommandTrees.DbSortExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; sortKey, string collation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending (source As DbSortExpression, sortKey As Func(Of DbExpression, DbExpression), collation As String) As DbSortExpression" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Data.Entity.Core.Common.CommandTrees.DbSortExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending (source, sortKey, collation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" RefType="this" />
        <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
        <Parameter Name="collation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">A DbSortExpression that specifies the ordered input set.</param>
        <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition.</param>
        <param name="collation">The collation to sort under.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in descending sort order and  with the specified collation.
            </summary>
        <returns>A new DbSortExpression that represents the new overall order-by operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable string result type.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSortClause">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClause (this System.Data.Entity.Core.Common.CommandTrees.DbExpression key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClause(class System.Data.Entity.Core.Common.CommandTrees.DbExpression key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToSortClause (key As DbExpression) As DbSortClause" />
      <MemberSignature Language="F#" Value="static member ToSortClause : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortClause" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="key">The expression that defines the sort key.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with an ascending sort order and default collation.
            </summary>
        <returns>A new sort clause with the given sort key and ascending sort order.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">key is null.</exception>
        <exception cref="T:System.ArgumentException">key does not have an order-comparable result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSortClause">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClause (this System.Data.Entity.Core.Common.CommandTrees.DbExpression key, string collation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClause(class System.Data.Entity.Core.Common.CommandTrees.DbExpression key, string collation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToSortClause (key As DbExpression, collation As String) As DbSortClause" />
      <MemberSignature Language="F#" Value="static member ToSortClause : System.Data.Entity.Core.Common.CommandTrees.DbExpression * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortClause" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause (key, collation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="collation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The expression that defines the sort key.</param>
        <param name="collation">The collation to sort under.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with an ascending sort order and the specified collation.
            </summary>
        <returns>A new sort clause with the given sort key and collation, and ascending sort order.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">key is null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
        <exception cref="T:System.ArgumentException">key does not have an order-comparable result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSortClauseDescending">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClauseDescending (this System.Data.Entity.Core.Common.CommandTrees.DbExpression key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClauseDescending(class System.Data.Entity.Core.Common.CommandTrees.DbExpression key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToSortClauseDescending (key As DbExpression) As DbSortClause" />
      <MemberSignature Language="F#" Value="static member ToSortClauseDescending : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortClause" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="key">The expression that defines the sort key.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with a descending sort order and default collation.
            </summary>
        <returns>A new sort clause with the given sort key and descending sort order.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">key is null.</exception>
        <exception cref="T:System.ArgumentException">key does not have an order-comparable result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSortClauseDescending">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClauseDescending (this System.Data.Entity.Core.Common.CommandTrees.DbExpression key, string collation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbSortClause ToSortClauseDescending(class System.Data.Entity.Core.Common.CommandTrees.DbExpression key, string collation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToSortClauseDescending (key As DbExpression, collation As String) As DbSortClause" />
      <MemberSignature Language="F#" Value="static member ToSortClauseDescending : System.Data.Entity.Core.Common.CommandTrees.DbExpression * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbSortClause" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending (key, collation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbSortClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="collation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The expression that defines the sort key.</param>
        <param name="collation">The collation to sort under.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with a descending sort order and the specified collation.
            </summary>
        <returns>A new sort clause with the given sort key and collation, and descending sort order.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">key is null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
        <exception cref="T:System.ArgumentException">key does not have an order-comparable result type.</exception>
      </Docs>
    </Member>
    <Member MemberName="TreatAs">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression TreatAs (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, System.Data.Entity.Core.Metadata.Edm.TypeUsage treatType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression TreatAs(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument, class System.Data.Entity.Core.Metadata.Edm.TypeUsage treatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TreatAs (argument As DbExpression, treatType As TypeUsage) As DbTreatExpression" />
      <MemberSignature Language="F#" Value="static member TreatAs : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs (argument, treatType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="treatType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Parameters>
      <Docs>
        <param name="argument">An expression that specifies the instance.</param>
        <param name="treatType">Type metadata for the treat-as type.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />.
            </summary>
        <returns>A new DbTreatExpression with the specified argument and type.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument or treatType is null.</exception>
        <exception cref="T:System.ArgumentException">treatType is not in the same type hierarchy as the result type of argument.</exception>
      </Docs>
    </Member>
    <Member MemberName="True">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression True { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression True" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property True As DbConstantExpression" />
      <MemberSignature Language="F#" Value="member this.True : System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the Boolean value true.
            </summary>
        <value>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the Boolean value true.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnaryMinus">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression UnaryMinus (this System.Data.Entity.Core.Common.CommandTrees.DbExpression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression UnaryMinus(class System.Data.Entity.Core.Common.CommandTrees.DbExpression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UnaryMinus (argument As DbExpression) As DbArithmeticExpression" />
      <MemberSignature Language="F#" Value="static member UnaryMinus : System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">An expression that specifies the argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that negates the value of the argument.
            </summary>
        <returns>A new DbArithmeticExpression representing the negation operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">argument is null.</exception>
        <exception cref="T:System.ArgumentException">No numeric result type exists for argument.</exception>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbExpression Union (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbExpression Union(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union (left As DbExpression, right As DbExpression) As DbExpression" />
      <MemberSignature Language="F#" Value="static member Union : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that defines the left set argument.</param>
        <param name="right">An expression that defines the right set argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that computes the union of the left and right set arguments with duplicates removed.
            </summary>
        <returns>A new DbExpression that computes the union, without duplicates, of the left and right arguments.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common collection result type with an equality-comparable element type exists between left and right.</exception>
      </Docs>
    </Member>
    <Member MemberName="UnionAll">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression UnionAll (this System.Data.Entity.Core.Common.CommandTrees.DbExpression left, System.Data.Entity.Core.Common.CommandTrees.DbExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression UnionAll(class System.Data.Entity.Core.Common.CommandTrees.DbExpression left, class System.Data.Entity.Core.Common.CommandTrees.DbExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UnionAll (left As DbExpression, right As DbExpression) As DbUnionAllExpression" />
      <MemberSignature Language="F#" Value="static member UnionAll : System.Data.Entity.Core.Common.CommandTrees.DbExpression * System.Data.Entity.Core.Common.CommandTrees.DbExpression -&gt; System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="right" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="left">An expression that defines the left set argument.</param>
        <param name="right">An expression that defines the right set argument.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> that computes the union of the left and right set arguments and does not remove duplicates.
            </summary>
        <returns>A new DbUnionAllExpression that union, including duplicates, of the left and right arguments.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
        <exception cref="T:System.ArgumentException">No common collection result type with an equality-comparable element type exists between left and right.</exception>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression Variable (this System.Data.Entity.Core.Metadata.Edm.TypeUsage type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression Variable(class System.Data.Entity.Core.Metadata.Edm.TypeUsage type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Variable (type As TypeUsage, name As String) As DbVariableReferenceExpression" />
      <MemberSignature Language="F#" Value="static member Variable : System.Data.Entity.Core.Metadata.Edm.TypeUsage * string -&gt; System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the referenced variable.</param>
        <param name="name">The name of the referenced variable.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> that references a variable with the specified name and type.
            </summary>
        <returns>A DbVariableReferenceExpression that represents a reference to a variable with the specified name and type. The result type of the expression will be the same as type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression Where (this System.Data.Entity.Core.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression Where(class System.Data.Entity.Core.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression, class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where (source As DbExpression, predicate As Func(Of DbExpression, DbExpression)) As DbFilterExpression" />
      <MemberSignature Language="F#" Value="static member Where : System.Data.Entity.Core.Common.CommandTrees.DbExpression * Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression, System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; -&gt; System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="source">An expression that specifies the input set.</param>
        <param name="predicate">A method representing the predicate to evaluate for each member of the input set.    This method must produce an expression with a Boolean result type that provides the predicate logic.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> that filters the elements in the given input set using the specified predicate.
            </summary>
        <returns>A new DbQuantifierExpression that represents the Any operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The expression produced by predicate is null.</exception>
        <exception cref="T:System.ArgumentException">The expression produced by predicate does not have a Boolean result type.</exception>
      </Docs>
    </Member>
  </Members>
</Type>