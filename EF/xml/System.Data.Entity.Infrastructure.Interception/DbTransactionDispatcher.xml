<Type Name="DbTransactionDispatcher" FullName="System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher">
  <TypeSignature Language="C#" Value="public class DbTransactionDispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbTransactionDispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher" />
  <TypeSignature Language="VB.NET" Value="Public Class DbTransactionDispatcher" />
  <TypeSignature Language="F#" Value="type DbTransactionDispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Used for dispatching operations to a <see cref="T:System.Data.Common.DbTransaction" /> such that any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor" />
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> will be notified before and after the
            operation executes.
            Instances of this class are obtained through the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch" /> fluent API.
            </summary>
    <remarks>
            This class is used internally by Entity Framework when interacting with <see cref="T:System.Data.Common.DbTransaction" />.
            It is provided publicly so that code that runs outside of the core EF assemblies can opt-in to command
            interception/tracing. This is typically done by EF providers that are executing commands on behalf of EF.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public virtual void Commit (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.Commit(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Commit (transaction As DbTransaction, interceptionContext As DbInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Commit : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbInterceptionContext -&gt; unit&#xA;override this.Commit : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbInterceptionContext -&gt; unit" Usage="dbTransactionDispatcher.Commit (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction on which the operation will be executed.</param>
        <param name="interceptionContext">Optional information about the context of the call being made.</param>
        <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" /> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" /> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor" />
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> before/after making a
            call to <see cref="M:System.Data.Common.DbTransaction.Commit" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.Dispose(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose (transaction As DbTransaction, interceptionContext As DbInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbInterceptionContext -&gt; unit&#xA;override this.Dispose : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbInterceptionContext -&gt; unit" Usage="dbTransactionDispatcher.Dispose (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction on which the operation will be executed.</param>
        <param name="interceptionContext">Optional information about the context of the call being made.</param>
        <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" /> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" /> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor" />
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> before/after making a
            call to <see cref="M:System.Data.Common.DbTransaction.Dispose" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dbTransactionDispatcher.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetConnection">
      <MemberSignature Language="C#" Value="public virtual System.Data.Common.DbConnection GetConnection (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Common.DbConnection GetConnection(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.GetConnection(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConnection (transaction As DbTransaction, interceptionContext As DbInterceptionContext) As DbConnection" />
      <MemberSignature Language="F#" Value="abstract member GetConnection : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbInterceptionContext -&gt; System.Data.Common.DbConnection&#xA;override this.GetConnection : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbInterceptionContext -&gt; System.Data.Common.DbConnection" Usage="dbTransactionDispatcher.GetConnection (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction on which the operation will be executed.</param>
        <param name="interceptionContext">Optional information about the context of the call being made.</param>
        <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})" /> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})" /> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor" />
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> before/after
            getting <see cref="P:System.Data.Common.DbTransaction.Connection" />.
            </summary>
        <returns>The result of the operation, which may have been modified by interceptors.</returns>
        <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dbTransactionDispatcher.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetIsolationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Data.IsolationLevel GetIsolationLevel (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Data.IsolationLevel GetIsolationLevel(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.GetIsolationLevel(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIsolationLevel (transaction As DbTransaction, interceptionContext As DbInterceptionContext) As IsolationLevel" />
      <MemberSignature Language="F#" Value="abstract member GetIsolationLevel : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbInterceptionContext -&gt; System.Data.IsolationLevel&#xA;override this.GetIsolationLevel : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbInterceptionContext -&gt; System.Data.IsolationLevel" Usage="dbTransactionDispatcher.GetIsolationLevel (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction on which the operation will be executed.</param>
        <param name="interceptionContext">Optional information about the context of the call being made.</param>
        <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})" /> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})" /> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor" />
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> before/after
            getting <see cref="P:System.Data.Common.DbTransaction.IsolationLevel" />.
            </summary>
        <returns>The result of the operation, which may have been modified by interceptors.</returns>
        <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="dbTransactionDispatcher.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the <see cref="T:System.Type" /> of the current instance.
            </summary>
        <returns>The exact runtime type of the current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public virtual void Rollback (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rollback(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.Rollback(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Rollback (transaction As DbTransaction, interceptionContext As DbInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Rollback : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbInterceptionContext -&gt; unit&#xA;override this.Rollback : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbInterceptionContext -&gt; unit" Usage="dbTransactionDispatcher.Rollback (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction on which the operation will be executed.</param>
        <param name="interceptionContext">Optional information about the context of the call being made.</param>
        <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" /> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" /> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor" />
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> before/after making a
            call to <see cref="M:System.Data.Common.DbTransaction.Rollback" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dbTransactionDispatcher.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>