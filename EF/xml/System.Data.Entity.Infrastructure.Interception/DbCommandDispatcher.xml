<Type Name="DbCommandDispatcher" FullName="System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher">
  <TypeSignature Language="C#" Value="public class DbCommandDispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbCommandDispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher" />
  <TypeSignature Language="VB.NET" Value="Public Class DbCommandDispatcher" />
  <TypeSignature Language="F#" Value="type DbCommandDispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Used for dispatching operations to a <see cref="T:System.Data.Common.DbCommand" /> such that any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor" />
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> will be notified before and after the
            operation executes.
            Instances of this class are obtained through the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch" /> fluent API.
            </summary>
    <remarks>
            This class is used internally by Entity Framework when executing commands. It is provided publicly so that
            code that runs outside of the core EF assemblies can opt-in to command interception/tracing. This is
            typically done by EF providers that are executing commands on behalf of EF.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dbCommandDispatcher.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dbCommandDispatcher.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="dbCommandDispatcher.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the <see cref="T:System.Type" /> of the current instance.
            </summary>
        <returns>The exact runtime type of the current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NonQuery">
      <MemberSignature Language="C#" Value="public virtual int NonQuery (System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 NonQuery(class System.Data.Common.DbCommand command, class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.NonQuery(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NonQuery (command As DbCommand, interceptionContext As DbCommandInterceptionContext) As Integer" />
      <MemberSignature Language="F#" Value="abstract member NonQuery : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext -&gt; int&#xA;override this.NonQuery : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext -&gt; int" Usage="dbCommandDispatcher.NonQuery (command, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="command">The command on which the operation will be executed.</param>
        <param name="interceptionContext">Optional information about the context of the call being made.</param>
        <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})" /> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})" /> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor" />
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
            </summary>
        <returns>The result of the operation, which may have been modified by interceptors.</returns>
        <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NonQueryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; NonQueryAsync (System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext interceptionContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; NonQueryAsync(class System.Data.Common.DbCommand command, class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext interceptionContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.NonQueryAsync(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member NonQueryAsync : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;&#xA;override this.NonQueryAsync : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="dbCommandDispatcher.NonQueryAsync (command, interceptionContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="command">The command on which the operation will be executed.</param>
        <param name="interceptionContext">Optional information about the context of the call being made.</param>
        <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
        <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})" /> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})" /> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor" />
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />.
            </summary>
        <returns>The result of the operation, which may have been modified by interceptors.</returns>
        <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reader">
      <MemberSignature Language="C#" Value="public virtual System.Data.Common.DbDataReader Reader (System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Common.DbDataReader Reader(class System.Data.Common.DbCommand command, class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Reader(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Reader (command As DbCommand, interceptionContext As DbCommandInterceptionContext) As DbDataReader" />
      <MemberSignature Language="F#" Value="abstract member Reader : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext -&gt; System.Data.Common.DbDataReader&#xA;override this.Reader : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext -&gt; System.Data.Common.DbDataReader" Usage="dbCommandDispatcher.Reader (command, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="command">The command on which the operation will be executed.</param>
        <param name="interceptionContext">Optional information about the context of the call being made.</param>
        <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})" /> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})" /> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor" />
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)" />.
            </summary>
        <returns>The result of the operation, which may have been modified by interceptors.</returns>
        <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt; ReaderAsync (System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext interceptionContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Data.Common.DbDataReader&gt; ReaderAsync(class System.Data.Common.DbCommand command, class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext interceptionContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.ReaderAsync(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReaderAsync : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;&#xA;override this.ReaderAsync : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;" Usage="dbCommandDispatcher.ReaderAsync (command, interceptionContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="command">The command on which the operation will be executed.</param>
        <param name="interceptionContext">Optional information about the context of the call being made.</param>
        <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
        <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})" /> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})" /> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor" />
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />.
            </summary>
        <returns>The result of the operation, which may have been modified by interceptors.</returns>
        <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scalar">
      <MemberSignature Language="C#" Value="public virtual object Scalar (System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Scalar(class System.Data.Common.DbCommand command, class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Scalar(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Scalar (command As DbCommand, interceptionContext As DbCommandInterceptionContext) As Object" />
      <MemberSignature Language="F#" Value="abstract member Scalar : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext -&gt; obj&#xA;override this.Scalar : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext -&gt; obj" Usage="dbCommandDispatcher.Scalar (command, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="command">The command on which the operation will be executed.</param>
        <param name="interceptionContext">Optional information about the context of the call being made.</param>
        <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})" /> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})" /> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor" />
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
            </summary>
        <returns>The result of the operation, which may have been modified by interceptors.</returns>
        <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScalarAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ScalarAsync (System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext interceptionContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ScalarAsync(class System.Data.Common.DbCommand command, class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext interceptionContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.ScalarAsync(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ScalarAsync : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.ScalarAsync : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="dbCommandDispatcher.ScalarAsync (command, interceptionContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="command">The command on which the operation will be executed.</param>
        <param name="interceptionContext">Optional information about the context of the call being made.</param>
        <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
        <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})" /> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})" /> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor" />
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />.
            </summary>
        <returns>The result of the operation, which may have been modified by interceptors.</returns>
        <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dbCommandDispatcher.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>