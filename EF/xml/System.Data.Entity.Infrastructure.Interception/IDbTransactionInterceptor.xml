<Type Name="IDbTransactionInterceptor" FullName="System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor">
  <TypeSignature Language="C#" Value="public interface IDbTransactionInterceptor : System.Data.Entity.Infrastructure.Interception.IDbInterceptor" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbTransactionInterceptor implements class System.Data.Entity.Infrastructure.Interception.IDbInterceptor" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbTransactionInterceptor&#xA;Implements IDbInterceptor" />
  <TypeSignature Language="F#" Value="type IDbTransactionInterceptor = interface&#xA;    interface IDbInterceptor" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.Interception.IDbInterceptor</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An object that implements this interface can be registered with <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> to
            receive notifications when Entity Framework commits or rollbacks a transaction.
            </summary>
    <remarks>
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Committed">
      <MemberSignature Language="C#" Value="public void Committed (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Committed(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Committed (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Committed : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit" Usage="iDbTransactionInterceptor.Committed (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction that was committed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            This method is called after <see cref="M:System.Data.Common.DbTransaction.Commit" /> is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Committing">
      <MemberSignature Language="C#" Value="public void Committing (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Committing(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Committing (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Committing : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit" Usage="iDbTransactionInterceptor.Committing (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction being committed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            This method is called before <see cref="M:System.Data.Common.DbTransaction.Commit" /> is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionGetting">
      <MemberSignature Language="C#" Value="public void ConnectionGetting (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.Common.DbConnection&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionGetting(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1&lt;class System.Data.Common.DbConnection&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ConnectionGetting (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext(Of DbConnection))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionGetting : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.Common.DbConnection&gt; -&gt; unit" Usage="iDbTransactionInterceptor.ConnectionGetting (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.Common.DbConnection&gt;" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called before <see cref="P:System.Data.Common.DbTransaction.Connection" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionGot">
      <MemberSignature Language="C#" Value="public void ConnectionGot (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.Common.DbConnection&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionGot(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1&lt;class System.Data.Common.DbConnection&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ConnectionGot (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext(Of DbConnection))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionGot : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.Common.DbConnection&gt; -&gt; unit" Usage="iDbTransactionInterceptor.ConnectionGot (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.Common.DbConnection&gt;" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called after <see cref="P:System.Data.Common.DbTransaction.Connection" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Disposed">
      <MemberSignature Language="C#" Value="public void Disposed (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Disposed(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Disposed (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Disposed : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit" Usage="iDbTransactionInterceptor.Disposed (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction that was disposed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            This method is called after <see cref="M:System.Data.Common.DbTransaction.Dispose" /> is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Disposing">
      <MemberSignature Language="C#" Value="public void Disposing (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Disposing(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Disposing (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Disposing : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit" Usage="iDbTransactionInterceptor.Disposing (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction being disposed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            This method is called before <see cref="M:System.Data.Common.DbTransaction.Dispose" /> is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsolationLevelGetting">
      <MemberSignature Language="C#" Value="public void IsolationLevelGetting (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.IsolationLevel&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IsolationLevelGetting(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1&lt;valuetype System.Data.IsolationLevel&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})" />
      <MemberSignature Language="VB.NET" Value="Public Sub IsolationLevelGetting (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext(Of IsolationLevel))" />
      <MemberSignature Language="F#" Value="abstract member IsolationLevelGetting : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.IsolationLevel&gt; -&gt; unit" Usage="iDbTransactionInterceptor.IsolationLevelGetting (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.IsolationLevel&gt;" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called before <see cref="P:System.Data.Common.DbTransaction.IsolationLevel" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsolationLevelGot">
      <MemberSignature Language="C#" Value="public void IsolationLevelGot (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.IsolationLevel&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IsolationLevelGot(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1&lt;valuetype System.Data.IsolationLevel&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})" />
      <MemberSignature Language="VB.NET" Value="Public Sub IsolationLevelGot (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext(Of IsolationLevel))" />
      <MemberSignature Language="F#" Value="abstract member IsolationLevelGot : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.IsolationLevel&gt; -&gt; unit" Usage="iDbTransactionInterceptor.IsolationLevelGot (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.IsolationLevel&gt;" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called after <see cref="P:System.Data.Common.DbTransaction.IsolationLevel" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RolledBack">
      <MemberSignature Language="C#" Value="public void RolledBack (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RolledBack(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RolledBack (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member RolledBack : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit" Usage="iDbTransactionInterceptor.RolledBack (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction that was rolled back.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            This method is called after <see cref="M:System.Data.Common.DbTransaction.Rollback" /> is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RollingBack">
      <MemberSignature Language="C#" Value="public void RollingBack (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RollingBack(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RollingBack (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member RollingBack : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit" Usage="iDbTransactionInterceptor.RollingBack (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction being rolled back.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            This method is called before <see cref="M:System.Data.Common.DbTransaction.Rollback" /> is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>