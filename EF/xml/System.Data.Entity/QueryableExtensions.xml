<Type Name="QueryableExtensions" FullName="System.Data.Entity.QueryableExtensions">
  <TypeSignature Language="C#" Value="public static class QueryableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit QueryableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.QueryableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module QueryableExtensions" />
  <TypeSignature Language="F#" Value="type QueryableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Useful extension methods for use with Entity Framework LINQ queries.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AllAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AllAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AllAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member AllAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.AllAsync (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
        <param name="predicate"> A function to test each element for a condition. </param>
        <summary>
            Asynchronously determines whether all the elements of a sequence satisfy a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if every element of the source sequence passes the test in the specified predicate; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AllAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AllAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AllAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AllAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.AllAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
        <param name="predicate"> A function to test each element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously determines whether all the elements of a sequence satisfy a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if every element of the source sequence passes the test in the specified predicate; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AnyAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AnyAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AnyAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AnyAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member AnyAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.AnyAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to check for being empty.
            </param>
        <summary>
            Asynchronously determines whether a sequence contains any elements.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AnyAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AnyAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AnyAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AnyAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member AnyAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.AnyAsync (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
        <param name="predicate"> A function to test each element for a condition. </param>
        <summary>
            Asynchronously determines whether any element of a sequence satisfies a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if any elements in the source sequence pass the test in the specified predicate; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AnyAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AnyAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AnyAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AnyAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.AnyAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to check for being empty.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously determines whether a sequence contains any elements.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AnyAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AnyAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AnyAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AnyAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.AnyAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
        <param name="predicate"> A function to test each element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously determines whether any element of a sequence satisfies a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if any elements in the source sequence pass the test in the specified predicate; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AsNoTracking">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable AsNoTracking (this System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable AsNoTracking(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AsNoTracking(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsNoTracking (source As IQueryable) As IQueryable" />
      <MemberSignature Language="F#" Value="static member AsNoTracking : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="System.Data.Entity.QueryableExtensions.AsNoTracking source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"> The source query. </param>
        <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext" />
            or <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.  This method works by calling the AsNoTracking method of the
            underlying query object.  If the underlying query object does not have an AsNoTracking method,
            then calling this method will have no affect.
            </summary>
        <returns> A new query with NoTracking applied, or the source query if NoTracking is not supported. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsNoTracking&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; AsNoTracking&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; AsNoTracking&lt;class T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsNoTracking(Of T As Class) (source As IQueryable(Of T)) As IQueryable(Of T)" />
      <MemberSignature Language="F#" Value="static member AsNoTracking : System.Linq.IQueryable&lt;'T (requires 'T : null)&gt; -&gt; System.Linq.IQueryable&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="System.Data.Entity.QueryableExtensions.AsNoTracking source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"> The element type. </typeparam>
        <param name="source"> The source query. </param>
        <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext" />
            or <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.  This method works by calling the AsNoTracking method of the
            underlying query object.  If the underlying query object does not have an AsNoTracking method,
            then calling this method will have no affect.
            </summary>
        <returns> A new query with NoTracking applied, or the source query if NoTracking is not supported. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsStreaming">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable AsStreaming (this System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable AsStreaming(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AsStreaming(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStreaming (source As IQueryable) As IQueryable" />
      <MemberSignature Language="F#" Value="static member AsStreaming : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="System.Data.Entity.QueryableExtensions.AsStreaming source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("LINQ queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable" /> to apply AsStreaming to.
            </param>
        <summary>
            Returns a new query that will stream the results instead of buffering. This method works by calling
            the AsStreaming method of the underlying query object. If the underlying query object does not have
            an AsStreaming method, then calling this method will have no affect.
            </summary>
        <returns> A new query with AsStreaming applied, or the source query if AsStreaming is not supported. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsStreaming&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; AsStreaming&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; AsStreaming&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AsStreaming``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStreaming(Of T) (source As IQueryable(Of T)) As IQueryable(Of T)" />
      <MemberSignature Language="F#" Value="static member AsStreaming : System.Linq.IQueryable&lt;'T&gt; -&gt; System.Linq.IQueryable&lt;'T&gt;" Usage="System.Data.Entity.QueryableExtensions.AsStreaming source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("LINQ queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to apply AsStreaming to.
            </param>
        <summary>
            Returns a new query that will stream the results instead of buffering. This method works by calling
            the AsStreaming method of the underlying query object. If the underlying query object does not have
            an AsStreaming method, then calling this method will have no affect.
            </summary>
        <returns> A new query with AsStreaming applied, or the source query if AsStreaming is not supported. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; AverageAsync (this System.Linq.IQueryable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Decimal)) As Task(Of Decimal)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;decimal&gt; -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Double)) As Task(Of Double)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;double&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Double" /> values to calculate the average of.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Double" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Integer)) As Task(Of Double)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;int&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Int32" /> values to calculate the average of.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Long)) As Task(Of Double)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;int64&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Int64" /> values to calculate the average of.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Nullable(Of Decimal))) As Task(Of Nullable(Of Decimal))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Nullable(Of Double))) As Task(Of Nullable(Of Double))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Nullable(Of Integer))) As Task(Of Nullable(Of Double))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Nullable(Of Long))) As Task(Of Nullable(Of Double))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;int64&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Nullable(Of Single))) As Task(Of Nullable(Of Single))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;single&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; AverageAsync (this System.Linq.IQueryable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; AverageAsync(class System.Linq.IQueryable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IQueryable(Of Single)) As Task(Of Single)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;single&gt; -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Single" /> values to calculate the average of.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Single" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; AverageAsync (this System.Linq.IQueryable&lt;decimal&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Decimal&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;decimal&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;double&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;float64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;double&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Double" /> values to calculate the average of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Double" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;int&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;int32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Int32" /> values to calculate the average of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync (this System.Linq.IQueryable&lt;long&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync(class System.Linq.IQueryable`1&lt;int64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;int64&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Int64" /> values to calculate the average of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;int64&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; AverageAsync (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; AverageAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;Nullable&lt;single&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; AverageAsync (this System.Linq.IQueryable&lt;float&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; AverageAsync(class System.Linq.IQueryable`1&lt;float32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;single&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Single" /> values to calculate the average of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Single" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal))) As Task(Of Decimal)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, decimal&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double))) As Task(Of Double)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, double&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer))) As Task(Of Double)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long))) As Task(Of Double)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int64&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Decimal)))) As Task(Of Nullable(Of Decimal))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;decimal&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Double)))) As Task(Of Nullable(Of Double))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;double&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Integer)))) As Task(Of Nullable(Of Double))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Long)))) As Task(Of Nullable(Of Double))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int64&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Single)))) As Task(Of Nullable(Of Single))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;single&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single))) As Task(Of Single)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, single&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, decimal&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float64&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, double&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int32&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int64&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int64&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;decimal&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;double&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int64&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;single&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; AverageAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; AverageAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float32&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, single&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.AverageAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source"> A sequence of values to calculate the average of. </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the average of the sequence of values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            contains no elements.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ContainsAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; ContainsAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; ContainsAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TSource item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ContainsAsync(Of TSource) (source As IQueryable(Of TSource), item As TSource) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member ContainsAsync : System.Linq.IQueryable&lt;'Source&gt; * 'Source -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.ContainsAsync (source, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="item" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
        <param name="item"> The object to locate in the sequence. </param>
        <summary>
            Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if the input sequence contains the specified value; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ContainsAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; ContainsAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource item, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; ContainsAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TSource item, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ContainsAsync : System.Linq.IQueryable&lt;'Source&gt; * 'Source * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Data.Entity.QueryableExtensions.ContainsAsync (source, item, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="item" Type="TSource" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
        <param name="item"> The object to locate in the sequence. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if the input sequence contains the specified value; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CountAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; CountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; CountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CountAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of Integer)" />
      <MemberSignature Language="F#" Value="static member CountAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.CountAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
        <summary>
            Asynchronously returns the number of elements in a sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CountAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; CountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; CountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CountAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of Integer)" />
      <MemberSignature Language="F#" Value="static member CountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.CountAsync (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
        <param name="predicate"> A function to test each element for a condition. </param>
        <summary>
            Asynchronously returns the number of elements in a sequence that satisfy a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            that satisfy the condition in the predicate function
            is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CountAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; CountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; CountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member CountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.CountAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the number of elements in a sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CountAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; CountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; CountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member CountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.CountAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
        <param name="predicate"> A function to test each element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the number of elements in a sequence that satisfy a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            that satisfy the condition in the predicate function
            is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="FirstAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of TSource)" />
      <MemberSignature Language="F#" Value="static member FirstAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
        <summary>
            Asynchronously returns the first element of a sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the first element in <paramref name="source" />.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="FirstAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of TSource)" />
      <MemberSignature Language="F#" Value="static member FirstAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstAsync (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
        <param name="predicate"> A function to test each element for a condition. </param>
        <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the first element in <paramref name="source" /> that passes the test in
            <paramref name="predicate" />.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in
            <paramref name="predicate" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="FirstAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member FirstAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the first element of a sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the first element in <paramref name="source" />.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="FirstAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member FirstAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
        <param name="predicate"> A function to test each element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the first element in <paramref name="source" /> that passes the test in
            <paramref name="predicate" />.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in
            <paramref name="predicate" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefaultAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of TSource)" />
      <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
        <summary>
            Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if
            <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefaultAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of TSource)" />
      <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
        <param name="predicate"> A function to test each element for a condition. </param>
        <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition
            or a default value if no such element is found.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if <paramref name="source" />
            is empty or if no element passes the test specified by <paramref name="predicate" /> ; otherwise, the first
            element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if
            <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
        <param name="predicate"> A function to test each element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition
            or a default value if no such element is found.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if <paramref name="source" />
            is empty or if no element passes the test specified by <paramref name="predicate" /> ; otherwise, the first
            element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            has more than one element.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEachAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ForEachAsync (this System.Linq.IQueryable source, Action&lt;object&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ForEachAsync(class System.Linq.IQueryable source, class System.Action`1&lt;object&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForEachAsync (source As IQueryable, action As Action(Of Object)) As Task" />
      <MemberSignature Language="F#" Value="static member ForEachAsync : System.Linq.IQueryable * Action&lt;obj&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Data.Entity.QueryableExtensions.ForEachAsync (source, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable" /> to enumerate.
            </param>
        <param name="action"> The action to perform on each element. </param>
        <summary>
            Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
        <returns> A task that represents the asynchronous operation. </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ForEachAsync (this System.Linq.IQueryable source, Action&lt;object&gt; action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ForEachAsync(class System.Linq.IQueryable source, class System.Action`1&lt;object&gt; action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ForEachAsync : System.Linq.IQueryable * Action&lt;obj&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Data.Entity.QueryableExtensions.ForEachAsync (source, action, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable" /> to enumerate.
            </param>
        <param name="action"> The action to perform on each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
        <returns> A task that represents the asynchronous operation. </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ForEachAsync&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source, Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ForEachAsync&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source, class System.Action`1&lt;!!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForEachAsync(Of T) (source As IQueryable(Of T), action As Action(Of T)) As Task" />
      <MemberSignature Language="F#" Value="static member ForEachAsync : System.Linq.IQueryable&lt;'T&gt; * Action&lt;'T&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Data.Entity.QueryableExtensions.ForEachAsync (source, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to enumerate.
            </param>
        <param name="action"> The action to perform on each element. </param>
        <summary>
            Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
        <returns> A task that represents the asynchronous operation. </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ForEachAsync&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source, Action&lt;T&gt; action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ForEachAsync&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source, class System.Action`1&lt;!!T&gt; action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ForEachAsync : System.Linq.IQueryable&lt;'T&gt; * Action&lt;'T&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Data.Entity.QueryableExtensions.ForEachAsync (source, action, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to enumerate.
            </param>
        <param name="action"> The action to perform on each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
        <returns> A task that represents the asynchronous operation. </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Include">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable Include (this System.Linq.IQueryable source, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable Include(class System.Linq.IQueryable source, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Include(System.Linq.IQueryable,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Include (source As IQueryable, path As String) As IQueryable" />
      <MemberSignature Language="F#" Value="static member Include : System.Linq.IQueryable * string -&gt; System.Linq.IQueryable" Usage="System.Data.Entity.QueryableExtensions.Include (source, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">
            The source <see cref="T:System.Linq.IQueryable" /> on which to call Include.
            </param>
        <param name="path"> The dot-separated list of related objects to return in the query results. </param>
        <summary>
            Specifies the related objects to include in the query results.
            </summary>
        <returns>
            A new <see cref="T:System.Linq.IQueryable" /> with the defined query path.
            </returns>
        <remarks>
            This extension method calls the Include(String) method of the source <see cref="T:System.Linq.IQueryable" /> object,
            if such a method exists. If the source <see cref="T:System.Linq.IQueryable" /> does not have a matching method,
            then this method does nothing. The <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />,
            <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> and <see cref="T:System.Data.Entity.DbSet" /> types all have an appropriate Include method to call.
            Paths are all-inclusive. For example, if an include call indicates Include("Orders.OrderLines"), not only will
            OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on
            the returned instance of the <see cref="T:System.Linq.IQueryable" />. Other instances of <see cref="T:System.Linq.IQueryable" />
            and the object context itself are not affected. Because the Include method returns the query object,
            you can call this method multiple times on an <see cref="T:System.Linq.IQueryable" /> to specify multiple paths for the query.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Include&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; Include&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; Include&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Include(Of T) (source As IQueryable(Of T), path As String) As IQueryable(Of T)" />
      <MemberSignature Language="F#" Value="static member Include : System.Linq.IQueryable&lt;'T&gt; * string -&gt; System.Linq.IQueryable&lt;'T&gt;" Usage="System.Data.Entity.QueryableExtensions.Include (source, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T"> The type of entity being queried. </typeparam>
        <param name="source">
            The source <see cref="T:System.Linq.IQueryable`1" /> on which to call Include.
            </param>
        <param name="path"> The dot-separated list of related objects to return in the query results. </param>
        <summary>
            Specifies the related objects to include in the query results.
            </summary>
        <returns>
            A new <see cref="T:System.Linq.IQueryable`1" /> with the defined query path.
            </returns>
        <remarks>
            This extension method calls the Include(String) method of the source <see cref="T:System.Linq.IQueryable`1" /> object,
            if such a method exists. If the source <see cref="T:System.Linq.IQueryable`1" /> does not have a matching method,
            then this method does nothing. The <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />,
            <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> and <see cref="T:System.Data.Entity.DbSet`1" /> types all have an appropriate Include method to call.
            Paths are all-inclusive. For example, if an include call indicates Include("Orders.OrderLines"), not only will
            OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on
            the returned instance of the <see cref="T:System.Linq.IQueryable`1" />. Other instances of <see cref="T:System.Linq.IQueryable`1" />
            and the object context itself are not affected. Because the Include method returns the query object,
            you can call this method multiple times on an <see cref="T:System.Linq.IQueryable`1" /> to specify multiple paths for the query.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Include&lt;T,TProperty&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; Include&lt;T,TProperty&gt; (this System.Linq.IQueryable&lt;T&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;T,TProperty&gt;&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; Include&lt;T, TProperty&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, !!TProperty&gt;&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Include(Of T, TProperty) (source As IQueryable(Of T), path As Expression(Of Func(Of T, TProperty))) As IQueryable(Of T)" />
      <MemberSignature Language="F#" Value="static member Include : System.Linq.IQueryable&lt;'T&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'T, 'Property&gt;&gt; -&gt; System.Linq.IQueryable&lt;'T&gt;" Usage="System.Data.Entity.QueryableExtensions.Include (source, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
        <Parameter Name="path" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"> The type of entity being queried. </typeparam>
        <typeparam name="TProperty"> The type of navigation property being included. </typeparam>
        <param name="source"> The source IQueryable on which to call Include. </param>
        <param name="path"> A lambda expression representing the path to include. </param>
        <summary>
            Specifies the related objects to include in the query results.
            </summary>
        <returns>
            A new IQueryable&lt;T&gt; with the defined query path.
            </returns>
        <remarks>
            The path expression must be composed of simple property access expressions together with calls to Select for
            composing additional includes after including a collection property.  Examples of possible include paths are:
            To include a single reference: query.Include(e =&gt; e.Level1Reference)
            To include a single collection: query.Include(e =&gt; e.Level1Collection)
            To include a reference and then a reference one level down: query.Include(e =&gt; e.Level1Reference.Level2Reference)
            To include a reference and then a collection one level down: query.Include(e =&gt; e.Level1Reference.Level2Collection)
            To include a collection and then a reference one level down: query.Include(e =&gt; e.Level1Collection.Select(l1 =&gt; l1.Level2Reference))
            To include a collection and then a collection one level down: query.Include(e =&gt; e.Level1Collection.Select(l1 =&gt; l1.Level2Collection))
            To include a collection and then a reference one level down: query.Include(e =&gt; e.Level1Collection.Select(l1 =&gt; l1.Level2Reference))
            To include a collection and then a collection one level down: query.Include(e =&gt; e.Level1Collection.Select(l1 =&gt; l1.Level2Collection))
            To include a collection, a reference, and a reference two levels down: query.Include(e =&gt; e.Level1Collection.Select(l1 =&gt; l1.Level2Reference.Level3Reference))
            To include a collection, a collection, and a reference two levels down: query.Include(e =&gt; e.Level1Collection.Select(l1 =&gt; l1.Level2Collection.Select(l2 =&gt; l2.Level3Reference)))
            This extension method calls the Include(String) method of the source IQueryable object, if such a method exists.
            If the source IQueryable does not have a matching method, then this method does nothing.
            The Entity Framework ObjectQuery, ObjectSet, DbQuery, and DbSet types all have an appropriate Include method to call.
            When you call the Include method, the query path is only valid on the returned instance of the IQueryable&lt;T&gt;. Other
            instances of IQueryable&lt;T&gt; and the object context itself are not affected.  Because the Include method returns the
            query object, you can call this method multiple times on an IQueryable&lt;T&gt; to specify multiple paths for the query.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static void Load (this System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Load(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Load(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Load (source As IQueryable)" />
      <MemberSignature Language="F#" Value="static member Load : System.Linq.IQueryable -&gt; unit" Usage="System.Data.Entity.QueryableExtensions.Load source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"> The source query. </param>
        <summary>
            Enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1" />,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, and others the results of the query will be loaded into the associated
            <see cref="T:System.Data.Entity.DbContext" />
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> or other cache on the client.
            This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task LoadAsync (this System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task LoadAsync(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LoadAsync (source As IQueryable) As Task" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.Linq.IQueryable -&gt; System.Threading.Tasks.Task" Usage="System.Data.Entity.QueryableExtensions.LoadAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"> The source query. </param>
        <summary>
            Asynchronously enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1" />,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, and others the results of the query will be loaded into the associated
            <see cref="T:System.Data.Entity.DbContext" />
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> or other cache on the client.
            This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task LoadAsync (this System.Linq.IQueryable source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task LoadAsync(class System.Linq.IQueryable source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.Linq.IQueryable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Data.Entity.QueryableExtensions.LoadAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source"> The source query. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1" />,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, and others the results of the query will be loaded into the associated
            <see cref="T:System.Data.Entity.DbContext" />
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> or other cache on the client.
            This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LongCountAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; LongCountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; LongCountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCountAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of Long)" />
      <MemberSignature Language="F#" Value="static member LongCountAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.LongCountAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
        <summary>
            Asynchronously returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LongCountAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; LongCountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; LongCountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCountAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of Long)" />
      <MemberSignature Language="F#" Value="static member LongCountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.LongCountAsync (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
        <param name="predicate"> A function to test each element for a condition. </param>
        <summary>
            Asynchronously returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence
            that satisfy a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            that satisfy the condition in the predicate function
            is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LongCountAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; LongCountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; LongCountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member LongCountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.LongCountAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LongCountAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; LongCountAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; LongCountAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member LongCountAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.LongCountAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
        <param name="predicate"> A function to test each element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence
            that satisfy a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            that satisfy the condition in the predicate function
            is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MaxAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; MaxAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; MaxAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MaxAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of TSource)" />
      <MemberSignature Language="F#" Value="static member MaxAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.MaxAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
        <summary>
            Asynchronously returns the maximum value of a sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the maximum value in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MaxAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; MaxAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; MaxAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member MaxAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.MaxAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the maximum value of a sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the maximum value in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MaxAsync&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; MaxAsync&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; MaxAsync&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MaxAsync(Of TSource, TResult) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member MaxAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Data.Entity.QueryableExtensions.MaxAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <typeparam name="TResult">
            The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the maximum value in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MaxAsync&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; MaxAsync&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; MaxAsync&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member MaxAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Data.Entity.QueryableExtensions.MaxAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <typeparam name="TResult">
            The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the maximum value in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MinAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; MinAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; MinAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MinAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of TSource)" />
      <MemberSignature Language="F#" Value="static member MinAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.MinAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
        <summary>
            Asynchronously returns the minimum value of a sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the minimum value in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MinAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; MinAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; MinAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member MinAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.MinAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the minimum value of a sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the minimum value in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MinAsync&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; MinAsync&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; MinAsync&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MinAsync(Of TSource, TResult) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member MinAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Data.Entity.QueryableExtensions.MinAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <typeparam name="TResult">
            The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the minimum value in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MinAsync&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; MinAsync&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; MinAsync&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member MinAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Data.Entity.QueryableExtensions.MinAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <typeparam name="TResult">
            The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the minimum value in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SingleAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
        <summary>
            Asynchronously returns the only element of a sequence, and throws an exception
            if there is not exactly one element in the sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="SingleAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleAsync (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
        <param name="predicate"> A function to test an element for a condition. </param>
        <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified condition,
            and throws an exception if more than one such element exists.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence that satisfies the condition in
            <paramref name="predicate" />.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
            More than one element satisfies the condition in
            <paramref name="predicate" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SingleAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SingleAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the only element of a sequence, and throws an exception
            if there is not exactly one element in the sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="SingleAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SingleAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
        <param name="predicate"> A function to test an element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified condition,
            and throws an exception if more than one such element exists.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence that satisfies the condition in
            <paramref name="predicate" />.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
            More than one element satisfies the condition in
            <paramref name="predicate" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefaultAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
        <summary>
            Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;
            this method throws an exception if there is more than one element in the sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence, or <c>default</c> (<typeparamref name="TSource" />)
            if the sequence contains no elements.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            has more than one element.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefaultAsync(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Task(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
        <param name="predicate"> A function to test an element for a condition. </param>
        <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified condition or
            a default value if no such element exists; this method throws an exception if more than one element
            satisfies the condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence that satisfies the condition in
            <paramref name="predicate" />, or <c>default</c> ( <typeparamref name="TSource" /> ) if no such element is found.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;
            this method throws an exception if there is more than one element in the sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence, or <c>default</c> (<typeparamref name="TSource" />)
            if the sequence contains no elements.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            has more than one element.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
        <param name="predicate"> A function to test an element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified condition or
            a default value if no such element exists; this method throws an exception if more than one element
            satisfies the condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the input sequence that satisfies the condition in
            <paramref name="predicate" />, or <c>default</c> ( <typeparamref name="TSource" /> ) if no such element is found.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Skip&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;int&gt;&gt; countAccessor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`1&lt;int32&gt;&gt; countAccessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip(Of TSource) (source As IQueryable(Of TSource), countAccessor As Expression(Of Func(Of Integer))) As IQueryable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Skip : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;int&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.Skip (source, countAccessor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="countAccessor" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence to return elements from.</param>
        <param name="countAccessor">An expression that evaluates to the number of elements to skip.</param>
        <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
        <returns>A sequence that contains elements that occur after the specified index in the 
            input sequence.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; SumAsync (this System.Linq.IQueryable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Decimal)) As Task(Of Decimal)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;decimal&gt; -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; SumAsync (this System.Linq.IQueryable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; SumAsync(class System.Linq.IQueryable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Double)) As Task(Of Double)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;double&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Double" /> values to calculate the sum of.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Double" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; SumAsync (this System.Linq.IQueryable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; SumAsync(class System.Linq.IQueryable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Integer)) As Task(Of Integer)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;int&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains  the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; SumAsync (this System.Linq.IQueryable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; SumAsync(class System.Linq.IQueryable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Long)) As Task(Of Long)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;int64&gt; -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Nullable(Of Decimal))) As Task(Of Nullable(Of Decimal))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Nullable(Of Double))) As Task(Of Nullable(Of Double))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Nullable(Of Integer))) As Task(Of Nullable(Of Integer))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;long&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Nullable(Of Long))) As Task(Of Nullable(Of Long))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;int64&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int64&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Nullable(Of Single))) As Task(Of Nullable(Of Single))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;single&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; SumAsync (this System.Linq.IQueryable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; SumAsync(class System.Linq.IQueryable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IQueryable(Of Single)) As Task(Of Single)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;single&gt; -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Single" /> values to calculate the sum of.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Single" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; SumAsync (this System.Linq.IQueryable&lt;decimal&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Decimal&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;decimal&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; SumAsync (this System.Linq.IQueryable&lt;double&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; SumAsync(class System.Linq.IQueryable`1&lt;float64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;double&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Double" /> values to calculate the sum of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Double" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; SumAsync (this System.Linq.IQueryable&lt;int&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; SumAsync(class System.Linq.IQueryable`1&lt;int32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; SumAsync (this System.Linq.IQueryable&lt;long&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; SumAsync(class System.Linq.IQueryable`1&lt;int64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;int64&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Decimal.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;long&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;int64&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int64&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; SumAsync (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; SumAsync(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;Nullable&lt;single&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; SumAsync (this System.Linq.IQueryable&lt;float&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; SumAsync(class System.Linq.IQueryable`1&lt;float32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;single&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            A sequence of <see cref="T:System.Single" /> values to calculate the sum of.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of a sequence of <see cref="T:System.Single" /> values.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the values in the sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal))) As Task(Of Decimal)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, decimal&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Decimal.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double))) As Task(Of Double)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, double&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer))) As Task(Of Integer)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long))) As Task(Of Long)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int64&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Decimal)))) As Task(Of Nullable(Of Decimal))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;decimal&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Decimal.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Double)))) As Task(Of Nullable(Of Double))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;double&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Integer)))) As Task(Of Nullable(Of Integer))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;long&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Long)))) As Task(Of Nullable(Of Long))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int64&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int64&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Single)))) As Task(Of Nullable(Of Single))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;single&gt;&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single))) As Task(Of Single)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, single&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;decimal&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Decimal&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, decimal&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;decimal&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Decimal.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;double&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float64&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float64&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, double&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int32&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;long&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int64&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int64&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int64&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;decimal&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Decimal.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;double&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;double&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;long&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int64&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int64&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
        <exception cref="T:System.OverflowException">
            The number of elements in
            <paramref name="source" />
            is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Nullable&lt;float&gt;&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;single&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;single&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;float&gt; SumAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;float32&gt; SumAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float32&gt;&gt; selector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, single&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="System.Data.Entity.QueryableExtensions.SumAsync (source, selector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" /> .
            </typeparam>
        <param name="source">
            A sequence of values of type <typeparamref name="TSource" /> .
            </param>
        <param name="selector"> A projection function to apply to each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Single" /> values that is obtained
            by invoking a projection function on each element of the input sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the sum of the projected values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />
            or
            <paramref name="selector" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
            doesn't implement
            <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Take&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;int&gt;&gt; countAccessor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`1&lt;int32&gt;&gt; countAccessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take(Of TSource) (source As IQueryable(Of TSource), countAccessor As Expression(Of Func(Of Integer))) As IQueryable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Take : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;int&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.Take (source, countAccessor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="countAccessor" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">The sequence to return elements from.</param>
        <param name="countAccessor">An expression that evaluates to the number of elements 
            to return.</param>
        <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
        <returns>A sequence that contains the specified number of elements from the 
            start of the input sequence.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArrayAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource[]&gt; ToArrayAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource[]&gt; ToArrayAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToArrayAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of TSource())" />
      <MemberSignature Language="F#" Value="static member ToArrayAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;'Source[]&gt;" Usage="System.Data.Entity.QueryableExtensions.ToArrayAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create an array from.
            </param>
        <summary>
            Creates an array from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains an array that contains elements from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArrayAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource[]&gt; ToArrayAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource[]&gt; ToArrayAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ToArrayAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source[]&gt;" Usage="System.Data.Entity.QueryableExtensions.ToArrayAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create an array from.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Creates an array from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains an array that contains elements from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt; ToDictionaryAsync&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt;&gt; ToDictionaryAsync&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionaryAsync(Of TSource, TKey) (source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey)) As Task(Of Dictionary(Of TKey, TSource))" />
      <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector function.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt; ToDictionaryAsync&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt;&gt; ToDictionaryAsync&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionaryAsync(Of TSource, TKey) (source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As Task(Of Dictionary(Of TKey, TSource))" />
      <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector function and a comparer.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt; ToDictionaryAsync&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt;&gt; ToDictionaryAsync&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector function.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt; ToDictionaryAsync&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt;&gt; ToDictionaryAsync&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector function and a comparer.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt;&gt; ToDictionaryAsync&lt;TSource, TKey, TElement&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionaryAsync(Of TSource, TKey, TElement) (source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Task(Of Dictionary(Of TKey, TElement))" />
      <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <typeparam name="TElement">
            The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector and an element selector function.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
            <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt;&gt; ToDictionaryAsync&lt;TSource, TKey, TElement&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionaryAsync(Of TSource, TKey, TElement) (source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As Task(Of Dictionary(Of TKey, TElement))" />
      <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <typeparam name="TElement">
            The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
        <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector function, a comparer, and an element selector function.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
            <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt;&gt; ToDictionaryAsync&lt;TSource, TKey, TElement&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector, elementSelector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <typeparam name="TElement">
            The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector and an element selector function.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
            <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt;&gt; ToDictionaryAsync&lt;TSource, TKey, TElement&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Linq.IQueryable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToDictionaryAsync (source, keySelector, elementSelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <typeparam name="TElement">
            The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
        <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously
            according to a specified key selector function, a comparer, and an element selector function.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
            <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToListAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;object&gt;&gt; ToListAsync (this System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;object&gt;&gt; ToListAsync(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToListAsync (source As IQueryable) As Task(Of List(Of Object))" />
      <MemberSignature Language="F#" Value="static member ToListAsync : System.Linq.IQueryable -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;obj&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToListAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Linq.IQueryable" /> by enumerating it asynchronously.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToListAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;object&gt;&gt; ToListAsync (this System.Linq.IQueryable source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;object&gt;&gt; ToListAsync(class System.Linq.IQueryable source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ToListAsync : System.Linq.IQueryable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;obj&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToListAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Linq.IQueryable" /> by enumerating it asynchronously.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToListAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TSource&gt;&gt; ToListAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;!!TSource&gt;&gt; ToListAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToListAsync(Of TSource) (source As IQueryable(Of TSource)) As Task(Of List(Of TSource))" />
      <MemberSignature Language="F#" Value="static member ToListAsync : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;'Source&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToListAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToListAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TSource&gt;&gt; ToListAsync&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;!!TSource&gt;&gt; ToListAsync&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ToListAsync : System.Linq.IQueryable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;'Source&gt;&gt;" Usage="System.Data.Entity.QueryableExtensions.ToListAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to create a list from.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>