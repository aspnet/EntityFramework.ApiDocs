<Type Name="DbProviderManifest" FullName="System.Data.Entity.Core.Common.DbProviderManifest">
  <TypeSignature Language="C#" Value="public abstract class DbProviderManifest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbProviderManifest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Core.Common.DbProviderManifest" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbProviderManifest" />
  <TypeSignature Language="F#" Value="type DbProviderManifest = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Metadata Interface for all CLR types
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbProviderManifest ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderManifest.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollationFacetName">
      <MemberSignature Language="C#" Value="public const string CollationFacetName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string CollationFacetName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.CollationFacetName" />
      <MemberSignature Language="VB.NET" Value="Public Const CollationFacetName As String " />
      <MemberSignature Language="F#" Value="val mutable CollationFacetName : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.CollationFacetName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Name of the Collation Facet
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConceptualSchemaDefinition">
      <MemberSignature Language="C#" Value="public const string ConceptualSchemaDefinition;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ConceptualSchemaDefinition" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Const ConceptualSchemaDefinition As String " />
      <MemberSignature Language="F#" Value="val mutable ConceptualSchemaDefinition : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinition" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Value to pass to GetInformation to get the ConceptualSchemaDefinition
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConceptualSchemaDefinitionVersion3">
      <MemberSignature Language="C#" Value="public const string ConceptualSchemaDefinitionVersion3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ConceptualSchemaDefinitionVersion3" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3" />
      <MemberSignature Language="VB.NET" Value="Public Const ConceptualSchemaDefinitionVersion3 As String " />
      <MemberSignature Language="F#" Value="val mutable ConceptualSchemaDefinitionVersion3 : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Value to pass to GetInformation to get the ConceptualSchemaDefinitionVersion3
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValueFacetName">
      <MemberSignature Language="C#" Value="public const string DefaultValueFacetName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultValueFacetName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.DefaultValueFacetName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultValueFacetName As String " />
      <MemberSignature Language="F#" Value="val mutable DefaultValueFacetName : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.DefaultValueFacetName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Name of the DefaultValue Facet
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EscapeLikeArgument">
      <MemberSignature Language="C#" Value="public virtual string EscapeLikeArgument (string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string EscapeLikeArgument(string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderManifest.EscapeLikeArgument(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EscapeLikeArgument (argument As String) As String" />
      <MemberSignature Language="F#" Value="abstract member EscapeLikeArgument : string -&gt; string&#xA;override this.EscapeLikeArgument : string -&gt; string" Usage="dbProviderManifest.EscapeLikeArgument argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="argument">The argument to be escaped.</param>
        <summary>Provider writers should override this method to return the argument with the wildcards and the escape character escaped. This method is only used if SupportsEscapingLikeArgument returns true.</summary>
        <returns>The argument with the wildcards and the escape character escaped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedLengthFacetName">
      <MemberSignature Language="C#" Value="public const string FixedLengthFacetName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string FixedLengthFacetName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.FixedLengthFacetName" />
      <MemberSignature Language="VB.NET" Value="Public Const FixedLengthFacetName As String " />
      <MemberSignature Language="F#" Value="val mutable FixedLengthFacetName : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.FixedLengthFacetName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Name of the FixedLength Facet
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDbInformation">
      <MemberSignature Language="C#" Value="protected abstract System.Xml.XmlReader GetDbInformation (string informationType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlReader GetDbInformation(string informationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderManifest.GetDbInformation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetDbInformation (informationType As String) As XmlReader" />
      <MemberSignature Language="F#" Value="abstract member GetDbInformation : string -&gt; System.Xml.XmlReader" Usage="dbProviderManifest.GetDbInformation informationType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="informationType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="informationType">The type of the information to return.</param>
        <summary>When overridden in a derived class, this method returns provider-specific information.</summary>
        <returns>The XmlReader object that represents the mapping to the underlying data store catalog.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEdmType">
      <MemberSignature Language="C#" Value="public abstract System.Data.Entity.Core.Metadata.Edm.TypeUsage GetEdmType (System.Data.Entity.Core.Metadata.Edm.TypeUsage storeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Core.Metadata.Edm.TypeUsage GetEdmType(class System.Data.Entity.Core.Metadata.Edm.TypeUsage storeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderManifest.GetEdmType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEdmType (storeType As TypeUsage) As TypeUsage" />
      <MemberSignature Language="F#" Value="abstract member GetEdmType : System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Metadata.Edm.TypeUsage" Usage="dbProviderManifest.GetEdmType storeType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Metadata.Edm.TypeUsage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storeType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Parameters>
      <Docs>
        <param name="storeType">The TypeUsage instance that describes a storage type and a set of facets for that type to be mapped to the EDM type.</param>
        <summary>When overridden in a derived class, this method maps the specified storage type and a set of facets for that type to an EDM type.</summary>
        <returns>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> instance that describes an EDM type and a set of facets for that type.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFacetDescriptions">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.FacetDescription&gt; GetFacetDescriptions (System.Data.Entity.Core.Metadata.Edm.EdmType edmType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Entity.Core.Metadata.Edm.FacetDescription&gt; GetFacetDescriptions(class System.Data.Entity.Core.Metadata.Edm.EdmType edmType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)" />
      <MemberSignature Language="F#" Value="abstract member GetFacetDescriptions : System.Data.Entity.Core.Metadata.Edm.EdmType -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.FacetDescription&gt;" Usage="dbProviderManifest.GetFacetDescriptions edmType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.FacetDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="edmType" Type="System.Data.Entity.Core.Metadata.Edm.EdmType" />
      </Parameters>
      <Docs>
        <param name="edmType">The EDM type to return the facet description for.</param>
        <summary>Returns the FacetDescription objects for a particular type.</summary>
        <returns>The FacetDescription objects for the specified EDM type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInformation">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader GetInformation (string informationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader GetInformation(string informationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderManifest.GetInformation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInformation (informationType As String) As XmlReader" />
      <MemberSignature Language="F#" Value="member this.GetInformation : string -&gt; System.Xml.XmlReader" Usage="dbProviderManifest.GetInformation informationType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="informationType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="informationType">The type of the information to return.</param>
        <summary>Gets the provider-specific information.</summary>
        <returns>The provider-specific information.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStoreFunctions">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EdmFunction&gt; GetStoreFunctions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Entity.Core.Metadata.Edm.EdmFunction&gt; GetStoreFunctions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreFunctions" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetStoreFunctions () As ReadOnlyCollection(Of EdmFunction)" />
      <MemberSignature Language="F#" Value="abstract member GetStoreFunctions : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EdmFunction&gt;" Usage="dbProviderManifest.GetStoreFunctions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EdmFunction&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, returns a collection of EDM functions supported by the provider manifest.</summary>
        <returns>A collection of EDM functions.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStoreType">
      <MemberSignature Language="C#" Value="public abstract System.Data.Entity.Core.Metadata.Edm.TypeUsage GetStoreType (System.Data.Entity.Core.Metadata.Edm.TypeUsage edmType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Core.Metadata.Edm.TypeUsage GetStoreType(class System.Data.Entity.Core.Metadata.Edm.TypeUsage edmType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetStoreType (edmType As TypeUsage) As TypeUsage" />
      <MemberSignature Language="F#" Value="abstract member GetStoreType : System.Data.Entity.Core.Metadata.Edm.TypeUsage -&gt; System.Data.Entity.Core.Metadata.Edm.TypeUsage" Usage="dbProviderManifest.GetStoreType edmType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Metadata.Edm.TypeUsage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="edmType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
      </Parameters>
      <Docs>
        <param name="edmType">The TypeUsage instance that describes the EDM type and a set of facets for that type to be mapped to a storage type.</param>
        <summary>When overridden in a derived class, this method maps the specified EDM type and a set of facets for that type to a storage type.</summary>
        <returns>The TypeUsage instance that describes a storage type and a set of facets for that type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStoreTypes">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.PrimitiveType&gt; GetStoreTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Entity.Core.Metadata.Edm.PrimitiveType&gt; GetStoreTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreTypes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetStoreTypes () As ReadOnlyCollection(Of PrimitiveType)" />
      <MemberSignature Language="F#" Value="abstract member GetStoreTypes : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.PrimitiveType&gt;" Usage="dbProviderManifest.GetStoreTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.PrimitiveType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, returns the set of primitive types supported by the data source.</summary>
        <returns>The set of types supported by the data source.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStrictFacetName">
      <MemberSignature Language="C#" Value="public const string IsStrictFacetName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string IsStrictFacetName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.IsStrictFacetName" />
      <MemberSignature Language="VB.NET" Value="Public Const IsStrictFacetName As String " />
      <MemberSignature Language="F#" Value="val mutable IsStrictFacetName : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.IsStrictFacetName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Name of the IsStrict Facet
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxLengthFacetName">
      <MemberSignature Language="C#" Value="public const string MaxLengthFacetName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MaxLengthFacetName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.MaxLengthFacetName" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxLengthFacetName As String " />
      <MemberSignature Language="F#" Value="val mutable MaxLengthFacetName : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.MaxLengthFacetName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Name of the MaxLength Facet
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public abstract string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Common.DbProviderManifest.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="F#" Value="member this.NamespaceName : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.NamespaceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the namespace used by this provider manifest.</summary>
        <value>The namespace used by this provider manifest.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NullableFacetName">
      <MemberSignature Language="C#" Value="public const string NullableFacetName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string NullableFacetName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.NullableFacetName" />
      <MemberSignature Language="VB.NET" Value="Public Const NullableFacetName As String " />
      <MemberSignature Language="F#" Value="val mutable NullableFacetName : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.NullableFacetName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Name of the Nullable Facet
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrecisionFacetName">
      <MemberSignature Language="C#" Value="public const string PrecisionFacetName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PrecisionFacetName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.PrecisionFacetName" />
      <MemberSignature Language="VB.NET" Value="Public Const PrecisionFacetName As String " />
      <MemberSignature Language="F#" Value="val mutable PrecisionFacetName : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.PrecisionFacetName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Name of the Precision Facet
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleFacetName">
      <MemberSignature Language="C#" Value="public const string ScaleFacetName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ScaleFacetName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.ScaleFacetName" />
      <MemberSignature Language="VB.NET" Value="Public Const ScaleFacetName As String " />
      <MemberSignature Language="F#" Value="val mutable ScaleFacetName : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.ScaleFacetName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Name of the Scale Facet
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SridFacetName">
      <MemberSignature Language="C#" Value="public const string SridFacetName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SridFacetName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.SridFacetName" />
      <MemberSignature Language="VB.NET" Value="Public Const SridFacetName As String " />
      <MemberSignature Language="F#" Value="val mutable SridFacetName : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.SridFacetName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId="Srid")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Name of the SRID Facet
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreSchemaDefinition">
      <MemberSignature Language="C#" Value="public const string StoreSchemaDefinition;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string StoreSchemaDefinition" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Const StoreSchemaDefinition As String " />
      <MemberSignature Language="F#" Value="val mutable StoreSchemaDefinition : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinition" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Value to pass to GetInformation to get the StoreSchemaDefinition
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreSchemaDefinitionVersion3">
      <MemberSignature Language="C#" Value="public const string StoreSchemaDefinitionVersion3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string StoreSchemaDefinitionVersion3" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinitionVersion3" />
      <MemberSignature Language="VB.NET" Value="Public Const StoreSchemaDefinitionVersion3 As String " />
      <MemberSignature Language="F#" Value="val mutable StoreSchemaDefinitionVersion3 : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinitionVersion3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Value to pass to GetInformation to get the StoreSchemaDefinitionVersion3
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreSchemaMapping">
      <MemberSignature Language="C#" Value="public const string StoreSchemaMapping;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string StoreSchemaMapping" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMapping" />
      <MemberSignature Language="VB.NET" Value="Public Const StoreSchemaMapping As String " />
      <MemberSignature Language="F#" Value="val mutable StoreSchemaMapping : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMapping" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Value to pass to GetInformation to get the StoreSchemaMapping
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreSchemaMappingVersion3">
      <MemberSignature Language="C#" Value="public const string StoreSchemaMappingVersion3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string StoreSchemaMappingVersion3" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMappingVersion3" />
      <MemberSignature Language="VB.NET" Value="Public Const StoreSchemaMappingVersion3 As String " />
      <MemberSignature Language="F#" Value="val mutable StoreSchemaMappingVersion3 : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMappingVersion3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Value to pass to GetInformation to get the StoreSchemaMappingVersion3
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsEscapingLikeArgument">
      <MemberSignature Language="C#" Value="public virtual bool SupportsEscapingLikeArgument (out char escapeCharacter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsEscapingLikeArgument([out] char&amp; escapeCharacter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SupportsEscapingLikeArgument (ByRef escapeCharacter As Char) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member SupportsEscapingLikeArgument :  -&gt; bool&#xA;override this.SupportsEscapingLikeArgument :  -&gt; bool" Usage="dbProviderManifest.SupportsEscapingLikeArgument escapeCharacter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1021:AvoidOutParameters", MessageId="0#")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="escapeCharacter" Type="System.Char" RefType="out" />
      </Parameters>
      <Docs>
        <param name="escapeCharacter">If the provider supports escaping, the character that would be used as the escape character.</param>
        <summary>Indicates if the provider supports escaping strings to be used as patterns in a Like expression.</summary>
        <returns>True if this provider supports escaping strings to be used as patterns in a Like expression; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsInExpression">
      <MemberSignature Language="C#" Value="public virtual bool SupportsInExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsInExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsInExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SupportsInExpression () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member SupportsInExpression : unit -&gt; bool&#xA;override this.SupportsInExpression : unit -&gt; bool" Usage="dbProviderManifest.SupportsInExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a boolean that specifies whether the provider can handle expression trees
            containing instances of DbInExpression.
            The default implementation returns <c>false</c> for backwards compatibility. Derived classes can override this method.
            </summary>
        <returns>
          <c>false</c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsIntersectAndUnionAllFlattening">
      <MemberSignature Language="C#" Value="public virtual bool SupportsIntersectAndUnionAllFlattening ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsIntersectAndUnionAllFlattening() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsIntersectAndUnionAllFlattening" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SupportsIntersectAndUnionAllFlattening () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member SupportsIntersectAndUnionAllFlattening : unit -&gt; bool&#xA;override this.SupportsIntersectAndUnionAllFlattening : unit -&gt; bool" Usage="dbProviderManifest.SupportsIntersectAndUnionAllFlattening " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a boolean that specifies whether the provider can process expression trees not having DbProjectExpression 
            nodes directly under both Left and Right sides of DbUnionAllExpression and DbIntersectExpression
            </summary>
        <returns>
          <c>false</c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsParameterOptimizationInSchemaQueries">
      <MemberSignature Language="C#" Value="public virtual bool SupportsParameterOptimizationInSchemaQueries ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsParameterOptimizationInSchemaQueries() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsParameterOptimizationInSchemaQueries" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SupportsParameterOptimizationInSchemaQueries () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member SupportsParameterOptimizationInSchemaQueries : unit -&gt; bool&#xA;override this.SupportsParameterOptimizationInSchemaQueries : unit -&gt; bool" Usage="dbProviderManifest.SupportsParameterOptimizationInSchemaQueries " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Indicates if the provider supports the parameter optimization described in EntityFramework6 GitHub issue #195.
            The default is <c>false</c>. Providers should change this to true only after testing that schema queries (as
            used in the Database First flow) work correctly with this flag.
            </summary>
        <returns>
          <c>True</c> only if the provider supports the parameter optimization.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnicodeFacetName">
      <MemberSignature Language="C#" Value="public const string UnicodeFacetName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string UnicodeFacetName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Core.Common.DbProviderManifest.UnicodeFacetName" />
      <MemberSignature Language="VB.NET" Value="Public Const UnicodeFacetName As String " />
      <MemberSignature Language="F#" Value="val mutable UnicodeFacetName : string" Usage="System.Data.Entity.Core.Common.DbProviderManifest.UnicodeFacetName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Name of the Unicode Facet
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>