<Type Name="DbProviderServices" FullName="System.Data.Entity.Core.Common.DbProviderServices">
  <TypeSignature Language="C#" Value="public abstract class DbProviderServices : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbProviderServices extends System.Object implements class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Core.Common.DbProviderServices" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbProviderServices&#xA;Implements IDbDependencyResolver" />
  <TypeSignature Language="F#" Value="type DbProviderServices = class&#xA;    interface IDbDependencyResolver" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            The factory for building command definitions; use the type of this object
            as the argument to the IServiceProvider.GetService method on the provider
            factory;
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbProviderServices ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Constructs an EF provider that will use the <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> obtained from
            the app domain <see cref="T:System.Data.Entity.DbConfiguration" /> Singleton for resolving EF dependencies such
            as the <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> instance to use.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDependencyResolver">
      <MemberSignature Language="C#" Value="protected void AddDependencyResolver (System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AddDependencyResolver(class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AddDependencyResolver (resolver As IDbDependencyResolver)" />
      <MemberSignature Language="F#" Value="member this.AddDependencyResolver : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver -&gt; unit" Usage="dbProviderServices.AddDependencyResolver resolver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolver" Type="System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">The resolver to add.</param>
        <summary>
            Adds an <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> that will be used to resolve additional default provider
            services when a derived type is registered as an EF provider either using an entry in the application's
            config file or through code-based registration in <see cref="T:System.Data.Entity.DbConfiguration" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneDbCommand">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.DbCommand CloneDbCommand (System.Data.Common.DbCommand fromDbCommand);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.DbCommand CloneDbCommand(class System.Data.Common.DbCommand fromDbCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.CloneDbCommand(System.Data.Common.DbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CloneDbCommand (fromDbCommand As DbCommand) As DbCommand" />
      <MemberSignature Language="F#" Value="abstract member CloneDbCommand : System.Data.Common.DbCommand -&gt; System.Data.Common.DbCommand&#xA;override this.CloneDbCommand : System.Data.Common.DbCommand -&gt; System.Data.Common.DbCommand" Usage="dbProviderServices.CloneDbCommand fromDbCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromDbCommand" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="fromDbCommand"> the <see cref="T:System.Data.Common.DbCommand" /> object to clone </param>
        <summary>
            See issue 2390 - cloning the DesignTimeVisible property on the
            DbCommand can cause deadlocks. So here allow sub-classes to override.
            </summary>
        <returns>a clone of the <see cref="T:System.Data.Common.DbCommand" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneDbConnection">
      <MemberSignature Language="C#" Value="public virtual System.Data.Common.DbConnection CloneDbConnection (System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Common.DbConnection CloneDbConnection(class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.CloneDbConnection(System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneDbConnection (connection As DbConnection) As DbConnection" />
      <MemberSignature Language="F#" Value="abstract member CloneDbConnection : System.Data.Common.DbConnection -&gt; System.Data.Common.DbConnection&#xA;override this.CloneDbConnection : System.Data.Common.DbConnection -&gt; System.Data.Common.DbConnection" Usage="dbProviderServices.CloneDbConnection connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="connection">The original connection.</param>
        <summary>
            Clones the connection.
            </summary>
        <returns>Cloned connection</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneDbConnection">
      <MemberSignature Language="C#" Value="public virtual System.Data.Common.DbConnection CloneDbConnection (System.Data.Common.DbConnection connection, System.Data.Common.DbProviderFactory factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Common.DbConnection CloneDbConnection(class System.Data.Common.DbConnection connection, class System.Data.Common.DbProviderFactory factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.CloneDbConnection(System.Data.Common.DbConnection,System.Data.Common.DbProviderFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneDbConnection (connection As DbConnection, factory As DbProviderFactory) As DbConnection" />
      <MemberSignature Language="F#" Value="abstract member CloneDbConnection : System.Data.Common.DbConnection * System.Data.Common.DbProviderFactory -&gt; System.Data.Common.DbConnection&#xA;override this.CloneDbConnection : System.Data.Common.DbConnection * System.Data.Common.DbProviderFactory -&gt; System.Data.Common.DbConnection" Usage="dbProviderServices.CloneDbConnection (connection, factory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="factory" Type="System.Data.Common.DbProviderFactory" />
      </Parameters>
      <Docs>
        <param name="connection">The original connection.</param>
        <param name="factory">The factory to use.</param>
        <summary>
            Clones the connection.
            </summary>
        <returns>Cloned connection</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommandDefinition">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Core.Common.DbCommandDefinition CreateCommandDefinition (System.Data.Common.DbCommand prototype);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Core.Common.DbCommandDefinition CreateCommandDefinition(class System.Data.Common.DbCommand prototype) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCommandDefinition (prototype As DbCommand) As DbCommandDefinition" />
      <MemberSignature Language="F#" Value="abstract member CreateCommandDefinition : System.Data.Common.DbCommand -&gt; System.Data.Entity.Core.Common.DbCommandDefinition&#xA;override this.CreateCommandDefinition : System.Data.Common.DbCommand -&gt; System.Data.Entity.Core.Common.DbCommandDefinition" Usage="dbProviderServices.CreateCommandDefinition prototype" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.DbCommandDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prototype" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="prototype"> the prototype command </param>
        <summary>
            Create the default DbCommandDefinition object based on the prototype command
            This method is intended for provider writers to build a default command definition
            from a command.
            Note: This will clone the prototype
            </summary>
        <returns> an executable command definition object </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommandDefinition">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.Common.DbCommandDefinition CreateCommandDefinition (System.Data.Entity.Core.Common.CommandTrees.DbCommandTree commandTree);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Core.Common.DbCommandDefinition CreateCommandDefinition(class System.Data.Entity.Core.Common.CommandTrees.DbCommandTree commandTree) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCommandDefinition (commandTree As DbCommandTree) As DbCommandDefinition" />
      <MemberSignature Language="F#" Value="member this.CreateCommandDefinition : System.Data.Entity.Core.Common.CommandTrees.DbCommandTree -&gt; System.Data.Entity.Core.Common.DbCommandDefinition" Usage="dbProviderServices.CreateCommandDefinition commandTree" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.DbCommandDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandTree" Type="System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />
      </Parameters>
      <Docs>
        <param name="commandTree"> command tree for the statement </param>
        <summary>
            Create a Command Definition object given a command tree.
            </summary>
        <returns> an executable command definition object </returns>
        <remarks>
            This method simply delegates to the provider's implementation of CreateDbCommandDefinition.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommandDefinition">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.Common.DbCommandDefinition CreateCommandDefinition (System.Data.Entity.Core.Common.DbProviderManifest providerManifest, System.Data.Entity.Core.Common.CommandTrees.DbCommandTree commandTree);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Core.Common.DbCommandDefinition CreateCommandDefinition(class System.Data.Entity.Core.Common.DbProviderManifest providerManifest, class System.Data.Entity.Core.Common.CommandTrees.DbCommandTree commandTree) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCommandDefinition (providerManifest As DbProviderManifest, commandTree As DbCommandTree) As DbCommandDefinition" />
      <MemberSignature Language="F#" Value="member this.CreateCommandDefinition : System.Data.Entity.Core.Common.DbProviderManifest * System.Data.Entity.Core.Common.CommandTrees.DbCommandTree -&gt; System.Data.Entity.Core.Common.DbCommandDefinition" Usage="dbProviderServices.CreateCommandDefinition (providerManifest, commandTree)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.DbCommandDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerManifest" Type="System.Data.Entity.Core.Common.DbProviderManifest" />
        <Parameter Name="commandTree" Type="System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />
      </Parameters>
      <Docs>
        <param name="providerManifest">The manifest.</param>
        <param name="commandTree">The command tree.</param>
        <summary>Creates command definition from specified manifest and command tree.</summary>
        <returns>The created command definition.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabase">
      <MemberSignature Language="C#" Value="public void CreateDatabase (System.Data.Common.DbConnection connection, Nullable&lt;int&gt; commandTimeout, System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateDatabase(class System.Data.Common.DbConnection connection, valuetype System.Nullable`1&lt;int32&gt; commandTimeout, class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)" />
      <MemberSignature Language="F#" Value="member this.CreateDatabase : System.Data.Common.DbConnection * Nullable&lt;int&gt; * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; unit" Usage="dbProviderServices.CreateDatabase (connection, commandTimeout, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="commandTimeout" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="storeItemCollection" Type="System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
      </Parameters>
      <Docs>
        <param name="connection">Connection to a non-existent database that needs to be created and populated with the store objects indicated with the storeItemCollection parameter.</param>
        <param name="commandTimeout">Execution timeout for any commands needed to create the database.</param>
        <param name="storeItemCollection">The collection of all store items based on which the script should be created.</param>
        <summary>
            Creates a database indicated by connection and creates schema objects
            (tables, primary keys, foreign keys) based on the contents of storeItemCollection.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseScript">
      <MemberSignature Language="C#" Value="public string CreateDatabaseScript (string providerManifestToken, System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string CreateDatabaseScript(string providerManifestToken, class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)" />
      <MemberSignature Language="F#" Value="member this.CreateDatabaseScript : string * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; string" Usage="dbProviderServices.CreateDatabaseScript (providerManifestToken, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerManifestToken" Type="System.String" />
        <Parameter Name="storeItemCollection" Type="System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
      </Parameters>
      <Docs>
        <param name="providerManifestToken">The provider manifest token identifying the target version.</param>
        <param name="storeItemCollection">The structure of the database.</param>
        <summary>Generates a data definition language (DDL script that creates schema objects (tables, primary keys, foreign keys) based on the contents of the StoreItemCollection parameter and targeted for the version of the database corresponding to the provider manifest token.</summary>
        <returns>A DDL script that creates schema objects based on the contents of the StoreItemCollection parameter and targeted for the version of the database corresponding to the provider manifest token.</returns>
        <remarks>
            Individual statements should be separated using database-specific DDL command separator.
            It is expected that the generated script would be executed in the context of existing database with
            sufficient permissions, and it should not include commands to create the database, but it may include
            commands to create schemas and other auxiliary objects such as sequences, etc.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommandDefinition">
      <MemberSignature Language="C#" Value="protected abstract System.Data.Entity.Core.Common.DbCommandDefinition CreateDbCommandDefinition (System.Data.Entity.Core.Common.DbProviderManifest providerManifest, System.Data.Entity.Core.Common.CommandTrees.DbCommandTree commandTree);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Entity.Core.Common.DbCommandDefinition CreateDbCommandDefinition(class System.Data.Entity.Core.Common.DbProviderManifest providerManifest, class System.Data.Entity.Core.Common.CommandTrees.DbCommandTree commandTree) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateDbCommandDefinition (providerManifest As DbProviderManifest, commandTree As DbCommandTree) As DbCommandDefinition" />
      <MemberSignature Language="F#" Value="abstract member CreateDbCommandDefinition : System.Data.Entity.Core.Common.DbProviderManifest * System.Data.Entity.Core.Common.CommandTrees.DbCommandTree -&gt; System.Data.Entity.Core.Common.DbCommandDefinition" Usage="dbProviderServices.CreateDbCommandDefinition (providerManifest, commandTree)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.DbCommandDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerManifest" Type="System.Data.Entity.Core.Common.DbProviderManifest" />
        <Parameter Name="commandTree" Type="System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />
      </Parameters>
      <Docs>
        <param name="providerManifest">Provider manifest previously retrieved from the store provider.</param>
        <param name="commandTree">Command tree for the statement.</param>
        <summary>Creates a command definition object for the specified provider manifest and command tree.</summary>
        <returns>An executable command definition object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DatabaseExists">
      <MemberSignature Language="C#" Value="public bool DatabaseExists (System.Data.Common.DbConnection connection, Nullable&lt;int&gt; commandTimeout, System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DatabaseExists(class System.Data.Common.DbConnection connection, valuetype System.Nullable`1&lt;int32&gt; commandTimeout, class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)" />
      <MemberSignature Language="F#" Value="member this.DatabaseExists : System.Data.Common.DbConnection * Nullable&lt;int&gt; * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; bool" Usage="dbProviderServices.DatabaseExists (connection, commandTimeout, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="commandTimeout" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="storeItemCollection" Type="System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
      </Parameters>
      <Docs>
        <param name="connection">Connection to a database whose existence is checked by this method.</param>
        <param name="commandTimeout">Execution timeout for any commands needed to determine the existence of the database.</param>
        <param name="storeItemCollection">The collection of all store items from the model. This parameter is no longer used for determining database existence.</param>
        <summary>Returns a value indicating whether a given database exists on the server.</summary>
        <returns>True if the provider can deduce the database only based on the connection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DatabaseExists">
      <MemberSignature Language="C#" Value="public bool DatabaseExists (System.Data.Common.DbConnection connection, Nullable&lt;int&gt; commandTimeout, Lazy&lt;System.Data.Entity.Core.Metadata.Edm.StoreItemCollection&gt; storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DatabaseExists(class System.Data.Common.DbConnection connection, valuetype System.Nullable`1&lt;int32&gt; commandTimeout, class System.Lazy`1&lt;class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection&gt; storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})" />
      <MemberSignature Language="VB.NET" Value="Public Function DatabaseExists (connection As DbConnection, commandTimeout As Nullable(Of Integer), storeItemCollection As Lazy(Of StoreItemCollection)) As Boolean" />
      <MemberSignature Language="F#" Value="member this.DatabaseExists : System.Data.Common.DbConnection * Nullable&lt;int&gt; * Lazy&lt;System.Data.Entity.Core.Metadata.Edm.StoreItemCollection&gt; -&gt; bool" Usage="dbProviderServices.DatabaseExists (connection, commandTimeout, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="commandTimeout" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="storeItemCollection" Type="System.Lazy&lt;System.Data.Entity.Core.Metadata.Edm.StoreItemCollection&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">Connection to a database whose existence is checked by this method.</param>
        <param name="commandTimeout">Execution timeout for any commands needed to determine the existence of the database.</param>
        <param name="storeItemCollection">The collection of all store items from the model. This parameter is no longer used for determining database existence.</param>
        <summary>Returns a value indicating whether a given database exists on the server.</summary>
        <returns>True if the provider can deduce the database only based on the connection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbCreateDatabase">
      <MemberSignature Language="C#" Value="protected virtual void DbCreateDatabase (System.Data.Common.DbConnection connection, Nullable&lt;int&gt; commandTimeout, System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DbCreateDatabase(class System.Data.Common.DbConnection connection, valuetype System.Nullable`1&lt;int32&gt; commandTimeout, class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)" />
      <MemberSignature Language="F#" Value="abstract member DbCreateDatabase : System.Data.Common.DbConnection * Nullable&lt;int&gt; * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; unit&#xA;override this.DbCreateDatabase : System.Data.Common.DbConnection * Nullable&lt;int&gt; * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; unit" Usage="dbProviderServices.DbCreateDatabase (connection, commandTimeout, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="commandTimeout" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="storeItemCollection" Type="System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
      </Parameters>
      <Docs>
        <param name="connection">Connection to a non-existent database that needs to be created and populated with the store objects indicated with the storeItemCollection parameter.</param>
        <param name="commandTimeout">Execution timeout for any commands needed to create the database.</param>
        <param name="storeItemCollection">The collection of all store items based on which the script should be created.</param>
        <summary>Creates a database indicated by connection and creates schema objects (tables, primary keys, foreign keys) based on the contents of a StoreItemCollection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbCreateDatabaseScript">
      <MemberSignature Language="C#" Value="protected virtual string DbCreateDatabaseScript (string providerManifestToken, System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string DbCreateDatabaseScript(string providerManifestToken, class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)" />
      <MemberSignature Language="F#" Value="abstract member DbCreateDatabaseScript : string * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; string&#xA;override this.DbCreateDatabaseScript : string * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; string" Usage="dbProviderServices.DbCreateDatabaseScript (providerManifestToken, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerManifestToken" Type="System.String" />
        <Parameter Name="storeItemCollection" Type="System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
      </Parameters>
      <Docs>
        <param name="providerManifestToken"> The provider manifest token identifying the target version. </param>
        <param name="storeItemCollection"> The structure of the database. </param>
        <summary>
            Generates a data definition language (DDL) script that creates schema objects 
            (tables, primary keys, foreign keys) based on the contents of the StoreItemCollection 
            parameter and targeted for the version of the database corresponding to the provider manifest token.
            </summary>
        <returns>
            A DDL script that creates schema objects based on the contents of the StoreItemCollection parameter 
            and targeted for the version of the database corresponding to the provider manifest token.
            </returns>
        <remarks>
            Individual statements should be separated using database-specific DDL command separator.
            It is expected that the generated script would be executed in the context of existing database with
            sufficient permissions, and it should not include commands to create the database, but it may include
            commands to create schemas and other auxiliary objects such as sequences, etc.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbDatabaseExists">
      <MemberSignature Language="C#" Value="protected virtual bool DbDatabaseExists (System.Data.Common.DbConnection connection, Nullable&lt;int&gt; commandTimeout, System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DbDatabaseExists(class System.Data.Common.DbConnection connection, valuetype System.Nullable`1&lt;int32&gt; commandTimeout, class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)" />
      <MemberSignature Language="F#" Value="abstract member DbDatabaseExists : System.Data.Common.DbConnection * Nullable&lt;int&gt; * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; bool&#xA;override this.DbDatabaseExists : System.Data.Common.DbConnection * Nullable&lt;int&gt; * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; bool" Usage="dbProviderServices.DbDatabaseExists (connection, commandTimeout, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="commandTimeout" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="storeItemCollection" Type="System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
      </Parameters>
      <Docs>
        <param name="connection">Connection to a database whose existence is checked by this method.</param>
        <param name="commandTimeout">Execution timeout for any commands needed to determine the existence of the database.</param>
        <param name="storeItemCollection">The collection of all store items from the model. This parameter is no longer used for determining database existence.</param>
        <summary>Returns a value indicating whether a given database exists on the server.</summary>
        <returns>True if the provider can deduce the database only based on the connection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbDatabaseExists">
      <MemberSignature Language="C#" Value="protected virtual bool DbDatabaseExists (System.Data.Common.DbConnection connection, Nullable&lt;int&gt; commandTimeout, Lazy&lt;System.Data.Entity.Core.Metadata.Edm.StoreItemCollection&gt; storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DbDatabaseExists(class System.Data.Common.DbConnection connection, valuetype System.Nullable`1&lt;int32&gt; commandTimeout, class System.Lazy`1&lt;class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection&gt; storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DbDatabaseExists (connection As DbConnection, commandTimeout As Nullable(Of Integer), storeItemCollection As Lazy(Of StoreItemCollection)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member DbDatabaseExists : System.Data.Common.DbConnection * Nullable&lt;int&gt; * Lazy&lt;System.Data.Entity.Core.Metadata.Edm.StoreItemCollection&gt; -&gt; bool&#xA;override this.DbDatabaseExists : System.Data.Common.DbConnection * Nullable&lt;int&gt; * Lazy&lt;System.Data.Entity.Core.Metadata.Edm.StoreItemCollection&gt; -&gt; bool" Usage="dbProviderServices.DbDatabaseExists (connection, commandTimeout, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="commandTimeout" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="storeItemCollection" Type="System.Lazy&lt;System.Data.Entity.Core.Metadata.Edm.StoreItemCollection&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">Connection to a database whose existence is checked by this method.</param>
        <param name="commandTimeout">Execution timeout for any commands needed to determine the existence of the database.</param>
        <param name="storeItemCollection">The collection of all store items from the model. This parameter is no longer used for determining database existence.</param>
        <summary>Returns a value indicating whether a given database exists on the server.</summary>
        <returns>True if the provider can deduce the database only based on the connection.</returns>
        <remarks>Override this method to avoid creating the store item collection if it is not needed. The default implementation evaluates the Lazy and calls the other overload of this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbDeleteDatabase">
      <MemberSignature Language="C#" Value="protected virtual void DbDeleteDatabase (System.Data.Common.DbConnection connection, Nullable&lt;int&gt; commandTimeout, System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DbDeleteDatabase(class System.Data.Common.DbConnection connection, valuetype System.Nullable`1&lt;int32&gt; commandTimeout, class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)" />
      <MemberSignature Language="F#" Value="abstract member DbDeleteDatabase : System.Data.Common.DbConnection * Nullable&lt;int&gt; * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; unit&#xA;override this.DbDeleteDatabase : System.Data.Common.DbConnection * Nullable&lt;int&gt; * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; unit" Usage="dbProviderServices.DbDeleteDatabase (connection, commandTimeout, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="commandTimeout" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="storeItemCollection" Type="System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
      </Parameters>
      <Docs>
        <param name="connection">Connection to an existing database that needs to be deleted.</param>
        <param name="commandTimeout">Execution timeout for any commands needed to delete the database.</param>
        <param name="storeItemCollection">The collection of all store items from the model. This parameter is no longer used for database deletion.</param>
        <summary>Deletes the specified database.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbGetSpatialServices">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Entity.Spatial.DbSpatialServices DbGetSpatialServices (string manifestToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Entity.Spatial.DbSpatialServices DbGetSpatialServices(string manifestToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.DbGetSpatialServices(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DbGetSpatialServices (manifestToken As String) As DbSpatialServices" />
      <MemberSignature Language="F#" Value="abstract member DbGetSpatialServices : string -&gt; System.Data.Entity.Spatial.DbSpatialServices&#xA;override this.DbGetSpatialServices : string -&gt; System.Data.Entity.Spatial.DbSpatialServices" Usage="dbProviderServices.DbGetSpatialServices manifestToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Return DbSpatialServices from the GetService method. See http://go.microsoft.com/fwlink/?LinkId=260882 for more information.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Spatial.DbSpatialServices</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manifestToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="manifestToken">The token information associated with the provider manifest.</param>
        <summary>
            Gets the spatial services for the <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.
            </summary>
        <returns>The spatial services.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabase">
      <MemberSignature Language="C#" Value="public void DeleteDatabase (System.Data.Common.DbConnection connection, Nullable&lt;int&gt; commandTimeout, System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteDatabase(class System.Data.Common.DbConnection connection, valuetype System.Nullable`1&lt;int32&gt; commandTimeout, class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)" />
      <MemberSignature Language="F#" Value="member this.DeleteDatabase : System.Data.Common.DbConnection * Nullable&lt;int&gt; * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; unit" Usage="dbProviderServices.DeleteDatabase (connection, commandTimeout, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="commandTimeout" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="storeItemCollection" Type="System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
      </Parameters>
      <Docs>
        <param name="connection">Connection to an existing database that needs to be deleted.</param>
        <param name="commandTimeout">Execution timeout for any commands needed to delete the database.</param>
        <param name="storeItemCollection">The collection of all store items from the model. This parameter is no longer used for database deletion.</param>
        <summary>Deletes the specified database.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandDataDirectory">
      <MemberSignature Language="C#" Value="public static string ExpandDataDirectory (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ExpandDataDirectory(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.ExpandDataDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExpandDataDirectory (path As String) As String" />
      <MemberSignature Language="F#" Value="static member ExpandDataDirectory : string -&gt; string" Usage="System.Data.Entity.Core.Common.DbProviderServices.ExpandDataDirectory path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1820:TestForEmptyStringsUsingStringLength")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"> The path to expand. </param>
        <summary>
            Expands |DataDirectory| in the given path if it begins with |DataDirectory| and returns the expanded path,
            or returns the given string if it does not start with |DataDirectory|.
            </summary>
        <returns> The expanded path. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConceptualSchemaDefinition">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader GetConceptualSchemaDefinition (string csdlName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader GetConceptualSchemaDefinition(string csdlName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetConceptualSchemaDefinition(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetConceptualSchemaDefinition (csdlName As String) As XmlReader" />
      <MemberSignature Language="F#" Value="static member GetConceptualSchemaDefinition : string -&gt; System.Xml.XmlReader" Usage="System.Data.Entity.Core.Common.DbProviderServices.GetConceptualSchemaDefinition csdlName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="csdlName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="csdlName">The name of the CSDL description.</param>
        <summary>
            Return an XML reader which represents the CSDL description
            </summary>
        <returns> An XmlReader that represents the CSDL description </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDbProviderManifest">
      <MemberSignature Language="C#" Value="protected abstract System.Data.Entity.Core.Common.DbProviderManifest GetDbProviderManifest (string manifestToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Entity.Core.Common.DbProviderManifest GetDbProviderManifest(string manifestToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifest(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetDbProviderManifest (manifestToken As String) As DbProviderManifest" />
      <MemberSignature Language="F#" Value="abstract member GetDbProviderManifest : string -&gt; System.Data.Entity.Core.Common.DbProviderManifest" Usage="dbProviderServices.GetDbProviderManifest manifestToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.DbProviderManifest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manifestToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="manifestToken">The token information associated with the provider manifest.</param>
        <summary>When overridden in a derived class, returns an instance of a class that derives from the DbProviderManifest.</summary>
        <returns>A DbProviderManifest object that represents the provider manifest.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDbProviderManifestToken">
      <MemberSignature Language="C#" Value="protected abstract string GetDbProviderManifestToken (System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetDbProviderManifestToken(class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetDbProviderManifestToken (connection As DbConnection) As String" />
      <MemberSignature Language="F#" Value="abstract member GetDbProviderManifestToken : System.Data.Common.DbConnection -&gt; string" Usage="dbProviderServices.GetDbProviderManifestToken connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="connection"> Connection to find manifest token from. </param>
        <summary>
            Returns provider manifest token for a given connection.
            </summary>
        <returns> The provider manifest token for the specified connection. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDbSpatialDataReader">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Entity.Spatial.DbSpatialDataReader GetDbSpatialDataReader (System.Data.Common.DbDataReader fromReader, string manifestToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Entity.Spatial.DbSpatialDataReader GetDbSpatialDataReader(class System.Data.Common.DbDataReader fromReader, string manifestToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbSpatialDataReader(System.Data.Common.DbDataReader,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetDbSpatialDataReader (fromReader As DbDataReader, manifestToken As String) As DbSpatialDataReader" />
      <MemberSignature Language="F#" Value="abstract member GetDbSpatialDataReader : System.Data.Common.DbDataReader * string -&gt; System.Data.Entity.Spatial.DbSpatialDataReader&#xA;override this.GetDbSpatialDataReader : System.Data.Common.DbDataReader * string -&gt; System.Data.Entity.Spatial.DbSpatialDataReader" Usage="dbProviderServices.GetDbSpatialDataReader (fromReader, manifestToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Spatial.DbSpatialDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromReader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="manifestToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fromReader">The reader where the spatial data came from.</param>
        <param name="manifestToken">The token information associated with the provider manifest.</param>
        <summary>
            Gets the spatial data reader for the <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.
            </summary>
        <returns>The spatial data reader.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExecutionStrategy">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Infrastructure.IDbExecutionStrategy GetExecutionStrategy (System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Infrastructure.IDbExecutionStrategy GetExecutionStrategy(class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExecutionStrategy (connection As DbConnection) As IDbExecutionStrategy" />
      <MemberSignature Language="F#" Value="static member GetExecutionStrategy : System.Data.Common.DbConnection -&gt; System.Data.Entity.Infrastructure.IDbExecutionStrategy" Usage="System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.IDbExecutionStrategy</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="connection">The database connection</param>
        <summary>
            Gets the <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> that will be used to execute methods that use the specified connection.
            </summary>
        <returns>
            A new instance of <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExecutionStrategy">
      <MemberSignature Language="C#" Value="protected static System.Data.Entity.Infrastructure.IDbExecutionStrategy GetExecutionStrategy (System.Data.Common.DbConnection connection, string providerInvariantName);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Data.Entity.Infrastructure.IDbExecutionStrategy GetExecutionStrategy(class System.Data.Common.DbConnection connection, string providerInvariantName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetExecutionStrategy (connection As DbConnection, providerInvariantName As String) As IDbExecutionStrategy" />
      <MemberSignature Language="F#" Value="static member GetExecutionStrategy : System.Data.Common.DbConnection * string -&gt; System.Data.Entity.Infrastructure.IDbExecutionStrategy" Usage="System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy (connection, providerInvariantName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.IDbExecutionStrategy</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="providerInvariantName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">The database connection</param>
        <param name="providerInvariantName">The provider invariant name</param>
        <summary>
            Gets the <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> that will be used to execute methods that use the specified connection.
            This overload should be used by the derived classes for compatibility with wrapping providers.
            </summary>
        <returns>
            A new instance of <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProviderFactory">
      <MemberSignature Language="C#" Value="public static System.Data.Common.DbProviderFactory GetProviderFactory (System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.DbProviderFactory GetProviderFactory(class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderFactory(System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProviderFactory (connection As DbConnection) As DbProviderFactory" />
      <MemberSignature Language="F#" Value="static member GetProviderFactory : System.Data.Common.DbConnection -&gt; System.Data.Common.DbProviderFactory" Usage="System.Data.Entity.Core.Common.DbProviderServices.GetProviderFactory connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="connection">The connection to use.</param>
        <summary>Retrieves the DbProviderFactory based on the specified DbConnection.</summary>
        <returns>The retrieved DbProviderFactory.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProviderManifest">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.Common.DbProviderManifest GetProviderManifest (string manifestToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Core.Common.DbProviderManifest GetProviderManifest(string manifestToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifest(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProviderManifest (manifestToken As String) As DbProviderManifest" />
      <MemberSignature Language="F#" Value="member this.GetProviderManifest : string -&gt; System.Data.Entity.Core.Common.DbProviderManifest" Usage="dbProviderServices.GetProviderManifest manifestToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.DbProviderManifest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manifestToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="manifestToken">The token information associated with the provider manifest.</param>
        <summary>Returns the provider manifest by using the specified version information.</summary>
        <returns>The provider manifest by using the specified version information.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProviderManifestToken">
      <MemberSignature Language="C#" Value="public string GetProviderManifestToken (System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetProviderManifestToken(class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProviderManifestToken (connection As DbConnection) As String" />
      <MemberSignature Language="F#" Value="member this.GetProviderManifestToken : System.Data.Common.DbConnection -&gt; string" Usage="dbProviderServices.GetProviderManifestToken connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Connection to provider.</param>
        <summary>Returns provider manifest token given a connection.</summary>
        <returns>The provider manifest token.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProviderServices">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Common.DbProviderServices GetProviderServices (System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Common.DbProviderServices GetProviderServices(class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProviderServices (connection As DbConnection) As DbProviderServices" />
      <MemberSignature Language="F#" Value="static member GetProviderServices : System.Data.Common.DbConnection -&gt; System.Data.Entity.Core.Common.DbProviderServices" Usage="System.Data.Entity.Core.Common.DbProviderServices.GetProviderServices connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.DbProviderServices</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Connection to provider.</param>
        <summary>Returns providers given a connection.</summary>
        <returns>
            The <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> instanced based on the specified connection.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public virtual object GetService (Type type, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type type, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetService(System.Type,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type * obj -&gt; obj&#xA;override this.GetService : Type * obj -&gt; obj" Usage="dbProviderServices.GetService (type, key)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">The type of the service to be resolved.</param>
        <param name="key">An optional key providing additional information for resolving the service.</param>
        <summary>
            Called to resolve additional default provider services when a derived type is registered as an
            EF provider either using an entry in the application's config file or through code-based
            registration in <see cref="T:System.Data.Entity.DbConfiguration" />. The implementation of this method in this
            class uses the resolvers added with the AddDependencyResolver method to resolve
            dependencies.
            </summary>
        <returns>An instance of the given type, or null if the service could not be resolved.</returns>
        <remarks>
            Use this method to set, add, or change other provider-related services. Note that this method
            will only be called for such services if they are not already explicitly configured in some
            other way by the application. This allows providers to set default services while the
            application is still able to override and explicitly configure each service if required.
            See <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> and <see cref="T:System.Data.Entity.DbConfiguration" /> for more details.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServices">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;object&gt; GetServices (Type type, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetServices(class System.Type type, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetServices(System.Type,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member GetServices : Type * obj -&gt; seq&lt;obj&gt;&#xA;override this.GetServices : Type * obj -&gt; seq&lt;obj&gt;" Usage="dbProviderServices.GetServices (type, key)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">The type of the service to be resolved.</param>
        <param name="key">An optional key providing additional information for resolving the service.</param>
        <summary>
            Called to resolve additional default provider services when a derived type is registered as an
            EF provider either using an entry in the application's config file or through code-based
            registration in <see cref="T:System.Data.Entity.DbConfiguration" />. The implementation of this method in this
            class uses the resolvers added with the AddDependencyResolver method to resolve
            dependencies.
            </summary>
        <returns>All registered services that satisfy the given type and key, or an empty enumeration if there are none.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpatialDataReader">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Spatial.DbSpatialDataReader GetSpatialDataReader (System.Data.Common.DbDataReader fromReader, string manifestToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Spatial.DbSpatialDataReader GetSpatialDataReader(class System.Data.Common.DbDataReader fromReader, string manifestToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialDataReader(System.Data.Common.DbDataReader,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpatialDataReader (fromReader As DbDataReader, manifestToken As String) As DbSpatialDataReader" />
      <MemberSignature Language="F#" Value="member this.GetSpatialDataReader : System.Data.Common.DbDataReader * string -&gt; System.Data.Entity.Spatial.DbSpatialDataReader" Usage="dbProviderServices.GetSpatialDataReader (fromReader, manifestToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Spatial.DbSpatialDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromReader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="manifestToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fromReader">The reader where the spatial data came from.</param>
        <param name="manifestToken">The manifest token associated with the provider manifest.</param>
        <summary>
            Gets the spatial data reader for the <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.
            </summary>
        <returns>The spatial data reader.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpatialServices">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Spatial.DbSpatialServices GetSpatialServices (System.Data.Entity.Infrastructure.DbProviderInfo key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Spatial.DbSpatialServices GetSpatialServices(class System.Data.Entity.Infrastructure.DbProviderInfo key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpatialServices (key As DbProviderInfo) As DbSpatialServices" />
      <MemberSignature Language="F#" Value="member this.GetSpatialServices : System.Data.Entity.Infrastructure.DbProviderInfo -&gt; System.Data.Entity.Spatial.DbSpatialServices" Usage="dbProviderServices.GetSpatialServices key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Spatial.DbSpatialServices</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.Entity.Infrastructure.DbProviderInfo" />
      </Parameters>
      <Docs>
        <param name="key">Information about the database that the spatial services will be used for.</param>
        <summary>Gets the spatial services for the <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
        <returns>The spatial services.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpatialServices">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Spatial.DbSpatialServices GetSpatialServices (string manifestToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Spatial.DbSpatialServices GetSpatialServices(string manifestToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpatialServices (manifestToken As String) As DbSpatialServices" />
      <MemberSignature Language="F#" Value="member this.GetSpatialServices : string -&gt; System.Data.Entity.Spatial.DbSpatialServices" Usage="dbProviderServices.GetSpatialServices manifestToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use GetSpatialServices(DbProviderInfo) or DbConfiguration to ensure the configured spatial services are used. See http://go.microsoft.com/fwlink/?LinkId=260882 for more information.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Spatial.DbSpatialServices</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manifestToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="manifestToken">The token information associated with the provider manifest.</param>
        <summary>
            Gets the spatial services for the <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.
            </summary>
        <returns>The spatial services.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterInfoMessageHandler">
      <MemberSignature Language="C#" Value="public virtual void RegisterInfoMessageHandler (System.Data.Common.DbConnection connection, Action&lt;string&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterInfoMessageHandler(class System.Data.Common.DbConnection connection, class System.Action`1&lt;string&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.RegisterInfoMessageHandler(System.Data.Common.DbConnection,System.Action{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RegisterInfoMessageHandler (connection As DbConnection, handler As Action(Of String))" />
      <MemberSignature Language="F#" Value="abstract member RegisterInfoMessageHandler : System.Data.Common.DbConnection * Action&lt;string&gt; -&gt; unit&#xA;override this.RegisterInfoMessageHandler : System.Data.Common.DbConnection * Action&lt;string&gt; -&gt; unit" Usage="dbProviderServices.RegisterInfoMessageHandler (connection, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="handler" Type="System.Action&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection to receive information for.</param>
        <param name="handler">The handler to process messages.</param>
        <summary>
            Registers a handler to process non-error messages coming from the database provider.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDbParameterValue">
      <MemberSignature Language="C#" Value="protected virtual void SetDbParameterValue (System.Data.Common.DbParameter parameter, System.Data.Entity.Core.Metadata.Edm.TypeUsage parameterType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetDbParameterValue(class System.Data.Common.DbParameter parameter, class System.Data.Entity.Core.Metadata.Edm.TypeUsage parameterType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.SetDbParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetDbParameterValue (parameter As DbParameter, parameterType As TypeUsage, value As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetDbParameterValue : System.Data.Common.DbParameter * System.Data.Entity.Core.Metadata.Edm.TypeUsage * obj -&gt; unit&#xA;override this.SetDbParameterValue : System.Data.Common.DbParameter * System.Data.Entity.Core.Metadata.Edm.TypeUsage * obj -&gt; unit" Usage="dbProviderServices.SetDbParameterValue (parameter, parameterType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Data.Common.DbParameter" />
        <Parameter Name="parameterType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">The parameter.</param>
        <param name="parameterType">The type of the parameter.</param>
        <param name="value">The value of the parameter.</param>
        <summary>
            Sets the parameter value and appropriate facets for the given <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParameterValue">
      <MemberSignature Language="C#" Value="public void SetParameterValue (System.Data.Common.DbParameter parameter, System.Data.Entity.Core.Metadata.Edm.TypeUsage parameterType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParameterValue(class System.Data.Common.DbParameter parameter, class System.Data.Entity.Core.Metadata.Edm.TypeUsage parameterType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.DbProviderServices.SetParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetParameterValue (parameter As DbParameter, parameterType As TypeUsage, value As Object)" />
      <MemberSignature Language="F#" Value="member this.SetParameterValue : System.Data.Common.DbParameter * System.Data.Entity.Core.Metadata.Edm.TypeUsage * obj -&gt; unit" Usage="dbProviderServices.SetParameterValue (parameter, parameterType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Data.Common.DbParameter" />
        <Parameter Name="parameterType" Type="System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">The parameter.</param>
        <param name="parameterType">The type of the parameter.</param>
        <param name="value">The value of the parameter.</param>
        <summary>
            Sets the parameter value and appropriate facets for the given <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>