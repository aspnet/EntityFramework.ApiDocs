<Type Name="EntityTypeMapping" FullName="System.Data.Entity.Core.Mapping.EntityTypeMapping">
  <TypeSignature Language="C#" Value="public class EntityTypeMapping : System.Data.Entity.Core.Mapping.TypeMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EntityTypeMapping extends System.Data.Entity.Core.Mapping.TypeMapping" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Core.Mapping.EntityTypeMapping" />
  <TypeSignature Language="VB.NET" Value="Public Class EntityTypeMapping&#xA;Inherits TypeMapping" />
  <TypeSignature Language="F#" Value="type EntityTypeMapping = class&#xA;    inherit TypeMapping" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Entity.Core.Mapping.TypeMapping</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Mapping metadata for Entity type.
            If an EntitySet represents entities of more than one type, than we will have
            more than one EntityTypeMapping for an EntitySet( For ex : if
            PersonSet Entity extent represents entities of types Person and Customer,
            than we will have two EntityType Mappings under mapping for PersonSet).
            </summary>
    <remarks>To be added.</remarks>
    <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind--&gt;SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap
            --ScalarPropertyMap
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap
            --ComplexPropertyMap
            --ScalarPropertyMap
            --ScalarPropertyMap
            --ScalarPropertyMap
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            --EndPropertyMap
            --ScalarPropertyMap
            --ScalarPropertyMap
            --EndPropertyMap
            --ScalarPropertyMap
            This class represents the metadata for all entity Type map elements in the
            above example. Users can access the table mapping fragments under the
            entity type mapping through this class.
            </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityTypeMapping (System.Data.Entity.Core.Mapping.EntitySetMapping entitySetMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Entity.Core.Mapping.EntitySetMapping entitySetMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.#ctor(System.Data.Entity.Core.Mapping.EntitySetMapping)" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.Core.Mapping.EntityTypeMapping : System.Data.Entity.Core.Mapping.EntitySetMapping -&gt; System.Data.Entity.Core.Mapping.EntityTypeMapping" Usage="new System.Data.Entity.Core.Mapping.EntityTypeMapping entitySetMapping" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="entitySetMapping" Type="System.Data.Entity.Core.Mapping.EntitySetMapping" />
      </Parameters>
      <Docs>
        <param name="entitySetMapping">The EntitySetMapping that contains this EntityTypeMapping.</param>
        <summary>
            Creates an EntityTypeMapping instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFragment">
      <MemberSignature Language="C#" Value="public void AddFragment (System.Data.Entity.Core.Mapping.MappingFragment fragment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddFragment(class System.Data.Entity.Core.Mapping.MappingFragment fragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddFragment(System.Data.Entity.Core.Mapping.MappingFragment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddFragment (fragment As MappingFragment)" />
      <MemberSignature Language="F#" Value="member this.AddFragment : System.Data.Entity.Core.Mapping.MappingFragment -&gt; unit" Usage="entityTypeMapping.AddFragment fragment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Data.Entity.Core.Mapping.MappingFragment" />
      </Parameters>
      <Docs>
        <param name="fragment">The mapping fragment to be added.</param>
        <summary>
            Adds a mapping fragment.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIsOfType">
      <MemberSignature Language="C#" Value="public void AddIsOfType (System.Data.Entity.Core.Metadata.Edm.EntityType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddIsOfType(class System.Data.Entity.Core.Metadata.Edm.EntityType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddIsOfType (type As EntityType)" />
      <MemberSignature Language="F#" Value="member this.AddIsOfType : System.Data.Entity.Core.Metadata.Edm.EntityType -&gt; unit" Usage="entityTypeMapping.AddIsOfType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly", MessageId="AddIs")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.EntityType" />
      </Parameters>
      <Docs>
        <param name="type">The root EntityType of the hierarchy to be added.</param>
        <summary>
            Adds an entity type hierarchy to the mapping.
            The hierarchy is represented by the specified root entity type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddType">
      <MemberSignature Language="C#" Value="public void AddType (System.Data.Entity.Core.Metadata.Edm.EntityType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddType(class System.Data.Entity.Core.Metadata.Edm.EntityType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddType(System.Data.Entity.Core.Metadata.Edm.EntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddType (type As EntityType)" />
      <MemberSignature Language="F#" Value="member this.AddType : System.Data.Entity.Core.Metadata.Edm.EntityType -&gt; unit" Usage="entityTypeMapping.AddType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.EntityType" />
      </Parameters>
      <Docs>
        <param name="type">The EntityType to be added.</param>
        <summary>
            Adds an entity type to the mapping.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntitySetMapping">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.Mapping.EntitySetMapping EntitySetMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.Core.Mapping.EntitySetMapping EntitySetMapping" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntitySetMapping" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntitySetMapping As EntitySetMapping" />
      <MemberSignature Language="F#" Value="member this.EntitySetMapping : System.Data.Entity.Core.Mapping.EntitySetMapping" Usage="System.Data.Entity.Core.Mapping.EntityTypeMapping.EntitySetMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Mapping.EntitySetMapping</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the EntitySetMapping that contains this EntityTypeMapping.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityType">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.Metadata.Edm.EntityType EntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.Core.Metadata.Edm.EntityType EntityType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntityType As EntityType" />
      <MemberSignature Language="F#" Value="member this.EntityType : System.Data.Entity.Core.Metadata.Edm.EntityType" Usage="System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Metadata.Edm.EntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the single EntityType being mapped. Throws exception in case of hierarchy type mapping.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EntityTypeBase&gt; EntityTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Entity.Core.Metadata.Edm.EntityTypeBase&gt; EntityTypes" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntityTypes As ReadOnlyCollection(Of EntityTypeBase)" />
      <MemberSignature Language="F#" Value="member this.EntityTypes : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EntityTypeBase&gt;" Usage="System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EntityTypeBase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the mapped entity types.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fragments">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.MappingFragment&gt; Fragments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Entity.Core.Mapping.MappingFragment&gt; Fragments" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.Fragments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Fragments As ReadOnlyCollection(Of MappingFragment)" />
      <MemberSignature Language="F#" Value="member this.Fragments : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.MappingFragment&gt;" Usage="System.Data.Entity.Core.Mapping.EntityTypeMapping.Fragments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.MappingFragment&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a read-only collection of mapping fragments.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHierarchyMapping">
      <MemberSignature Language="C#" Value="public bool IsHierarchyMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHierarchyMapping" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsHierarchyMapping" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHierarchyMapping As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsHierarchyMapping : bool" Usage="System.Data.Entity.Core.Mapping.EntityTypeMapping.IsHierarchyMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag that indicates whether this is a type hierarchy mapping.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOfEntityTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EntityTypeBase&gt; IsOfEntityTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Entity.Core.Metadata.Edm.EntityTypeBase&gt; IsOfEntityTypes" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsOfEntityTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOfEntityTypes As ReadOnlyCollection(Of EntityTypeBase)" />
      <MemberSignature Language="F#" Value="member this.IsOfEntityTypes : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EntityTypeBase&gt;" Usage="System.Data.Entity.Core.Mapping.EntityTypeMapping.IsOfEntityTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EntityTypeBase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the mapped base types for a hierarchy mapping.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFragment">
      <MemberSignature Language="C#" Value="public void RemoveFragment (System.Data.Entity.Core.Mapping.MappingFragment fragment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFragment(class System.Data.Entity.Core.Mapping.MappingFragment fragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveFragment(System.Data.Entity.Core.Mapping.MappingFragment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFragment (fragment As MappingFragment)" />
      <MemberSignature Language="F#" Value="member this.RemoveFragment : System.Data.Entity.Core.Mapping.MappingFragment -&gt; unit" Usage="entityTypeMapping.RemoveFragment fragment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Data.Entity.Core.Mapping.MappingFragment" />
      </Parameters>
      <Docs>
        <param name="fragment">The mapping fragment to be removed.</param>
        <summary>
            Removes a mapping fragment.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveIsOfType">
      <MemberSignature Language="C#" Value="public void RemoveIsOfType (System.Data.Entity.Core.Metadata.Edm.EntityType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveIsOfType(class System.Data.Entity.Core.Metadata.Edm.EntityType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveIsOfType (type As EntityType)" />
      <MemberSignature Language="F#" Value="member this.RemoveIsOfType : System.Data.Entity.Core.Metadata.Edm.EntityType -&gt; unit" Usage="entityTypeMapping.RemoveIsOfType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.EntityType" />
      </Parameters>
      <Docs>
        <param name="type">The root EntityType of the hierarchy to be removed.</param>
        <summary>
            Removes an entity type hierarchy from the mapping.
            The hierarchy is represented by the specified root entity type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveType">
      <MemberSignature Language="C#" Value="public void RemoveType (System.Data.Entity.Core.Metadata.Edm.EntityType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveType(class System.Data.Entity.Core.Metadata.Edm.EntityType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveType(System.Data.Entity.Core.Metadata.Edm.EntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveType (type As EntityType)" />
      <MemberSignature Language="F#" Value="member this.RemoveType : System.Data.Entity.Core.Metadata.Edm.EntityType -&gt; unit" Usage="entityTypeMapping.RemoveType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Data.Entity.Core.Metadata.Edm.EntityType" />
      </Parameters>
      <Docs>
        <param name="type">The EntityType to be removed.</param>
        <summary>
            Removes an entity type from the mapping.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>