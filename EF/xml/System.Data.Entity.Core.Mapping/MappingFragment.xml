<Type Name="MappingFragment" FullName="System.Data.Entity.Core.Mapping.MappingFragment">
  <TypeSignature Language="C#" Value="public class MappingFragment : System.Data.Entity.Core.Mapping.StructuralTypeMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MappingFragment extends System.Data.Entity.Core.Mapping.StructuralTypeMapping" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Core.Mapping.MappingFragment" />
  <TypeSignature Language="VB.NET" Value="Public Class MappingFragment&#xA;Inherits StructuralTypeMapping" />
  <TypeSignature Language="F#" Value="type MappingFragment = class&#xA;    inherit StructuralTypeMapping" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Entity.Core.Mapping.StructuralTypeMapping</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents the metadata for mapping fragment.
            A set of mapping fragments makes up the Set mappings( EntitySet, AssociationSet or CompositionSet )
            Each MappingFragment provides mapping for those properties of a type that map to a single table.
            </summary>
    <remarks>To be added.</remarks>
    <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind--&gt;SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --ComplexPropertyMap
            --ComplexTypeMapping
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --DiscriminatorPropertyMap ( constant value--&gt;SMemberMetadata )
            --ComplexTypeMapping
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --DiscriminatorPropertyMap ( constant value--&gt;SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            This class represents the metadata for all the mapping fragment elements in the
            above example. Users can access all the top level constructs of
            MappingFragment element like EntityKey map, Property Maps, Discriminator
            property through this mapping fragment class.
            </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MappingFragment (System.Data.Entity.Core.Metadata.Edm.EntitySet storeEntitySet, System.Data.Entity.Core.Mapping.TypeMapping typeMapping, bool makeColumnsDistinct);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Entity.Core.Metadata.Edm.EntitySet storeEntitySet, class System.Data.Entity.Core.Mapping.TypeMapping typeMapping, bool makeColumnsDistinct) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.MappingFragment.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.TypeMapping,System.Boolean)" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.Core.Mapping.MappingFragment : System.Data.Entity.Core.Metadata.Edm.EntitySet * System.Data.Entity.Core.Mapping.TypeMapping * bool -&gt; System.Data.Entity.Core.Mapping.MappingFragment" Usage="new System.Data.Entity.Core.Mapping.MappingFragment (storeEntitySet, typeMapping, makeColumnsDistinct)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storeEntitySet" Type="System.Data.Entity.Core.Metadata.Edm.EntitySet" />
        <Parameter Name="typeMapping" Type="System.Data.Entity.Core.Mapping.TypeMapping" />
        <Parameter Name="makeColumnsDistinct" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storeEntitySet">The EntitySet corresponding to the table of view being mapped.</param>
        <param name="typeMapping">The TypeMapping that contains this MappingFragment.</param>
        <param name="makeColumnsDistinct">Flag that indicates whether to include 'DISTINCT' when generating queries.</param>
        <summary>
            Creates a MappingFragment instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCondition">
      <MemberSignature Language="C#" Value="public override void AddCondition (System.Data.Entity.Core.Mapping.ConditionPropertyMapping condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddCondition(class System.Data.Entity.Core.Mapping.ConditionPropertyMapping condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.MappingFragment.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub AddCondition (condition As ConditionPropertyMapping)" />
      <MemberSignature Language="F#" Value="override this.AddCondition : System.Data.Entity.Core.Mapping.ConditionPropertyMapping -&gt; unit" Usage="mappingFragment.AddCondition condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Data.Entity.Core.Mapping.ConditionPropertyMapping" />
      </Parameters>
      <Docs>
        <param name="condition">The property mapping condition to be added.</param>
        <summary>
            Adds a property mapping condition.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPropertyMapping">
      <MemberSignature Language="C#" Value="public override void AddPropertyMapping (System.Data.Entity.Core.Mapping.PropertyMapping propertyMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddPropertyMapping(class System.Data.Entity.Core.Mapping.PropertyMapping propertyMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.MappingFragment.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)" />
      <MemberSignature Language="F#" Value="override this.AddPropertyMapping : System.Data.Entity.Core.Mapping.PropertyMapping -&gt; unit" Usage="mappingFragment.AddPropertyMapping propertyMapping" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyMapping" Type="System.Data.Entity.Core.Mapping.PropertyMapping" />
      </Parameters>
      <Docs>
        <param name="propertyMapping">The property mapping to be added.</param>
        <summary>
            Adds a property mapping.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conditions">
      <MemberSignature Language="C#" Value="public override System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.ConditionPropertyMapping&gt; Conditions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Entity.Core.Mapping.ConditionPropertyMapping&gt; Conditions" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.MappingFragment.Conditions" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Conditions As ReadOnlyCollection(Of ConditionPropertyMapping)" />
      <MemberSignature Language="F#" Value="member this.Conditions : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.ConditionPropertyMapping&gt;" Usage="System.Data.Entity.Core.Mapping.MappingFragment.Conditions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.ConditionPropertyMapping&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a read-only collection of property mapping conditions.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeColumnsDistinct">
      <MemberSignature Language="C#" Value="public bool MakeColumnsDistinct { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MakeColumnsDistinct" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.MappingFragment.MakeColumnsDistinct" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MakeColumnsDistinct As Boolean" />
      <MemberSignature Language="F#" Value="member this.MakeColumnsDistinct : bool" Usage="System.Data.Entity.Core.Mapping.MappingFragment.MakeColumnsDistinct" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag that indicates whether to include 'DISTINCT' when generating queries.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyMappings">
      <MemberSignature Language="C#" Value="public override System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.PropertyMapping&gt; PropertyMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Entity.Core.Mapping.PropertyMapping&gt; PropertyMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.MappingFragment.PropertyMappings" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PropertyMappings As ReadOnlyCollection(Of PropertyMapping)" />
      <MemberSignature Language="F#" Value="member this.PropertyMappings : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.PropertyMapping&gt;" Usage="System.Data.Entity.Core.Mapping.MappingFragment.PropertyMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.PropertyMapping&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a read-only collection of property mappings.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCondition">
      <MemberSignature Language="C#" Value="public override void RemoveCondition (System.Data.Entity.Core.Mapping.ConditionPropertyMapping condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveCondition(class System.Data.Entity.Core.Mapping.ConditionPropertyMapping condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.MappingFragment.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RemoveCondition (condition As ConditionPropertyMapping)" />
      <MemberSignature Language="F#" Value="override this.RemoveCondition : System.Data.Entity.Core.Mapping.ConditionPropertyMapping -&gt; unit" Usage="mappingFragment.RemoveCondition condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Data.Entity.Core.Mapping.ConditionPropertyMapping" />
      </Parameters>
      <Docs>
        <param name="condition">The property mapping condition to be removed.</param>
        <summary>
            Removes a property mapping condition.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePropertyMapping">
      <MemberSignature Language="C#" Value="public override void RemovePropertyMapping (System.Data.Entity.Core.Mapping.PropertyMapping propertyMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemovePropertyMapping(class System.Data.Entity.Core.Mapping.PropertyMapping propertyMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.MappingFragment.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)" />
      <MemberSignature Language="F#" Value="override this.RemovePropertyMapping : System.Data.Entity.Core.Mapping.PropertyMapping -&gt; unit" Usage="mappingFragment.RemovePropertyMapping propertyMapping" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyMapping" Type="System.Data.Entity.Core.Mapping.PropertyMapping" />
      </Parameters>
      <Docs>
        <param name="propertyMapping">The property mapping to be removed.</param>
        <summary>
            Removes a property mapping.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreEntitySet">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.Metadata.Edm.EntitySet StoreEntitySet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.Core.Metadata.Edm.EntitySet StoreEntitySet" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.MappingFragment.StoreEntitySet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StoreEntitySet As EntitySet" />
      <MemberSignature Language="F#" Value="member this.StoreEntitySet : System.Data.Entity.Core.Metadata.Edm.EntitySet" Usage="System.Data.Entity.Core.Mapping.MappingFragment.StoreEntitySet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Metadata.Edm.EntitySet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the EntitySet corresponding to the table or view being mapped.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeMapping">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.Mapping.TypeMapping TypeMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.Core.Mapping.TypeMapping TypeMapping" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.MappingFragment.TypeMapping" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeMapping As TypeMapping" />
      <MemberSignature Language="F#" Value="member this.TypeMapping : System.Data.Entity.Core.Mapping.TypeMapping" Usage="System.Data.Entity.Core.Mapping.MappingFragment.TypeMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Mapping.TypeMapping</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the TypeMapping that contains this MappingFragment.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>