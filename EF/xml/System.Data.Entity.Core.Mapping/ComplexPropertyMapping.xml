<Type Name="ComplexPropertyMapping" FullName="System.Data.Entity.Core.Mapping.ComplexPropertyMapping">
  <TypeSignature Language="C#" Value="public class ComplexPropertyMapping : System.Data.Entity.Core.Mapping.PropertyMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ComplexPropertyMapping extends System.Data.Entity.Core.Mapping.PropertyMapping" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Core.Mapping.ComplexPropertyMapping" />
  <TypeSignature Language="VB.NET" Value="Public Class ComplexPropertyMapping&#xA;Inherits PropertyMapping" />
  <TypeSignature Language="F#" Value="type ComplexPropertyMapping = class&#xA;    inherit PropertyMapping" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Entity.Core.Mapping.PropertyMapping</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Mapping metadata for Complex properties.
            </summary>
    <remarks>To be added.</remarks>
    <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind--&gt;SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --ComplexPropertyMap
            --ComplexTypeMapping
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --DiscriminatorPropertyMap ( constant value--&gt;SMemberMetadata )
            --ComplexTypeMapping
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --DiscriminatorPropertyMap ( constant value--&gt;SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata--&gt;SMemberMetadata )
            This class represents the metadata for all the complex property map elements in the
            above example. ComplexPropertyMaps contain ComplexTypeMaps which define mapping based
            on the type of the ComplexProperty in case of inheritance.
            </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComplexPropertyMapping (System.Data.Entity.Core.Metadata.Edm.EdmProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Entity.Core.Metadata.Edm.EdmProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (property As EdmProperty)" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.Core.Mapping.ComplexPropertyMapping : System.Data.Entity.Core.Metadata.Edm.EdmProperty -&gt; System.Data.Entity.Core.Mapping.ComplexPropertyMapping" Usage="new System.Data.Entity.Core.Mapping.ComplexPropertyMapping property" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="property" Type="System.Data.Entity.Core.Metadata.Edm.EdmProperty" />
      </Parameters>
      <Docs>
        <param name="property"> The MemberMetadata object that represents this Complex member </param>
        <summary>
            Construct a new Complex Property mapping object
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTypeMapping">
      <MemberSignature Language="C#" Value="public void AddTypeMapping (System.Data.Entity.Core.Mapping.ComplexTypeMapping typeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddTypeMapping(class System.Data.Entity.Core.Mapping.ComplexTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddTypeMapping (typeMapping As ComplexTypeMapping)" />
      <MemberSignature Language="F#" Value="member this.AddTypeMapping : System.Data.Entity.Core.Mapping.ComplexTypeMapping -&gt; unit" Usage="complexPropertyMapping.AddTypeMapping typeMapping" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeMapping" Type="System.Data.Entity.Core.Mapping.ComplexTypeMapping" />
      </Parameters>
      <Docs>
        <param name="typeMapping">The complex type mapping to be added.</param>
        <summary>
            Adds a type mapping corresponding to a nested complex type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTypeMapping">
      <MemberSignature Language="C#" Value="public void RemoveTypeMapping (System.Data.Entity.Core.Mapping.ComplexTypeMapping typeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveTypeMapping(class System.Data.Entity.Core.Mapping.ComplexTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveTypeMapping (typeMapping As ComplexTypeMapping)" />
      <MemberSignature Language="F#" Value="member this.RemoveTypeMapping : System.Data.Entity.Core.Mapping.ComplexTypeMapping -&gt; unit" Usage="complexPropertyMapping.RemoveTypeMapping typeMapping" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeMapping" Type="System.Data.Entity.Core.Mapping.ComplexTypeMapping" />
      </Parameters>
      <Docs>
        <param name="typeMapping">The complex type mapping to be removed.</param>
        <summary>
            Removes a type mapping corresponding to a nested complex type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeMappings">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.ComplexTypeMapping&gt; TypeMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Entity.Core.Mapping.ComplexTypeMapping&gt; TypeMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.TypeMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeMappings As ReadOnlyCollection(Of ComplexTypeMapping)" />
      <MemberSignature Language="F#" Value="member this.TypeMappings : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.ComplexTypeMapping&gt;" Usage="System.Data.Entity.Core.Mapping.ComplexPropertyMapping.TypeMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.ComplexTypeMapping&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a read only collections of type mappings corresponding to the 
            nested complex types.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>