<Type Name="SqlCeProviderServices" FullName="System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices">
  <TypeSignature Language="C#" Value="public sealed class SqlCeProviderServices : System.Data.Entity.Core.Common.DbProviderServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlCeProviderServices extends System.Data.Entity.Core.Common.DbProviderServices" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlCeProviderServices&#xA;Inherits DbProviderServices" />
  <TypeSignature Language="F#" Value="type SqlCeProviderServices = class&#xA;    inherit DbProviderServices" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework.SqlServerCompact.Legacy</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Entity.Core.Common.DbProviderServices</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The ProviderServices object for the Sql CE provider
            </summary>
    <remarks>
            Note that instance of this type also resolves additional provider services for Microsoft SQL Server Compact Edition
            when this type is registered as an EF provider either using an entry in the application's config file or through
            code-based registration in <see cref="T:System.Data.Entity.DbConfiguration" />.
            The services resolved are:
            Requests for <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory" /> are resolved to a Singleton instance of
            <see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" /> to create connections to SQL Compact by default.
            Requests for <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" /> for the invariant name "System.Data.SqlServerCe.4.0" are
            resolved to <see cref="T:System.Data.Entity.SqlServerCompact.Legacy.SqlCeMigrationSqlGenerator" /> instances to provide default Migrations SQL
            generation for SQL Compact.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateDbCommandDefinition">
      <MemberSignature Language="C#" Value="protected override System.Data.Entity.Core.Common.DbCommandDefinition CreateDbCommandDefinition (System.Data.Entity.Core.Common.DbProviderManifest providerManifest, System.Data.Entity.Core.Common.CommandTrees.DbCommandTree commandTree);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Entity.Core.Common.DbCommandDefinition CreateDbCommandDefinition(class System.Data.Entity.Core.Common.DbProviderManifest providerManifest, class System.Data.Entity.Core.Common.CommandTrees.DbCommandTree commandTree) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices.CreateDbCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbCommandDefinition (providerManifest As DbProviderManifest, commandTree As DbCommandTree) As DbCommandDefinition" />
      <MemberSignature Language="F#" Value="override this.CreateDbCommandDefinition : System.Data.Entity.Core.Common.DbProviderManifest * System.Data.Entity.Core.Common.CommandTrees.DbCommandTree -&gt; System.Data.Entity.Core.Common.DbCommandDefinition" Usage="sqlCeProviderServices.CreateDbCommandDefinition (providerManifest, commandTree)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework.SqlServerCompact.Legacy</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.DbCommandDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerManifest" Type="System.Data.Entity.Core.Common.DbProviderManifest" />
        <Parameter Name="commandTree" Type="System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />
      </Parameters>
      <Docs>
        <param name="providerManifest"> provider manifest that was determined from metadata </param>
        <param name="commandTree"> command tree for the statement </param>
        <summary>
            Create a Command Definition object, given the connection and command tree
            </summary>
        <returns> an executable command definition object </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbCreateDatabase">
      <MemberSignature Language="C#" Value="protected override void DbCreateDatabase (System.Data.Common.DbConnection connection, Nullable&lt;int&gt; timeOut, System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void DbCreateDatabase(class System.Data.Common.DbConnection connection, valuetype System.Nullable`1&lt;int32&gt; timeOut, class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)" />
      <MemberSignature Language="F#" Value="override this.DbCreateDatabase : System.Data.Common.DbConnection * Nullable&lt;int&gt; * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; unit" Usage="sqlCeProviderServices.DbCreateDatabase (connection, timeOut, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework.SqlServerCompact.Legacy</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2100:Review SQL queries for security vulnerabilities")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="timeOut" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="storeItemCollection" Type="System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
      </Parameters>
      <Docs>
        <param name="connection"> Connection </param>
        <param name="timeOut"> Timeout for internal commands </param>
        <param name="storeItemCollection"> Store Item Collection </param>
        <summary>
            API for creating the database and schema objects given a StoreItemCollection.
            This will do following things:
            1. Create a new database using SqlCeEngine.CreateDatabase().
            2. Generate scripts for creating schema objects.
            3. Execute the scrip generated in step2.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbCreateDatabaseScript">
      <MemberSignature Language="C#" Value="protected override string DbCreateDatabaseScript (string providerManifestToken, System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string DbCreateDatabaseScript(string providerManifestToken, class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices.DbCreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)" />
      <MemberSignature Language="F#" Value="override this.DbCreateDatabaseScript : string * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; string" Usage="sqlCeProviderServices.DbCreateDatabaseScript (providerManifestToken, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework.SqlServerCompact.Legacy</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerManifestToken" Type="System.String" />
        <Parameter Name="storeItemCollection" Type="System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
      </Parameters>
      <Docs>
        <param name="providerManifestToken"> Provider manifest </param>
        <param name="storeItemCollection"> Store items </param>
        <summary>
            API for generating script for creating schema objects from the Store Item Collection.
            </summary>
        <returns> T-SQL script for generating schema objects. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbDatabaseExists">
      <MemberSignature Language="C#" Value="protected override bool DbDatabaseExists (System.Data.Common.DbConnection connection, Nullable&lt;int&gt; timeOut, System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool DbDatabaseExists(class System.Data.Common.DbConnection connection, valuetype System.Nullable`1&lt;int32&gt; timeOut, class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)" />
      <MemberSignature Language="F#" Value="override this.DbDatabaseExists : System.Data.Common.DbConnection * Nullable&lt;int&gt; * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; bool" Usage="sqlCeProviderServices.DbDatabaseExists (connection, timeOut, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework.SqlServerCompact.Legacy</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="timeOut" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="storeItemCollection" Type="System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
      </Parameters>
      <Docs>
        <param name="connection"> Connection </param>
        <param name="timeOut"> Timeout for internal commands. </param>
        <param name="storeItemCollection"> Item Collection. </param>
        <summary>
            API for checkin whether database exists or not.
            This will internally only check whether the file that the connection points to exists or not.
            Note: In case of SQLCE, timeout and storeItemCollection parameters are ignored.
            </summary>
        <returns> Bool indicating whether database exists or not. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbDatabaseExists">
      <MemberSignature Language="C#" Value="protected override bool DbDatabaseExists (System.Data.Common.DbConnection connection, Nullable&lt;int&gt; timeOut, Lazy&lt;System.Data.Entity.Core.Metadata.Edm.StoreItemCollection&gt; storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool DbDatabaseExists(class System.Data.Common.DbConnection connection, valuetype System.Nullable`1&lt;int32&gt; timeOut, class System.Lazy`1&lt;class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection&gt; storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function DbDatabaseExists (connection As DbConnection, timeOut As Nullable(Of Integer), storeItemCollection As Lazy(Of StoreItemCollection)) As Boolean" />
      <MemberSignature Language="F#" Value="override this.DbDatabaseExists : System.Data.Common.DbConnection * Nullable&lt;int&gt; * Lazy&lt;System.Data.Entity.Core.Metadata.Edm.StoreItemCollection&gt; -&gt; bool" Usage="sqlCeProviderServices.DbDatabaseExists (connection, timeOut, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework.SqlServerCompact.Legacy</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="timeOut" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="storeItemCollection" Type="System.Lazy&lt;System.Data.Entity.Core.Metadata.Edm.StoreItemCollection&gt;" />
      </Parameters>
      <Docs>
        <param name="connection"> Connection </param>
        <param name="timeOut"> Timeout for internal commands. </param>
        <param name="storeItemCollection"> Item Collection. </param>
        <summary>
            API for checkin whether database exists or not.
            This will internally only check whether the file that the connection points to exists or not.
            Note: In case of SQLCE, timeout and storeItemCollection parameters are ignored.
            </summary>
        <returns> Bool indicating whether database exists or not. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbDeleteDatabase">
      <MemberSignature Language="C#" Value="protected override void DbDeleteDatabase (System.Data.Common.DbConnection connection, Nullable&lt;int&gt; timeOut, System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void DbDeleteDatabase(class System.Data.Common.DbConnection connection, valuetype System.Nullable`1&lt;int32&gt; timeOut, class System.Data.Entity.Core.Metadata.Edm.StoreItemCollection storeItemCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)" />
      <MemberSignature Language="F#" Value="override this.DbDeleteDatabase : System.Data.Common.DbConnection * Nullable&lt;int&gt; * System.Data.Entity.Core.Metadata.Edm.StoreItemCollection -&gt; unit" Usage="sqlCeProviderServices.DbDeleteDatabase (connection, timeOut, storeItemCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework.SqlServerCompact.Legacy</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="timeOut" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="storeItemCollection" Type="System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
      </Parameters>
      <Docs>
        <param name="connection"> Connection </param>
        <param name="timeOut"> Timeout for internal commands. </param>
        <param name="storeItemCollection"> Item Collection. </param>
        <summary>
            API for deleting the database.
            In SQLCE case, this will translate to File.Delete() call.
            Note: Timeout and storeItemCollection parameters are ignored.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDbProviderManifest">
      <MemberSignature Language="C#" Value="protected override System.Data.Entity.Core.Common.DbProviderManifest GetDbProviderManifest (string versionHint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Entity.Core.Common.DbProviderManifest GetDbProviderManifest(string versionHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices.GetDbProviderManifest(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetDbProviderManifest (versionHint As String) As DbProviderManifest" />
      <MemberSignature Language="F#" Value="override this.GetDbProviderManifest : string -&gt; System.Data.Entity.Core.Common.DbProviderManifest" Usage="sqlCeProviderServices.GetDbProviderManifest versionHint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework.SqlServerCompact.Legacy</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.DbProviderManifest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="versionHint" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="versionHint"> The token information associated with the provider manifest. </param>
        <summary>
            Returns the provider manifest by using the specified version information.
            </summary>
        <returns> The provider manifest by using the specified version information. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDbProviderManifestToken">
      <MemberSignature Language="C#" Value="protected override string GetDbProviderManifestToken (System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetDbProviderManifestToken(class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetDbProviderManifestToken (connection As DbConnection) As String" />
      <MemberSignature Language="F#" Value="override this.GetDbProviderManifestToken : System.Data.Common.DbConnection -&gt; string" Usage="sqlCeProviderServices.GetDbProviderManifestToken connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework.SqlServerCompact.Legacy</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Connection to find manifest token from.</param>
        <summary>
            Returns provider manifest token for a given connection.
            </summary>
        <returns>The provider manifest token for the specified connection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public static readonly System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices Instance;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices Instance" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices.Instance" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Instance As SqlCeProviderServices " />
      <MemberSignature Language="F#" Value=" staticval mutable Instance : System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices" Usage="System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices.Instance" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework.SqlServerCompact.Legacy</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Singleton object;
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderInvariantName">
      <MemberSignature Language="C#" Value="public const string ProviderInvariantName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ProviderInvariantName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices.ProviderInvariantName" />
      <MemberSignature Language="VB.NET" Value="Public Const ProviderInvariantName As String " />
      <MemberSignature Language="F#" Value="val mutable ProviderInvariantName : string" Usage="System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices.ProviderInvariantName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework.SqlServerCompact.Legacy</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            This is the well-known string using in configuration files and code-based configuration as
            the "provider invariant name" used to specify Microsoft SQL Server Compact Edition 4.0 for
            ADO.NET and Entity Framework provider services.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterInfoMessageHandler">
      <MemberSignature Language="C#" Value="public override void RegisterInfoMessageHandler (System.Data.Common.DbConnection connection, Action&lt;string&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RegisterInfoMessageHandler(class System.Data.Common.DbConnection connection, class System.Action`1&lt;string&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.SqlServerCompact.Legacy.SqlCeProviderServices.RegisterInfoMessageHandler(System.Data.Common.DbConnection,System.Action{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RegisterInfoMessageHandler (connection As DbConnection, handler As Action(Of String))" />
      <MemberSignature Language="F#" Value="override this.RegisterInfoMessageHandler : System.Data.Common.DbConnection * Action&lt;string&gt; -&gt; unit" Usage="sqlCeProviderServices.RegisterInfoMessageHandler (connection, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework.SqlServerCompact.Legacy</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="handler" Type="System.Action&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection to receive information for.</param>
        <param name="handler">The handler to process messages.</param>
        <summary>
            Registers a handler to process non-error messages coming from the database provider.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>