<Type Name="DbRawSqlQuery&lt;TElement&gt;" FullName="System.Data.Entity.Infrastructure.DbRawSqlQuery&lt;TElement&gt;">
  <TypeSignature Language="C#" Value="public class DbRawSqlQuery&lt;TElement&gt; : System.Collections.Generic.IEnumerable&lt;TElement&gt;, System.ComponentModel.IListSource, System.Data.Entity.Infrastructure.IDbAsyncEnumerable&lt;TElement&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbRawSqlQuery`1&lt;TElement&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TElement&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Entity.Infrastructure.IDbAsyncEnumerable, class System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1&lt;!TElement&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" />
  <TypeSignature Language="VB.NET" Value="Public Class DbRawSqlQuery(Of TElement)&#xA;Implements IDbAsyncEnumerable(Of TElement), IEnumerable(Of TElement), IListSource" />
  <TypeSignature Language="F#" Value="type DbRawSqlQuery&lt;'Element&gt; = class&#xA;    interface seq&lt;'Element&gt;&#xA;    interface IEnumerable&#xA;    interface IListSource&#xA;    interface IDbAsyncEnumerable&lt;'Element&gt;&#xA;    interface IDbAsyncEnumerable" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TElement" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TElement&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.IDbAsyncEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.IDbAsyncEnumerable&lt;TElement&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TElement">The type of elements returned by the query.</typeparam>
    <summary>
            Represents a SQL query for non-entities that is created from a <see cref="T:System.Data.Entity.DbContext" />
            and is executed using the connection from that context.
            Instances of this class are obtained from the <see cref="P:System.Data.Entity.DbContext.Database" /> instance.
            The query is not executed when this object is created; it is executed
            each time it is enumerated, for example by using <c>foreach</c>.
            SQL queries for entities are created using <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" />.
            See <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> for a non-generic version of this class.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; AllAsync (Func&lt;TElement,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; AllAsync(class System.Func`2&lt;!TElement, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function AllAsync (predicate As Func(Of TElement, Boolean)) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.AllAsync : Func&lt;'Element, bool&gt; -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="dbRawSqlQuery.AllAsync predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <summary>
            Asynchronously determines whether all the elements of the query satisfy a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if every element of the query result passes the test in the specified predicate; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AllAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; AllAsync (Func&lt;TElement,bool&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; AllAsync(class System.Func`2&lt;!TElement, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.AllAsync : Func&lt;'Element, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="dbRawSqlQuery.AllAsync (predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously determines whether all the elements of the query satisfy a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if every element of the query result passes the test in the specified predicate; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AnyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; AnyAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; AnyAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AnyAsync () As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.AnyAsync : unit -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="dbRawSqlQuery.AnyAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Asynchronously determines whether the query contains any elements.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if the query result contains any elements; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; AnyAsync (Func&lt;TElement,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; AnyAsync(class System.Func`2&lt;!TElement, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function AnyAsync (predicate As Func(Of TElement, Boolean)) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.AnyAsync : Func&lt;'Element, bool&gt; -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="dbRawSqlQuery.AnyAsync predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <summary>
            Asynchronously determines whether any element of the query satisfies a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if any elements in the query result pass the test in the specified predicate; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; AnyAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; AnyAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.AnyAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="dbRawSqlQuery.AnyAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously determines whether the query contains any elements.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if the query result contains any elements; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; AnyAsync (Func&lt;TElement,bool&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; AnyAsync(class System.Func`2&lt;!TElement, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.AnyAsync : Func&lt;'Element, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="dbRawSqlQuery.AnyAsync (predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously determines whether any element of the query satisfies a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if any elements in the query result pass the test in the specified predicate; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsStreaming">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Infrastructure.DbRawSqlQuery&lt;TElement&gt; AsStreaming ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Infrastructure.DbRawSqlQuery`1&lt;!TElement&gt; AsStreaming() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AsStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AsStreaming () As DbRawSqlQuery(Of TElement)" />
      <MemberSignature Language="F#" Value="abstract member AsStreaming : unit -&gt; System.Data.Entity.Infrastructure.DbRawSqlQuery&lt;'Element&gt;&#xA;override this.AsStreaming : unit -&gt; System.Data.Entity.Infrastructure.DbRawSqlQuery&lt;'Element&gt;" Usage="dbRawSqlQuery.AsStreaming " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbRawSqlQuery&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a new query that will stream the results instead of buffering.
            </summary>
        <returns> A new query with AsStreaming applied. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; ContainsAsync (TElement value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; ContainsAsync(!TElement value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsAsync (value As TElement) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.ContainsAsync : 'Element -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="dbRawSqlQuery.ContainsAsync value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TElement" />
      </Parameters>
      <Docs>
        <param name="value"> The object to locate in the query result. </param>
        <summary>
            Asynchronously determines whether the query contains a specified element by using the default equality comparer.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if the query result contains the specified value; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; ContainsAsync (TElement value, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; ContainsAsync(!TElement value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.ContainsAsync : 'Element * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="dbRawSqlQuery.ContainsAsync (value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TElement" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="value"> The object to locate in the query result. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously determines whether the query contains a specified element by using the default equality comparer.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>true</c> if the query result contains the specified value; otherwise, <c>false</c>.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; CountAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; CountAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function CountAsync () As Task(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.CountAsync : unit -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="dbRawSqlQuery.CountAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Asynchronously returns the number of elements in the query.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the query result.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.OverflowException">
            The number of elements in the query result is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CountAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; CountAsync (Func&lt;TElement,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; CountAsync(class System.Func`2&lt;!TElement, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function CountAsync (predicate As Func(Of TElement, Boolean)) As Task(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.CountAsync : Func&lt;'Element, bool&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="dbRawSqlQuery.CountAsync predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <summary>
            Asynchronously returns the number of elements in the query that satisfy a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the query result that satisfy the condition in the predicate function.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.OverflowException">
            The number of elements in the query result that satisfy the condition in the predicate function
            is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CountAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; CountAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; CountAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.CountAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="dbRawSqlQuery.CountAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the number of elements in the query.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the query result.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.OverflowException">
            The number of elements in the query result is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CountAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; CountAsync (Func&lt;TElement,bool&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; CountAsync(class System.Func`2&lt;!TElement, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.CountAsync : Func&lt;'Element, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="dbRawSqlQuery.CountAsync (predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the number of elements in the query that satisfy a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the query result that satisfy the condition in the predicate function.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.OverflowException">
            The number of elements in the query result that satisfy the condition in the predicate function
            is larger than
            <see cref="F:System.Int32.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dbRawSqlQuery.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="FirstAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; FirstAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; FirstAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function FirstAsync () As Task(Of TElement)" />
      <MemberSignature Language="F#" Value="member this.FirstAsync : unit -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.FirstAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Asynchronously returns the first element of the query.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the first element in the query result.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="FirstAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; FirstAsync (Func&lt;TElement,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; FirstAsync(class System.Func`2&lt;!TElement, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function FirstAsync (predicate As Func(Of TElement, Boolean)) As Task(Of TElement)" />
      <MemberSignature Language="F#" Value="member this.FirstAsync : Func&lt;'Element, bool&gt; -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.FirstAsync predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <summary>
            Asynchronously returns the first element of the query that satisfies a specified condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the first element in the query result that satisfies a specified condition.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="FirstAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; FirstAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; FirstAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FirstAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.FirstAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the first element of the query.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the first element in the query result.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="FirstAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; FirstAsync (Func&lt;TElement,bool&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; FirstAsync(class System.Func`2&lt;!TElement, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FirstAsync : Func&lt;'Element, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.FirstAsync (predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the first element of the query that satisfies a specified condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the first element in the query result that satisfies a specified condition.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefaultAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; FirstOrDefaultAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; FirstOrDefaultAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function FirstOrDefaultAsync () As Task(Of TElement)" />
      <MemberSignature Language="F#" Value="member this.FirstOrDefaultAsync : unit -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.FirstOrDefaultAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Asynchronously returns the first element of the query, or a default value if the query result contains no elements.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>default</c> ( <typeparamref name="TElement" /> ) if query result is empty;
            otherwise, the first element in the query result.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefaultAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; FirstOrDefaultAsync (Func&lt;TElement,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; FirstOrDefaultAsync(class System.Func`2&lt;!TElement, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function FirstOrDefaultAsync (predicate As Func(Of TElement, Boolean)) As Task(Of TElement)" />
      <MemberSignature Language="F#" Value="member this.FirstOrDefaultAsync : Func&lt;'Element, bool&gt; -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.FirstOrDefaultAsync predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <summary>
            Asynchronously returns the first element of the query that satisfies a specified condition
            or a default value if no such element is found.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>default</c> ( <typeparamref name="TElement" /> ) if query result is empty
            or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element
            in the query result that passes the test specified by <paramref name="predicate" /> .
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefaultAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; FirstOrDefaultAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; FirstOrDefaultAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FirstOrDefaultAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.FirstOrDefaultAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the first element of the query, or a default value if the query result contains no elements.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>default</c> ( <typeparamref name="TElement" /> ) if query result is empty;
            otherwise, the first element in the query result.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefaultAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; FirstOrDefaultAsync (Func&lt;TElement,bool&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; FirstOrDefaultAsync(class System.Func`2&lt;!TElement, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FirstOrDefaultAsync : Func&lt;'Element, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.FirstOrDefaultAsync (predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the first element of the query that satisfies a specified condition
            or a default value if no such element is found.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains <c>default</c> ( <typeparamref name="TElement" /> ) if query result is empty
            or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element
            in the query result that passes the test specified by <paramref name="predicate" /> .
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEachAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ForEachAsync (Action&lt;TElement&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ForEachAsync(class System.Action`1&lt;!TElement&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ForEachAsync (action As Action(Of TElement)) As Task" />
      <MemberSignature Language="F#" Value="member this.ForEachAsync : Action&lt;'Element&gt; -&gt; System.Threading.Tasks.Task" Usage="dbRawSqlQuery.ForEachAsync action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;TElement&gt;" />
      </Parameters>
      <Docs>
        <param name="action"> The action to be executed. </param>
        <summary>
            Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
        <returns> A task that represents the asynchronous operation. </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ForEachAsync (Action&lt;TElement&gt; action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ForEachAsync(class System.Action`1&lt;!TElement&gt; action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.ForEachAsync : Action&lt;'Element&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="dbRawSqlQuery.ForEachAsync (action, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;TElement&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"> The action to be executed. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
        <returns> A task that represents the asynchronous operation. </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerator&lt;TElement&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TElement&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator(Of TElement)" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Element&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Element&gt;" Usage="dbRawSqlQuery.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> which when enumerated will execute the SQL query against the database.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the elements.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dbRawSqlQuery.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="dbRawSqlQuery.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="LongCountAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; LongCountAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; LongCountAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function LongCountAsync () As Task(Of Long)" />
      <MemberSignature Language="F#" Value="member this.LongCountAsync : unit -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="dbRawSqlQuery.LongCountAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Asynchronously returns an <see cref="T:System.Int64" /> that represents the total number of elements in the query.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the query result.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.OverflowException">
            The number of elements in the query result is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LongCountAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; LongCountAsync (Func&lt;TElement,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; LongCountAsync(class System.Func`2&lt;!TElement, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function LongCountAsync (predicate As Func(Of TElement, Boolean)) As Task(Of Long)" />
      <MemberSignature Language="F#" Value="member this.LongCountAsync : Func&lt;'Element, bool&gt; -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="dbRawSqlQuery.LongCountAsync predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <summary>
            Asynchronously returns an <see cref="T:System.Int64" /> that represents the number of elements in the query
            that satisfy a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the query result that satisfy the condition in the predicate function.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.OverflowException">
            The number of elements in the query result that satisfy the condition in the predicate function
            is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LongCountAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; LongCountAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; LongCountAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.LongCountAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="dbRawSqlQuery.LongCountAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns an <see cref="T:System.Int64" /> that represents the total number of elements in the query.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the query result.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.OverflowException">
            The number of elements in the query result is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LongCountAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; LongCountAsync (Func&lt;TElement,bool&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; LongCountAsync(class System.Func`2&lt;!TElement, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.LongCountAsync : Func&lt;'Element, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="dbRawSqlQuery.LongCountAsync (predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns an <see cref="T:System.Int64" /> that represents the number of elements in the query
            that satisfy a condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the number of elements in the query result that satisfy the condition in the predicate function.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.OverflowException">
            The number of elements in the query result that satisfy the condition in the predicate function
            is larger than
            <see cref="F:System.Int64.MaxValue" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MaxAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; MaxAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; MaxAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function MaxAsync () As Task(Of TElement)" />
      <MemberSignature Language="F#" Value="member this.MaxAsync : unit -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.MaxAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Asynchronously returns the maximum value of the query.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the maximum value in the query result.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; MaxAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; MaxAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.MaxAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.MaxAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the maximum value of the query.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the maximum value in the query result.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; MinAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; MinAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function MinAsync () As Task(Of TElement)" />
      <MemberSignature Language="F#" Value="member this.MinAsync : unit -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.MinAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Asynchronously returns the minimum value of the query.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the minimum value in the query result.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; MinAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; MinAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.MinAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.MinAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the minimum value of the query.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the minimum value in the query result.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; SingleAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; SingleAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function SingleAsync () As Task(Of TElement)" />
      <MemberSignature Language="F#" Value="member this.SingleAsync : unit -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.SingleAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Asynchronously returns the only element of the query, and throws an exception
            if there is not exactly one element in the sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the query result.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="SingleAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; SingleAsync (Func&lt;TElement,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; SingleAsync(class System.Func`2&lt;!TElement, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function SingleAsync (predicate As Func(Of TElement, Boolean)) As Task(Of TElement)" />
      <MemberSignature Language="F#" Value="member this.SingleAsync : Func&lt;'Element, bool&gt; -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.SingleAsync predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <summary>
            Asynchronously returns the only element of the query that satisfies a specified condition,
            and throws an exception if more than one such element exists.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the query result that satisfies the condition in
            <paramref name="predicate" />.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
            More than one element satisfies the condition in
            <paramref name="predicate" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SingleAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; SingleAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; SingleAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.SingleAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.SingleAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the only element of the query, and throws an exception
            if there is not exactly one element in the sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the query result.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="SingleAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; SingleAsync (Func&lt;TElement,bool&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; SingleAsync(class System.Func`2&lt;!TElement, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.SingleAsync : Func&lt;'Element, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.SingleAsync (predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the only element of the query that satisfies a specified condition,
            and throws an exception if more than one such element exists.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the query result that satisfies the condition in
            <paramref name="predicate" />.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
            More than one element satisfies the condition in
            <paramref name="predicate" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; SingleOrDefaultAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; SingleOrDefaultAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function SingleOrDefaultAsync () As Task(Of TElement)" />
      <MemberSignature Language="F#" Value="member this.SingleOrDefaultAsync : unit -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.SingleOrDefaultAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;
            this method throws an exception if there is more than one element in the sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the query result, or <c>default</c> (<typeparamref name="TElement" />)
            if the sequence contains no elements.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.InvalidOperationException">The query result has more than one element.</exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; SingleOrDefaultAsync (Func&lt;TElement,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; SingleOrDefaultAsync(class System.Func`2&lt;!TElement, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function SingleOrDefaultAsync (predicate As Func(Of TElement, Boolean)) As Task(Of TElement)" />
      <MemberSignature Language="F#" Value="member this.SingleOrDefaultAsync : Func&lt;'Element, bool&gt; -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.SingleOrDefaultAsync predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <summary>
            Asynchronously returns the only element of the query that satisfies a specified condition or
            a default value if no such element exists; this method throws an exception if more than one element
            satisfies the condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the query result that satisfies the condition in
            <paramref name="predicate" />, or <c>default</c> ( <typeparamref name="TElement" /> ) if no such element is found.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
            More than one element satisfies the condition in
            <paramref name="predicate" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; SingleOrDefaultAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; SingleOrDefaultAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.SingleOrDefaultAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.SingleOrDefaultAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;
            this method throws an exception if there is more than one element in the sequence.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the query result, or <c>default</c> (<typeparamref name="TElement" />)
            if the sequence contains no elements.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.InvalidOperationException">The query result has more than one element.</exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement&gt; SingleOrDefaultAsync (Func&lt;TElement,bool&gt; predicate, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement&gt; SingleOrDefaultAsync(class System.Func`2&lt;!TElement, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.SingleOrDefaultAsync : Func&lt;'Element, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Element&gt;" Usage="dbRawSqlQuery.SingleOrDefaultAsync (predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TElement,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each element for a condition. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously returns the only element of the query that satisfies a specified condition or
            a default value if no such element exists; this method throws an exception if more than one element
            satisfies the condition.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains the single element of the query result that satisfies the condition in
            <paramref name="predicate" />, or <c>default</c> ( <typeparamref name="TElement" /> ) if no such element is found.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" />
            is
            <c>null</c>
            .
            </exception>
        <exception cref="T:System.InvalidOperationException">
            More than one element satisfies the condition in
            <paramref name="predicate" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> which when enumerated will execute the SQL query against the database.
            </summary>
        <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the elements.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns <c>false</c>.
            </summary>
        <value>
          <c>false</c> .
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Throws an exception indicating that binding directly to a store query is not supported.
            </summary>
        <returns> Never returns; always throws. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="System.Data.Entity.Infrastructure.IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetAsyncEnumerator () As IDbAsyncEnumerator Implements IDbAsyncEnumerable.GetAsyncEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.IDbAsyncEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns an <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> which when enumerated will execute the SQL query against the database.
            </summary>
        <returns>
            An <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> object that can be used to iterate through the elements.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Entity.Infrastructure.IDbAsyncEnumerable&lt;TElement&gt;.GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="System.Data.Entity.Infrastructure.IDbAsyncEnumerator&lt;TElement&gt; IDbAsyncEnumerable&lt;TElement&gt;.GetAsyncEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1&lt;!TElement&gt; System.Data.Entity.Infrastructure.IDbAsyncEnumerable&lt;TElement&gt;.GetAsyncEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable&lt;TElement&gt;#GetAsyncEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetAsyncEnumerator () As IDbAsyncEnumerator(Of TElement) Implements IDbAsyncEnumerable(Of TElement).GetAsyncEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1.GetAsyncEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.IDbAsyncEnumerator&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns an <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1" /> which when enumerated will execute the SQL query against the database.
            </summary>
        <returns>
            An <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1" /> object that can be used to iterate through the elements.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement[]&gt; ToArrayAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement[]&gt; ToArrayAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArrayAsync () As Task(Of TElement())" />
      <MemberSignature Language="F#" Value="member this.ToArrayAsync : unit -&gt; System.Threading.Tasks.Task&lt;'Element[]&gt;" Usage="dbRawSqlQuery.ToArrayAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates an array from the query by enumerating it asynchronously.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains an array that contains elements from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TElement[]&gt; ToArrayAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TElement[]&gt; ToArrayAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.ToArrayAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Element[]&gt;" Usage="dbRawSqlQuery.ToArrayAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TElement[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Creates an array from the query by enumerating it asynchronously.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains an array that contains elements from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TKey&gt; (Func&lt;TElement,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !TElement&gt;&gt; ToDictionaryAsync&lt;TKey&gt;(class System.Func`2&lt;!TElement, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ToDictionaryAsync(Of TKey) (keySelector As Func(Of TElement, TKey)) As Task(Of Dictionary(Of TKey, TElement))" />
      <MemberSignature Language="F#" Value="member this.ToDictionaryAsync : Func&lt;'Element, 'Key&gt; -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="dbRawSqlQuery.ToDictionaryAsync keySelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TElement,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from the query by enumerating it asynchronously
            according to a specified key selector function.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TKey&gt; (Func&lt;TElement,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !TElement&gt;&gt; ToDictionaryAsync&lt;TKey&gt;(class System.Func`2&lt;!TElement, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ToDictionaryAsync(Of TKey) (keySelector As Func(Of TElement, TKey), comparer As IEqualityComparer(Of TKey)) As Task(Of Dictionary(Of TKey, TElement))" />
      <MemberSignature Language="F#" Value="member this.ToDictionaryAsync : Func&lt;'Element, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="dbRawSqlQuery.ToDictionaryAsync (keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TElement,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from the query by enumerating it asynchronously
            according to a specified key selector function and a comparer.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TKey&gt; (Func&lt;TElement,TKey&gt; keySelector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !TElement&gt;&gt; ToDictionaryAsync&lt;TKey&gt;(class System.Func`2&lt;!TElement, !!TKey&gt; keySelector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.ToDictionaryAsync : Func&lt;'Element, 'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="dbRawSqlQuery.ToDictionaryAsync (keySelector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TElement,TKey&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from the query by enumerating it asynchronously
            according to a specified key selector function.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TKey&gt; (Func&lt;TElement,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !TElement&gt;&gt; ToDictionaryAsync&lt;TKey&gt;(class System.Func`2&lt;!TElement, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.ToDictionaryAsync : Func&lt;'Element, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="dbRawSqlQuery.ToDictionaryAsync (keySelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TElement,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from the query by enumerating it asynchronously
            according to a specified key selector function and a comparer.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TResult&gt;&gt; ToDictionaryAsync&lt;TKey,TResult&gt; (Func&lt;TElement,TKey&gt; keySelector, Func&lt;TElement,TResult&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TResult&gt;&gt; ToDictionaryAsync&lt;TKey, TResult&gt;(class System.Func`2&lt;!TElement, !!TKey&gt; keySelector, class System.Func`2&lt;!TElement, !!TResult&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function ToDictionaryAsync(Of TKey, TResult) (keySelector As Func(Of TElement, TKey), elementSelector As Func(Of TElement, TResult)) As Task(Of Dictionary(Of TKey, TResult))" />
      <MemberSignature Language="F#" Value="member this.ToDictionaryAsync : Func&lt;'Element, 'Key&gt; * Func&lt;'Element, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Result&gt;&gt;" Usage="dbRawSqlQuery.ToDictionaryAsync (keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TElement,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TElement,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <typeparam name="TResult">
            The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from the query by enumerating it asynchronously
            according to a specified key selector and an element selector function.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
            <typeparamref name="TResult" /> selected from the query.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TResult&gt;&gt; ToDictionaryAsync&lt;TKey,TResult&gt; (Func&lt;TElement,TKey&gt; keySelector, Func&lt;TElement,TResult&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TResult&gt;&gt; ToDictionaryAsync&lt;TKey, TResult&gt;(class System.Func`2&lt;!TElement, !!TKey&gt; keySelector, class System.Func`2&lt;!TElement, !!TResult&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ToDictionaryAsync(Of TKey, TResult) (keySelector As Func(Of TElement, TKey), elementSelector As Func(Of TElement, TResult), comparer As IEqualityComparer(Of TKey)) As Task(Of Dictionary(Of TKey, TResult))" />
      <MemberSignature Language="F#" Value="member this.ToDictionaryAsync : Func&lt;'Element, 'Key&gt; * Func&lt;'Element, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Result&gt;&gt;" Usage="dbRawSqlQuery.ToDictionaryAsync (keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TElement,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TElement,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <typeparam name="TResult">
            The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
        <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from the query by enumerating it asynchronously
            according to a specified key selector function, a comparer, and an element selector function.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
            <typeparamref name="TResult" /> selected from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TResult&gt;&gt; ToDictionaryAsync&lt;TKey,TResult&gt; (Func&lt;TElement,TKey&gt; keySelector, Func&lt;TElement,TResult&gt; elementSelector, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TResult&gt;&gt; ToDictionaryAsync&lt;TKey, TResult&gt;(class System.Func`2&lt;!TElement, !!TKey&gt; keySelector, class System.Func`2&lt;!TElement, !!TResult&gt; elementSelector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.ToDictionaryAsync : Func&lt;'Element, 'Key&gt; * Func&lt;'Element, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Result&gt;&gt;" Usage="dbRawSqlQuery.ToDictionaryAsync (keySelector, elementSelector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TElement,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TElement,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <typeparam name="TResult">
            The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from the query by enumerating it asynchronously
            according to a specified key selector and an element selector function.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
            <typeparamref name="TResult" /> selected from the query.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TResult&gt;&gt; ToDictionaryAsync&lt;TKey,TResult&gt; (Func&lt;TElement,TKey&gt; keySelector, Func&lt;TElement,TResult&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TResult&gt;&gt; ToDictionaryAsync&lt;TKey, TResult&gt;(class System.Func`2&lt;!TElement, !!TKey&gt; keySelector, class System.Func`2&lt;!TElement, !!TResult&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.ToDictionaryAsync : Func&lt;'Element, 'Key&gt; * Func&lt;'Element, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Result&gt;&gt;" Usage="dbRawSqlQuery.ToDictionaryAsync (keySelector, elementSelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TElement,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TElement,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <typeparam name="TResult">
            The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
        <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from the query by enumerating it asynchronously
            according to a specified key selector function, a comparer, and an element selector function.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
            <typeparamref name="TResult" /> selected from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TElement&gt;&gt; ToListAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;!TElement&gt;&gt; ToListAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ToListAsync () As Task(Of List(Of TElement))" />
      <MemberSignature Language="F#" Value="member this.ToListAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;'Element&gt;&gt;" Usage="dbRawSqlQuery.ToListAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1" /> from the query by enumerating it asynchronously.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TElement&gt;&gt; ToListAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;!TElement&gt;&gt; ToListAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.ToListAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;'Element&gt;&gt;" Usage="dbRawSqlQuery.ToListAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1" /> from the query by enumerating it asynchronously.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dbRawSqlQuery.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a <see cref="T:System.String" /> that contains the SQL string that was set
            when the query was created.  The parameters are not included.
            </summary>
        <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>