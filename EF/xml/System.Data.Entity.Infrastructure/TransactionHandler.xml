<Type Name="TransactionHandler" FullName="System.Data.Entity.Infrastructure.TransactionHandler">
  <TypeSignature Language="C#" Value="public abstract class TransactionHandler : IDisposable, System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor, System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TransactionHandler extends System.Object implements class System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor, class System.Data.Entity.Infrastructure.Interception.IDbInterceptor, class System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.TransactionHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TransactionHandler&#xA;Implements IDbConnectionInterceptor, IDbTransactionInterceptor, IDisposable" />
  <TypeSignature Language="F#" Value="type TransactionHandler = class&#xA;    interface IDbTransactionInterceptor&#xA;    interface IDbConnectionInterceptor&#xA;    interface IDbInterceptor&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.Interception.IDbInterceptor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            The base class for interceptors that handle the transaction operations. Derived classes can be registered using
            <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" /> or
            <see cref="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TransactionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> class.
            </summary>
        <remarks>
            One of the Initialize methods needs to be called before this instance can be used.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeganTransaction">
      <MemberSignature Language="C#" Value="public virtual void BeganTransaction (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeganTransaction(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeganTransaction (connection As DbConnection, interceptionContext As BeginTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member BeganTransaction : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext -&gt; unit&#xA;override this.BeganTransaction : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext -&gt; unit" Usage="transactionHandler.BeganTransaction (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection that began the transaction.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="BeginningTransaction">
      <MemberSignature Language="C#" Value="public virtual void BeginningTransaction (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginningTransaction(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginningTransaction (connection As DbConnection, interceptionContext As BeginTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member BeginningTransaction : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext -&gt; unit&#xA;override this.BeginningTransaction : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext -&gt; unit" Usage="transactionHandler.BeginningTransaction (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection beginning the transaction.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="BuildDatabaseInitializationScript">
      <MemberSignature Language="C#" Value="public abstract string BuildDatabaseInitializationScript ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string BuildDatabaseInitializationScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.BuildDatabaseInitializationScript" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BuildDatabaseInitializationScript () As String" />
      <MemberSignature Language="F#" Value="abstract member BuildDatabaseInitializationScript : unit -&gt; string" Usage="transactionHandler.BuildDatabaseInitializationScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            When implemented in a derived class returns the script to prepare the database
            for this transaction handler.
            </summary>
        <returns>A script to change the database schema for this transaction handler.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Closed">
      <MemberSignature Language="C#" Value="public virtual void Closed (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Closed(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Closed (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Closed : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit&#xA;override this.Closed : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit" Usage="transactionHandler.Closed (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection that was closed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="Closing">
      <MemberSignature Language="C#" Value="public virtual void Closing (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Closing(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Closing (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Closing : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit&#xA;override this.Closing : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit" Usage="transactionHandler.Closing (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection being closed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="Committed">
      <MemberSignature Language="C#" Value="public virtual void Committed (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Committed(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Committed (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Committed : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit&#xA;override this.Committed : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit" Usage="transactionHandler.Committed (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction that was committed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="Committing">
      <MemberSignature Language="C#" Value="public virtual void Committing (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Committing(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Committing (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Committing : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit&#xA;override this.Committing : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit" Usage="transactionHandler.Committing (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction being committed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.TransactionHandler.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As DbConnection" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.Common.DbConnection" Usage="System.Data.Entity.Infrastructure.TransactionHandler.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the connection.
            </summary>
        <value>
            The <see cref="T:System.Data.Common.DbConnection" /> for which the transaction operations will be handled.
            </value>
        <remarks>
            This connection object is only used to determine whether a particular operation needs to be handled
            in cases where a context is not available.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionGetting">
      <MemberSignature Language="C#" Value="public virtual void ConnectionGetting (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.Common.DbConnection&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionGetting(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1&lt;class System.Data.Common.DbConnection&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConnectionGetting (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext(Of DbConnection))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionGetting : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.Common.DbConnection&gt; -&gt; unit&#xA;override this.ConnectionGetting : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.Common.DbConnection&gt; -&gt; unit" Usage="transactionHandler.ConnectionGetting (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.Common.DbConnection&gt;" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionGot">
      <MemberSignature Language="C#" Value="public virtual void ConnectionGot (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.Common.DbConnection&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionGot(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1&lt;class System.Data.Common.DbConnection&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConnectionGot (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext(Of DbConnection))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionGot : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.Common.DbConnection&gt; -&gt; unit&#xA;override this.ConnectionGot : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.Common.DbConnection&gt; -&gt; unit" Usage="transactionHandler.ConnectionGot (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.Common.DbConnection&gt;" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionStringGetting">
      <MemberSignature Language="C#" Value="public virtual void ConnectionStringGetting (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionStringGetting(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConnectionStringGetting (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionStringGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit&#xA;override this.ConnectionStringGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="transactionHandler.ConnectionStringGetting (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionStringGot">
      <MemberSignature Language="C#" Value="public virtual void ConnectionStringGot (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionStringGot(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConnectionStringGot (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionStringGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit&#xA;override this.ConnectionStringGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="transactionHandler.ConnectionStringGot (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionStringSet">
      <MemberSignature Language="C#" Value="public virtual void ConnectionStringSet (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionStringSet(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConnectionStringSet (connection As DbConnection, interceptionContext As DbConnectionPropertyInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionStringSet : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext&lt;string&gt; -&gt; unit&#xA;override this.ConnectionStringSet : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext&lt;string&gt; -&gt; unit" Usage="transactionHandler.ConnectionStringSet (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionStringSetting">
      <MemberSignature Language="C#" Value="public virtual void ConnectionStringSetting (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionStringSetting(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConnectionStringSetting (connection As DbConnection, interceptionContext As DbConnectionPropertyInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionStringSetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext&lt;string&gt; -&gt; unit&#xA;override this.ConnectionStringSetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext&lt;string&gt; -&gt; unit" Usage="transactionHandler.ConnectionStringSetting (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeoutGetting">
      <MemberSignature Language="C#" Value="public virtual void ConnectionTimeoutGetting (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;int&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionTimeoutGetting(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;int32&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConnectionTimeoutGetting (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of Integer))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionTimeoutGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;int&gt; -&gt; unit&#xA;override this.ConnectionTimeoutGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;int&gt; -&gt; unit" Usage="transactionHandler.ConnectionTimeoutGetting (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeoutGot">
      <MemberSignature Language="C#" Value="public virtual void ConnectionTimeoutGot (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;int&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionTimeoutGot(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;int32&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConnectionTimeoutGot (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of Integer))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionTimeoutGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;int&gt; -&gt; unit&#xA;override this.ConnectionTimeoutGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;int&gt; -&gt; unit" Usage="transactionHandler.ConnectionTimeoutGot (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})" />
      </Docs>
    </Member>
    <Member MemberName="DatabaseGetting">
      <MemberSignature Language="C#" Value="public virtual void DatabaseGetting (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DatabaseGetting(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DatabaseGetting (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member DatabaseGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit&#xA;override this.DatabaseGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="transactionHandler.DatabaseGetting (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="DatabaseGot">
      <MemberSignature Language="C#" Value="public virtual void DatabaseGot (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DatabaseGot(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DatabaseGot (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member DatabaseGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit&#xA;override this.DatabaseGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="transactionHandler.DatabaseGot (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceGetting">
      <MemberSignature Language="C#" Value="public virtual void DataSourceGetting (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DataSourceGetting(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DataSourceGetting (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member DataSourceGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit&#xA;override this.DataSourceGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="transactionHandler.DataSourceGetting (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceGot">
      <MemberSignature Language="C#" Value="public virtual void DataSourceGot (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DataSourceGot(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DataSourceGot (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member DataSourceGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit&#xA;override this.DataSourceGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="transactionHandler.DataSourceGot (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="DbContext">
      <MemberSignature Language="C#" Value="public System.Data.Entity.DbContext DbContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.DbContext DbContext" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DbContext As DbContext" />
      <MemberSignature Language="F#" Value="member this.DbContext : System.Data.Entity.DbContext" Usage="System.Data.Entity.Infrastructure.TransactionHandler.DbContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.DbContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the context.
            </summary>
        <value>
            The <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext" /> for which the transaction operations will be handled, could be null.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="transactionHandler.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="transactionHandler.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        <summary>
            Releases the resources used by this transaction handler.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Disposed">
      <MemberSignature Language="C#" Value="public virtual void Disposed (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Disposed(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Disposed (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Disposed : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit&#xA;override this.Disposed : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit" Usage="transactionHandler.Disposed (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection that was disposed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Disposed">
      <MemberSignature Language="C#" Value="public virtual void Disposed (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Disposed(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Disposed (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Disposed : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit&#xA;override this.Disposed : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit" Usage="transactionHandler.Disposed (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction that was disposed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="Disposing">
      <MemberSignature Language="C#" Value="public virtual void Disposing (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Disposing(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Disposing (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Disposing : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit&#xA;override this.Disposing : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit" Usage="transactionHandler.Disposing (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection being disposed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Disposing">
      <MemberSignature Language="C#" Value="public virtual void Disposing (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Disposing(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Disposing (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Disposing : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit&#xA;override this.Disposing : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit" Usage="transactionHandler.Disposing (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction being disposed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="EnlistedTransaction">
      <MemberSignature Language="C#" Value="public virtual void EnlistedTransaction (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnlistedTransaction(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnlistedTransaction (connection As DbConnection, interceptionContext As EnlistTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member EnlistedTransaction : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext -&gt; unit&#xA;override this.EnlistedTransaction : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext -&gt; unit" Usage="transactionHandler.EnlistedTransaction (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="EnlistingTransaction">
      <MemberSignature Language="C#" Value="public virtual void EnlistingTransaction (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnlistingTransaction(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnlistingTransaction (connection As DbConnection, interceptionContext As EnlistTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member EnlistingTransaction : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext -&gt; unit&#xA;override this.EnlistingTransaction : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext -&gt; unit" Usage="transactionHandler.EnlistingTransaction (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (System.Data.Entity.Core.Objects.ObjectContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class System.Data.Entity.Core.Objects.ObjectContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Initialize (context As ObjectContext)" />
      <MemberSignature Language="F#" Value="abstract member Initialize : System.Data.Entity.Core.Objects.ObjectContext -&gt; unit&#xA;override this.Initialize : System.Data.Entity.Core.Objects.ObjectContext -&gt; unit" Usage="transactionHandler.Initialize context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Data.Entity.Core.Objects.ObjectContext" />
      </Parameters>
      <Docs>
        <param name="context">The context for which transaction operations will be handled.</param>
        <summary>
            Initializes this instance using the specified context.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (System.Data.Entity.DbContext context, System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class System.Data.Entity.DbContext context, class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Initialize (context As DbContext, connection As DbConnection)" />
      <MemberSignature Language="F#" Value="abstract member Initialize : System.Data.Entity.DbContext * System.Data.Common.DbConnection -&gt; unit&#xA;override this.Initialize : System.Data.Entity.DbContext * System.Data.Common.DbConnection -&gt; unit" Usage="transactionHandler.Initialize (context, connection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Data.Entity.DbContext" />
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="context">The context for which transaction operations will be handled.</param>
        <param name="connection">The connection to use for the initialization.</param>
        <summary>
            Initializes this instance using the specified context.
            </summary>
        <remarks>
            This method is called by migrations. It is important that no action is performed on the
            specified context that causes it to be initialized.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.TransactionHandler.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected Property IsDisposed As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool with get, set" Usage="System.Data.Entity.Infrastructure.TransactionHandler.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether this transaction handler is disposed.
            </summary>
        <value>
          <c>true</c> if disposed; otherwise, <c>false</c>.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsolationLevelGetting">
      <MemberSignature Language="C#" Value="public virtual void IsolationLevelGetting (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.IsolationLevel&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IsolationLevelGetting(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1&lt;valuetype System.Data.IsolationLevel&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub IsolationLevelGetting (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext(Of IsolationLevel))" />
      <MemberSignature Language="F#" Value="abstract member IsolationLevelGetting : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.IsolationLevel&gt; -&gt; unit&#xA;override this.IsolationLevelGetting : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.IsolationLevel&gt; -&gt; unit" Usage="transactionHandler.IsolationLevelGetting (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.IsolationLevel&gt;" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})" />
      </Docs>
    </Member>
    <Member MemberName="IsolationLevelGot">
      <MemberSignature Language="C#" Value="public virtual void IsolationLevelGot (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.IsolationLevel&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IsolationLevelGot(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1&lt;valuetype System.Data.IsolationLevel&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub IsolationLevelGot (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext(Of IsolationLevel))" />
      <MemberSignature Language="F#" Value="abstract member IsolationLevelGot : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.IsolationLevel&gt; -&gt; unit&#xA;override this.IsolationLevelGot : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.IsolationLevel&gt; -&gt; unit" Usage="transactionHandler.IsolationLevelGot (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext&lt;System.Data.IsolationLevel&gt;" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})" />
      </Docs>
    </Member>
    <Member MemberName="MatchesParentContext">
      <MemberSignature Language="C#" Value="protected internal virtual bool MatchesParentContext (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool MatchesParentContext(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.MatchesParentContext(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function MatchesParentContext (connection As DbConnection, interceptionContext As DbInterceptionContext) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member MatchesParentContext : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbInterceptionContext -&gt; bool&#xA;override this.MatchesParentContext : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbInterceptionContext -&gt; bool" Usage="transactionHandler.MatchesParentContext (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">A connection.</param>
        <param name="interceptionContext">An interception context.</param>
        <summary>
            Checks whether the supplied interception context contains the target context
            or the supplied connection is the same as the one used by the target context.
            </summary>
        <returns>
          <c>true</c> if the supplied interception context contains the target context or
            the supplied connection is the same as the one used by the target context if
            the supplied interception context doesn't contain any contexts; <c>false</c> otherwise.
            </returns>
        <remarks>
            Note that calling this method will trigger initialization of any DbContext referenced from the <paramref name="interceptionContext" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectContext">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.Objects.ObjectContext ObjectContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.Core.Objects.ObjectContext ObjectContext" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ObjectContext As ObjectContext" />
      <MemberSignature Language="F#" Value="member this.ObjectContext : System.Data.Entity.Core.Objects.ObjectContext" Usage="System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.ObjectContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the context.
            </summary>
        <value>
            The <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext" /> for which the transaction operations will be handled.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Opened">
      <MemberSignature Language="C#" Value="public virtual void Opened (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Opened(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Opened (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Opened : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit&#xA;override this.Opened : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit" Usage="transactionHandler.Opened (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection that was opened.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="Opening">
      <MemberSignature Language="C#" Value="public virtual void Opening (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Opening(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Opening (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Opening : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit&#xA;override this.Opening : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit" Usage="transactionHandler.Opening (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection being opened.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="RolledBack">
      <MemberSignature Language="C#" Value="public virtual void RolledBack (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RolledBack(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RolledBack (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member RolledBack : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit&#xA;override this.RolledBack : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit" Usage="transactionHandler.RolledBack (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction that was rolled back.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="RollingBack">
      <MemberSignature Language="C#" Value="public virtual void RollingBack (System.Data.Common.DbTransaction transaction, System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RollingBack(class System.Data.Common.DbTransaction transaction, class System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RollingBack (transaction As DbTransaction, interceptionContext As DbTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member RollingBack : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit&#xA;override this.RollingBack : System.Data.Common.DbTransaction * System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext -&gt; unit" Usage="transactionHandler.RollingBack (transaction, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Data.Common.DbTransaction" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="transaction">The transaction being rolled back.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)" />
      </Docs>
    </Member>
    <Member MemberName="ServerVersionGetting">
      <MemberSignature Language="C#" Value="public virtual void ServerVersionGetting (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ServerVersionGetting(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ServerVersionGetting (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member ServerVersionGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit&#xA;override this.ServerVersionGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="transactionHandler.ServerVersionGetting (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="ServerVersionGot">
      <MemberSignature Language="C#" Value="public virtual void ServerVersionGot (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ServerVersionGot(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ServerVersionGot (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member ServerVersionGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit&#xA;override this.ServerVersionGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="transactionHandler.ServerVersionGot (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="StateGetting">
      <MemberSignature Language="C#" Value="public virtual void StateGetting (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Data.ConnectionState&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StateGetting(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;valuetype System.Data.ConnectionState&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub StateGetting (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of ConnectionState))" />
      <MemberSignature Language="F#" Value="abstract member StateGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Data.ConnectionState&gt; -&gt; unit&#xA;override this.StateGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Data.ConnectionState&gt; -&gt; unit" Usage="transactionHandler.StateGetting (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Data.ConnectionState&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})" />
      </Docs>
    </Member>
    <Member MemberName="StateGot">
      <MemberSignature Language="C#" Value="public virtual void StateGot (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Data.ConnectionState&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StateGot(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;valuetype System.Data.ConnectionState&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub StateGot (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of ConnectionState))" />
      <MemberSignature Language="F#" Value="abstract member StateGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Data.ConnectionState&gt; -&gt; unit&#xA;override this.StateGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Data.ConnectionState&gt; -&gt; unit" Usage="transactionHandler.StateGot (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Data.ConnectionState&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Can be implemented in a derived class.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})" />
      </Docs>
    </Member>
  </Members>
</Type>